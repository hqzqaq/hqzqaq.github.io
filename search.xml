<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Echarts入门</title>
    <url>/2022/09/23/Echarts%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Echarts上手"><a href="#Echarts上手" class="headerlink" title="Echarts上手"></a>Echarts上手</h1><h2 id="1、配置项详解"><a href="#1、配置项详解" class="headerlink" title="1、配置项详解"></a>1、配置项详解</h2><ol>
<li><code>xAxis</code>：直角坐标系中的x轴</li>
<li><code>yAxis</code>：直角坐标系中的y轴</li>
<li><code>series</code>：系列列表。每个系列通过<code>type</code>决定自己的图标类型</li>
</ol>
<span id="more"></span>

<h3 id="1-1、柱状图"><a href="#1-1、柱状图" class="headerlink" title="1.1、柱状图"></a>1.1、柱状图</h3><p>柱状图：<code>category</code>：类目轴、<code>value</code>：数值轴</p>
<ol>
<li><p>标记：最大值、最小值、平均值</p>
<p><code>markPoint</code>、<code>markLine</code></p>
</li>
<li><p>显示：数值显示、柱宽度、横向柱状图</p>
<p><code>lable</code>、<code>barWidth</code>、x轴y轴角色互换</p>
</li>
<li><p>柱状图描述的是分类数据，呈现的是每一个分类中有多少，通过柱状图，可以很清晰的看出每个分类数据的排名情况</p>
</li>
</ol>
<h3 id="1-2、通用配置"><a href="#1-2、通用配置" class="headerlink" title="1.2、通用配置"></a>1.2、通用配置</h3><ol>
<li><p>标题：<code>title</code></p>
<p>文字样式（textStyle）、标题边框（borderWidth、borderColor、boderRadius）、标题位置（left、top、bottom、right）</p>
</li>
<li><p>提示：<code>tooltip </code>提示框组件，用于配置鼠标滑过或点击图标时的显示框</p>
<ul>
<li><p>触发类型：trigger</p>
<p>item、axis</p>
</li>
<li><p>触发时机：triggerOn</p>
<p>mouseOver、click</p>
</li>
<li><p>格式化：formatter</p>
<p>字符串模板、<code>回调函数</code></p>
</li>
</ul>
</li>
<li><p>工具按钮：<code>toolbox</code> echarts 提供的工具栏</p>
<ul>
<li><p>内置有导出图片、数据视图、动态类型切换、数据区域缩放、重置，五个工具</p>
</li>
<li><p>显示工具栏按钮：feature对象</p>
<p>saveAsImage、dataView、dataZoom、magicType、restore</p>
</li>
</ul>
</li>
<li><p>图例：<code>legend</code>：图例，用于筛选系列，需要和series配合使用</p>
<ul>
<li>legen中的data是一个数组</li>
<li>legend中的data的值需要和series数组中某组数据的name值一样</li>
</ul>
</li>
</ol>
<h3 id="1-3、折线图"><a href="#1-3、折线图" class="headerlink" title="1.3、折线图"></a>1.3、折线图</h3><ol>
<li><p>图标类型：<code>series</code>下设置 <code>type：line</code></p>
</li>
<li><p>标注区间：<code>markArea</code>，柱状颜色区间</p>
</li>
<li><p>线条控制：平滑风格</p>
<p><code>smooth</code>、<code>lineStyle</code></p>
</li>
<li><p>填充风格</p>
<p><code>areaStyle</code></p>
</li>
<li><p>紧挨边缘：在 xAxis 中设置</p>
<p><code>boundaryGap:false</code></p>
</li>
<li><p>缩放脱离 “0” 值：在 yAxis 中设置，适用于变化不大的值</p>
<p><code>scale:true</code></p>
</li>
<li><p>堆叠图：避免折线杂乱无章，图形的值是叠加的</p>
<p>series中的对象中添加 <code>stack:&#39;all&#39;</code></p>
</li>
<li><p>折线图常用来分析数据随时间的变化趋势</p>
</li>
</ol>
<h3 id="1-4、散点图"><a href="#1-4、散点图" class="headerlink" title="1.4、散点图"></a>1.4、散点图</h3><ol>
<li><p>散点图可以帮我们推断出变量之间的相关性</p>
</li>
<li><p>x轴、y轴的数据为二维数组</p>
</li>
<li><p>图标类型</p>
<ul>
<li>在series下设置 <code>type:scatter</code></li>
<li>xAxis和yAxis的type都要设置为 value</li>
</ul>
</li>
<li><p>调整</p>
<p>将坐标轴都设置为脱离 0 值比例，在xAxis和yAxis中的 <code>scale:true</code></p>
</li>
<li><p>气泡图效果：在 series 中设置</p>
<ul>
<li><code>symbolSize</code>：控制散点大小，支持回调函数</li>
<li><code>itemStyle</code>：该对象下的color，支持回调函数</li>
</ul>
</li>
<li><p>涟漪动画效果</p>
<ul>
<li>更改 series 中的type:effectScatter</li>
<li><code>rippleEffecrt</code>:控制涟漪动画的效果<ul>
<li>scale 控制涟漪动画的范围</li>
</ul>
</li>
<li><code>showEffectOn</code>：涟漪动画的触发时机<ul>
<li>render：每个散点渲染之后，自动拥有涟漪的效果</li>
<li>emphasis：鼠标滑过时才产生涟漪</li>
</ul>
</li>
</ul>
</li>
<li><p>散点图可以帮助我们推断出不同维度数据之间的相关性</p>
</li>
</ol>
<h3 id="1-5、直角坐标系中的常用配置"><a href="#1-5、直角坐标系中的常用配置" class="headerlink" title="1.5、直角坐标系中的常用配置"></a>1.5、直角坐标系中的常用配置</h3><ol>
<li><p>直角坐标系图标：柱状图、折线图、散点图</p>
<ol>
<li><p>配置1：网格 <code>grid</code></p>
<ul>
<li><p>grid 用来控制直角坐标系的布局和大小，可以控制图表的大小和位置</p>
</li>
<li><p>x轴和y轴就是在grid的基础上进行绘制的</p>
</li>
<li><p>显示 grid</p>
<p>show:true</p>
</li>
<li><p>grid 的边框</p>
<p>borderWidth、borderColor</p>
</li>
<li><p>grid 的位置和大小</p>
<p>left、top、right、bottom</p>
<p>width、height</p>
</li>
</ul>
</li>
<li><p>配置2：坐标轴 <code>axis</code></p>
<ul>
<li>坐标轴分为x轴和y轴</li>
<li>一个 grid 中最多有两种位置的x轴和y轴</li>
<li>坐标轴类型 type<ul>
<li>value：数值轴，自动从目标数据（series）中读取数据</li>
<li>category：类目轴，该类型必须通过data设置类目数据</li>
</ul>
</li>
<li>显示位置 position<ul>
<li>xAxis：可取值为 top 或 bottom</li>
<li>yAxis：可取值为 left 或 right</li>
</ul>
</li>
</ul>
</li>
<li><p>配置3：区域缩放 <code>dataZoom</code></p>
<ul>
<li>用于区域缩放，对数据范围过滤，x轴、y轴都可以拥有</li>
<li>dataZoom 是一个数组，可以配置多个区域缩放器<ul>
<li>类型 type<ul>
<li>slider 滑块</li>
<li>inside 内置，依靠鼠标滚轮或者双指缩放</li>
</ul>
</li>
<li>指明产生作用的坐标轴<ul>
<li>xAxisIndex：设置缩放组件控制的是哪个x轴，一般写 0 即可</li>
<li>yAxisIndex：设置缩放组件控制的是哪个y轴，一般写 0 即可</li>
</ul>
</li>
<li>指明初始状态的缩放情况<ul>
<li>start、end</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="1-6、饼图"><a href="#1-6、饼图" class="headerlink" title="1.6、饼图"></a>1.6、饼图</h3><ol>
<li>数据准备：数组，包含name和value</li>
<li>series下设值type:pie，无须配置 xAxis 和 yAxis<ol>
<li>lable显示文字，formatter 设置显示的格式</li>
<li>radius 设置饼图的半径，若设置为百分比形式，则百分比参照的是宽度和高度中较小的那一部分的一半来进行百分比的设置，若设置为数组i形式，则第0个元素为内圆半径，第一个元素为外圆半径</li>
<li>南丁格尔图 roseType:’radius’ 饼图的每一个区域的半径是不同的，取决于占比大小</li>
<li>选中效果 selectMode:’single’&#x2F;‘multiple’，选中偏移量 selectOffset:30</li>
</ol>
</li>
<li>饼图可以让人快速了解不同分类的数据的占比情况</li>
</ol>
<h3 id="1-7、地图"><a href="#1-7、地图" class="headerlink" title="1.7、地图"></a>1.7、地图</h3><ol>
<li><p>地图图表的使用方式</p>
<ol>
<li>百度地图APi</li>
<li>矢量地图，需要准备矢量地图数据</li>
</ol>
</li>
<li><p>矢量地图实现步骤</p>
<ol>
<li><p>准备矢量地图json文件</p>
</li>
<li><p>使用ajax获取json文件</p>
<ol>
<li><p>$.get(‘文件路径’,function(json){})</p>
</li>
<li><p>在回调函数中往echarts全局对象注册地图的json数据</p>
<p>echarts.registerMap(‘map’,json)</p>
</li>
<li><p>在 <code>geo</code>下设置</p>
<ul>
<li>type:map,map:’map’</li>
<li>roam:true，开启地图的缩放和拖动</li>
<li>label:{show:true}，展示地图标签</li>
<li>zoom，设置初始化的缩放比例</li>
<li>center，设置图表中心点</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>常见效果</p>
<ol>
<li><p>显示某个区域</p>
<ul>
<li>加载该区域的矢量地图数据</li>
<li>通过 registerMap 注册到 echarts 全局对象中</li>
<li>指明 geo 配置下的 type 和 map 属性</li>
<li>通过 zoom 放大该区域</li>
<li>通过 center 定位中心点</li>
</ul>
</li>
<li><p>地图上显示数据</p>
<ol>
<li><p>将 series 下的数据和 geo 关联起来</p>
<p>geoIndex:0,type:’map’</p>
</li>
<li><p>结合 visualMap配合使用</p>
<ol>
<li>min、max 范围</li>
<li>inRange:{color:[‘white’,’red’]} 控制颜色渐变的范围</li>
<li>calculable:true 出现滑块，筛选数据</li>
</ol>
</li>
</ol>
</li>
<li><p>地图结合散点图的使用</p>
<ol>
<li><p>series 增加新的对象</p>
</li>
<li><p>配置新对象的type</p>
<p>type:effectScatter</p>
</li>
<li><p>让散点图使用地图坐标系统</p>
<p><font color="orange">coordinateSystem:’geo’</font></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="1-8、雷达图"><a href="#1-8、雷达图" class="headerlink" title="1.8、雷达图"></a>1.8、雷达图</h3><ol>
<li><p>定义各个维度的最大值，在 radar 对象下</p>
<p>indicator:[{name:’易用性’,max:100}, …]</p>
</li>
<li><p>在 series 下设置 type:radar</p>
</li>
<li><p>常见效果</p>
<ol>
<li>radar 对象下 shape:’circle’ 设置雷达的形状</li>
</ol>
</li>
<li><p>雷达图可以用来分析多个维度的数据与标准数据的对比情况</p>
</li>
</ol>
<h3 id="1-9、仪表盘"><a href="#1-9、仪表盘" class="headerlink" title="1.9、仪表盘"></a>1.9、仪表盘</h3><ol>
<li>主要用于进度把控以及数据范围的检测</li>
<li>series 下的 type:’gauge’</li>
<li>常见效果<ul>
<li>min、max 控制仪表盘的范围</li>
<li>多个指针，data中增加对象</li>
<li>itemStyle，控制每个指针的样式</li>
</ul>
</li>
</ol>
<h2 id="2、高级配置"><a href="#2、高级配置" class="headerlink" title="2、高级配置"></a>2、高级配置</h2><h3 id="2-1、调色盘"><a href="#2-1、调色盘" class="headerlink" title="2.1、调色盘"></a>2.1、调色盘</h3><ol>
<li><p>是一组颜色、图形，series 会从中选取颜色</p>
</li>
<li><p>主题调色板，引入主题</p>
</li>
<li><p>全局调色板</p>
<p>在 option 中配置color:[…] 数组</p>
</li>
<li><p>局部调色板</p>
<p>在 series 中设置 color:[…] 数组</p>
</li>
<li><p>调色盘作用遵循就近原则</p>
</li>
<li><p>颜色渐变</p>
<ol>
<li><p>线性渐变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">itemStyle</span>:&#123;</span><br><span class="line">    <span class="attr">color</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">       	<span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">		<span class="attr">y</span>:<span class="number">0</span>,</span><br><span class="line">		<span class="attr">x2</span>:<span class="number">0</span>,</span><br><span class="line">		<span class="attr">x3</span>:<span class="number">1</span>,</span><br><span class="line">		<span class="attr">colorStops</span>:[&#123;</span><br><span class="line">            <span class="attr">offset</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span><span class="comment">//0%处的颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">offset</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span><span class="comment">//100%处的颜色</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">globalCoord</span>:<span class="literal">false</span> <span class="comment">//却省为 false</span></span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>径向渐变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">itemStyle</span>:&#123;</span><br><span class="line">    <span class="attr">color</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;radial&#x27;</span>,</span><br><span class="line">       	<span class="attr">x</span>:<span class="number">0.5</span>,<span class="comment">//圆心坐标</span></span><br><span class="line">		<span class="attr">y</span>:<span class="number">0.5</span>,</span><br><span class="line">		<span class="attr">r</span>:<span class="number">0.5</span>,<span class="comment">//范围</span></span><br><span class="line">		<span class="attr">colorStops</span>:[&#123;</span><br><span class="line">            <span class="attr">offset</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span><span class="comment">//0%处的颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">offset</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span><span class="comment">//100%处的颜色</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">global</span>:<span class="literal">false</span> <span class="comment">//却省为 false</span></span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="2-2、样式"><a href="#2-2、样式" class="headerlink" title="2.2、样式"></a>2.2、样式</h3><ol>
<li><p>直接样式，在series 的每个data下</p>
<p>itemStyle、textStyle、lineStyle、areaStyle、label</p>
</li>
<li><p>高亮样式，鼠标滑过时的颜色变化</p>
<p>在 emphasis 中包裹 itemStyle、textStyle、lineStyle、areaStyle、label</p>
</li>
</ol>
<h3 id="2-3、自适应"><a href="#2-3、自适应" class="headerlink" title="2.3、自适应"></a>2.3、自适应</h3><ol>
<li><p>当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化</p>
</li>
<li><p>监听窗口大小变化的事件</p>
</li>
<li><p>在事件处理函数中调用Echarts实例对象的resize即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    myChart.<span class="title function_">resize</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = mychart.<span class="property">resize</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4、动画"><a href="#2-4、动画" class="headerlink" title="2.4、动画"></a>2.4、动画</h3><ol>
<li><p>加载动画</p>
<p>Echarts已经内置好了加载数据的动画，只需要在合适的时机显示或隐藏即可</p>
<ul>
<li><p>显示加载动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mCharts.<span class="title function_">showLoading</span>()</span><br></pre></td></tr></table></figure>


</li>
<li><p>隐藏加载动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mCharts.<span class="title function_">hideLoading</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>增量动画</p>
<p>实现方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mCharts.<span class="title function_">setOption</span>(option)</span><br></pre></td></tr></table></figure>
</li>
<li><p>动画配置项</p>
<ul>
<li><p>开启动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">animation</span>:<span class="literal">true</span>;<span class="comment">//默认为 true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动画时长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">animationDuration</span>:<span class="number">7000</span><span class="comment">//以毫秒为单位，支持回调函数</span></span><br><span class="line"><span class="attr">animationDuration</span>:<span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>缓动动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">animationEasing</span>:<span class="string">&#x27;bounceOut&#x27;</span><span class="comment">// linear</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动画阈值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">animationThreshold</span>:<span class="number">8</span><span class="comment">//单种形式的元素数量大于这个阈值时会关闭动画</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="2-5、交互API"><a href="#2-5、交互API" class="headerlink" title="2.5、交互API"></a>2.5、交互API</h3><ol>
<li><p>全局echarts对象</p>
<p>引入echarts.js 文件之后就可以直接使用</p>
<ul>
<li>init：初始化实例对象，主题的引入</li>
<li>registerTheme：注册主题，只有注册过的主题才能在init方法中使用该主题</li>
<li>registerMap：注册地图数据</li>
<li>connect<ul>
<li>一个页面可以有多个独立的图表</li>
<li>每一个图表对应一个Echarts实例对象</li>
<li>connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组</li>
<li>应用场景：保存图片的自动拼接、刷新按钮、重置按钮、提示框联动、图例选择、数据范围修改</li>
</ul>
</li>
</ul>
</li>
<li><p>echartsInstance对象</p>
<p>是通过echarts.init()方法调用之后得到的</p>
<ul>
<li><p>setOption</p>
</li>
<li><p>resize：重新计算和绘制图表，一般和window对象的resize事件结合使用</p>
</li>
<li><p>on\off</p>
<ul>
<li><p>绑定或者解绑事件处理函数</p>
</li>
<li><p>鼠标事件</p>
<p>常见事件：’click’、’dblclick’、’mousedown’、’mousemove’、’mouseup’等</p>
<p>常见参数：arg 和事件相关的数据信息</p>
</li>
<li><p>ECharts事件</p>
<p>常见事件：legendselectchanged、datazoom、pieselectchanged、mapselectchanged</p>
<p>常见参数：arg 和事件相关的数据信息</p>
</li>
</ul>
</li>
<li><p>dispatchAction：触发某些行为，使用代码模拟用户的行为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mCharts.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;highlight&#x27;</span>,<span class="comment">//事件类型</span></span><br><span class="line">    <span class="attr">seriesIndex</span>:<span class="number">0</span>,<span class="comment">//图表索引</span></span><br><span class="line">    <span class="attr">dataIndex</span>:<span class="number">1</span><span class="comment">//图表中哪一项高亮</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>clear：清除当前实例，会移除实例中所有的组件和图表</p>
</li>
<li><p>dispose：销毁实例</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>webGIS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>webGIS</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium入门</title>
    <url>/2022/09/23/Cesium%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Cesium"><a href="#Cesium" class="headerlink" title="Cesium"></a>Cesium</h1><h2 id="1、四大核心类"><a href="#1、四大核心类" class="headerlink" title="1、四大核心类"></a>1、四大核心类</h2><h3 id="1-1、Viewer"><a href="#1-1、Viewer" class="headerlink" title="1.1、Viewer"></a>1.1、Viewer</h3><p>查看器类 展示三维要素内容的主要窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> viewer = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Viewer</span>(<span class="string">&quot;cesiumContainer&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">scene3DOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">selectionIndicator</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">baseLayerPicker</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">animation</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">timeline</span>:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="1-2、Scene"><a href="#1-2、Scene" class="headerlink" title="1.2、Scene"></a>1.2、Scene</h3><p>场景类 是所有3D对象的容器，是在 viewer 内部隐式创建的 scene 可以对整个场景环境进行修改，如地球的显示隐藏、光照强度、地球的图层样式、地形数据、绘制几何体点线面、场景的交互，如鼠标对场景的控制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 加载图层</span></span><br><span class="line">   <span class="comment">// viewer.imageryLayers.remove(viewer.imageryLayers.get(0))</span></span><br><span class="line">   <span class="comment">// viewer.imageryLayers.addImageryProvider(new Cesium.IonImageryProvider(&#123;assetId:3954&#125;))</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 加载地形</span></span><br><span class="line">   viewer.<span class="property">terrainProvider</span> = <span class="title class_">Cesium</span>.<span class="title function_">createWorldTerrain</span>(&#123;</span><br><span class="line">       <span class="attr">requestWaterMask</span>:<span class="literal">true</span>,</span><br><span class="line">       <span class="attr">requestVertexNormals</span>:<span class="literal">true</span></span><br><span class="line">   &#125;)</span><br><span class="line">   viewer.<span class="property">scene</span>.<span class="property">globe</span>.<span class="property">depthTestAgainstTerrain</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 激活太阳光照射</span></span><br><span class="line">   <span class="comment">// viewer.scene.globe.enableLighting = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机视角</span></span><br><span class="line">   <span class="comment">// Create an initial camera view</span></span><br><span class="line">   <span class="keyword">var</span> initialPosition = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(-<span class="number">73.998114468289017509</span>, <span class="number">40.674512895646692812</span>, <span class="number">2631.082799425431</span>);</span><br><span class="line">   <span class="keyword">var</span> initialOrientation = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="property">HeadingPitchRoll</span>.<span class="title function_">fromDegrees</span>(<span class="number">7.1077496389876024807</span>, -<span class="number">31.987223091598949054</span>, <span class="number">0.025883251314954971306</span>);</span><br><span class="line">   <span class="keyword">var</span> homeCameraView = &#123;</span><br><span class="line">       destination : initialPosition,</span><br><span class="line">       orientation : &#123;</span><br><span class="line">           heading : initialOrientation.<span class="property">heading</span>,</span><br><span class="line">           pitch : initialOrientation.<span class="property">pitch</span>,</span><br><span class="line">           roll : initialOrientation.<span class="property">roll</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">// Set the initial view</span></span><br><span class="line">   viewer.<span class="property">scene</span>.<span class="property">camera</span>.<span class="title function_">setView</span>(homeCameraView);</span><br></pre></td></tr></table></figure>



<h3 id="1-3、Entity"><a href="#1-3、Entity" class="headerlink" title="1.3、Entity"></a>1.3、Entity</h3><p>实体类 用于构造复杂额、时间动态可视化的结构，与静态数据自然的结合在一起。在使用中主要用于加载实体模型，几何图形，对其进行样式设置，动态修改等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entity</span></span><br><span class="line"><span class="keyword">const</span> entity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>:<span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>,<span class="number">39.91</span>,<span class="number">400</span>),</span><br><span class="line">    <span class="attr">point</span>:&#123;</span><br><span class="line">        <span class="attr">pixelSize</span>:<span class="number">100</span>,</span><br><span class="line">        <span class="attr">color</span>:<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">viewer.<span class="property">trackedEntity</span> = entity</span><br></pre></td></tr></table></figure>



<h3 id="1-4、DataSourceCollection"><a href="#1-4、DataSourceCollection" class="headerlink" title="1.4、DataSourceCollection"></a>1.4、DataSourceCollection</h3><p>数据源集合类，是 Cesium 中加载矢量数据的主要方式之一，支持加载矢量数据集和外部文件的调用<br>主要有三种调用方法：CzmlDataSource KmlDataSource GeoJsonDataSource</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> geocachePromise = <span class="title class_">Cesium</span>.<span class="property">KmlDataSource</span>.<span class="title function_">load</span>(<span class="string">&#x27;./SampleData/kml/bikeRide.kml&#x27;</span>, kmlOptions);</span><br><span class="line"><span class="comment">// Add geocache billboard entities to scene and style them</span></span><br><span class="line">geocachePromise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">dataSource</span>) &#123;</span><br><span class="line">    <span class="comment">// Add the new data as entities to the viewer</span></span><br><span class="line">    viewer.<span class="property">dataSources</span>.<span class="title function_">add</span>(dataSource);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="2、Cesium坐标系"><a href="#2、Cesium坐标系" class="headerlink" title="2、Cesium坐标系"></a>2、Cesium坐标系</h2><ol>
<li><p>WGS84 经纬度坐标系（没有实际的对象）</p>
</li>
<li><p>WGS84 弧度坐标系（Cartographic）</p>
<p>弧度 &#x3D; π&#x2F;180 × 经纬度角度</p>
<p>经纬度角度 &#x3D; 180&#x2F;π × 弧度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartographic</span>(longitude,latitude,height)</span><br><span class="line"><span class="comment">// 经纬度转弧度</span></span><br><span class="line"><span class="keyword">var</span> radians = <span class="title class_">Cesium</span>.<span class="property">CesiumMath</span>.<span class="title function_">toRadians</span>(degrees)</span><br><span class="line"><span class="comment">// 弧度转经纬度</span></span><br><span class="line"><span class="keyword">var</span> degrees = <span class="title class_">Cesium</span>.<span class="property">CesiumMath</span>.<span class="title function_">toDegrees</span>(radians)</span><br><span class="line"><span class="comment">// WGS84 经纬度坐标和WGS84 弧度坐标系(Cartographic)的转换</span></span><br><span class="line"><span class="comment">// 1、构造函数法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartographic</span>(longitude弧度,latitude弧度,height米)</span><br><span class="line"><span class="comment">// 2、静态函数法</span></span><br><span class="line"><span class="keyword">var</span> cartographic = <span class="title class_">Cesium</span>.<span class="property">Cartographic</span>.<span class="title function_">fromDegrees</span>(longitude经度latitude纬度,<span class="attr">height</span>:米)</span><br><span class="line"><span class="keyword">var</span> cartographic = <span class="title class_">Cesium</span>.<span class="property">Cartographic</span>.<span class="title function_">fromRadians</span>(longitude弧度,latitude弧度,height米)</span><br><span class="line"></span><br><span class="line"><span class="comment">// WGS84 坐标系和笛卡尔空间直角坐标系(Cartesian3)的转换</span></span><br><span class="line"><span class="comment">// 1、WGS84 转为笛卡尔空间直角坐标系</span></span><br><span class="line"><span class="comment">// 直接转换</span></span><br><span class="line"><span class="keyword">var</span> cartesian3 = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(longitude,latitude,height);</span><br><span class="line"><span class="keyword">var</span> cartesian3 = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegreesArray</span>(coordinates);</span><br><span class="line">coordinates格式为不带高度的数组。例如：[-<span class="number">278.0</span>,<span class="number">66.0</span>,-<span class="number">123.0</span>,<span class="number">55.0</span>]</span><br><span class="line"><span class="keyword">var</span> cartesian3s = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegreesArrayHeights</span>(coordinates);</span><br><span class="line">coordinates格式为带有高度的数组。例如：[-<span class="number">278.0</span>,<span class="number">66.0</span>,<span class="number">6000.0</span>,-<span class="number">318</span>,<span class="number">65.0</span>,<span class="number">120000.0</span>]</span><br><span class="line"><span class="comment">// 间接转换</span></span><br><span class="line"><span class="keyword">var</span> wgs84 = <span class="title class_">Cesium</span>.<span class="property">Cartographic</span>.<span class="title function_">fromDegrees</span>(longitude经度，latitude纬度，height);</span><br><span class="line"><span class="keyword">var</span> wgs84 = <span class="title class_">Cesium</span>.<span class="property">Cartographic</span>.<span class="title function_">fromRadians</span>(longitude弧度，latitude弧度，height);</span><br><span class="line"><span class="keyword">var</span> cartesian3 = <span class="title class_">Cesium</span>.<span class="property">Ellipsoid</span>.<span class="property">WGS84</span>.<span class="title function_">cartographicToCartesian</span>(wgs84);</span><br><span class="line"><span class="keyword">var</span> cartesian3s = <span class="title class_">Cesium</span>.<span class="property">Ellipsoid</span>.<span class="property">WGS84</span>.<span class="title function_">cartographicArrayToCartesianArray</span>([wgs84_1,wgs84_2,wgs84_3])</span><br><span class="line"><span class="comment">// 2、笛卡尔空间直角坐标系转换为 WGS84</span></span><br><span class="line"><span class="comment">// 直接转换</span></span><br><span class="line"><span class="keyword">var</span> cartographic = <span class="title class_">Cesium</span>.<span class="property">Cartographic</span>.<span class="title function_">fromCartesian</span>(cartesian3)</span><br><span class="line"><span class="keyword">var</span> cartographic = <span class="title class_">Cesium</span>.<span class="property">Ellipsoid</span>.<span class="property">WGS84</span>.<span class="title function_">cartesianToCartographic</span>(cartesian3)</span><br><span class="line"><span class="keyword">var</span> cartographics = <span class="title class_">Cesium</span>.<span class="property">Ellipsoid</span>.<span class="property">WGS84</span>.<span class="title function_">cartesianArrayToCartographicArray</span>([cartesian1,cartesian2,cartesian3])</span><br></pre></td></tr></table></figure>


</li>
<li><p>笛卡尔空间直角坐标系（Cartesian3）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartographic3</span>(x,y,z)</span><br><span class="line"><span class="comment">// 平面坐标系(Cartesian2)和笛卡尔空间直角坐标系(Cartesian3)的转换</span></span><br><span class="line"><span class="comment">// 平面坐标系转笛卡尔空间直角坐标系</span></span><br><span class="line"><span class="comment">// 1、屏幕坐标转场景 WGS84 坐标，包含了地形、倾斜、模型的坐标</span></span><br><span class="line"><span class="keyword">var</span> cartesian3 = viewer.<span class="property">scene</span>.<span class="title function_">pickPosition</span>(<span class="title class_">Cartesian2</span>)</span><br><span class="line"><span class="comment">// 2、屏幕坐标转地表坐标</span></span><br><span class="line"><span class="keyword">var</span> cartesian3 = viewer.<span class="property">scene</span>.<span class="property">globe</span>.<span class="title function_">pick</span>(viewer.<span class="property">camera</span>.<span class="title function_">getPickRay</span>(<span class="title class_">Cartesian2</span>),viewer.<span class="property">scene</span>);</span><br><span class="line"><span class="comment">// 3、屏幕坐标转椭球面坐标，是参考椭球 WGS84 坐标，不包含地形、模型、倾斜摄影表面</span></span><br><span class="line"><span class="keyword">var</span> cartesian3 = viewer.<span class="property">scene</span>.<span class="property">camera</span>.<span class="title function_">pickEllipsoid</span>(<span class="title class_">Cartesian2</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p>平面坐标系（Cartesian2）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartographic2</span>(x,y)</span><br><span class="line"><span class="comment">// 笛卡尔空间直角坐标系转平面坐标系</span></span><br><span class="line"><span class="keyword">var</span> cartesian2 = <span class="title class_">Cesium</span>.<span class="property">SceneTransforms</span>.<span class="title function_">wgs84ToWindowCoordinates</span>(viewer.<span class="property">scene</span>,cartesian3)</span><br></pre></td></tr></table></figure>


</li>
<li><p>4D 笛卡尔坐标系（Cartesian4）</p>
</li>
</ol>
<h2 id="3、Cesium-的相机系统"><a href="#3、Cesium-的相机系统" class="headerlink" title="3、Cesium 的相机系统"></a>3、Cesium 的相机系统</h2><p>在三维中需要确定视点位置和视线方向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setView 方法，通过定义相机飞行目的地的三维坐标和视线方向，将视角直接切换到所设定的视域范围内</span></span><br><span class="line"><span class="keyword">const</span> position = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>,<span class="number">39.91</span>,<span class="number">400</span>)</span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">setView</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>:position,</span><br><span class="line">    <span class="attr">orientation</span>:&#123;</span><br><span class="line">        <span class="attr">heading</span>:<span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">0</span>),<span class="comment">//x 轴旋转</span></span><br><span class="line">        <span class="attr">pitch</span>:<span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(-<span class="number">90</span>),<span class="comment">//y 轴旋转</span></span><br><span class="line">        <span class="attr">roll</span>:<span class="number">0</span><span class="comment">//z 轴旋转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// flyTo 方法，具有空中飞行逐步切换视域的效果，还可以设置飞行时间</span></span><br><span class="line"><span class="keyword">const</span> position = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>,<span class="number">39.91</span>,<span class="number">400</span>)</span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">flyTo</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: position,</span><br><span class="line">    <span class="attr">orientation</span>: &#123;</span><br><span class="line">        <span class="attr">heading</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">0</span>),</span><br><span class="line">        <span class="attr">pitch</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(-<span class="number">90</span>),</span><br><span class="line">        <span class="attr">roll</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">duration</span>:<span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// lookAt 方法，将视角跳转到设置的目的地上，通过鼠标旋转视角方向是不会改变其位置的</span></span><br><span class="line"><span class="keyword">const</span> center = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>, <span class="number">39.91</span>)</span><br><span class="line"><span class="comment">// 设置一个水平旋转视口方向</span></span><br><span class="line"><span class="keyword">const</span> heading = <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">50</span>)</span><br><span class="line"><span class="comment">// 设置一个垂直旋转视口的角度</span></span><br><span class="line"><span class="keyword">const</span> pitch = <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(-<span class="number">90</span>)</span><br><span class="line"><span class="comment">// 设置相机距离目标点的高度</span></span><br><span class="line"><span class="keyword">const</span> range = <span class="number">2500</span></span><br><span class="line"><span class="comment">// lookAt 一般用于锁定某个场景的视角</span></span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">lookAt</span>(center,<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">HeadingPitchRange</span>(heading,pitch,range))</span><br><span class="line"></span><br><span class="line"><span class="comment">// viewBoundingSphere 视角切换效果与 setView 一样，没有飞行过渡效果，而是直接切换视口到指定目的地。当需要对一个物体进行多角度观测或者建筑物进行定点漫游时使用此方法</span></span><br><span class="line"><span class="keyword">const</span> position = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>,<span class="number">39.91</span>,<span class="number">400</span>)</span><br><span class="line"><span class="keyword">const</span> orientation = <span class="title class_">Cesium</span>.<span class="property">Transforms</span>.<span class="title function_">headingPitchRollQuaternion</span>(position, <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">HeadingPitchRoll</span>(-<span class="number">90</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">const</span> entity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="attr">position</span>: position,</span><br><span class="line">        <span class="attr">orientation</span>: orientation,</span><br><span class="line">        <span class="attr">model</span>: &#123;</span><br><span class="line">            <span class="attr">uri</span>: <span class="string">&quot;./SampleData/models/CesiumAir/Cesium_Air.glb&quot;</span>,</span><br><span class="line">            <span class="attr">minimumPixelSize</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">maximumScale</span>: <span class="number">10000</span>,</span><br><span class="line">            <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">viewBoundingSphere</span>(<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">BoundingSphere</span>(position,<span class="number">20</span>),<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">HeadingPitchRange</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure>



<h2 id="4、地形"><a href="#4、地形" class="headerlink" title="4、地形"></a>4、地形</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载地图</span></span><br><span class="line"><span class="keyword">const</span> esri = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">ArcGisMapServerImageryProvider</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> viewer = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Viewer</span>(<span class="string">&#x27;cesiumContainer&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">baseLayerPicker</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">imageryProvider</span>: esri,</span><br><span class="line">    <span class="attr">animation</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">timeline</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 加载地形</span></span><br><span class="line">    <span class="attr">terrainProvider</span>:<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">CesiumTerrainProvider</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="title class_">Cesium</span>.<span class="property">IonResource</span>.<span class="title function_">fromAssetId</span>(<span class="number">1</span>),</span><br><span class="line">        <span class="comment">// 增加法线提高光照效果</span></span><br><span class="line">        <span class="attr">requestVertexNormals</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 增加水面特效</span></span><br><span class="line">        <span class="attr">requestWaterMask</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载图层</span></span><br><span class="line"><span class="keyword">const</span> layer = viewer.<span class="property">imageryLayers</span>.<span class="title function_">addImageryProvider</span>(</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">IonImageryProvider</span>(&#123;<span class="attr">assetId</span>: <span class="number">3812</span>&#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="5、加载建筑物模型"><a href="#5、加载建筑物模型" class="headerlink" title="5、加载建筑物模型"></a>5、加载建筑物模型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载建筑物信息</span></span><br><span class="line"><span class="comment">// primitives 属性用于获取大量的基元集合</span></span><br><span class="line"><span class="comment">// const tileset = viewer.scene.primitives.add(</span></span><br><span class="line"><span class="comment">//     new Cesium.Cesium3DTileset(&#123;</span></span><br><span class="line"><span class="comment">//         url: Cesium.IonResource.fromAssetId(96188),</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载包含高度数据的建筑物</span></span><br><span class="line"><span class="keyword">const</span> tileset = viewer.<span class="property">scene</span>.<span class="property">primitives</span>.<span class="title function_">add</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cesium3DTileset</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="title class_">Cesium</span>.<span class="property">IonResource</span>.<span class="title function_">fromAssetId</span>(<span class="number">75343</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加相机信息</span></span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">setView</span>(&#123;</span><br><span class="line">    <span class="comment">// destination: Cesium.Cartesian3.fromDegrees(121.49, 31.23, 3000),</span></span><br><span class="line">    <span class="comment">// orientation: &#123;</span></span><br><span class="line">    <span class="comment">//     heading: 0,</span></span><br><span class="line">    <span class="comment">//     pitch: -90,</span></span><br><span class="line">    <span class="comment">//     poll: 0</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">destination</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian3</span>(<span class="number">1333597.291762958</span>, -<span class="number">4667718.246269587</span>, <span class="number">4147626.344790953</span>),</span><br><span class="line">    <span class="attr">orientation</span>: &#123;</span><br><span class="line">        <span class="attr">heading</span>: <span class="number">0.8384333942956657</span>,</span><br><span class="line">        <span class="attr">pitch</span>: -<span class="number">1.299766516859664</span>,</span><br><span class="line">        <span class="attr">ro11</span>: <span class="number">0.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置模型样式</span></span><br><span class="line">tileset.<span class="property">style</span> = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cesium3DTileStyle</span>(&#123;</span><br><span class="line">    <span class="comment">// color: &quot;color(&#x27;blue&#x27;,0.5)&quot;,</span></span><br><span class="line">    <span class="comment">// show: true</span></span><br><span class="line">    <span class="attr">color</span>: &#123;</span><br><span class="line">        <span class="attr">conditions</span>: [</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 300&#x27;</span>, <span class="string">&#x27;rgba(45,0,75,0.5)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 200&#x27;</span>, <span class="string">&#x27;rgb(102,71,151)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 100&#x27;</span>, <span class="string">&#x27;rgb(170,162,204)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 50&#x27;</span>, <span class="string">&#x27;rgb(224,226,238)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 25&#x27;</span>, <span class="string">&#x27;rgb(252,230,200)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 10&#x27;</span>, <span class="string">&#x27;rgb(248,176,87)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;$&#123;Height&#125; &gt;= 5&#x27;</span>, <span class="string">&#x27;rgb(198,106,11)&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;rgb(127,59,8)&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">show</span>: <span class="string">&#x27;$&#123;Height&#125; &gt;= 0&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="6、空间数据加载"><a href="#6、空间数据加载" class="headerlink" title="6、空间数据加载"></a>6、空间数据加载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空间数据加载</span></span><br><span class="line"><span class="keyword">const</span> position = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 加载原点</span></span><br><span class="line"><span class="keyword">const</span> pointEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>: position,</span><br><span class="line">    <span class="attr">point</span>: &#123;</span><br><span class="line">        <span class="attr">pixelSize</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Color</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载线条</span></span><br><span class="line"><span class="keyword">const</span> lineEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">polyline</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">positions</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegreesArray</span>([<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">116.40</span>, <span class="number">39.91</span>]),</span><br><span class="line">        <span class="attr">width</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">material</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载面</span></span><br><span class="line"><span class="keyword">const</span> planeEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>: position,</span><br><span class="line">    <span class="attr">plane</span>: &#123;</span><br><span class="line">        <span class="comment">// 设置轴向沿着 z 轴平铺</span></span><br><span class="line">        <span class="attr">plane</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Plane</span>(<span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="property">UNIT_Z</span>, <span class="number">0.0</span>),</span><br><span class="line">        <span class="comment">// 设置面的长度和宽度</span></span><br><span class="line">        <span class="attr">dimensions</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian2</span>(<span class="number">400</span>, <span class="number">300</span>),</span><br><span class="line">        <span class="comment">// 面的颜色,也可以设置url加载图片等</span></span><br><span class="line">        <span class="attr">material</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">RED</span>.<span class="title function_">withAlpha</span>(<span class="number">0.5</span>),</span><br><span class="line">        <span class="comment">// 显示边框</span></span><br><span class="line">        <span class="attr">outline</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">outlineColor</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">BLUE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 标签加载</span></span><br><span class="line"><span class="keyword">const</span> labelEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>: position,</span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;hqzqaq&quot;</span>,</span><br><span class="line">        <span class="attr">font</span>: <span class="string">&quot;50px Helvetica&quot;</span>,</span><br><span class="line">        <span class="attr">fillColor</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">SKYBLUE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="7、空间数据管理"><a href="#7、空间数据管理" class="headerlink" title="7、空间数据管理"></a>7、空间数据管理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空间数据管理</span></span><br><span class="line"><span class="keyword">const</span> polygonEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;polygonEntity&#x27;</span>,</span><br><span class="line">    <span class="attr">polygon</span>:&#123;</span><br><span class="line">        <span class="attr">hierarchy</span>:<span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegreesArray</span>([<span class="number">116.39</span>,<span class="number">39.91</span>,<span class="number">116.39</span>,<span class="number">39.915</span>,<span class="number">116.395</span>,<span class="number">39.91</span>]),</span><br><span class="line">        <span class="attr">material</span>:<span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">GREEN</span>,</span><br><span class="line">        <span class="comment">// 垂直方向拉伸</span></span><br><span class="line">        <span class="attr">extrudedHeight</span>:<span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 移除实体</span></span><br><span class="line"><span class="comment">// viewer.entities.remove(polygonEntity)</span></span><br><span class="line"><span class="comment">// 根据 id 获取实体，修改实体属性</span></span><br><span class="line">viewer.<span class="property">entities</span>.<span class="title function_">getById</span>(<span class="string">&#x27;polygonEntity&#x27;</span>).<span class="property">polygon</span>.<span class="property">material</span> = <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">YELLOW</span></span><br><span class="line"><span class="comment">// 移除所有实体</span></span><br><span class="line">viewer.<span class="property">entities</span>.<span class="title function_">removeAll</span>()</span><br></pre></td></tr></table></figure>



<h2 id="8、Cesium-鼠标交互"><a href="#8、Cesium-鼠标交互" class="headerlink" title="8、Cesium 鼠标交互"></a>8、Cesium 鼠标交互</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cesium 鼠标交互</span></span><br><span class="line"><span class="comment">// 加载面</span></span><br><span class="line"><span class="keyword">const</span> position = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> planeEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;planeEntity&#x27;</span>,</span><br><span class="line">    <span class="attr">position</span>: position,</span><br><span class="line">    <span class="attr">plane</span>: &#123;</span><br><span class="line">        <span class="comment">// 设置轴向沿着 z 轴平铺</span></span><br><span class="line">        <span class="attr">plane</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Plane</span>(<span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="property">UNIT_Z</span>, <span class="number">0.0</span>),</span><br><span class="line">        <span class="comment">// 设置面的长度和宽度</span></span><br><span class="line">        <span class="attr">dimensions</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian2</span>(<span class="number">400</span>, <span class="number">300</span>),</span><br><span class="line">        <span class="comment">// 面的颜色,也可以设置url加载图片等</span></span><br><span class="line">        <span class="comment">// material: Cesium.Color.RED.withAlpha(0.5),</span></span><br><span class="line">        <span class="attr">material</span>: <span class="string">&#x27;./SampleData/cesium_stripes.png&#x27;</span>,</span><br><span class="line">        <span class="comment">// 显示边框</span></span><br><span class="line">        <span class="attr">outline</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">outlineColor</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">BLUE</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用于设置选定对象的显示信息</span></span><br><span class="line">    <span class="attr">description</span>:<span class="string">&#x27;&lt;div&gt;&lt;img src=&quot;./SampleData/cesium_stripes.png&quot; width=&quot;100%&quot; height=&quot;300px&quot;&gt;&lt;h3&gt;hqzqaq&lt;/h3&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取 scene 下所有 canvas 创建的元素</span></span><br><span class="line"><span class="keyword">const</span> handler = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">ScreenSpaceEventHandler</span>(viewer.<span class="property">scene</span>.<span class="property">canvas</span>)</span><br><span class="line"><span class="comment">// 监听事件，第一个参数是回调函数，第二个参数表示监听鼠标的哪个事件</span></span><br><span class="line">handler.<span class="title function_">setInputAction</span>(<span class="function">(<span class="params">movement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到点击对象的位置信息</span></span><br><span class="line">    <span class="keyword">const</span> pick = viewer.<span class="property">scene</span>.<span class="title function_">pick</span>(movement.<span class="property">position</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Cesium</span>.<span class="title function_">defined</span>(pick) &amp;&amp; (pick.<span class="property">id</span>.<span class="property">id</span> === <span class="string">&#x27;planeEntity&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你已点击该区域&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="title class_">Cesium</span>.<span class="property">ScreenSpaceEventType</span>.<span class="property">LEFT_CLICK</span>)</span><br><span class="line"><span class="comment">// scene.pick 返回包含给定窗口位置基元的对象</span></span><br><span class="line"><span class="comment">// scene.drillpick 返回的是给定窗口位置所有对象的列表</span></span><br><span class="line"><span class="comment">// global.pick 返回的是给定光线和地形的交点</span></span><br><span class="line"><span class="comment">// Cesium.ScreenSpaceEventType.MIDDLE_CLICK Cesium.ScreenSpaceEventType.MOUSE_MOVE Cesium.ScreenSpaceEventType.RIGHT_CLICK</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="9、三维数据格式-3DTiles"><a href="#9、三维数据格式-3DTiles" class="headerlink" title="9、三维数据格式 3DTiles"></a>9、三维数据格式 3DTiles</h2><p>是一种三维模型瓦片数据结构，将海量三维数据用分块、分层的形式组织起来。</p>
<p>特点：</p>
<ol>
<li>开放性，可以根据实际需求设定三维模型的大小和范围</li>
<li>异质性，可以将不同类型的三维模型数据</li>
<li>专为三维可视化设计</li>
<li>可交互性，支持对加载模型的拾取和样式的修改</li>
</ol>
<h3 id="9-1、3D-Tiles-格式文件代码详解"><a href="#9-1、3D-Tiles-格式文件代码详解" class="headerlink" title="9.1、3D Tiles 格式文件代码详解"></a>9.1、3D Tiles 格式文件代码详解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;asset&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 定义版本</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="comment">// 定义特定应用中的版本号</span></span><br><span class="line">    <span class="string">&quot;tilesetVersion&quot;</span>: <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 定义了一个非误差单位，低于这个误差值，瓦片集不会被渲染，单位为米</span></span><br><span class="line">  <span class="string">&quot;geometricError&quot;</span>: <span class="number">70</span>,</span><br><span class="line">  <span class="comment">// 定义根瓦片</span></span><br><span class="line">  <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">	<span class="comment">// 在加载大量模型或建筑物的情况下，单个模型的点云瓦片集能在它自己的坐标系中定义，其内的数据是一个4x4仿射变换矩阵，以列主序存储，用来实现从瓦片局部坐标系到父瓦片或根瓦片坐标系的变换</span></span><br><span class="line">    <span class="string">&quot;transform&quot;</span>: [</span><br><span class="line">      -<span class="number">0.05105018459701556</span>,</span><br><span class="line">      <span class="number">0.9986960892346634</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      -<span class="number">0.7230889943688711</span>,</span><br><span class="line">      -<span class="number">0.036962021820761914</span>,</span><br><span class="line">      <span class="number">0.6897652609152887</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0.6888658685660259</span>,</span><br><span class="line">      <span class="number">0.03521264389833409</span>,</span><br><span class="line">      <span class="number">0.7240330688818458</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">4401696.395347578</span>,</span><br><span class="line">      <span class="number">225000.79448064446</span>,</span><br><span class="line">      <span class="number">4595435.890447363</span>,</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">    ]，</span><br><span class="line">    <span class="comment">// 当前瓦片集不被渲染的误差</span></span><br><span class="line">    <span class="string">&quot;geometricError&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 定义 LOD 细化的方法，也就是瓦片如何切换</span></span><br><span class="line">    <span class="string">&quot;refine&quot;</span>: <span class="string">&quot;REPLACE&quot;</span>,</span><br><span class="line">    <span class="comment">// 引入包含瓦片内容的文件</span></span><br><span class="line">    <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;content.geom&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其子 tiles 文件</span></span><br><span class="line">    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;boundingVolume&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;region&quot;</span>: [</span><br><span class="line">            -<span class="number">1.3197209591796106</span>,</span><br><span class="line">            <span class="number">0.6988424218</span>,</span><br><span class="line">            -<span class="number">1.31968</span>,</span><br><span class="line">            <span class="number">0.698874</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">20</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;geometricError&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;ll.b3dm&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br></pre></td></tr></table></figure>



<h3 id="9-2、加载-3D-tiles-数据"><a href="#9-2、加载-3D-tiles-数据" class="headerlink" title="9.2、加载 3D tiles 数据"></a>9.2、加载 3D tiles 数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三维数据格式 3DTiles</span></span><br><span class="line"><span class="keyword">const</span> tileset = viewer.<span class="property">scene</span>.<span class="property">primitives</span>.<span class="title function_">add</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cesium3DTileset</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;./SampleData/Cesium3DTiles/Tilesets/TilesetWithViewerRequestVolume/tileset.json&quot;</span>,</span><br><span class="line">        <span class="comment">// 最大的屏幕空间误差，数字越低，视觉效果越好</span></span><br><span class="line">        <span class="attr">maximumScreenSpaceError</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 最大加载瓦片个数</span></span><br><span class="line">        <span class="attr">maximumNumberOfLoadedTiles</span>:<span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="10、动态数据格式-czml"><a href="#10、动态数据格式-czml" class="headerlink" title="10、动态数据格式 czml"></a>10、动态数据格式 czml</h2><p>是一种 json 数据格式，不仅方便交互，而且具有时间属性，即可以用于绘制各种几何图形，给定颜色、材质、透明度等，也可以根据实际的场景需求，放入动态的模型数据，还可以让 czml 中的属性跟随时间变化。</p>
<h3 id="10-1、czml-数据结构"><a href="#10-1、czml-数据结构" class="headerlink" title="10.1、czml 数据结构"></a>10.1、czml 数据结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> czml = [</span><br><span class="line">    <span class="comment">// 声明为 czml 格式</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;box&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 几何模型数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;shape1&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Blue box&quot;</span>,</span><br><span class="line">        <span class="comment">// 模型位置信息</span></span><br><span class="line">        <span class="attr">position</span>: &#123;</span><br><span class="line">            <span class="attr">cartographicDegrees</span>: [-<span class="number">114.0</span>, <span class="number">40.0</span>, <span class="number">300000.0</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 几何体形状</span></span><br><span class="line">        <span class="attr">box</span>: &#123;</span><br><span class="line">            <span class="comment">// 尺寸信息</span></span><br><span class="line">            <span class="attr">dimensions</span>: &#123;</span><br><span class="line">                <span class="attr">cartesian</span>: [<span class="number">400000.0</span>, <span class="number">300000.0</span>, <span class="number">500000.0</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 设置几何体的材质颜色</span></span><br><span class="line">            <span class="attr">material</span>: &#123;</span><br><span class="line">                <span class="attr">solidColor</span>: &#123;</span><br><span class="line">                    <span class="attr">color</span>: &#123;</span><br><span class="line">                        <span class="attr">rgba</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>



<h3 id="10-2、caml-轨迹数据处理"><a href="#10-2、caml-轨迹数据处理" class="headerlink" title="10.2、caml 轨迹数据处理"></a>10.2、caml 轨迹数据处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="comment">// 用于设定时间相关的数据，是构建动态轨迹场景必不可少的元素</span></span><br><span class="line">    <span class="string">&quot;clock&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// 设置运行的起止时间 ISO 8601 规范表示，用这个方法不需要进行时差计算，也不需要换算去协调世界时</span></span><br><span class="line">      <span class="string">&quot;interval&quot;</span>: <span class="string">&quot;2018-07-19T15:18:00Z/2018-07-19T15:18:30Z&quot;</span>,</span><br><span class="line">      <span class="comment">// 设置当前时间节点</span></span><br><span class="line">      <span class="string">&quot;currentTime&quot;</span>: <span class="string">&quot;2018-07-19T15:18:00Z&quot;</span>,</span><br><span class="line">      <span class="comment">// 设置时间速率</span></span><br><span class="line">      <span class="string">&quot;multiplier&quot;</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;range&quot;</span>: <span class="string">&quot;LOOP_STOP&quot;</span>,</span><br><span class="line">      <span class="string">&quot;step&quot;</span>: <span class="string">&quot;SYSTEM_CLOCK_MULTIPLIER&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 汽车模型数据</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;CesiumMilkTruck&quot;</span>,</span><br><span class="line">	<span class="comment">// 加载模型数据</span></span><br><span class="line">    <span class="string">&quot;model&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;gltf&quot;</span>: <span class="string">&quot;models/CesiumMilkTruck/CesiumMilkTruck.glb&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 模型位置信息，将自动与 clock 中设置的时间信息关联起来，使时刻与坐标点相对应，从而实现动态轨迹效果</span></span><br><span class="line">    <span class="string">&quot;position&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// 设置的是插值算法</span></span><br><span class="line">      <span class="string">&quot;interpolationAlgorithm&quot;</span>: <span class="string">&quot;LINEAR&quot;</span>,</span><br><span class="line">      <span class="comment">// 防止出现设定数值超出样本数据范围的情况</span></span><br><span class="line">      <span class="string">&quot;forwardExtrapolationType&quot;</span>: <span class="string">&quot;HOLD&quot;</span>,</span><br><span class="line">      <span class="comment">// 时间、经纬度、高度</span></span><br><span class="line">      <span class="string">&quot;cartesian&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;2018-07-19T15:18:00Z&quot;</span>,</span><br><span class="line">        <span class="number">1216348.1632364073</span>,</span><br><span class="line">        -<span class="number">4736348.958775471</span>,</span><br><span class="line">        <span class="number">4081284.5528982095</span>,</span><br><span class="line">        <span class="string">&quot;2018-07-19T15:18:30Z&quot;</span>,</span><br><span class="line">        <span class="number">1216369.1229444197</span>,</span><br><span class="line">        -<span class="number">4736377.467107148</span>,</span><br><span class="line">        <span class="number">4081240.888485707</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 模型方向信息，可替换为 &quot;velocityReference&quot;:&quot;#posiion&quot;，cesium 会根据位置信息进行四元数方向转换，从而达到模型在运动时方向转换的效果</span></span><br><span class="line">    <span class="string">&quot;orientation&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;unitQuaternion&quot;</span>: [</span><br><span class="line">        <span class="number">0.3084011337938999</span>,</span><br><span class="line">        <span class="number">0.3210181022701266</span>,</span><br><span class="line">        -<span class="number">0.45850421987074924</span>,</span><br><span class="line">        <span class="number">0.7686388857813198</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 行驶轨迹线</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;Polyline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;polyline&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;positions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;cartesian&quot;</span>: [</span><br><span class="line">          <span class="number">1216348.1632364073</span>,</span><br><span class="line">          -<span class="number">4736348.958775471</span>,</span><br><span class="line">          <span class="number">4081284.5528982095</span>,</span><br><span class="line">          <span class="number">1216369.1229444197</span>,</span><br><span class="line">          -<span class="number">4736377.467107148</span>,</span><br><span class="line">          <span class="number">4081240.888485707</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;material&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;polylineOutline&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;color&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;rgba&quot;</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;outlineColor&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;rgba&quot;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;outlineWidth&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;width&quot;</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="comment">// 紧贴地面</span></span><br><span class="line">      <span class="string">&quot;clampToGround&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>引入数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// czml 动态数据</span></span><br><span class="line">viewer.<span class="property">dataSources</span>.<span class="title function_">add</span>(<span class="title class_">Cesium</span>.<span class="property">CzmlDataSource</span>.<span class="title function_">load</span>(<span class="string">&#x27;./SampleData/ClampToGround.czml&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">dataSource</span>) =&gt;</span> &#123;</span><br><span class="line">    viewer.<span class="property">trackedEntity</span> = dataSource.<span class="property">entities</span>.<span class="title function_">getById</span>(<span class="string">&#x27;CesiumMilkTruck&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如果需要设置动画循环播放，需要在 viewer 初始化时增加属性 shouldAnimate: true</span></span><br></pre></td></tr></table></figure>



<h2 id="11、Cesium-的时间系统"><a href="#11、Cesium-的时间系统" class="headerlink" title="11、Cesium 的时间系统"></a>11、Cesium 的时间系统</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cesium 的时间系统</span></span><br><span class="line"><span class="comment">// 设置初始化页面自动循环播放</span></span><br><span class="line">viewer.<span class="property">clock</span>.<span class="property">shouldAnimate</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 设置播放速率</span></span><br><span class="line">viewer.<span class="property">clock</span>.<span class="property">multiplier</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">// 设置时间线</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="title class_">Cesium</span>.<span class="property">JulianDate</span>.<span class="title function_">fromIso8601</span>(<span class="string">&#x27;2022-07-15&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> end = <span class="title class_">Cesium</span>.<span class="property">JulianDate</span>.<span class="title function_">fromIso8601</span>(<span class="string">&#x27;2022-07-20&#x27;</span>)</span><br><span class="line">viewer.<span class="property">timeline</span>.<span class="title function_">zoomTo</span>(start, end)</span><br></pre></td></tr></table></figure>

<h2 id="12、Cesium-的粒子系统"><a href="#12、Cesium-的粒子系统" class="headerlink" title="12、Cesium 的粒子系统"></a>12、Cesium 的粒子系统</h2><p>是一种模拟复杂物理效应的图形技术，是由很多的小图像组成的集合，形成一个模糊的对象，从而产生特效。例如烟花燃放的特效、天气效果的展示、汽车的尾气等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cesium 的时间系统</span></span><br><span class="line"><span class="comment">// 设置初始化页面自动循环播放</span></span><br><span class="line">viewer.<span class="property">clock</span>.<span class="property">shouldAnimate</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 设置播放速率</span></span><br><span class="line">viewer.<span class="property">clock</span>.<span class="property">multiplier</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">// 设置时间线</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="title class_">Cesium</span>.<span class="property">JulianDate</span>.<span class="title function_">fromIso8601</span>(<span class="string">&#x27;2022-07-15&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> end = <span class="title class_">Cesium</span>.<span class="property">JulianDate</span>.<span class="title function_">fromIso8601</span>(<span class="string">&#x27;2022-07-20&#x27;</span>)</span><br><span class="line">viewer.<span class="property">timeline</span>.<span class="title function_">zoomTo</span>(start, end)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> position = <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(<span class="number">116.39</span>, <span class="number">39.91</span>, <span class="number">1500</span>)</span><br><span class="line"><span class="keyword">const</span> planeEntity = viewer.<span class="property">entities</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>: position,</span><br><span class="line">    <span class="attr">orientation</span>: <span class="title class_">Cesium</span>.<span class="property">Transforms</span>.<span class="title function_">headingPitchRollQuaternion</span>(position, <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">HeadingPitchRoll</span>(-<span class="number">90</span>, <span class="number">0</span>, <span class="number">0</span>)),</span><br><span class="line">    <span class="attr">model</span>: &#123;</span><br><span class="line">        <span class="attr">uri</span>: <span class="string">&#x27;./SampleData/models/CesiumAir/Cesium_Air.glb&#x27;</span>,</span><br><span class="line">        <span class="attr">minimumPixelSize</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">maximumScale</span>: <span class="number">10000</span>,</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">viewer.<span class="property">camera</span>.<span class="title function_">viewBoundingSphere</span>(<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">BoundingSphere</span>(position, <span class="number">20</span>), <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">HeadingPitchRange</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// cesium 的粒子系统</span></span><br><span class="line"><span class="comment">// 火焰粒子特效</span></span><br><span class="line"><span class="comment">// 先设置粒子样式，再通过粒子发射器发射粒子，控制粒子在一定时间内存在，然后消亡，并且可以使得粒子可以随着时间的推移，改变外观和行为</span></span><br><span class="line">viewer.<span class="property">scene</span>.<span class="property">primitives</span>.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">ParticleSystem</span>(&#123;</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;./SampleData/fire.png&#x27;</span>,</span><br><span class="line">    <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian2</span>(<span class="number">20</span>, <span class="number">20</span>),</span><br><span class="line">    <span class="comment">// 粒子大小变化</span></span><br><span class="line">    <span class="attr">startScale</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">endScale</span>: <span class="number">4.0</span>,</span><br><span class="line">    <span class="comment">// 粒子存在时间</span></span><br><span class="line">    <span class="attr">particleLife</span>: <span class="number">3.0</span>,</span><br><span class="line">    <span class="attr">speed</span>: <span class="number">5.0</span>,</span><br><span class="line">    <span class="comment">// 发射器 0.5 设置的是圆的半径，粒子将会在圆的范围内随机向上发射粒子，还有 BoxEmitter 等</span></span><br><span class="line">    <span class="attr">emitter</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">CircleEmitter</span>(<span class="number">0.5</span>),</span><br><span class="line">    <span class="comment">// 每秒钟发射粒子的数量</span></span><br><span class="line">    <span class="attr">emissionRate</span>: <span class="number">5.0</span>,</span><br><span class="line">    <span class="comment">// 设置粒子系统的位置，将粒子系统从模型转换为世界坐标的 4x4 转换矩阵</span></span><br><span class="line">    <span class="comment">// computeModelMatrix 在指定时间计算实体变换的模型矩阵</span></span><br><span class="line">    <span class="attr">modelMatrix</span>: planeEntity.<span class="title function_">computeModelMatrix</span>(viewer.<span class="property">clock</span>.<span class="property">startTime</span>, <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Matrix4</span>()),</span><br><span class="line">    <span class="attr">lifetime</span>: <span class="number">16.0</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webGIS</category>
      </categories>
      <tags>
        <tag>cesium</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch入门</title>
    <url>/2022/09/23/ElasticSearch%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><font style="color:#00a1d6;font-size:50px;">ElasticSearch</font></p>
<h1 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h1><p>ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心，它可以近乎实时的存储、检索数据；本身的扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p>
<span id="more"></span>

<h1 id="ElasticSearch-与-MySQL-类型对比"><a href="#ElasticSearch-与-MySQL-类型对比" class="headerlink" title="ElasticSearch 与 MySQL 类型对比"></a>ElasticSearch 与 MySQL 类型对比</h1><p>Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。</p>
<table>
<thead>
<tr>
<th>ElasticSearch</th>
<th>MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>Index</td>
<td>Database</td>
</tr>
<tr>
<td>Type</td>
<td>Table</td>
</tr>
<tr>
<td>Documents</td>
<td>Row</td>
</tr>
<tr>
<td>Fields</td>
<td>Column</td>
</tr>
</tbody></table>
<p>ES 里的 <code>Index </code>可以看作一个库，而 <code>Types </code>相当于表，<code>Documents </code>则相当于表的行。</p>
<p>Types 的概念已经被逐渐弱化，ElasticSearch 6.X 中，一个 index 下已经只能包含一个 type，ElasticSearch 7.X 中，Type 的概念已经被删除了。</p>
<h1 id="windows-上-elasticsearch-集群搭建"><a href="#windows-上-elasticsearch-集群搭建" class="headerlink" title="windows 上 elasticsearch 集群搭建"></a>windows 上 elasticsearch 集群搭建</h1><p>修改 config 下的 elasticsearch.yml 文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-application</span> <span class="comment"># 所有节点的集群名称要一致</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1001</span> <span class="comment"># 不同节点的名称要求不一致</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1001</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span> <span class="comment"># 添加通信端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非主节点添加</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;127.0.0.1:9301&quot;</span>] <span class="comment"># 主节点地址</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>



<h1 id="ES-进阶"><a href="#ES-进阶" class="headerlink" title="ES 进阶"></a>ES 进阶</h1><h2 id="1、索引（Index）"><a href="#1、索引（Index）" class="headerlink" title="1、索引（Index）"></a>1、索引（Index）</h2><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字，在一个集群中，可以定义任意多的索引。</p>
<p><font color="orange">Elasticsearch 索引的精髓：一切设计都是为了提高搜索的性能</font></p>
<h2 id="2、类型（Type）"><a href="#2、类型（Type）" class="headerlink" title="2、类型（Type）"></a>2、类型（Type）</h2><p>在一个索引中，可以定义一种或多种类型。</p>
<p>一个类型是索引的一个逻辑上的分类&#x2F;分区，其语义由自己决定，通常，会为具有一组共同字段的文档定义一个类型。</p>
<h2 id="3、文档（Document）"><a href="#3、文档（Document）" class="headerlink" title="3、文档（Document）"></a>3、文档（Document）</h2><p>一个文档是一个可被索引的基础信息单元，也就是一条数据</p>
<p>在一个 index&#x2F;type 里面，可以存储任意多的文档</p>
<h2 id="4、字段（Field）"><a href="#4、字段（Field）" class="headerlink" title="4、字段（Field）"></a>4、字段（Field）</h2><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p>
<h2 id="5、映射（Mapping）"><a href="#5、映射（Mapping）" class="headerlink" title="5、映射（Mapping）"></a>5、映射（Mapping）</h2><p>mapping 是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等。</p>
<h2 id="6、分片（Shards）"><a href="#6、分片（Shards）" class="headerlink" title="6、分片（Shards）"></a>6、分片（Shards）</h2><p>一个索引可以存储超出单个节点硬件限制的大量数据。ES 提供了将索引划分成多份的能力，每一份就称之为分片，当创建一个索引时，可以指定想要的分片的数量，每个分片本身也是一个功能完善并且独立的”索引“，这个”索引“可以被放置到集群中任何节点上。</p>
<ol>
<li>允许水平分割 &#x2F; 扩展内容容量</li>
<li>允许在分片之上进行分布式的、并行的操作，进而提高性能 &#x2F; 吞吐量</li>
</ol>
<h2 id="7、副本（Replicas）"><a href="#7、副本（Replicas）" class="headerlink" title="7、副本（Replicas）"></a>7、副本（Replicas）</h2><p>在一个网络 &#x2F; 云的环境里，失败随时都可能发生，在某个分片 &#x2F; 节点不知怎么的就处于离线状态，或者由于任何原因消失了，在这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的，ES 允许用户创建分片的一份或多份拷贝，这些拷贝叫做复制分片（副本）</p>
<ol>
<li>在分片 &#x2F; 节点失败的情况下，提高了可用性，因为这个原因，注意到复制分片从不与原 &#x2F; 主要（original&#x2F;primary）分片置于同一节点上是非常重要的</li>
<li>扩展搜索量 &#x2F; 吞吐量，因为搜索可以在所有的副本上并行运行</li>
</ol>
<h2 id="8、分配（Allocation）"><a href="#8、分配（Allocation）" class="headerlink" title="8、分配（Allocation）"></a>8、分配（Allocation）</h2><p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p>
<h1 id="分布式集群"><a href="#分布式集群" class="headerlink" title="分布式集群"></a>分布式集群</h1><h2 id="9、单节点集群"><a href="#9、单节点集群" class="headerlink" title="9、单节点集群"></a>9、单节点集群</h2><p>在包含一个空节点的集群内创建名为 users 的索引，分配三个主分片和一个副本（每个主分片拥有一个副本分片）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="10、路由计算"><a href="#10、路由计算" class="headerlink" title="10、路由计算"></a>10、路由计算</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路由计算：hash(id) % 主分片数量 = [0,1,2]</span><br></pre></td></tr></table></figure>



<h2 id="11、分片控制"><a href="#11、分片控制" class="headerlink" title="11、分片控制"></a>11、分片控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户可以访问任何一个节点获取数据，这个节点称之为协调节点</span><br></pre></td></tr></table></figure>



<h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><h2 id="12、词条"><a href="#12、词条" class="headerlink" title="12、词条"></a>12、词条</h2><p>索引中最小存储和查询单元</p>
<h2 id="13、词典"><a href="#13、词典" class="headerlink" title="13、词典"></a>13、词典</h2><p>词条的集合，B+ 树，HashMap</p>
<h2 id="14、倒排表"><a href="#14、倒排表" class="headerlink" title="14、倒排表"></a>14、倒排表</h2><p>关键词出现的位置，关键词出现的频率，存储词条的指针</p>
<h1 id="文档分析"><a href="#文档分析" class="headerlink" title="文档分析"></a>文档分析</h1><p>分析包含下面的过程：</p>
<ul>
<li><p>将一块文本分成适合于倒排索引的独立的词条</p>
</li>
<li><p>将这些词条统一化为标准格式以提高它们的”可搜索性“，或者 recall 分析器执行上面的工作，分析器实际上是将三个功能封装到了一个包里：</p>
<ul>
<li><p>字符过滤器：</p>
<p>首先，字符串按顺序通过每个字符过滤器，它们的任务是在分词前整理字符串，一个字符过滤器可以用来去掉 HTML，或者将 &amp; 转为 and。</p>
</li>
<li><p>分词器</p>
<p>其次，字符串被分词器分为单个词条，一个简单的分词器遇到空格和标点的时候，可能会将文本拆分为词条。</p>
</li>
<li><p>Token 过滤器</p>
<p>最后，词条按顺序通过每个 token 过滤器，这个过程可能会改变词条（例如，小写化 Quick），删除词条（例如，像 a、and、the 等无用词），或者增加词条（例如，像 jump 和 leap 这种同义词）。</p>
</li>
</ul>
</li>
</ul>
<h1 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h1><p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set the shape to semi-transparent by calling set_trans(5)</span><br></pre></td></tr></table></figure>





<ul>
<li><p>标准分析器</p>
<p>是 es 默认使用的分析器，是分析各种语言文本最常用的选择，是根据 unicode 联盟定义的单词边界划分文本，删除绝大部分标点。最后将词条小写。</p>
<p>它将产生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set,the,shape,to,semi,transparent,by,calling,set_trans,5</span><br></pre></td></tr></table></figure>


</li>
<li><p>简单分析器</p>
<p>在任何不是字母的地方分隔文本，将词条小写</p>
<p>它将产生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set,the,shape,to,semi,transparent,by,calling,set,trans</span><br></pre></td></tr></table></figure>
</li>
<li><p>空格分析器</p>
<p>空格分析器在空格的地方划分文本</p>
<p>它将产生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set,the,shaoe,to,semi-transparent,by,calling,set_trans(5)</span><br></pre></td></tr></table></figure>
</li>
<li><p>语言分析器</p>
<p>特点语言分析器可用于很多语言，它们可以考虑指定语言的特点。例如英语分析器附带了一组英语无用词（常用单词，例如 and 或者 the，它们对于相关性没有什么影响），它们会被删除，由于理解英语语法的规则，这个分词器可以提取英语单词的词干。</p>
<p>它将产生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set,shape,semi,transpar,call,set_tral,5</span><br><span class="line"></span><br><span class="line">transparent,calling,set_trans 已经变为了词根模式</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="IK-分词器"><a href="#IK-分词器" class="headerlink" title="IK 分词器"></a>IK 分词器</h1><p>对中文分词的支持</p>
<p>要与 es 的版本对应</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">Releases · medcl&#x2F;elasticsearch-analysis-ik · GitHub</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span> <span class="comment">// 最细粒度的分词 ， ik_smart 最粗粒度的分词</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试单词&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>自定义词条</p>
</blockquote>
<p>ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config 目录，创建 custom.dic 文件，放入自定义词条。打开 IkAnalyzer.cfg.xml 文件，将新建的 custom.cfg 配置其中，重启 ES 服务器。</p>
<h1 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h1><p>一个分析器就是在一个包里面组合了三种函数的一个包装器，三种函数按照顺序被执行：</p>
<ul>
<li><p>字符过滤器</p>
<p>用来整理一个尚未被分词的字符串。例如，如果文本是 HTML 格式的，它会包含像 </p><p> 或者 <div> 这样的 HTML 标签，这些标签不是我们想索引的，可以使用  HTML 清除字符过滤器，来移除所有的 HTML 标签，一个分析器可能有 0 个或者多个字符过滤器。</div></p>
</li>
<li><p>分词器</p>
<p>一个分析器必须有一个唯一的分词器，分词器把字符串分解成单个词条或词汇单元，标准分析器里使用的标准分词器把一个字符串根据单词边界分解成单个词条，并且移除大部分的标点符号。</p>
</li>
<li><p>词单元过滤器</p>
<p>经过分词，作为结果的词单元流会按照指定的顺序通过指定的词单元过滤器。词单元过滤器可以修改、添加或者移除词单元。</p>
</li>
</ul>
<blockquote>
<p>创建自定义的分析器</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PUT localhost:9200/my_index</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;char_filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;&amp;_to_and&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mapping&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;&amp;=&gt;and&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;my_stopwords&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stop&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;stopwords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;the&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;a&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;char_filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;html_strip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;&amp;_to_and&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;lowercase&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;my_stopwords&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h1><h2 id="15、文档冲突"><a href="#15、文档冲突" class="headerlink" title="15、文档冲突"></a>15、文档冲突</h2><p>当使用 index API 更新文档，可以一次性读取原始文档，做我们的修改，然后重新索引整个文档，最近的请求索引将获胜：无论最后哪一个文档被索引，都将被唯一存储在 Elasticsearch 中，<font color="orange">如果其他人同时更改这个文档，他们的更改将丢失。</font> </p>
<ul>
<li><p>悲观并发控制</p>
<p>这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。一个典型的例子就是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</p>
</li>
<li><p>乐观并发控制</p>
<p>Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</p>
</li>
</ul>
<h2 id="16、外部系统版本控制"><a href="#16、外部系统版本控制" class="headerlink" title="16、外部系统版本控制"></a>16、外部系统版本控制</h2><p>一个常见的设置是使用其它数据库作为主要的数据存储，使用 Elasticsearch 做数据检索，这意味着主数据库的所有更改发生时都需要被复制到 Elasticsearch，如果多个进程负责这一数据同步，可以遇到并发问题。</p>
<p>如果主数据库有了版本号，或一个能作为版本号的字段比如 timestamp，那么可以在 Elasticsearch 中通过增加 version_type&#x3D;external 到查询字符串的方式重用这些相同的版本号，版本号必须是大于零的整数，且小于 9.2E+18 ——一个 java 中的 long 类型的正值。</p>
<h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><p>是一个免费且开放的用户界面，能够让你对 Elasticsearch 数据进行可视化，并让你在 Elastic Stack 中进行导航，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p>
<h1 id="Elasticsearch-集成"><a href="#Elasticsearch-集成" class="headerlink" title="Elasticsearch 集成"></a>Elasticsearch 集成</h1><h2 id="17、Spring-Data-框架集成"><a href="#17、Spring-Data-框架集成" class="headerlink" title="17、Spring Data 框架集成"></a>17、Spring Data 框架集成</h2><p>Spring Data 是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架，其主要目标是使得对数据的访问变得快捷，并支持 map-reduce 框架和云计算数据服务。</p>
<p><font color="orange">注意版本对应关系！！！ springboot、spring-boot-starter-data-elasticsearch、es 版本要对应</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="18、Spark-Streaming-框架集成"><a href="#18、Spark-Streaming-框架集成" class="headerlink" title="18、Spark Streaming 框架集成"></a>18、Spark Streaming 框架集成</h2><p>Spark Streaming 是 Spark core API 的扩展，支持实时数据流的处理，并且具有可扩展，高吞吐量，容错的特点。数据可以从许多来源获取，如 Kafka、Flume、Kinesis 或 TCP sockets，并且可以使用复杂的算法进行处理，这些算法的使用诸如 map、reduce、join 和 window 等高级函数表示。最后，处理后的数据可以推送到文件系统、数据库等。实际上可以将 Spark 的机器学习和图形处理算法应用于数据流。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.16.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.16.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="19、Flink-框架集成"><a href="#19、Flink-框架集成" class="headerlink" title="19、Flink 框架集成"></a>19、Flink 框架集成</h2><p>Apache Spark 是一种基于内存的快速、通用、可扩展的大数据分析计算引擎。</p>
<h1 id="Elasticsearch-优化"><a href="#Elasticsearch-优化" class="headerlink" title="Elasticsearch 优化"></a>Elasticsearch 优化</h1><h2 id="20、硬件"><a href="#20、硬件" class="headerlink" title="20、硬件"></a>20、硬件</h2><p>Elasticsearch 的基础是 Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES 的配置文件 ..&#x2F;config&#x2F;elasticsearch</p>
<p>磁盘能处理的吞吐量越大，节点越稳定</p>
<ul>
<li>使用 SSD</li>
<li>使用 RAID 0</li>
<li>使用多块硬盘，并允许 Elasticsearch 通过多个 path.data 目录配置把数据条带化分配到它们上面</li>
<li>不要使用远程挂载的存储，比如 NFS 或者 SMB&#x2F;CIFS</li>
</ul>
<h2 id="21、分片策略"><a href="#21、分片策略" class="headerlink" title="21、分片策略"></a>21、分片策略</h2><h3 id="21-1、合理设置分片数"><a href="#21-1、合理设置分片数" class="headerlink" title="21.1、合理设置分片数"></a>21.1、合理设置分片数</h3><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，是不能重新修改分片数的。</p>
<p>原则：</p>
<ul>
<li><p>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM 的堆空间设置（一般设置不超过 32G），因此索引的总容量在 500G 左右，那分片大小在 16 个即可。</p>
</li>
<li><p>考虑一下 node 的数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1 个以上的副本，同样有可能会导致数据丢失，集群无法恢复。所以，一般都设置分片数不超过节点数的 3 倍。</p>
</li>
<li><p>主分片，副本和节点最大数之间数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">节点数&lt;=主分片数 * （副本数 + 1）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="21-2、推迟分片分配"><a href="#21-2、推迟分片分配" class="headerlink" title="21.2、推迟分片分配"></a>21.2、推迟分片分配</h3><p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就减少了 ES 在自动再平衡可用分片时所带来的极大开销。</p>
<p>通过修改参数 delayed_timeout，可以延长再均衡时间，可以全局设置也可以在索引级别进行修改：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /_all/_settings</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index.unassigned.node_left.delayed_timeout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="22、路由选择"><a href="#22、路由选择" class="headerlink" title="22、路由选择"></a>22、路由选择</h2><p>当查询文档时，Elasticsearch 通过公式计算访问哪一个分片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shard = hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure>

<p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id</p>
<h3 id="22-1、不带-routing-查询"><a href="#22-1、不带-routing-查询" class="headerlink" title="22.1、不带 routing 查询"></a>22.1、不带 routing 查询</h3><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所有整个步骤分为 2 个步骤：</p>
<ul>
<li>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上</li>
<li>聚合：协调节点搜集到每个分片上的查询结果，在将查询结果进行排序后，给用户返回结果</li>
</ul>
<h3 id="22-2、带-routing-查询"><a href="#22-2、带-routing-查询" class="headerlink" title="22.2、带 routing 查询"></a>22.2、带 routing 查询</h3><p>查询的时候，可以直接根据 routing 信息定位到某个分配查询，不需要查询所有分配，经过协调节点排序</p>
<h2 id="23、写入速度优化"><a href="#23、写入速度优化" class="headerlink" title="23、写入速度优化"></a>23、写入速度优化</h2><p>对于搜索性能要求不高，但是对写入要求较高的场景，需要尽可能的选择恰当写优化策略</p>
<ul>
<li>加大 Translog Flush，目的是降低 Iops、Writeblock</li>
<li>增加 Index Refresh 间隔，目的是减少 Segment Merge 的次数</li>
<li>调整 Bulk 线程池和队列</li>
<li>优化节点间的任务分布</li>
<li>优化 Lucene 层的索引建立，目的是降低 CPU 及 IO</li>
</ul>
<h3 id="23-1、批量数据提交"><a href="#23-1、批量数据提交" class="headerlink" title="23.1、批量数据提交"></a>23.1、批量数据提交</h3><p>ES 提供了 Bulk API 支持批量操作，当我们有大量的写任务的时候，可以使用 Bulk 来进行批量写入</p>
<h3 id="23-2、优化存储设备"><a href="#23-2、优化存储设备" class="headerlink" title="23.2、优化存储设备"></a>23.2、优化存储设备</h3><p>ES 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较高，当磁盘速度提升后，集群的整体性能会大幅提高</p>
<h3 id="23-3、合理使用合并"><a href="#23-3、合理使用合并" class="headerlink" title="23.3、合理使用合并"></a>23.3、合理使用合并</h3><p>Lucene 以段的形式存储数据，当有新的数据写入索引时，Lucene 就会自动创建一个新的段</p>
<p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU 就越多，查询效率就会下降</p>
<h3 id="23-4、减少-refresh-的次数"><a href="#23-4、减少-refresh-的次数" class="headerlink" title="23.4、减少 refresh 的次数"></a>23.4、减少 refresh 的次数</h3><p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的 refresh_interval 为 1 秒</p>
<p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次 Refresh，然后 refresh 会把内存中的数据刷新到操作系统的文件缓存系统中</p>
<p>如果对搜索的时效性要求不高，可以将 refresh 周期延长，例如 30 秒</p>
<p>可以有效减少段刷新次数，但这同时意味着消耗更多的 Heap 内存</p>
<h3 id="23-5、加大-Flush-设置"><a href="#23-5、加大-Flush-设置" class="headerlink" title="23.5、加大 Flush 设置"></a>23.5、加大 Flush 设置</h3><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p>
<p>index.translog.flush_threshold_size 参数的默认值是 512MB</p>
<p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以需要为操作系统的文件缓存系统留下足够的空间</p>
<h3 id="23-6、减少副本的数量"><a href="#23-6、减少副本的数量" class="headerlink" title="23.6、减少副本的数量"></a>23.6、减少副本的数量</h3><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以 Replicas 的数量会严重影响写索引的效率。</p>
<p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢</p>
<p>如果需要进行大批量的写入操作，可以先禁止 Replica 复制，设置 index.number_of_replicas:0 关闭副本，在写入完成之后，Replica 修改回正常的状态</p>
<h1 id="内存设置"><a href="#内存设置" class="headerlink" title="内存设置"></a>内存设置</h1><p>默认为 1 g，ES 堆内存的分配原则</p>
<ul>
<li>不要超过物理内存的 50 %：Lucene 的设计目的是把底层 OS 的数据缓存到内存中。<br>Lucene 的段是分别存储到单个文件中的，这些文件是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问</li>
<li>堆内存的大小最好不要超过 32 G：在 java 中，所有对象都分配在堆上，然后有一个 Klass pointer 指针指向它的类元数据</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>搜索引擎</tag>
        <tag>倒排索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron入门</title>
    <url>/2022/09/23/Electron%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><font style="color:#00d0d9;font-size:30px">Electron开发</font></p>
<h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><ul>
<li>Chromium：支持最新特性的浏览器</li>
<li>Node.js：JavaScript 运行时，可实现文件读写等</li>
<li>Native APIs：提供统一的原生界面能力</li>
</ul>
<span id="more"></span>

<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><h2 id="1、主进程"><a href="#1、主进程" class="headerlink" title="1、主进程"></a>1、主进程</h2><ul>
<li>可以看作是 package.json 中 main 属性对应的文件</li>
<li>一个应用只会有一个主进程</li>
<li>只有主进程可以进行 GUI 的 API 操作</li>
</ul>
<h2 id="2、渲染进程"><a href="#2、渲染进程" class="headerlink" title="2、渲染进程"></a>2、渲染进程</h2><ul>
<li>Windows 中展示的界面通过渲染进程表现</li>
<li>一个应用可以有多个渲染进程</li>
</ul>
<h1 id="Electron-生命周期"><a href="#Electron-生命周期" class="headerlink" title="Electron 生命周期"></a>Electron 生命周期</h1><h2 id="3、生命周期事件"><a href="#3、生命周期事件" class="headerlink" title="3、生命周期事件"></a>3、生命周期事件</h2><ul>
<li>ready：app 初始化完成</li>
<li>dom-ready：一个窗口中的文本加载完成</li>
<li>did-finsh-load：导航完成时触发</li>
<li>window-all-closed：所有窗口都被关闭时触发</li>
<li>before-quit：在关闭窗口之前触发</li>
<li>will-quit：在窗口关闭并且应用退出时触发</li>
<li>quit：所有窗口被关闭时触发</li>
<li>closed：当窗口被关闭时触发，此时应删除窗口引用</li>
</ul>
<h1 id="主进程与渲染进程通信"><a href="#主进程与渲染进程通信" class="headerlink" title="主进程与渲染进程通信"></a>主进程与渲染进程通信</h1><h2 id="4、异步通信"><a href="#4、异步通信" class="headerlink" title="4、异步通信"></a>4、异步通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;当前是来自渲染进程的一条异步消息&#x27;</span>)</span><br><span class="line"> <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;mtp&#x27;</span>,<span class="string">&#x27;来自主进程菜单的消息&#x27;</span>)</span><br><span class="line"> <span class="comment">// 渲染进程接收消息</span></span><br><span class="line"> ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;msg1&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">// 主进程接收消息操作</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    ev.<span class="property">sender</span>.<span class="title function_">send</span>(<span class="string">&#x27;msg1&#x27;</span>,<span class="string">&#x27;这是一条来自主进程的异步消息&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="5、同步通信"><a href="#5、同步通信" class="headerlink" title="5、同步通信"></a>5、同步通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> sendSync = ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;msgSync&#x27;</span>,<span class="string">&#x27;当前是来自渲染进程的一条同步消息&#x27;</span>);</span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;msgSync&#x27;</span>,<span class="function">(<span class="params">ev,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    ev.<span class="property">returnValue</span> = <span class="string">&#x27;来自主进程的同步消息&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="渲染进程之间通信"><a href="#渲染进程之间通信" class="headerlink" title="渲染进程之间通信"></a>渲染进程之间通信</h1><h2 id="6、通过主进程"><a href="#6、通过主进程" class="headerlink" title="6、通过主进程"></a>6、通过主进程</h2><p>通过 ipcRenderer 实现，以主进程作为中转</p>
<h2 id="7、localStorage"><a href="#7、localStorage" class="headerlink" title="7、localStorage"></a>7、localStorage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;renderCommunicate&#x27;</span>,<span class="string">&#x27;渲染进程通信&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> item = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;renderCommunicate&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h1 id="Dialog-模块"><a href="#Dialog-模块" class="headerlink" title="Dialog 模块"></a>Dialog 模块</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">remote.<span class="property">dialog</span>.<span class="title function_">showOpenDialog</span>(&#123;</span><br><span class="line">           <span class="attr">defaultPath</span>: __dirname,</span><br><span class="line">           <span class="attr">buttonLabel</span>: <span class="string">&#x27;请选择文件或文件夹&#x27;</span>,</span><br><span class="line">           <span class="attr">title</span>:<span class="string">&#x27;文件选择框&#x27;</span>,</span><br><span class="line">           <span class="comment">// properties:[&#x27;openFile&#x27;,&#x27;openDirectory&#x27;],</span></span><br><span class="line">           <span class="attr">properties</span>:[<span class="string">&#x27;openFile&#x27;</span>,<span class="string">&#x27;multiSelections&#x27;</span>],</span><br><span class="line">           <span class="attr">filters</span>:[&#123;</span><br><span class="line">               <span class="attr">name</span>:<span class="string">&#x27;代码文件&#x27;</span>,<span class="attr">extensions</span>:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;json&#x27;</span>,<span class="string">&#x27;html&#x27;</span>]</span><br><span class="line">           &#125;]</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">ret</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span><br><span class="line">       &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>



<h1 id="shell-与-iframe"><a href="#shell-与-iframe" class="headerlink" title="shell 与 iframe"></a>shell 与 iframe</h1><h2 id="8、shell"><a href="#8、shell" class="headerlink" title="8、shell"></a>8、shell</h2><p>打开目录或者 url</p>
<h2 id="9、iframe"><a href="#9、iframe" class="headerlink" title="9、iframe"></a>9、iframe</h2><p>替代 <webview></webview></p>
<h1 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;消息通知&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&#x27;此为一条消息通知，往周知&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;./msg.png&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> notification = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">Notification</span>(option.<span class="property">title</span>, option)</span><br><span class="line">        notification.<span class="property">onclick</span> = <span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(ev)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h1 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 注册快捷键</span></span><br><span class="line">   <span class="keyword">let</span> register = globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;ctrl + q&#x27;</span>,<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(ev)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ctrl + q 快捷键注册成功&#x27;</span>)</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="comment">// 取消快捷键的注册</span></span><br><span class="line">globalShortcut.<span class="title function_">unregister</span>(<span class="string">&#x27;ctrl + q&#x27;</span>)</span><br><span class="line">globalShortcut.<span class="title function_">unregisterAll</span>()</span><br></pre></td></tr></table></figure>



<h1 id="剪切板模块"><a href="#剪切板模块" class="headerlink" title="剪切板模块"></a>剪切板模块</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;clipboard&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">clipboard.<span class="title function_">writeText</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> text = clipboard.<span class="title function_">readText</span>();</span><br></pre></td></tr></table></figure>



<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">readFile</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFile</span>(path, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">writeFile</span> = (<span class="params">path, content</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">writeFile</span>(path, content, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">renameFile</span> = (<span class="params">path,newPath</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">rename</span>(path,newPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">deleteFile</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">unlink</span>(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h1><h2 id="10、electron-store"><a href="#10、electron-store" class="headerlink" title="10、electron-store"></a>10、electron-store</h2><p>如果在渲染进程中使用，需要执行 Store.initRenderer()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Store</span> = <span class="built_in">require</span>(<span class="string">&#x27;electron-store&#x27;</span>)</span><br><span class="line"><span class="comment">// 渲染进程使用需要初始化</span></span><br><span class="line"><span class="title class_">Store</span>.<span class="title function_">initRenderer</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>()</span><br><span class="line">store.<span class="title function_">set</span>(key,value)</span><br><span class="line">l</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webGIS</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>桌面开发</tag>
      </tags>
  </entry>
  <entry>
    <title>ENVI操作笔记</title>
    <url>/2022/09/23/ENVI%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ENVI笔记"><a href="#ENVI笔记" class="headerlink" title="ENVI笔记"></a>ENVI笔记</h1><h2 id="1、遥感图像预处理"><a href="#1、遥感图像预处理" class="headerlink" title="1、遥感图像预处理"></a>1、遥感图像预处理</h2><h2 id="2、图像几何校正-Geometric-Correction"><a href="#2、图像几何校正-Geometric-Correction" class="headerlink" title="2、图像几何校正(Geometric Correction)"></a>2、图像几何校正(Geometric Correction)</h2><p>消除非系统性的几何变形(由地球曲率及空气折射的变化以及地形的变化)</p>
<span id="more"></span>

<h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><ul>
<li>几何校正方法<ul>
<li>利用卫星自带地理定位文件进行几何校正</li>
<li>Image to Image 几何校正</li>
<li>Image to Map 几何校正</li>
<li>Image to Image 自动配准</li>
<li>Image Registration Workflow 流程化工具</li>
</ul>
</li>
<li>控制点选择方式</li>
<li>控制点的预测和误差计算</li>
<li>几何校正计算模型<ul>
<li>仿射变换(RST)</li>
<li>多项式模型(Polynomial)</li>
<li>局部三角网(Taiangulation)</li>
</ul>
</li>
<li>重采样方法<ul>
<li>最近邻点法(Nearest Neighbor)</li>
<li>双线性内插法(Bilinear)</li>
<li>三次卷积内插法(Cubic Convolution)</li>
</ul>
</li>
</ul>
<h3 id="2-2、基于自带定位信息几何校正"><a href="#2-2、基于自带定位信息几何校正" class="headerlink" title="2.2、基于自带定位信息几何校正"></a>2.2、基于自带定位信息几何校正</h3><p>​	选择工具 Geometric Correction&#x2F;Georeference by Sensor&#x2F;Georeference MODIS 工具</p>
<h3 id="2-3、基于GLT的FY-3气象卫星几何校正"><a href="#2-3、基于GLT的FY-3气象卫星几何校正" class="headerlink" title="2.3、基于GLT的FY-3气象卫星几何校正"></a>2.3、基于GLT的FY-3气象卫星几何校正</h3><ul>
<li><p>利用输入的几何文件生成一个地理位置查找表(geographic lookup table, GLT)文件</p>
</li>
<li><p>生成GLT文件 选择工具 Geometric Correction&#x2F;Build GLT 工具</p>
</li>
<li><p>利用GLT文件几何校正图像 选择工具 Geometric Correction&#x2F;Georeference from GLT 工具</p>
</li>
</ul>
<h3 id="2-4、Image-to-Image-几何校正"><a href="#2-4、Image-to-Image-几何校正" class="headerlink" title="2.4、Image to Image 几何校正"></a>2.4、Image to Image 几何校正</h3><ul>
<li><p>具有地理参考</p>
</li>
<li><p>流程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[显示图像文件] --&gt;B(采集地面控制点)</span><br><span class="line"></span><br><span class="line">    B --&gt; C&#123;计算误差&#125;</span><br><span class="line"></span><br><span class="line">    C --&gt;|误差太大| B</span><br><span class="line"></span><br><span class="line">    C --&gt;E[计算几何模型]</span><br><span class="line">	</span><br><span class="line">	E --&gt;F[重采样输出]</span><br><span class="line">	</span><br><span class="line">	F --&gt;G[检验校正结果]</span><br><span class="line">	</span><br><span class="line">	G --&gt;H[结束]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 ENVI Classic中进行，选择 Map-&gt;Registration-&gt;Select GCPs: Image to Image 工具</p>
</li>
</ul>
<p>Image to Map 几何校正</p>
<ul>
<li><p>采集控制点的方式更加灵活  </p>
</li>
<li><p>选择 Geometric Correction&#x2F;Registration&#x2F;Registration: Image to Map 工具</p>
</li>
</ul>
<h3 id="2-5、Image-to-Image-图像自动配准"><a href="#2-5、Image-to-Image-图像自动配准" class="headerlink" title="2.5、Image to Image 图像自动配准"></a>2.5、Image to Image 图像自动配准</h3><ul>
<li>由于几何校正误差的原因，同一地区的图像或者相邻地区的重叠区域的相同地物不能重叠</li>
<li>选择 Geometric Correction&#x2F;Registration&#x2F;Registration: Image to Image 工具</li>
</ul>
<h3 id="2-6、Image-Registration-Workflow-流程化工具"><a href="#2-6、Image-Registration-Workflow-流程化工具" class="headerlink" title="2.6、Image Registration Workflow 流程化工具"></a>2.6、Image Registration Workflow 流程化工具</h3><ul>
<li><p>将繁杂的参数设置步骤集成到统一的面板中，将具有不同坐标系、不同地理位置的图像配置到同一坐标系下</p>
</li>
<li><p>选择 Geometric Correction&#x2F;Registration&#x2F;Image Registration Workflow 工具</p>
</li>
</ul>
<h2 id="3、图像增强"><a href="#3、图像增强" class="headerlink" title="3、图像增强"></a>3、图像增强</h2><h3 id="3-1、图像融合-Image-Sharpening"><a href="#3-1、图像融合-Image-Sharpening" class="headerlink" title="3.1、图像融合(Image Sharpening)"></a>3.1、图像融合(Image Sharpening)</h3><ol>
<li><p>定义</p>
<p>图像融合是将低空间分辨率的多光谱图像或高光谱数据与高空间分辨率的单波段图像重采样生成一幅高分辨率多光谱图像的遥感图像处理技术，使得处理后的图像既有较高的空间分辨率，又具有多光谱特征。</p>
</li>
<li><p>融合方法</p>
</li>
</ol>
<h4 id="3-1-1、Hsv变换"><a href="#3-1-1、Hsv变换" class="headerlink" title="3.1.1、Hsv变换"></a>3.1.1、Hsv变换</h4><ul>
<li>要求数据具有地理参考或者具有相同的尺寸大小，RGB输入波段数据类型必须为字节类型(Byte)</li>
<li>纹理改善，空间保持较好。光谱信息损失较大，受波段限制</li>
</ul>
<h4 id="3-1-2、Brovey变换"><a href="#3-1-2、Brovey变换" class="headerlink" title="3.1.2、Brovey变换"></a>3.1.2、Brovey变换</h4><ul>
<li>同HSV变换的数据要求</li>
<li>光谱信息保持较好，受波段限制</li>
</ul>
<h4 id="3-1-3、乘积运算-CN"><a href="#3-1-3、乘积运算-CN" class="headerlink" title="3.1.3、乘积运算(CN)"></a>3.1.3、乘积运算(CN)</h4><p>对大的地貌类型效果好，同时可用于多光谱与高光谱图像的融合</p>
<h4 id="3-1-4、主成分-PC-变换"><a href="#3-1-4、主成分-PC-变换" class="headerlink" title="3.1.4、主成分(PC)变换"></a>3.1.4、主成分(PC)变换</h4><p>无波段限制，光谱保持好。第一主成分信息高度集中，色调发生较大变化</p>
<h4 id="3-1-5、Gram-Schmidt-Pan-Sharpening-GS"><a href="#3-1-5、Gram-Schmidt-Pan-Sharpening-GS" class="headerlink" title="3.1.5、Gram - Schmidt Pan Sharpening(GS)"></a>3.1.5、Gram - Schmidt Pan Sharpening(GS)</h4><p>改进 PCA 中信息过分集中的问题，不受波段限制，较好的保持空间纹理信息，尤其能高保真保持光谱特征。专为最新高空间分辨率图像设计，能较好保持图像的纹理和光谱信息</p>
<h3 id="3-2、图像镶嵌-Mosaicking"><a href="#3-2、图像镶嵌-Mosaicking" class="headerlink" title="3.2、图像镶嵌(Mosaicking)"></a>3.2、图像镶嵌(Mosaicking)</h3><ol>
<li><p>定义</p>
<p>图像镶嵌是指在一定数学基础控制下，把多景相邻遥感图像拼接成一个大范围、无缝的图像的过程。</p>
</li>
<li><p>图像镶嵌</p>
<ul>
<li><p>接边线</p>
<p>相邻的两个重叠区内，按照一定规则选择一条线作为两个图的接边线。常选河流、道路等地物。 Seamless Mosaic 工具提供自动生成接边线功能，并能够进行手动编辑。</p>
</li>
<li><p>羽化</p>
<p>使镶嵌图像的接边线适当模糊</p>
<ul>
<li><p>边缘羽化</p>
<p>按指定的像素距离来对图像进行均衡化处理。</p>
</li>
<li><p>接边线羽化</p>
<p>在距接边线特定距离范围内，对图像进行均衡化处理。</p>
</li>
</ul>
</li>
<li><p>匀色</p>
<p>采用颜色平衡的办法，尽量避免由于镶嵌图像颜色不一致而影响镶嵌结果。</p>
</li>
</ul>
</li>
<li><p>工具</p>
<ul>
<li>无缝镶嵌工具(Seamless Mosaic)</li>
<li>基于像素的图像镶嵌(Pixel Based Mosaicking)</li>
</ul>
</li>
</ol>
<h3 id="3-3、图像裁剪-Subset"><a href="#3-3、图像裁剪-Subset" class="headerlink" title="3.3、图像裁剪(Subset)"></a>3.3、图像裁剪(Subset)</h3><ol>
<li><p>目的</p>
<p>将研究之外的区域去除</p>
</li>
<li><p>规则裁剪</p>
</li>
<li><p>不规则裁剪(Subset Data from ROIs)</p>
</li>
</ol>
<h3 id="3-4、图像增强-Filter"><a href="#3-4、图像增强-Filter" class="headerlink" title="3.4、图像增强(Filter)"></a>3.4、图像增强(Filter)</h3><p>​	提高图像的目视效果，方便人工目视解译、图像分类中样本的选取等。主要目的是增强图像，以便处理结果图像比原始图像更适合于特定的应用要求</p>
<h4 id="3-4-1、空间域增强处理"><a href="#3-4-1、空间域增强处理" class="headerlink" title="3.4.1、空间域增强处理"></a>3.4.1、空间域增强处理</h4><p>通过直接改变图像中的单个像元及相邻像元的灰度值来增强图像。如增强图像中的线状物体细部部分或者主干部分</p>
<h4 id="3-4-2、卷积滤波-Convolutions-and-Morphology"><a href="#3-4-2、卷积滤波-Convolutions-and-Morphology" class="headerlink" title="3.4.2、卷积滤波(Convolutions and Morphology)"></a>3.4.2、卷积滤波(Convolutions and Morphology)</h4><p>通过消除特定的空间频率来使图像增强。</p>
<p>滤波类型</p>
<ol>
<li>高通滤波器(High Pass)</li>
<li>低通滤波器(Low Pass)</li>
<li>拉普拉斯算子(Laplacian)</li>
<li>方向滤波器(Directional)</li>
<li>高斯高通滤波器(Gaussian High Pass)</li>
<li>高斯低通滤波器(Gaussian Low Pass)</li>
<li>中值滤波器(Median)</li>
<li>Sobel</li>
<li>Roberts</li>
<li>自定义卷积核(User Defined)</li>
</ol>
<h4 id="3-4-3、数学形态学滤波"><a href="#3-4-3、数学形态学滤波" class="headerlink" title="3.4.3、数学形态学滤波"></a>3.4.3、数学形态学滤波</h4><p>类型：</p>
<ol>
<li>膨胀(Dilate)</li>
<li>腐蚀(Erode)</li>
<li>开运算(Opening)</li>
<li>闭运算(Closing)</li>
</ol>
<h4 id="3-4-4、纹理分析"><a href="#3-4-4、纹理分析" class="headerlink" title="3.4.4、纹理分析"></a>3.4.4、纹理分析</h4><p>纹理滤波：</p>
<ol>
<li>基于概率统计的滤波(Occurrence meausres)</li>
<li>基于二阶概率统计的滤波(Co-occurrence measures)</li>
</ol>
<h3 id="3-5、辐射增强处理"><a href="#3-5、辐射增强处理" class="headerlink" title="3.5、辐射增强处理"></a>3.5、辐射增强处理</h3><p>对单个像元的灰度值进行变换处理来增强处理，如直方图匹配、直方图拉伸、去除条带噪声处理</p>
<h4 id="3-5-1、交互式直方图拉伸-Custom-Stretch"><a href="#3-5-1、交互式直方图拉伸-Custom-Stretch" class="headerlink" title="3.5.1、交互式直方图拉伸(Custom Stretch)"></a>3.5.1、交互式直方图拉伸(Custom Stretch)</h4><ol>
<li>Linear(线性拉伸)</li>
<li>Equalization(直方图均衡化拉伸)</li>
<li>Gaussian(高斯拉伸)</li>
<li>Square Root(平方根拉伸)</li>
<li>Logarithmic(对数拉伸)</li>
</ol>
<h4 id="3-5-2、坏道填补-Replace-Bad-Lines"><a href="#3-5-2、坏道填补-Replace-Bad-Lines" class="headerlink" title="3.5.2、坏道填补(Replace Bad Lines)"></a>3.5.2、坏道填补(Replace Bad Lines)</h4><p>图像数据中具有坏数据行，找出坏道用其它值填充</p>
<h4 id="3-5-3、去条带处理-Destripe-Data"><a href="#3-5-3、去条带处理-Destripe-Data" class="headerlink" title="3.5.3、去条带处理(Destripe Data)"></a>3.5.3、去条带处理(Destripe Data)</h4><p>消除图像数据中的周期性扫描行条带</p>
<h3 id="3-6、光谱增强处理"><a href="#3-6、光谱增强处理" class="headerlink" title="3.6、光谱增强处理"></a>3.6、光谱增强处理</h3><p>基于多光谱数据对波段进行变换达到图像增强处理</p>
<h4 id="3-6-1、波段比的计算-Band-Ratios"><a href="#3-6-1、波段比的计算-Band-Ratios" class="headerlink" title="3.6.1、波段比的计算(Band Ratios )"></a>3.6.1、波段比的计算(Band Ratios )</h4><p>增强波段间的波普差异，减少地形的影响,选择一个“分子”波段和一个“分母”波段相比</p>
<h4 id="3-6-2、主成分分析-PCA-PCA-Rotation"><a href="#3-6-2、主成分分析-PCA-PCA-Rotation" class="headerlink" title="3.6.2、主成分分析(PCA)(PCA Rotation)"></a>3.6.2、主成分分析(PCA)(PCA Rotation)</h4><p>去除波段之间的多余信息、将多波段的图像信息压缩到比原波段更有效的少数几个转换波段的方法</p>
<p>主成分正变换(Forward PCA Rotation New Statistics and Rotate)</p>
<p>主成分逆变换(Inverse PCA Rotation)</p>
<h4 id="3-6-3、独立主成分分析-ICA-ICA-Rotation"><a href="#3-6-3、独立主成分分析-ICA-ICA-Rotation" class="headerlink" title="3.6.3、独立主成分分析(ICA)(ICA Rotation)"></a>3.6.3、独立主成分分析(ICA)(ICA Rotation)</h4><p>将多光谱或者高光谱数据转换成相互独立的部分(去相关)，可以用来发现和分离图像中的噪声、降维、异常检测、分类和波谱端元提取以及数据融合</p>
<ol>
<li>独立主成分正变换(Forward ICA Rotation New Statistics and Rotate)</li>
<li>独立主成分逆变换(Inverse ICA Rotation)</li>
</ol>
<h4 id="3-6-4、色彩空间变换-Color-Transforms"><a href="#3-6-4、色彩空间变换-Color-Transforms" class="headerlink" title="3.6.4、色彩空间变换(Color Transforms)"></a>3.6.4、色彩空间变换(Color Transforms)</h4><p>将三波段红、绿、蓝(RGB)图像变换到一个特定的彩色空间，并且能从所选彩色空间变换回RGB</p>
<h4 id="3-6-5、色彩拉伸"><a href="#3-6-5、色彩拉伸" class="headerlink" title="3.6.5、色彩拉伸"></a>3.6.5、色彩拉伸</h4><ol>
<li><p>去相关拉伸(Decorrelation Stretch)</p>
<p>消除多光谱数据中各波段间的高度相关性，从而生成一幅色彩亮丽的彩色合成图像</p>
</li>
<li><p>Photographic拉伸</p>
<p>对真彩色输入图像进行增强，从而生成一幅与目视效果良好吻合的RGB图像</p>
</li>
<li><p>饱和度拉伸</p>
<p>对输入的波段进行彩色增强，生成具有较高颜色饱和度的波段</p>
</li>
</ol>
<h4 id="3-6-6、NDVI计算-NDVI"><a href="#3-6-6、NDVI计算-NDVI" class="headerlink" title="3.6.6、NDVI计算(NDVI)"></a>3.6.6、NDVI计算(NDVI)</h4><h4 id="3-6-7、缨帽变换-Tasseled-Cap"><a href="#3-6-7、缨帽变换-Tasseled-Cap" class="headerlink" title="3.6.7、缨帽变换(Tasseled Cap)"></a>3.6.7、缨帽变换(Tasseled Cap)</h4><h3 id="3-7、傅里叶变换"><a href="#3-7、傅里叶变换" class="headerlink" title="3.7、傅里叶变换"></a>3.7、傅里叶变换</h3><p>​	将图像从空间域转换到频率域,主要用于消除周期性噪声，和传感器异常引起的周期性错误</p>
<h4 id="3-7-1、快速傅里叶变换-FFT-FFT-Forward"><a href="#3-7-1、快速傅里叶变换-FFT-FFT-Forward" class="headerlink" title="3.7.1、快速傅里叶变换(FFT)(FFT(Forward))"></a>3.7.1、快速傅里叶变换(FFT)(FFT(Forward))</h4><h4 id="3-7-2、定义FFT滤波器-FFT-Filter-Definition"><a href="#3-7-2、定义FFT滤波器-FFT-Filter-Definition" class="headerlink" title="3.7.2、定义FFT滤波器(FFT Filter Definition)"></a>3.7.2、定义FFT滤波器(FFT Filter Definition)</h4><p>​	频率率的增强处理</p>
<h4 id="3-7-3、反向FFT变换-FFT-Inverse"><a href="#3-7-3、反向FFT变换-FFT-Inverse" class="headerlink" title="3.7.3、反向FFT变换(FFT(Inverse))"></a>3.7.3、反向FFT变换(FFT(Inverse))</h4><p>​	将FFT图像反变换回空间域数据</p>
<h3 id="3-8、波段组合图像增强"><a href="#3-8、波段组合图像增强" class="headerlink" title="3.8、波段组合图像增强"></a>3.8、波段组合图像增强</h3><h4 id="3-8-1、RGB合成显示"><a href="#3-8-1、RGB合成显示" class="headerlink" title="3.8.1、RGB合成显示"></a>3.8.1、RGB合成显示</h4><p>​	Load True Color 自然真彩色</p>
<p>​	Load CIR 标准假彩</p>
<p><img src="https://i.loli.net/2021/01/19/RGA1LHuSzN29bjU.jpg" alt="Landsat TM波段合成说明"></p>
<p><img src="https://i.loli.net/2021/01/19/WoiuU4CDtXGMlBd.jpg" alt="Landsat TM波段合成说明续表"></p>
<p><img src="https://i.loli.net/2021/01/19/IDH9muQe4SAhsvy.jpg" alt="OLI波段合成的简单说明"></p>
<h4 id="3-8-2、基于波段组合的假彩色合成"><a href="#3-8-2、基于波段组合的假彩色合成" class="headerlink" title="3.8.2、基于波段组合的假彩色合成"></a>3.8.2、基于波段组合的假彩色合成</h4><p>​	为了让特定地物与背景形成很大的反差，可以加入其它信息作为RGB中的分量，如植被指数、矿物指数</p>
<p><img src="https://i.loli.net/2021/01/19/9f3JsVt7vQeircP.jpg" alt="图像彩色增强"></p>
<h2 id="4、图像分类"><a href="#4、图像分类" class="headerlink" title="4、图像分类"></a>4、图像分类</h2><p>​	通过模式识别理论，分析图像中反映同类地物的光谱、空间相似性和异类地物的差异，进而将遥感图像自动分成若干地物类别。图像分类可包括基于像素分类和基于对象分类</p>
<h3 id="4-1、灰度分割-Raster-Color-Slices"><a href="#4-1、灰度分割-Raster-Color-Slices" class="headerlink" title="4.1、灰度分割(Raster Color Slices)"></a>4.1、灰度分割(Raster Color Slices)</h3><p>​	通常又称密度分割或彩色分割，应用于单波段灰度图像的分类方法，可用于如植被指数、地表温度、地形等数据的分类</p>
<h3 id="4-2、监督分类"><a href="#4-2、监督分类" class="headerlink" title="4.2、监督分类"></a>4.2、监督分类</h3><p>​	又称“训练分类法”，用被确认类别的样本像元去识别其他未知类别像元的过程。</p>
<ol>
<li><p>定义训练样本(ROI Tool)</p>
<p>评价训练样本(Compute ROI Separability)</p>
</li>
<li><p>执行监督分类(Supervised Classification)</p>
<ul>
<li>平行六面体(Parallelpiped)</li>
<li>最小距离(Minimum Distance)</li>
<li>马氏距离(Mahalanobis Distance)</li>
<li>最大似然(Likelihood Classification)</li>
<li>神经网络(Neural Net Classification)</li>
<li>支持向量机(Support Vector Machine Classification)</li>
</ul>
</li>
<li><p>评价分类结果(Post Classification)</p>
<ul>
<li><p>分类结果叠加</p>
</li>
<li><p>混淆矩阵(Confusion Matrices)</p>
<ul>
<li><p>地表真实图像(Generate Random Sample Using Ground Truth Image)</p>
<p>可以为每个分类计算误差掩膜图像，用于显示哪些像元被错误归类</p>
</li>
<li><p>地表真实感兴趣区(Confusion Matrix Using Ground Truth ROIs)</p>
</li>
</ul>
</li>
<li><p>ROC曲线</p>
<ul>
<li>使用地表真实图像(ROC Curves Using Ground Truth Image)</li>
<li>使用地表真实感兴趣区(ROC Curves Using Ground Truth ROIs)</li>
</ul>
</li>
</ul>
</li>
<li><p>分类后处理</p>
</li>
</ol>
<h3 id="4-3、非监督分类"><a href="#4-3、非监督分类" class="headerlink" title="4.3、非监督分类"></a>4.3、非监督分类</h3><p>​	也称“聚类分析”或“点群分类”。在多光谱图像中搜寻、定义其自然相似光谱集群的过程</p>
<h4 id="4-3-1、ISODATA-Iterative-Self-Orgnizing-Data-Analysize-Technique-IsoData-Classification"><a href="#4-3-1、ISODATA-Iterative-Self-Orgnizing-Data-Analysize-Technique-IsoData-Classification" class="headerlink" title="4.3.1、ISODATA(Iterative Self-Orgnizing Data Analysize Technique)(IsoData Classification)"></a>4.3.1、ISODATA(Iterative Self-Orgnizing Data Analysize Technique)(IsoData Classification)</h4><p>​	重复自组织数据分析技术，计算数据空间中均匀分布的类均值，然后用最小距离技术将剩余像元进行迭代聚合，每次迭代都重新计算均值，且根据所得的新均值，对像元进行再分类</p>
<h4 id="4-3-2、K-Mean-K-Means-Classification"><a href="#4-3-2、K-Mean-K-Means-Classification" class="headerlink" title="4.3.2、K-Mean(K-Means Classification)"></a>4.3.2、K-Mean(K-Means Classification)</h4><p>​	使用聚类分析方法，随机地查找聚类簇的聚类相似度相近，即中心位置，是利用各聚类中对象的均值所获得的一个“中心对象”(引力中心)来进行计算的，然后迭代地重新配置他们，完成分类过程</p>
<h4 id="4-3-3、非监督分类过程"><a href="#4-3-3、非监督分类过程" class="headerlink" title="4.3.3、非监督分类过程"></a>4.3.3、非监督分类过程</h4><pre><code>1. 执行非监督分类(Unsupervised Classification)
2. 类别定义(Edit ENVI Header)
3. 合并子类(Combine Classes)
4. 评价分类结果
</code></pre>
<h3 id="4-4、基于专家知识的决策树分类"><a href="#4-4、基于专家知识的决策树分类" class="headerlink" title="4.4、基于专家知识的决策树分类"></a>4.4、基于专家知识的决策树分类</h3><p>​	基于遥感图像数据和其他空间数据，通过专家经验总结、简单的数学统计和归纳方法等，获得分类规则并进行遥感分类</p>
<p>定义分类规则</p>
<p>规则表达式</p>
<h4 id="4-4-1、表：IDL数组操作函数和运算符"><a href="#4-4-1、表：IDL数组操作函数和运算符" class="headerlink" title="4.4.1、表：IDL数组操作函数和运算符"></a>4.4.1、表：IDL数组操作函数和运算符</h4><table>
<thead>
<tr>
<th>种类</th>
<th>操作函数</th>
</tr>
</thead>
<tbody><tr>
<td>基本运算</td>
<td>加（+）、减（-）、乘（*）、除（&#x2F;）</td>
</tr>
<tr>
<td>三角函数</td>
<td>正弦sin（x）、余弦cos（x）、正切tan（x）</td>
</tr>
<tr>
<td>反正弦asin（x）、反余弦acos（x）、反正切atan（x）</td>
<td></td>
</tr>
<tr>
<td>双曲正弦sinh（x）、双曲余弦cosh（x）、双曲正切tanh（x）</td>
<td></td>
</tr>
<tr>
<td>关系和逻辑运算符</td>
<td>小于（LT）、小于等于（LE）、等于（EQ）、不等于（NE）、大于等于（GE）、大于（GT）</td>
</tr>
<tr>
<td>AND、OR、NOT、XOR</td>
<td></td>
</tr>
<tr>
<td>最小值运算符（&lt;）和最大值运算符（&gt;）</td>
<td></td>
</tr>
<tr>
<td>其他数学函数</td>
<td>指数（^）和自然指数（exp(x)）</td>
</tr>
<tr>
<td>自然对数（alog（x））</td>
<td></td>
</tr>
<tr>
<td>以10为底的对数（alog10（x））</td>
<td></td>
</tr>
<tr>
<td>整型取整——round（x）、ceil（x）、和floor（x）</td>
<td></td>
</tr>
<tr>
<td>平方根（sqrt（x））</td>
<td></td>
</tr>
<tr>
<td>绝对值（abs（x））</td>
<td></td>
</tr>
</tbody></table>
<h4 id="4-4-2、表：运算符优先级"><a href="#4-4-2、表：运算符优先级" class="headerlink" title="4.4.2、表：运算符优先级"></a>4.4.2、表：运算符优先级</h4><table>
<thead>
<tr>
<th>优先级顺序</th>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>( )</td>
<td>用圆括号将表达式分开</td>
</tr>
<tr>
<td>2</td>
<td>^</td>
<td>指数</td>
</tr>
<tr>
<td>3</td>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>#和##</td>
<td>矩阵相乘</td>
<td></td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法</td>
<td></td>
</tr>
<tr>
<td>MOD</td>
<td>求模</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>最小值运算符</td>
<td></td>
</tr>
<tr>
<td>&gt;</td>
<td>最大值运算符</td>
<td></td>
</tr>
<tr>
<td>NOT</td>
<td>Boolean negation</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>EQ</td>
<td>等于</td>
</tr>
<tr>
<td>NE</td>
<td>不等于</td>
<td></td>
</tr>
<tr>
<td>LE</td>
<td>小于或等于</td>
<td></td>
</tr>
<tr>
<td>LT</td>
<td>小于</td>
<td></td>
</tr>
<tr>
<td>GE</td>
<td>大于或等于</td>
<td></td>
</tr>
<tr>
<td>GT</td>
<td>大于</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>AND</td>
<td>Boolean AND</td>
</tr>
<tr>
<td>OR</td>
<td>Boolean OR</td>
<td></td>
</tr>
<tr>
<td>XOR</td>
<td>Boolean exclusive OR</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>? :</td>
<td>条件表达式（在波段运算中很少使用）</td>
</tr>
</tbody></table>
<h4 id="4-4-3、表：特定变量"><a href="#4-4-3、表：特定变量" class="headerlink" title="4.4.3、表：特定变量"></a>4.4.3、表：特定变量</h4><table>
<thead>
<tr>
<th>变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>slope</td>
<td>计算坡度</td>
</tr>
<tr>
<td>aspect</td>
<td>计算坡向</td>
</tr>
<tr>
<td>ndvi</td>
<td>计算归一化植被指数</td>
</tr>
<tr>
<td>Tascap [n]</td>
<td>穗帽变换，n表示获取的是哪一分量。</td>
</tr>
<tr>
<td>pc [n]</td>
<td>主成分分析，n表示获取的是哪一分量。</td>
</tr>
<tr>
<td>lpc  [n]</td>
<td>局部主成分分析，n表示获取的是哪一分量。</td>
</tr>
<tr>
<td>mnf [n]</td>
<td>最小噪声变换，n表示获取的是哪一分量。</td>
</tr>
<tr>
<td>Lmnf[n]</td>
<td>局部最小噪声变换，n表示获取的是哪一分量。</td>
</tr>
<tr>
<td>Stdev  [n]</td>
<td>波段n的标准差</td>
</tr>
<tr>
<td>lStdev  [n]</td>
<td>波段n的局部标准差</td>
</tr>
<tr>
<td>Mean  [n]</td>
<td>波段n的平均值</td>
</tr>
<tr>
<td>lMean  [n]</td>
<td>波段n的局部平均值</td>
</tr>
<tr>
<td>Min [n]、max  [n]</td>
<td>波段n的最大、最小值</td>
</tr>
<tr>
<td>lMin [n]、lmax  [n]</td>
<td>波段n的局部最大、最小值</td>
</tr>
</tbody></table>
<h4 id="4-4-4、表：数据类型及说明"><a href="#4-4-4、表：数据类型及说明" class="headerlink" title="4.4.4、表：数据类型及说明"></a>4.4.4、表：数据类型及说明</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>转换函数</th>
<th>缩写</th>
<th>数据范围</th>
<th>Bytes&#x2F; Pixel</th>
</tr>
</thead>
<tbody><tr>
<td>8-bit字节型（Byte）</td>
<td>byte( )</td>
<td>B</td>
<td>0-255</td>
<td>1</td>
</tr>
<tr>
<td>16-bit整型（Integer）</td>
<td>fix( )</td>
<td></td>
<td>-32768-32767</td>
<td>2</td>
</tr>
<tr>
<td>16-bit无符号整型（Unsigned Int）</td>
<td>unit( )</td>
<td>U</td>
<td>0-65535</td>
<td>2</td>
</tr>
<tr>
<td>32-bit长整型（Long Integer）</td>
<td>long( )</td>
<td>L</td>
<td>大约+&#x2F;-20亿</td>
<td>4</td>
</tr>
<tr>
<td>32-bit无符号长整型（Unsigned Long）</td>
<td>ulong( )</td>
<td>UL</td>
<td>0-大约40亿</td>
<td>4</td>
</tr>
<tr>
<td>32-bit浮点型（Floating Point）</td>
<td>float( )</td>
<td>.</td>
<td>+&#x2F;-1e38</td>
<td>4</td>
</tr>
<tr>
<td>64-bit双精度浮点型（Double Precision）</td>
<td>double( )</td>
<td>D</td>
<td>+&#x2F;-1e308</td>
<td>8</td>
</tr>
<tr>
<td>64-bit整型（64-bit Integer）</td>
<td>long64( )</td>
<td>LL</td>
<td>大约+&#x2F;-9e18</td>
<td>8</td>
</tr>
<tr>
<td>无符号64-bit整型（Unsigned 64-bit）</td>
<td>ulong64( )</td>
<td>ULL</td>
<td>0-大约2e19</td>
<td>8</td>
</tr>
<tr>
<td>复数型（Complex）</td>
<td>complex( )</td>
<td></td>
<td>+&#x2F;-1e38</td>
<td>8</td>
</tr>
<tr>
<td>双精度复数型（Double Complex）</td>
<td>dcomplex( )</td>
<td></td>
<td>+&#x2F;-1e308</td>
<td>16</td>
</tr>
</tbody></table>
<p>创建决策树(New Decision Tree)</p>
<p>执行决策树</p>
<h3 id="4-5、分类后处理"><a href="#4-5、分类后处理" class="headerlink" title="4.5、分类后处理"></a>4.5、分类后处理</h3><ol>
<li><p>更改分类颜色(Edit ENVI Header)</p>
</li>
<li><p>Majority&#x2F;Minority分析(Majority&#x2F;Minority Analysis)</p>
<p>​	对小图斑进行剔除或重新分类</p>
</li>
<li><p>聚类处理(Clump Classes)</p>
<p>​	解决分类区域中斑点或洞的存在</p>
</li>
<li><p>过滤处理(Sieve Classes)</p>
<p>​	解决分类中出现的孤岛问题</p>
</li>
<li><p>分类统计(Class Statistics)</p>
<p>​	基于分类结果计算相关输入文件的统计信息</p>
</li>
<li><p>分类叠加(Overlay Classes)</p>
<p>​	将分类结果的各种类别叠加在一幅RGB彩色合成图或者灰度图像的背景图像上，从而生成一幅RGB图像</p>
</li>
<li><p>分类结果转矢量(Classification to Vector)</p>
</li>
</ol>
<h3 id="4-6、流程化图像分类工具-Classification-Workflow"><a href="#4-6、流程化图像分类工具-Classification-Workflow" class="headerlink" title="4.6、流程化图像分类工具(Classification Workflow)"></a>4.6、流程化图像分类工具(Classification Workflow)</h3><p>​	将监督分类和非监督分类的操作集中到一个操作面板中，包括样本选择、图像分类、分类后处理、矢量&#x2F;栅格分	类结果输出</p>
<p>​	平滑(Enable Smoothing)</p>
<p>​		主要去除椒盐噪声</p>
<p>​	聚类(Enable Aggregation)</p>
<p>​		主要去除小区域“小碎块”</p>
<h2 id="5、制图"><a href="#5、制图" class="headerlink" title="5、制图"></a>5、制图</h2><h3 id="5-1、快速制图-New-QuickMap"><a href="#5-1、快速制图-New-QuickMap" class="headerlink" title="5.1、快速制图(New QuickMap)"></a>5.1、快速制图(New QuickMap)</h3><p>​	ENVI Classic中，在打开的display-&gt;file&gt;Quick Map</p>
<p>​	页面长和宽的计算公式:</p>
<p>​	WIdth &#x3D; 图像实际宽度&#x2F;比例尺 + 系数</p>
<p>​	Length &#x3D; 图像实际长度&#x2F;比例尺 + 系数</p>
<h2 id="6、正射校正"><a href="#6、正射校正" class="headerlink" title="6、正射校正"></a>6、正射校正</h2><p>​	是对图像空间和几何畸变进行校正生成多中心投影平面正射图像的处理过程，能消除系统因素和地形引起的几何畸变。</p>
<p>envi 支持正射校正的两种模型：</p>
<p>严格轨道模型(Pushbroom Sensor)</p>
<p>有理多项式系数(Rational Polynomial Coefficient，RPC)</p>
<h3 id="6-1、卫星图像的正射校正"><a href="#6-1、卫星图像的正射校正" class="headerlink" title="6.1、卫星图像的正射校正"></a>6.1、卫星图像的正射校正</h3><p>步骤：</p>
<ol>
<li><p>打开数据文件</p>
</li>
<li><p>选择传感器校正模型</p>
</li>
<li><p>选择控制点</p>
</li>
<li><p>计算控制点误差</p>
</li>
<li><p>设置输出参数</p>
<p>其中地面控制点为(x，y，z)，需要高程值</p>
</li>
</ol>
<p>在 ENVI Classic 中</p>
<h4 id="6-1-1、无控制点的正射校正-Orthorectify-QuickBird"><a href="#6-1-1、无控制点的正射校正-Orthorectify-QuickBird" class="headerlink" title="6.1.1、无控制点的正射校正(Orthorectify QuickBird)"></a>6.1.1、无控制点的正射校正(Orthorectify QuickBird)</h4><p>主要依靠RPC文件和DEM数据定位和几何纠正图像，校正精度取决于所提供的RPC文件的定位精度和DEM分辨率</p>
<h4 id="6-1-2、有控制点的正射校正-Orthorectify-QuickBird-With-Ground-Control"><a href="#6-1-2、有控制点的正射校正-Orthorectify-QuickBird-With-Ground-Control" class="headerlink" title="6.1.2、有控制点的正射校正(Orthorectify QuickBird With Ground Control)"></a>6.1.2、有控制点的正射校正(Orthorectify QuickBird With Ground Control)</h4><p>利用地面控制点参与正射校正可以提高校正精度</p>
<h4 id="6-1-3、正射校正流程化工具-RPC-Orthorectification-Workflow"><a href="#6-1-3、正射校正流程化工具-RPC-Orthorectification-Workflow" class="headerlink" title="6.1.3、正射校正流程化工具(RPC Orthorectification Workflow)"></a>6.1.3、正射校正流程化工具(RPC Orthorectification Workflow)</h4><p>在ENVI中，默认带有全球900m空间分辨率DEM数据(GMTED2010.jp2)</p>
<h3 id="6-2、自定义RPC正射校正"><a href="#6-2、自定义RPC正射校正" class="headerlink" title="6.2、自定义RPC正射校正"></a>6.2、自定义RPC正射校正</h3><p>航空图像(框幅式和数码像片)和丢失RPC参数卫星图像数据，可以根据相机参数、传感器参数、外方位元素和地面控制点构建严格的物理校正模型，从而实现正射校正</p>
<p>自定义RPC正射校正一般步骤如下：</p>
<ol>
<li>进行内定向(Interior Orientation；只针对航空像片而言)：内定向将建立相机参数和航空像片之间的关系</li>
<li>进行外定向(Exterior Orientation)：外定向将航空像片或者卫星像片上的地物点同实际已知的地面位置(地理坐标)和高程联系起来</li>
<li>使用数字高程模型(DEM)进行正射校正：这一步将对航空像片和卫星像片进行真正的正射校正。校正过程中将使用定向文件、卫星位置参数以及共线方程(Collinearity Equation)</li>
</ol>
<h4 id="6-2-1、建立RPCs"><a href="#6-2-1、建立RPCs" class="headerlink" title="6.2.1、建立RPCs"></a>6.2.1、建立RPCs</h4><h2 id="7、面向对象图像特征提取-ENVI-Feature-Extraction"><a href="#7、面向对象图像特征提取-ENVI-Feature-Extraction" class="headerlink" title="7、面向对象图像特征提取(ENVI Feature Extraction)"></a>7、面向对象图像特征提取(ENVI Feature Extraction)</h2><p>集合临近像元为对象用来识别感兴趣的光谱元素，充分利用高分辨率的全色和多光谱数据的空间、纹理和光谱信息来分割和分类，以高精度的分类结果或者矢量输出</p>
<p>可应用于：</p>
<ul>
<li><p>从影像中尤其是大幅影像中查找和提取特征</p>
</li>
<li><p>添加新的矢量层到地理数据库</p>
</li>
<li><p>输出用于分析的分类影像</p>
</li>
<li><p>替代手工数字化过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">subgraph ide1 [发现对象]</span><br><span class="line">A[合并分块] </span><br><span class="line">I[图像分割]</span><br><span class="line">end</span><br><span class="line">	A --&gt;B&#123;输出对象为矢量文件?&#125;</span><br><span class="line">	I --&gt;B</span><br><span class="line">	B --&gt; |否| E</span><br><span class="line">	B --&gt; |是| G</span><br><span class="line">	subgraph 特征提取</span><br><span class="line">	subgraph ide2 [ ]</span><br><span class="line">	E[定义要素] --&gt;C[规则分类]</span><br><span class="line">	E --&gt;D[监督分类]</span><br><span class="line">	end</span><br><span class="line">	C --&gt;F[导出要素]</span><br><span class="line">	D --&gt;F</span><br><span class="line">	</span><br><span class="line">	F --&gt;G[查看报告和统计]</span><br><span class="line">	</span><br><span class="line">	G --&gt;H[完成]</span><br><span class="line">	end</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-1、基于规则的面向对象信息提取-Rule-Based-Feature-Extraction-Workflow"><a href="#7-1、基于规则的面向对象信息提取-Rule-Based-Feature-Extraction-Workflow" class="headerlink" title="7.1、基于规则的面向对象信息提取(Rule Based Feature Extraction Workflow)"></a>7.1、基于规则的面向对象信息提取(Rule Based Feature Extraction Workflow)</h3><ol>
<li><p>数据预处理</p>
<ul>
<li>空间分辨率的调整：数据分辨率高、覆盖范围大、提取特征地物面积大，可使用 Resize Data 降低空间分辨率</li>
<li>光谱分辨率的调整：高光谱数据将不用的光谱去掉，使用 Layer Stacking 工具</li>
<li>辅助数据与待处理数据组合成新的多波段数据文件，可提高信息提取精度，可使用 Layer Stacking 工具，或者直接在 ENVI FX 选择数据时切换到 Ancillary Data 选项卡，单击 Add Data 按钮添加多源数据</li>
<li>空间滤波：去除数据中的噪声</li>
</ul>
</li>
<li><p>发现对象(Rule Based FX)</p>
<p><img src="https://i.loli.net/2021/01/31/rEw2qUJTYIgxlLe.jpg" alt="Spatial属性描述"></p>
<p><img src="https://i.loli.net/2021/01/31/mkTewjJhCOMEq4g.jpg" alt="Spatial属性描述接上"></p>
</li>
</ol>
<h3 id="7-2、基于样本的面向对象信息提取-Example-Based-Feature-Extraction-Workflow"><a href="#7-2、基于样本的面向对象信息提取-Example-Based-Feature-Extraction-Workflow" class="headerlink" title="7.2、基于样本的面向对象信息提取(Example Based Feature Extraction Workflow)"></a>7.2、基于样本的面向对象信息提取(Example Based Feature Extraction Workflow)</h3><p>基于样本进行图像分类，即监督分类，是利用训练样本数据去识别其它未知对象，包括定义样本，分类方法选择和输出结果</p>
<p>面向对象监督分类的样本由对象组成，除了利用光谱信息外，还可以利用空间和纹理信息</p>
<h3 id="7-3、面向对象图像分隔-Segment-Only-Feature-Extraction-Workflow"><a href="#7-3、面向对象图像分隔-Segment-Only-Feature-Extraction-Workflow" class="headerlink" title="7.3、面向对象图像分隔(Segment Only Feature Extraction Workflow)"></a>7.3、面向对象图像分隔(Segment Only Feature Extraction Workflow)</h3><h3 id="7-4、Segmention-Image-工具"><a href="#7-4、Segmention-Image-工具" class="headerlink" title="7.4、Segmention Image 工具"></a>7.4、Segmention Image 工具</h3><p>可以将输入波段分割成许多连通区域或像元图斑(包含在同一类别或具有相似灰度特征)</p>
<p>输入数据必须为分类结果图像或者单波段图像</p>
<p>输出结果中每一个分割斑块具有唯一的 DN 值</p>
<h2 id="8、地形分析与可视化"><a href="#8、地形分析与可视化" class="headerlink" title="8、地形分析与可视化"></a>8、地形分析与可视化</h2><h3 id="8-1、立体像对DEM自动提取"><a href="#8-1、立体像对DEM自动提取" class="headerlink" title="8.1、立体像对DEM自动提取"></a>8.1、立体像对DEM自动提取</h3><h4 id="8-1-1、DEM-Extraction-模块"><a href="#8-1-1、DEM-Extraction-模块" class="headerlink" title="8.1.1、DEM Extraction 模块"></a>8.1.1、DEM Extraction 模块</h4><p>能够简单、快速地从多种数据源创建 DEM，要求立体图像包含 RPC 文件，RPC 文件用来产生 tie 点和计算立体图像之间的关系</p>
<p>DEM 自动提取向导(DEM Extraction Wizard)</p>
<p>DEM 编辑工具(Edit DEM Result)</p>
<p>立体 3D 量测工具(Stereo 3D Measurement)：从立体像对中量测一个点的高程信息</p>
<p>核线图像 3D 光标工具(Epipolar 3D Cursor)：在 3D 立体视图环境中，基于已存在的核线立体相对图像进行 3D 量测</p>
<p>DEM Extraction 模块可以输出两种 DEM</p>
<p>绝对 DEM (包含地面高程点信息)</p>
<p>相对 DEM (不包含地面高程点信息)</p>
<h4 id="8-1-2、DEM-自动提取向导-DEM-Extraction-Wizard"><a href="#8-1-2、DEM-自动提取向导-DEM-Extraction-Wizard" class="headerlink" title="8.1.2、DEM 自动提取向导(DEM Extraction Wizard)"></a>8.1.2、DEM 自动提取向导(DEM Extraction Wizard)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[输入立体像对图像] --&gt;B[定义地面控制点]</span><br><span class="line">B --&gt;C[定义连接点]</span><br><span class="line">C --&gt;D[设定输出参数]</span><br><span class="line">D --&gt;E[输出DEM及检查结果]</span><br><span class="line">E --&gt;F[编辑DEM ]</span><br></pre></td></tr></table></figure>





<h3 id="8-2、插值生成-DEM"><a href="#8-2、插值生成-DEM" class="headerlink" title="8.2、插值生成 DEM"></a>8.2、插值生成 DEM</h3><h4 id="8-2-1、矢量等高线插值-DEM-Convert-Contours-to-DEM"><a href="#8-2-1、矢量等高线插值-DEM-Convert-Contours-to-DEM" class="headerlink" title="8.2.1、矢量等高线插值 DEM(Convert Contours to DEM)"></a>8.2.1、矢量等高线插值 DEM(Convert Contours to DEM)</h4><p>在矢量等高线的基础上，经过插值得到三维地表面是一种常见的 DEM 生成途径</p>
<p>ENVI 矢量格式数据(.evf)必须包含用于指定每个矢量等高线的高程的属性</p>
<h4 id="8-2-2、高程点文件插值-DEM-Rasterize-Point-Data"><a href="#8-2-2、高程点文件插值-DEM-Rasterize-Point-Data" class="headerlink" title="8.2.2、高程点文件插值 DEM(Rasterize Point Data)"></a>8.2.2、高程点文件插值 DEM(Rasterize Point Data)</h4><h3 id="8-3、地形模型计算和特征提取"><a href="#8-3、地形模型计算和特征提取" class="headerlink" title="8.3、地形模型计算和特征提取"></a>8.3、地形模型计算和特征提取</h3><h4 id="8-3-1、地形模型计算-Topographic-Modeling"><a href="#8-3-1、地形模型计算-Topographic-Modeling" class="headerlink" title="8.3.1、地形模型计算(Topographic Modeling)"></a>8.3.1、地形模型计算(Topographic Modeling)</h4><p>坡度(Slope)、坡向(Aspect)、阴影地貌图像(Shaded Relief)、剖面曲率(Profile Convexity)、水平曲率(Plan Convexity)、纵向曲率(Longitudnal Convexity)、横向曲率(Cross Sectional Convexity)、最小曲率(Minimum Curvature)、最大曲率(Maximum Curvation)以及均方根误差(RMS Error)</p>
<h4 id="8-3-2、地形特征提取-Topographic-Features"><a href="#8-3-2、地形特征提取-Topographic-Features" class="headerlink" title="8.3.2、地形特征提取(Topographic Features)"></a>8.3.2、地形特征提取(Topographic Features)</h4><p>山顶(Peak)、山脊(Ridge)、平原(Pass)、水平面(Plane)、山沟(Channel)、凹谷(Pit)</p>
<h4 id="8-3-3、可视域分析工具-Viewshed-Analysis-Workflow"><a href="#8-3-3、可视域分析工具-Viewshed-Analysis-Workflow" class="headerlink" title="8.3.3、可视域分析工具(Viewshed Analysis Workflow)"></a>8.3.3、可视域分析工具(Viewshed Analysis Workflow)</h4><h4 id="8-3-4、三维地形可视化-3D-SurfaceView"><a href="#8-3-4、三维地形可视化-3D-SurfaceView" class="headerlink" title="8.3.4、三维地形可视化(3D SurfaceView)"></a>8.3.4、三维地形可视化(3D SurfaceView)</h4><h2 id="9、遥感动态监测"><a href="#9、遥感动态监测" class="headerlink" title="9、遥感动态监测"></a>9、遥感动态监测</h2><h3 id="9-1、遥感动态监测技术"><a href="#9-1、遥感动态监测技术" class="headerlink" title="9.1、遥感动态监测技术"></a>9.1、遥感动态监测技术</h3><p>从不同时间或在不同条件获取同一地区的遥感图像中，识别和量化地表变化的类型、空间分布情况和变化量</p>
<p>地表变化信息可分为两种：</p>
<p>转化(conversion)(绝对变化)——土地从一种土地覆盖类型向另一种类型的转化，如草地变为农田</p>
<p>改变(modification)(相对变化)——某种土地覆盖类型内部条件(结构和功能)的变化，如森林由密变疏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[数据预处理] --&gt;B[变化信息监测]</span><br><span class="line">B --&gt;C[变化信息提取]</span><br></pre></td></tr></table></figure>

<div style="text-align:center;">遥感动态监测一般流程</div>

<ol>
<li><p>数据预处理</p>
<ul>
<li>图像选择</li>
<li>图像定标</li>
<li>图像重采样</li>
<li>大气校正</li>
<li>图像配准</li>
</ul>
</li>
<li><p>变化信息监测</p>
<ul>
<li><p>图像直接比较法</p>
<p>经过配准的两个时相遥感图像中像元值直接进行运算或变换处理，找出变化的区域</p>
<ul>
<li>图像差值&#x2F;比值法，将两个时相的遥感图像相减或相除</li>
<li>光谱曲线比较法，多光谱或高光谱数据通过对比两幅图像的波谱曲线变化就可以监测变化信息</li>
<li>光谱特征变异法，同一地物反映在某一时相图像上的信息与其反映在另外时相图像上的光谱信息是一一对应的根据发生变异的光谱特征确定变化信息</li>
<li>假彩色合成法，相同传感器对同一地点所获取的不同时相的图像在灰度上有较大的区别</li>
<li>波段替换法，在RGB假彩色合成中，G和B分量用前一时相的两个波段，用后一时相的一个波段图像组成R分量，红色区域即为变化区域</li>
</ul>
</li>
<li><p>分类后比较法</p>
<p>经过配准的两个时相遥感图像分别进行分类，然后比较分类结果得到变化检测信息</p>
</li>
<li><p>直接分类法</p>
<p>多时相主成分分析后分类法、多时相组合后分类法等</p>
</li>
</ul>
</li>
<li><p>变化信息提取</p>
<p>从图像上提取信息</p>
<ul>
<li><p>手工数字化法</p>
</li>
<li><p>图像自动分类</p>
</li>
<li><p>监督分类</p>
</li>
<li><p>非监督分类</p>
</li>
<li><p>基于专家知识的决策树分类</p>
</li>
<li><p>面向对象的特征提取法</p>
</li>
<li><p>灰度分割</p>
<p>可借助 图像几何校正工具、大气校正工具、波段运算工具、主成分分析、植被指数计算器和图像分类</p>
</li>
</ul>
</li>
</ol>
<h3 id="9-2、图像直接比较法工具"><a href="#9-2、图像直接比较法工具" class="headerlink" title="9.2、图像直接比较法工具"></a>9.2、图像直接比较法工具</h3><h4 id="9-2-1、Change-Detection-Difference-工具"><a href="#9-2-1、Change-Detection-Difference-工具" class="headerlink" title="9.2.1、Change Detection Difference 工具"></a>9.2.1、Change Detection Difference 工具</h4><p>适合获取地表相对变化信息</p>
<h4 id="9-2-2、Image-Change-Workflow-工具"><a href="#9-2-2、Image-Change-Workflow-工具" class="headerlink" title="9.2.2、Image Change Workflow 工具"></a>9.2.2、Image Change Workflow 工具</h4><p>适合获取地表的绝对变化信息</p>
<h3 id="9-3、分类后比较法工具"><a href="#9-3、分类后比较法工具" class="headerlink" title="9.3、分类后比较法工具"></a>9.3、分类后比较法工具</h3><h4 id="9-3-1、Change-Detection-Statistics-工具"><a href="#9-3-1、Change-Detection-Statistics-工具" class="headerlink" title="9.3.1、Change Detection Statistics 工具"></a>9.3.1、Change Detection Statistics 工具</h4><p>土地利用转移矩阵是不同时间段内同一区域内土地利用类型的相互转换关系，一般用二维表来表达，从二维表中可以快速查看各个地类间相互转化的具体情况</p>
<h4 id="9-3-2、Thematic-Change-Workflow-工具"><a href="#9-3-2、Thematic-Change-Workflow-工具" class="headerlink" title="9.3.2、Thematic Change Workflow 工具"></a>9.3.2、Thematic Change Workflow 工具</h4><p>可以从相同区域、不同时间的两幅分类结果图像中识别变化信息，可以应用于分析土地利用&#x2F;覆盖变化、森林砍伐、城市化、农业扩张和水体的变化</p>
<h2 id="10、辐射定标与大气校正"><a href="#10、辐射定标与大气校正" class="headerlink" title="10、辐射定标与大气校正"></a>10、辐射定标与大气校正</h2><p>辐射定标可以实现DN值与辐射亮度值、反射率值和温度值等物理量的转化</p>
<p>大气校正能减少或消除大气对遥感图像的影响，得到真实的地表反射信息</p>
<h3 id="10-1、辐射定标"><a href="#10-1、辐射定标" class="headerlink" title="10.1、辐射定标"></a>10.1、辐射定标</h3><p>将传感器记录的电压或数字量化值转换为绝对辐射亮度值(辐射率)的过程，或者转换为与地表(表观)反射率、表面(表观)温度的物理量有关的相对值的处理过程。</p>
<p>绝对定标：通过各种标准辐射源，建立辐射亮度值与数字量化值之间的定量关系</p>
<p>相对定标：确定场景中各像元值之间、各探测器之间、各波普段之间以及不同时间测得的辐射度量的相对值</p>
<h4 id="10-1-1、图像辐射定标-Radiometric-Calibration"><a href="#10-1-1、图像辐射定标-Radiometric-Calibration" class="headerlink" title="10.1.1、图像辐射定标(Radiometric Calibration)"></a>10.1.1、图像辐射定标(Radiometric Calibration)</h4><h4 id="10-1-2、热红外数据定标-Calibrate-TIMS"><a href="#10-1-2、热红外数据定标-Calibrate-TIMS" class="headerlink" title="10.1.2、热红外数据定标(Calibrate TIMS)"></a>10.1.2、热红外数据定标(Calibrate TIMS)</h4><p>输入的文件每行必须包含参考信息的60个字节</p>
<p><code>Emissivity Reference Channel</code> 和 <code>Emissivity Normalization</code> 方法可以得到发射率和温度</p>
<p><code>Emissivity Alpha Residuals</code> 方法只能获取发射率</p>
<h4 id="10-1-3、AVHRR-数据定标"><a href="#10-1-3、AVHRR-数据定标" class="headerlink" title="10.1.3、AVHRR 数据定标"></a>10.1.3、AVHRR 数据定标</h4><p>在地理坐标定位之前先进行辐射定标和海面温度计算</p>
<h5 id="10-1-3-1、辐射定标-Calibrate-AVHRR"><a href="#10-1-3-1、辐射定标-Calibrate-AVHRR" class="headerlink" title="10.1.3.1、辐射定标(Calibrate AVHRR)"></a>10.1.3.1、辐射定标(Calibrate AVHRR)</h5><h5 id="10-1-3-2、海面温度-SST-计算-Compute-Sea-Surface-Temperature"><a href="#10-1-3-2、海面温度-SST-计算-Compute-Sea-Surface-Temperature" class="headerlink" title="10.1.3.2、海面温度(SST)计算(Compute Sea Surface Temperature)"></a>10.1.3.2、海面温度(SST)计算(Compute Sea Surface Temperature)</h5><h3 id="10-2、大气校正"><a href="#10-2、大气校正" class="headerlink" title="10.2、大气校正"></a>10.2、大气校正</h3><p>目的是消除大气和光照等因素对地物反射的影响，获得地物反射率、辐射率、地表温度等真实物理模型参数，用来消除大气中水蒸气、氧气、二氧化碳、甲烷、和臭氧等对地物反射的影响，消除大气分子和气溶胶散射的影响。大多数情况下，大气校正同时也是反演地物真实反射率的过程</p>
<p>绝对大气校正：将遥感图像的 DN 值转换为地表反射率、地表辐射率和地表温度等的方法</p>
<p>相对大气校正：校正后得到的图像上相同的 DN 值表示相同的地物反射率，其结果不考虑地物的实际反射率。</p>
<h4 id="10-2-1、简化黑暗像元法大气校正-Dark-Subtraction"><a href="#10-2-1、简化黑暗像元法大气校正-Dark-Subtraction" class="headerlink" title="10.2.1、简化黑暗像元法大气校正(Dark Subtraction)"></a>10.2.1、简化黑暗像元法大气校正(Dark Subtraction)</h4><p>将其它像元减去黑暗像元的像元值，就能减少大气(主要是大气散射)对整幅图像的影响，达到大气校正的目的。关键是寻找黑暗像元以及黑暗像元增加的像元值。</p>
<h4 id="10-2-2、基于统计学模型的反射率反演"><a href="#10-2-2、基于统计学模型的反射率反演" class="headerlink" title="10.2.2、基于统计学模型的反射率反演"></a>10.2.2、基于统计学模型的反射率反演</h4><h5 id="10-2-2-1、平场域法-Flat-Field-Calibration"><a href="#10-2-2-1、平场域法-Flat-Field-Calibration" class="headerlink" title="10.2.2.1、平场域法(Flat Field Calibration)"></a>10.2.2.1、平场域法(Flat Field Calibration)</h5><p>将每个像元的 DN 值除以选择区域的平均光谱值得到相对反射率</p>
<h5 id="10-2-2-2、对数残差法-Log-Resiiduals-Calibration"><a href="#10-2-2-2、对数残差法-Log-Resiiduals-Calibration" class="headerlink" title="10.2.2.2、对数残差法(Log Resiiduals Calibration)"></a>10.2.2.2、对数残差法(Log Resiiduals Calibration)</h5><p>将数据除以波段几何均值，再除以像元几何均值</p>
<h5 id="10-2-2-3、内部平均法-IAR-Reflectance-Calibration"><a href="#10-2-2-3、内部平均法-IAR-Reflectance-Calibration" class="headerlink" title="10.2.2.3、内部平均法(IAR Reflectance Calibration)"></a>10.2.2.3、内部平均法(IAR Reflectance Calibration)</h5><p>把图像的 DN 值与整幅图像的平均辐射光谱值相除</p>
<h5 id="10-2-2-4、经验线性法-Empirical-Line-Compute-Factors-Calibrate-Using-Existing-Factors"><a href="#10-2-2-4、经验线性法-Empirical-Line-Compute-Factors-Calibrate-Using-Existing-Factors" class="headerlink" title="10.2.2.4、经验线性法(Empirical Line Compute Factors)(Calibrate Using Existing Factors)"></a>10.2.2.4、经验线性法(Empirical Line Compute Factors)(Calibrate Using Existing Factors)</h5><p>利用两个已知点的地面反射光谱值，再计算图像上对应像元点的平均 DN 值，然后利用线性回归求出增益和偏移值，建立 DN 值与反射率之间的相互关系式，进行反射率的定标。</p>
<h4 id="10-2-3、不变目标法相对大气校正"><a href="#10-2-3、不变目标法相对大气校正" class="headerlink" title="10.2.3、不变目标法相对大气校正"></a>10.2.3、不变目标法相对大气校正</h4><p>相对大气校正按照数学基础可以分为两种：</p>
<p>非线性校正法：将校正图像的直方图与参考图像的直方图进行匹配，使两幅图像具有相同或相近的灰度值概率分布，达到两幅图像上同名地物具有相同灰度值的目的</p>
<p>线性校正法(Apply Gain and Offset&#x2F;Band Math)：根据两个时相光谱性质相对稳定地物样本点的 DN 值，利用线性回归的方法求得公式(y&#x3D;a * x + b)中的参数a，b；然后利用公式对图像的各波段 DN 值进行线性变换</p>
<h4 id="10-2-4、热红外大气校正"><a href="#10-2-4、热红外大气校正" class="headerlink" title="10.2.4、热红外大气校正"></a>10.2.4、热红外大气校正</h4><p>Thermal Atm Correction 工具可近似去除热红外辐射数据中的大气影响，进行大气校正前，必须将热红外数据定标为比辐射率数据(TIMS的热红外数据必须被转化为辐射亮度数据)，并且待校正数据波长为 8~14 μm</p>
<h3 id="10-3、大气校正模块-Atmospheric-Correction"><a href="#10-3、大气校正模块-Atmospheric-Correction" class="headerlink" title="10.3、大气校正模块(Atmospheric Correction)"></a>10.3、大气校正模块(Atmospheric Correction)</h3><h4 id="10-3-1、FLAASH-大气校正工具"><a href="#10-3-1、FLAASH-大气校正工具" class="headerlink" title="10.3.1、FLAASH 大气校正工具"></a>10.3.1、FLAASH 大气校正工具</h4><p>可以有效的去除水蒸气&#x2F;气溶胶散射的效应，同时基于像素级的校正，校正目标像元和临近像元交叉辐射的“临近效应”</p>
<p>对由于人为抑制而导致波谱噪声进行光谱平滑处理</p>
<h4 id="10-3-2、QUick-Atmospheric-Correction-QUAC"><a href="#10-3-2、QUick-Atmospheric-Correction-QUAC" class="headerlink" title="10.3.2、QUick Atmospheric Correction(QUAC)"></a>10.3.2、QUick Atmospheric Correction(QUAC)</h4><h2 id="11、高光谱与光谱分析技术"><a href="#11、高光谱与光谱分析技术" class="headerlink" title="11、高光谱与光谱分析技术"></a>11、高光谱与光谱分析技术</h2><p>高光谱分辨率遥感(hyperspectral remote sensing)是用很窄而连续的波谱通道对地物持续遥感成像的技术。高光谱遥感又通常被称为“成像波谱(imaging spectrometry)”</p>
<h3 id="11-1、地物波谱与波谱库"><a href="#11-1、地物波谱与波谱库" class="headerlink" title="11.1、地物波谱与波谱库"></a>11.1、地物波谱与波谱库</h3><p>一切地物，由于其种类和环境条件不同，反射和辐射电磁波的特征随波长而变化。</p>
<p>Display -&gt; Spectral Library Viewer 可以查看波谱库</p>
<h4 id="11-1-1、波谱库的创建-Spectral-Library-Builder"><a href="#11-1-1、波谱库的创建-Spectral-Library-Builder" class="headerlink" title="11.1.1、波谱库的创建(Spectral Library Builder)"></a>11.1.1、波谱库的创建(Spectral Library Builder)</h4><p>可以从 ASCLL 文件、由 ASD 波谱仪获取的波谱文件，标准波谱库、感兴趣均值、波谱剖面和曲线</p>
<h4 id="11-1-2、波谱重采样-Spectral-Library-Reasmpling"><a href="#11-1-2、波谱重采样-Spectral-Library-Reasmpling" class="headerlink" title="11.1.2、波谱重采样(Spectral Library Reasmpling)"></a>11.1.2、波谱重采样(Spectral Library Reasmpling)</h4><p>对波谱库进行重采样，使其与其它波谱或者波谱源相匹配</p>
<h4 id="11-1-3、图像波谱分割-Spectral-Slices"><a href="#11-1-3、图像波谱分割-Spectral-Slices" class="headerlink" title="11.1.3、图像波谱分割(Spectral Slices)"></a>11.1.3、图像波谱分割(Spectral Slices)</h4><p>可以从一幅多波段图像提取一个方向上的波谱剖面</p>
<h3 id="11-2、端元波谱提取技术"><a href="#11-2、端元波谱提取技术" class="headerlink" title="11.2、端元波谱提取技术"></a>11.2、端元波谱提取技术</h3><p>端元波谱作为高光谱分类、地物识别和混合像元分解等过程中的参考波谱，与监督分类中的分类样本有类似的作用，直接影响波谱识别和混合像元分解结果的精度</p>
<h4 id="11-2-1、最小噪声分离-Minimum-Noise-Fraction"><a href="#11-2-1、最小噪声分离-Minimum-Noise-Fraction" class="headerlink" title="11.2.1、最小噪声分离(Minimum Noise Fraction)"></a>11.2.1、最小噪声分离(Minimum Noise Fraction)</h4><h4 id="11-2-2、纯净像元指数-PPI"><a href="#11-2-2、纯净像元指数-PPI" class="headerlink" title="11.2.2、纯净像元指数(PPI)"></a>11.2.2、纯净像元指数(PPI)</h4><h4 id="11-2-3、n维可视化-n-D-Visualizer"><a href="#11-2-3、n维可视化-n-D-Visualizer" class="headerlink" title="11.2.3、n维可视化(n - D Visualizer)"></a>11.2.3、n维可视化(n - D Visualizer)</h4><h4 id="11-2-4、波谱分析工具-Spectral-Analyst"><a href="#11-2-4、波谱分析工具-Spectral-Analyst" class="headerlink" title="11.2.4、波谱分析工具(Spectral Analyst)"></a>11.2.4、波谱分析工具(Spectral Analyst)</h4><h4 id="11-2-5、基于几何顶点的端元提取"><a href="#11-2-5、基于几何顶点的端元提取" class="headerlink" title="11.2.5、基于几何顶点的端元提取"></a>11.2.5、基于几何顶点的端元提取</h4><h4 id="11-2-6、基于PPI的端元提取"><a href="#11-2-6、基于PPI的端元提取" class="headerlink" title="11.2.6、基于PPI的端元提取"></a>11.2.6、基于PPI的端元提取</h4><h4 id="11-2-7、基于-SMACC-的端元提取"><a href="#11-2-7、基于-SMACC-的端元提取" class="headerlink" title="11.2.7、基于 SMACC 的端元提取"></a>11.2.7、基于 SMACC 的端元提取</h4><h3 id="11-3、高光谱图像分类与分析技术"><a href="#11-3、高光谱图像分类与分析技术" class="headerlink" title="11.3、高光谱图像分类与分析技术"></a>11.3、高光谱图像分类与分析技术</h3><p>也称 “高光谱物质制图”(Mapping) 利用反映地物物理光学性质的波谱曲线来识别地物，即利用一种匹配方法，分析已知的波谱曲线(端元波谱)和高光谱图像每个像素波谱曲线(波谱剖面)匹配程度对图像进行分类</p>
<h4 id="11-3-1、波谱角填图-Spectral-Angle-Mapper"><a href="#11-3-1、波谱角填图-Spectral-Angle-Mapper" class="headerlink" title="11.3.1、波谱角填图(Spectral Angle Mapper)"></a>11.3.1、波谱角填图(Spectral Angle Mapper)</h4><p>该算法用于反射率数据时，对照度和反照率对结果的影响不明显，同样适用于辐射亮度值数据</p>
<h4 id="11-3-2、二进制编码-Binary-Encoding"><a href="#11-3-2、二进制编码-Binary-Encoding" class="headerlink" title="11.3.2、二进制编码(Binary Encoding)"></a>11.3.2、二进制编码(Binary Encoding)</h4><h4 id="11-3-3、波谱信息散度-Spectral-Information-Divergence"><a href="#11-3-3、波谱信息散度-Spectral-Information-Divergence" class="headerlink" title="11.3.3、波谱信息散度(Spectral Information Divergence)"></a>11.3.3、波谱信息散度(Spectral Information Divergence)</h4><h3 id="11-4、高级高光谱分析"><a href="#11-4、高级高光谱分析" class="headerlink" title="11.4、高级高光谱分析"></a>11.4、高级高光谱分析</h3><h4 id="11-4-1、最小二乘法拟合"><a href="#11-4-1、最小二乘法拟合" class="headerlink" title="11.4.1、最小二乘法拟合"></a>11.4.1、最小二乘法拟合</h4><h4 id="11-4-2、包络线去除"><a href="#11-4-2、包络线去除" class="headerlink" title="11.4.2、包络线去除"></a>11.4.2、包络线去除</h4><h4 id="11-4-3、线性波谱分离"><a href="#11-4-3、线性波谱分离" class="headerlink" title="11.4.3、线性波谱分离"></a>11.4.3、线性波谱分离</h4><h4 id="11-4-4、匹配滤波"><a href="#11-4-4、匹配滤波" class="headerlink" title="11.4.4、匹配滤波"></a>11.4.4、匹配滤波</h4><h4 id="11-4-5、混合调谐匹配滤波"><a href="#11-4-5、混合调谐匹配滤波" class="headerlink" title="11.4.5、混合调谐匹配滤波"></a>11.4.5、混合调谐匹配滤波</h4><h4 id="11-4-6、最小能量约束"><a href="#11-4-6、最小能量约束" class="headerlink" title="11.4.6、最小能量约束"></a>11.4.6、最小能量约束</h4><h4 id="11-4-7、自适应一致估计"><a href="#11-4-7、自适应一致估计" class="headerlink" title="11.4.7、自适应一致估计"></a>11.4.7、自适应一致估计</h4><h4 id="11-4-8、正交子空间投影"><a href="#11-4-8、正交子空间投影" class="headerlink" title="11.4.8、正交子空间投影"></a>11.4.8、正交子空间投影</h4><h4 id="11-4-9、波谱特征拟合"><a href="#11-4-9、波谱特征拟合" class="headerlink" title="11.4.9、波谱特征拟合"></a>11.4.9、波谱特征拟合</h4><h4 id="11-4-10、多范围波谱特征拟合"><a href="#11-4-10、多范围波谱特征拟合" class="headerlink" title="11.4.10、多范围波谱特征拟合"></a>11.4.10、多范围波谱特征拟合</h4><h3 id="11-5、地物识别与目标探测"><a href="#11-5、地物识别与目标探测" class="headerlink" title="11.5、地物识别与目标探测"></a>11.5、地物识别与目标探测</h3><p>从高光谱图像的每个像元均可以获取一条连续的波谱曲线，就可以考虑用已知的波谱曲线去识别图像中的地物，这也是高光谱遥感的最大优点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[图像文件] ==&gt;B[MNF变换]</span><br><span class="line">B ==&gt; C[数据维数判断]</span><br><span class="line">C ==&gt; D&#123;从图像提取端元波谱?&#125;</span><br><span class="line">D ==是==&gt; E[计算纯净像元指数]</span><br><span class="line">E ==&gt; F[N维可视化和端元选择]</span><br><span class="line">F ==&gt; G&#123;输入外部端元波谱?&#125;</span><br><span class="line">G ==否==&gt; H[波谱识别]</span><br><span class="line">H ==&gt; I[结果分析]</span><br><span class="line">I ==&gt; J[最终结果]</span><br><span class="line">D ==否==&gt;M[输入外部端元波谱]</span><br><span class="line">M ==&gt; N[端元波谱]</span><br><span class="line">N ==&gt; H</span><br><span class="line">G ==是==&gt;N</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="11-5-1、波谱沙漏工具-Spectral-Hourglass-Wizard"><a href="#11-5-1、波谱沙漏工具-Spectral-Hourglass-Wizard" class="headerlink" title="11.5.1、波谱沙漏工具(Spectral Hourglass Wizard)"></a>11.5.1、波谱沙漏工具(Spectral Hourglass Wizard)</h4><h4 id="11-5-2、去伪装目标探测-Target-Detection-Wizard"><a href="#11-5-2、去伪装目标探测-Target-Detection-Wizard" class="headerlink" title="11.5.2、去伪装目标探测(Target Detection Wizard)"></a>11.5.2、去伪装目标探测(Target Detection Wizard)</h4><p>利用高光谱图像的地物识别能力，从图像上探测遮掩或者伪装的目标</p>
<h3 id="11-6、植被分析"><a href="#11-6、植被分析" class="headerlink" title="11.6、植被分析"></a>11.6、植被分析</h3><p>​	植被可分为三个部分：植物叶片(plant foliage)、植被冠层(plant canopies)、和非光合作用植被(non-phptpsynthetic vegetation)</p>
<h4 id="11-6-1、植被指数"><a href="#11-6-1、植被指数" class="headerlink" title="11.6.1、植被指数"></a>11.6.1、植被指数</h4><p>​	两个或多个波长范围内的地物反射率的组合运算，以增强植被某一特性或者细节</p>
<h5 id="11-6-1-1、宽带绿度"><a href="#11-6-1-1、宽带绿度" class="headerlink" title="11.6.1.1、宽带绿度"></a>11.6.1.1、宽带绿度</h5><p>​	可以简单度量绿色植被的数量和生长状况，常用于植被物候发育的研究、土地利用和气候影响评估以及植被生产力建模等</p>
<p>归一化植被指数(NDVI)</p>
<p>​	增加在近红外波段范围绿叶的散射与红色波段范围叶绿素吸收的差异</p>
<p>比值植被指数(SR)</p>
<p>​	在近红外波段范围绿叶的散射与红色波段范围叶绿素吸收的比值</p>
<p>增强植被指数(EVI)</p>
<p>​	增强NDVI，解决土壤背景和大气气溶胶对茂密植被的影响</p>
<p>大地阻抗植被指数(ARVI)</p>
<p>​	增强NDVI，更好地解决大气散射的影响</p>
<p>绿波段总和指数(SG)</p>
<p>​	绿色波段范围的整体光散射</p>
<h5 id="11-6-1-2、窄带绿度"><a href="#11-6-1-2、窄带绿度" class="headerlink" title="11.6.1.2、窄带绿度"></a>11.6.1.2、窄带绿度</h5><p>​	窄带绿度指数(Narrowband Greenness Index)对叶绿素含量、叶片表面冠层、叶聚丛和冠层结构非常敏感。比宽度绿度指数更加灵敏，特别是对于茂密植被 </p>
<p>红边归一化植被指数(NDVI<sub>705</sub>)</p>
<p>​	可用于精细农业、森林监测和植被胁迫性探测</p>
<p>改进红边比值植被指数(mSR<sub>705</sub>)</p>
<p>​	可用于精细农业、森林监测和植被胁迫性探测</p>
<p>改进红边归一化植被指数(mNDVI<sub>705</sub>)</p>
<p>​	可用于精细农业、森林监测和植被胁迫性探测</p>
<p>Vogelmann红边指数1(VOG1)</p>
<p>​	植被物候变化研究、精细农业和植被生产力建模</p>
<p>Vogelmann红边指数2(VOG2)</p>
<p>​	植被物候变化研究、精细农业和植被生产力建模</p>
<p>Vogelmann红边指数3(VOG3)</p>
<p>​	植被物候变化研究、精细农业和植被生产力建模</p>
<p>红边位置指数(REP)</p>
<p>​	常用于农作物监测和估产、生态系统干扰探测、光合作用模型和由气候或其它因素产生的冠层胁迫性</p>
<h5 id="11-6-1-3、光利用指数"><a href="#11-6-1-3、光利用指数" class="headerlink" title="11.6.1.3、光利用指数"></a>11.6.1.3、光利用指数</h5><p>​	光利用指数(LIght Use Efficiency Index)用来度量植被在光合作用中对入射光的利用效率</p>
<p>光化学植被指数(PRI)</p>
<p>结构不敏感色素指数(SIPI)</p>
<p>红绿比值指数(RG)</p>
<h5 id="11-6-1-4、冠层氮"><a href="#11-6-1-4、冠层氮" class="headerlink" title="11.6.1.4、冠层氮"></a>11.6.1.4、冠层氮</h5><p>​	冠层氮指数(Canopy Nitrogen Index)提供一种用遥感度量氮浓度的方法</p>
<p>归一化氮指数(NDNI)用于估算植被冠层中氮的相对含量</p>
<h5 id="11-6-1-5、干旱或碳衰减"><a href="#11-6-1-5、干旱或碳衰减" class="headerlink" title="11.6.1.5、干旱或碳衰减"></a>11.6.1.5、干旱或碳衰减</h5><p>归一化木质素指数(NDLI)</p>
<p>纤维素吸收指数(CAI)</p>
<p>植被衰减指数(PSRI)</p>
<h5 id="11-6-1-6、叶绿素"><a href="#11-6-1-6、叶绿素" class="headerlink" title="11.6.1.6、叶绿素"></a>11.6.1.6、叶绿素</h5><p>​	叶绿素指数(Leaf Pigments Index)用于度量植被中与胁迫性相关的色素</p>
<p>类胡萝卜素反射指数1(CRI1)</p>
<p>类胡萝卜素反射指数1(CRI2)</p>
<p>花青素反射指数1</p>
<p>花青素反射指数2</p>
<h5 id="11-6-1-7、冠层含水量"><a href="#11-6-1-7、冠层含水量" class="headerlink" title="11.6.1.7、冠层含水量"></a>11.6.1.7、冠层含水量</h5><p>​	冠层含水量指数(Canopy Water Content Index)用于度量植被冠层中的含水量</p>
<p>水波段指数(WBI)</p>
<p>归一化水指数(NDWI)</p>
<p>水分胁迫指数(MSI)</p>
<p>归一化红外指数(NDII)</p>
<h4 id="11-6-2、植被指数计算器-Vegetation-Index-Calculator"><a href="#11-6-2、植被指数计算器-Vegetation-Index-Calculator" class="headerlink" title="11.6.2、植被指数计算器(Vegetation Index Calculator)"></a>11.6.2、植被指数计算器(Vegetation Index Calculator)</h4><p>ENVI提供植被指数计算器，它可以根据输入图像波段情况，自动从27种植被中选出能用于计算的植被指数，并提供生物物理学交叉检验功能，能够提高植被指数的计算精度。</p>
<h5 id="11-6-2-1、农作物胁迫分析-Agricultural-Stress-Vegetation-Analysis"><a href="#11-6-2-1、农作物胁迫分析-Agricultural-Stress-Vegetation-Analysis" class="headerlink" title="11.6.2.1、农作物胁迫分析(Agricultural Stress Vegetation Analysis)"></a>11.6.2.1、农作物胁迫分析(Agricultural Stress Vegetation Analysis)</h5><p>干旱或濒临死亡的农作物不能有效地利用氮和光能，表现为胁迫较高；而健康生长的作物表现为较低的胁迫</p>
<ul>
<li>绿度指数：标识闲置农田、虚弱的植被和健康的作物</li>
<li>光利用指数：标识植被生长率</li>
<li>冠层氮指数：用于估计相关的氮等级</li>
<li>叶绿素指数：突出植被胁迫</li>
<li>冠层含水量指数：标识水胁迫的层次</li>
</ul>
<h5 id="11-6-2-2、植被易燃性分布分析-Fire-Fuel-Vegetation-Analysis"><a href="#11-6-2-2、植被易燃性分布分析-Fire-Fuel-Vegetation-Analysis" class="headerlink" title="11.6.2.2、植被易燃性分布分析(Fire Fuel Vegetation Analysis)"></a>11.6.2.2、植被易燃性分布分析(Fire Fuel Vegetation Analysis)</h5><ul>
<li>绿度指数</li>
<li>冠层含水量指数</li>
<li>干旱或碳衰减指数</li>
</ul>
<h5 id="11-6-2-3、森林健康分析-Forest-Health-Vegetation-Analysis"><a href="#11-6-2-3、森林健康分析-Forest-Health-Vegetation-Analysis" class="headerlink" title="11.6.2.3、森林健康分析(Forest Health Vegetation Analysis)"></a>11.6.2.3、森林健康分析(Forest Health Vegetation Analysis)</h5><ul>
<li>绿度指数</li>
<li>叶绿素指数</li>
<li>冠层含水量指数</li>
<li>光利用指数</li>
</ul>
<h5 id="11-6-2-4、植被抑制工具-Vegetation-Suppression"><a href="#11-6-2-4、植被抑制工具-Vegetation-Suppression" class="headerlink" title="11.6.2.4、植被抑制工具(Vegetation Suppression)"></a>11.6.2.4、植被抑制工具(Vegetation Suppression)</h5><p>利用图像的红光波段和近红外波段，从多光谱和高光谱图像中移除或减少植被光谱信息，对图像进行植被变换。</p>
<h3 id="11-7、光谱分析与水体水色参数反演"><a href="#11-7、光谱分析与水体水色参数反演" class="headerlink" title="11.7、光谱分析与水体水色参数反演"></a>11.7、光谱分析与水体水色参数反演</h3><p>遥感反演是根据观测信息和模型，求解或推算描述地面实况的应用参数</p>
<h2 id="12、波段运算与波谱运算"><a href="#12、波段运算与波谱运算" class="headerlink" title="12、波段运算与波谱运算"></a>12、波段运算与波谱运算</h2><p>​	图像可以看做是一个矩阵，矩阵中的任一元素对应于图像中的一个点，而相应的值对应于该点的像素值，图像之间的运算就是矩阵运算。</p>
<p><code>Band Math</code> 可以自定义处理算法、自定义简单或复杂的处理程序</p>
<p>波段运算的实质是对每个像素点对应的像素值进行数学运算</p>
<p><code>Spectral Math</code></p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>ENVI</tag>
        <tag>遥感</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>GIS热点</title>
    <url>/2022/09/23/GIS%E7%83%AD%E7%82%B9/</url>
    <content><![CDATA[<h1 id="GIS热点"><a href="#GIS热点" class="headerlink" title="GIS热点"></a>GIS热点</h1><h2 id="1、什么是时空大数据存储？"><a href="#1、什么是时空大数据存储？" class="headerlink" title="1、什么是时空大数据存储？"></a>1、什么是时空大数据存储？</h2><p>ArcGIS Enterprise 提供的 ArcGIS Data Store，已经过改进，通过引入时空大数据存储的方式以处理观测数据。观察数据可以是移动对象、更改静态传感器的属性或两者皆可。时空大数据存储可启用高容量观测数据存储、维持高速写入吞吐量并可以在多台计算机上运行（结点）。添加额外的计算机以添加容量，可以存储更多数据、实施更长的数据保留策略并支持更高的数据写入吞吐量。</p>
<span id="more"></span>

<h2 id="2、时空大数据与云平台的产品构成"><a href="#2、时空大数据与云平台的产品构成" class="headerlink" title="2、时空大数据与云平台的产品构成"></a>2、<strong>时空大数据与云平台的产品构成</strong></h2><hr>
<h3 id="2-1、时空大数据中心"><a href="#2-1、时空大数据中心" class="headerlink" title="2.1、时空大数据中心"></a>2.1、时空大数据中心</h3><p>是时空大数据与云平台最重要的一个组件部分，它能够让我们在传统的GIS基础地理信息数据的基础之上引入更多的专题数据、业务数据以及物联网智能感知设备位置数据，包括实时感知的数据与摘要信息、互联网地图数据等等，基于统一的时间空间的基准一体化地存储与管理，经过处理、融合、分析、挖掘，得到更多有价值的信息，形成非常有价值的时空大数据中心。</p>
<h3 id="2-2、时空大数据管理"><a href="#2-2、时空大数据管理" class="headerlink" title="2.2、时空大数据管理"></a>2.2、时空大数据管理</h3><ul>
<li>一方面，对于传统的静态地理信息数据，通过增加时间维，得到具有时间序列的地理信息数据。</li>
<li>另一个方面，智能感知数据、实时的数据流的动态数据，则通过非关系型的数据库进行存储和管理，形成多级别、多专题、多尺度、多应用的时空大数据目录树。</li>
</ul>
<h3 id="2-3、时空大数据的挖掘"><a href="#2-3、时空大数据的挖掘" class="headerlink" title="2.3、时空大数据的挖掘"></a>2.3、时空大数据的挖掘</h3><ul>
<li>一方面，通过云计算和分布式整合，对多元数据进行整合分析，对于能够作出实时判断的信息作出显示。</li>
<li>另一方面，融合了更多空间数据分析、挖掘的算法，包括聚类、分类、特征提取等一些数据挖掘的算法，为针对各行业的大数据挖掘提供支撑。</li>
</ul>
<h3 id="2-4、时空云服务中心"><a href="#2-4、时空云服务中心" class="headerlink" title="2.4、时空云服务中心"></a>2.4、时空云服务中心</h3><p>时空云服务中心不是简单地把云服务堆积，而是做好服务的融合，形成一个真正有价值的云务中心。云服务中心通过弹性的架构管理以及动态的收缩，能够体现全空间一体化的服务，动态的时空数据的服务，以及个性化的服务。</p>
<ul>
<li><p>第一，时空一体化服务，这不仅仅体现在空间、地上、地表、地下、二三维一体化的服务，更重要的是深入到地下空间的三维服务。</p>
</li>
<li><p>第二，时态分析服务，也是基于在时间维和空间维的展现，对时间进行拉伸，可以展示轨迹，对空间进行扩展，可以看见某一个视域的状态的变化。第三，个性化服务，基于用户感兴趣的一些数据，可以作出热力图、密度图等，直观地展示数据的分布，帮助用户进行分析决策。</p>
</li>
<li><p>时空大数据与云平台第三个重要的组件部分就是时空云应用集成中心，这是中地对“生态圈”创新最好的实践。它是通过框架+插件式的松耦合的架构，对软件进行“池化”，可以支持应用扩展，做到协同框架和插件，插件和插件之间的协同与感知，通过相应的聚合，可以在云端注册与更新，实现应用的自由伸缩和可定制。通过应用的“聚合、漂移、重构”，可以实现应用的在线定制、在线部署以及在线运行，通过云门户可以实现个性化的定制需求。</p>
</li>
</ul>
<h2 id="3、物联网、云计算"><a href="#3、物联网、云计算" class="headerlink" title="3、物联网、云计算"></a>3、物联网、云计算</h2><p>本质:“互联网+”本质上是互联网、物联网、云计算等新兴信息技术在各行各业”全工作流”、”全产业链”、 “全价值链” 中的深度融合集成创新应用，使之成为现代制造业、生产性服务业发展的新动力。</p>
<h3 id="3-1、时空大数据"><a href="#3-1、时空大数据" class="headerlink" title="3.1、时空大数据"></a>3.1、时空大数据</h3><p><strong>时空大数据,指基于统一的时空基准(空间参照系统、时间参照系统)，活动(运动变化)于时间和空间中与位置直接(定位)或间接(空间分布)相关联的大数据。</strong></p>
<h3 id="3-2、时空大数据平台"><a href="#3-2、时空大数据平台" class="headerlink" title="3.2、时空大数据平台"></a>3.2、时空大数据平台</h3><p>当前，全球正在经历-场持久而深远的数据化(一切皆可“量化”) 革命，跨界、融合、开放、共享是大数据时代的核心特征。时空大数据平台，是把各种分散的(点数据)和分割的(条数据)大数据汇聚到一个特定的平台上(时空数据或地理框架数据平台)， 并使之发生持续的聚合效应。这种聚合效应就是通过<strong>数据多维融合和关联分析与数据挖掘</strong>,揭示事物的本质规律,对事物做出更加快捷、更加全面、更加精准和更加有效的研判和预测。从这个意义上讲,时空大数据平台是大数据的核心价值，是大数据发展的高级形态，是大数据时代的解决方案。</p>
<p>首要任务解决<strong>多源时空大数据的融合</strong></p>
<p>如何科学描述、表达和揭示<strong>不同类型、不同尺度、不同时间、不同语义和不同参考系统的时空大数据</strong>的复杂关系及其相互转换规律，从根本上解决多源异构时空大数据的融合，已成为”GIS”急待解决的科学技术问题。</p>
<h3 id="3-3、时空大数据的智能深加工方面"><a href="#3-3、时空大数据的智能深加工方面" class="headerlink" title="3.3、时空大数据的智能深加工方面"></a>3.3、时空大数据的智能深加工方面</h3><ul>
<li>时空大数据多尺度智能变换</li>
<li>时空大数据的统计分析挖掘与知识发现</li>
<li>时空大数据的可视化</li>
</ul>
<p>机器学习对GIS发展的推动作用</p>
<h3 id="3-4、总结"><a href="#3-4、总结" class="headerlink" title="3.4、总结"></a>3.4、总结</h3><hr>
<ol>
<li>“互联网+”与“大数据”(时空大数据)是国家发展战略，是新兴信息技术产业的重要领域，”GIS” ( GISystem、 GIService、 GIScience ) 具有科学、技术、工程和产业特性，要在“互联网+”时空大数据背景下，推动地理信息产业大发展。<strong>（国家发展战略、推动GIS发展）</strong></li>
<li>“互联网+”的本质是互联网、物联网、云计算等新兴信息技术与各行各业”全工作流”、”全产业链”和”全价值链”的深度融合集成应用。在”互联网+”架构上，实现时空数据与各部门、各行业大数据的共享、交换、聚合，形成时空大数据，是”智慧城市”、”智慧中国”、”智慧地球” 建设的重要目标和任务。<strong>（数据共享、交换）</strong></li>
<li>“大数据”技术的重要性不仅在掌握庞大的数据信息，而在于对这些含有知识的数据进行专业化处理，如果把”大数据”比做一种产业，那么这种产业实现盈利的关键，在于提高对数据的”深加工能力”，通过”深加工”实现数据的”增值”。<strong>（数据深加工）</strong></li>
<li>推动”互联网+”时空大数据与”GIS” 的进一步发展， 要进一步创新基础理论研究，突破一系列关键技术，从而支撑泛在测绘及包括基于位置服务(LBS )在内的”互联网+”时空大数据背景下新兴地理信息服务业的大发展<strong>（基础理论研究、推动LBS、GIS服务业发展）</strong></li>
</ol>
<h2 id="4、大数据GIS软件技术"><a href="#4、大数据GIS软件技术" class="headerlink" title="4、大数据GIS软件技术"></a>4、大数据GIS软件技术</h2><ul>
<li><p>空间大数据处理</p>
</li>
<li><p>空间大数据挖掘</p>
</li>
<li><p>经典空间数据管理和处理</p>
</li>
<li><p>传统GIS功能的分布式重构</p>
</li>
<li><p>云GIS技术</p>
<p>云GIS技术可以归纳为”4+2”，即4大服务器软件和2大关键技术。4大服务器软件包括基于微服务架构的GIS应用服务器(如iSever)、云GIS门户平台(如iPortal)、分布式加速的GIS分发服务器(如iExpress)、云GIS服务管理器(如iManager)；两大技术包括支持虚拟化，支持容器(Docker)技术和云端互联技术(无缝连接桌面、组件、移动、浏览器端)。</p>
</li>
<li><p>跨平台GIS技术</p>
<p>跨平台GIS技术是大数据GIS的另一个支撑技术。IT大数据相关的不少技术都原生于Linux，如Spark、HDFS和MongoDB等都产生于Linux社区，且Linux性能更高、稳定性更好。虽然Windows上也能部署一些大数据环境，但大多用于学习和研究，较少用于生产。因此，GIS基础软件最好能高性能运行于Linux操作系统。这就需要跨平台GIS技术的支撑。</p>
</li>
</ul>
<p>提供弹性的计算资源和服务以及支撑跨平台的访问和应用。大数据GIS软件技术和产品可以有效地降低大数据挖掘的技术门槛，降低空间大数据挖掘的成本。</p>
<h3 id="4-1、空间数据技术"><a href="#4-1、空间数据技术" class="headerlink" title="4.1、空间数据技术"></a>4.1、空间数据技术</h3><ul>
<li><p><strong>空间大数据的分布式存储技术</strong></p>
</li>
<li><p><strong>大数据的空间分析</strong></p>
<p>热点分析</p>
<p>密度分析</p>
<p>聚合分析</p>
</li>
<li><p><strong>流数据分析</strong></p>
<p>大数据的一个显著特点是数据像流水一样，顺序、快速、大量、持续到达，要用可以快速持续计算的工具来处理</p>
</li>
<li><p><strong>大数据空间可视化</strong></p>
<p>大数据时代还需要实现高性能的动态目标可视化</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>大数据GIS技术体系，包括空间大数据技术、传统GIS的分布式重构以及大数据GIS支撑技术。研究大数据GIS技术、研发大数据GIS基础软件至少具有两个方面的意义。<strong>一是降低挖掘大数据的技术门槛</strong>。能够挖掘空间大数据的单位目前多局限于少数企业和研究机构，如百度、高德、腾讯和其他一些研发实力很强的科研机构，更多单位还无法参与，因此需要研究这样的工具软件，将与空间大数据相关的通用算法和功能都封装出来，让更多单位可以参与<strong>大数据的价值挖掘</strong>。<strong>二是降低空间大数据挖掘的成本</strong>。在数据体量和价值密度乘积不变的情况下，成本越低，价值越大。大数据GIS基础软件可以让人们不用从IT大数据的基础层开始做大量二次开发，避免底层重复劳动，降低挖掘成本。</p>
<p>随着人工智能的升温，业界对空间大数据的热情正在消减，这反而是介入空间大数据和大数据GIS技术发展与应用的最佳时机。大数据GIS技术还会进一步发展与完善，相关应用也会越来越多，推动地理智慧更大的提升。</p>
</li>
</ul>
<h2 id="5、大数据"><a href="#5、大数据" class="headerlink" title="5、大数据"></a>5、大数据</h2><h3 id="5-1、大数据（big-data）"><a href="#5-1、大数据（big-data）" class="headerlink" title="5.1、大数据（big data）"></a>5.1、大数据（big data）</h3><p>是指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>
<h2 id="6、云计算"><a href="#6、云计算" class="headerlink" title="6、云计算"></a>6、云计算</h2><p>云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。云计算早期，简单地说，就是简单的分布式计算，解决任务分发，并进行计算结果的合并。因而，云计算又称为网格计算。通过这项技术，可以在很短的时间内（几秒钟）完成对数以万计的数据的处理，从而达到强大的网络服务。</p>
<p>现阶段所说的云服务已经不单单是一种分布式计算，而是分布式计算、效用计算、负载均衡、并行计算、网络存储、热备份冗杂和虚拟化等计算机技术混合演进并跃升的结果。</p>
<h3 id="6-1、特点"><a href="#6-1、特点" class="headerlink" title="6.1、特点"></a>6.1、特点</h3><p>1、虚拟化技术。</p>
<p>​	虚拟化突破了时间、空间的界限，是云计算最为显著的特点</p>
<p>2、动态可扩展。</p>
<p>​	云计算具有高效的运算能力，在原有服务器基础上增加云计算功能能够使计算速度迅速提高，最终实现动态扩展	虚拟化的层次达到对应用进行扩展的目的。</p>
<p>3、按需部署。</p>
<p>​	云计算平台能够根据用户的需求快速配备计算能力及资源。</p>
<p>4、灵活性高。</p>
<p>​	目前市场上大多数IT资源、软、硬件都支持虚拟化，云计算的兼容性非常强</p>
<p>5、可靠性高。</p>
<p>​	倘若服务器故障也不影响计算与应用的正常运行。</p>
<p>6、性价比高。</p>
<p>​	将资源放在虚拟资源池中统一管理在一定程度上优化了物理资源，用户不再需要昂贵、存储空间大的主机，可以	选择相对廉价的PC组成云，一方面减少费用，另一方面计算性能不逊于大型主机。</p>
<p>7、可扩展性。</p>
<p>​	用户可以利用应用软件的快速部署条件来更为简单快捷的将自身所需的已有业务以及新业务进行扩展。</p>
<h3 id="6-2、服务类型"><a href="#6-2、服务类型" class="headerlink" title="6.2、服务类型"></a>6.2、服务类型</h3><p>1、基础设施即服务（IaaS)</p>
<p>2、平台即服务(PaaS)</p>
<p>3、软件即服务(SaaS)</p>
<h2 id="7、大数据GIS"><a href="#7、大数据GIS" class="headerlink" title="7、大数据GIS"></a>7、大数据GIS</h2><ul>
<li>从定义可看出，<strong>数据</strong>是GIS的血液。从通过图件扫描、格式转换、实地测绘等方法的数据获取，到采用各种先进数据库技术对数据进行存储、管理，再到利用计算机图形学、地图学等综合可视化技术对数据进行展示，以及最终以数据为基础的借助于计量地理学、拓扑学、图论等学科的决策分析等，这些过程都是以数据为核心的。随着GIS的发展，其数据呈现出数量大、种类多和结构复杂的特征。</li>
</ul>
<h2 id="8、云GIS"><a href="#8、云GIS" class="headerlink" title="8、云GIS"></a>8、云GIS</h2><ul>
<li>将云计算的各种特征用于支撑地理空间信息的各要素，包括建模、存储、处理等等，从而改变用户传统的GIS应用方法和建设模式，以一种更加友好的方式，高效率、低成本的使用地理信息资源。</li>
</ul>
<h3 id="8-1、云GIS的特征"><a href="#8-1、云GIS的特征" class="headerlink" title="8.1、云GIS的特征"></a>8.1、云GIS的特征</h3><ul>
<li><p>一个集中的空间信息存储环境</p>
</li>
<li><p>一个以服务为基础的空间信息应用平台</p>
</li>
<li><p>一个以租赁为主要形式的商业运营模式</p>
</li>
</ul>
<h3 id="8-2、云GIS价值"><a href="#8-2、云GIS价值" class="headerlink" title="8.2、云GIS价值"></a>8.2、云GIS价值</h3><ol>
<li><p>资源使用的低成本</p>
<p>云GIS将用户从传统的资源独占转变为资源共享，最大化资源的利用率，降低了单个用户使用资源的成本。</p>
</li>
<li><p>业务的连续性</p>
<p>云GIS为用户提供的地理信息服务是弹性的，能够根据用户业务需求的变化快速、动态的扩展资源，从而提升了业务的连续性。</p>
</li>
<li><p>业务的灵活性</p>
<p>云GIS将用户原本固定的成本投入转变为可变的运行成本，提升了资本运作的灵活性，进而提升用户的业务灵活性。</p>
</li>
<li><p>业务的创新能力</p>
<p>云GIS将用户从繁琐、复杂的资源管理工作中解放出来，从而使用户能够更加专注于自身的业务创新。</p>
</li>
<li><p>良好的用户体验</p>
<p>云GIS降低了用户使用地理信息资源的复杂度，用户只需要根据业务的需求选择合适终端访问云GIS服务即可。</p>
<p>这里的资源不仅仅包涵我们通常所说的地图数据、GIS功能、GIS服务等，也涵盖了传统IT建设中的各种IT基础设施，包括：服务器、网络、存储等物理范畴和操作系统、数据库、中间件等软件范畴。</p>
</li>
</ol>
<h3 id="8-3、云GIS建设模式"><a href="#8-3、云GIS建设模式" class="headerlink" title="8.3、云GIS建设模式"></a>8.3、云GIS建设模式</h3><ul>
<li>云GIS的建设模式与云计算相同，主要有三种的建设模式：公有云GIS、私有云GIS和混合云GIS。其中，混合云GIS是公有云GIS和私有云GIS之间的权衡模式。</li>
</ul>
<h2 id="9、物联网"><a href="#9、物联网" class="headerlink" title="9、物联网"></a>9、物联网</h2><p>物联网就是“物物相连的互联网”。物联网是在互联网的基础上建立起来的，并对物联网进行了极大地延伸和拓展，其用户端延伸和扩展到了任何物品之间，进行信息交换和通信。目前，物联网已经应用于运输和物流、健康医疗、智能环境等诸多领域。随着物联网技术的成熟和相关政策的进一步完善，物联网必将在资源、环境、生态等更为广阔的领域发挥自身的作用。而WebGIS技术在自身不断发展的同时，也将越来越多的融入到物联网技术中。</p>
<h3 id="9-1、GIS和GPS在物联网中发挥作用"><a href="#9-1、GIS和GPS在物联网中发挥作用" class="headerlink" title="9.1、GIS和GPS在物联网中发挥作用"></a>9.1、GIS和GPS在物联网中发挥作用</h3><p>互联网环境下的GIS架构对于空间数据的分配方面有着明显的优势，主要在于两个途径：一种是利用网络的拓展应用对空间数据进行空间数据的分配，另一种是利用网络专业空间数据服务。<br>利用GPS技术和地理信息系统（GIS）配合其他无线通信技术，能够为物联网行业提供基于位置的精细化管理，通过对采集数据的运算、分析，调整市场布局，优化提升物联网行业企业内部的战略计划。</p>
<h2 id="10、GIS与人工智能"><a href="#10、GIS与人工智能" class="headerlink" title="10、GIS与人工智能"></a>10、GIS与人工智能</h2><h2 id="11、GIS热点"><a href="#11、GIS热点" class="headerlink" title="11、GIS热点"></a>11、GIS热点</h2><p>倾斜，近景，高分遥感，室内定位，便携式差分定位</p>
<p>云计算，大数据，虚拟现实，物联网，人工智能，BIM与gis集成，倾斜摄影、移动gis ，数据共享，数据挖掘</p>
<p>手机APP、web地图、VR和AR、三维建模</p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>GIS热点前沿</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee + Hexo 搭建个人博客页面</title>
    <url>/2022/09/20/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Gitee-Hexo-搭建个人博客页面"><a href="#Gitee-Hexo-搭建个人博客页面" class="headerlink" title="Gitee + Hexo 搭建个人博客页面"></a>Gitee + Hexo 搭建个人博客页面</h1><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><ol>
<li>windows 10&#x2F;11</li>
<li>node</li>
<li>git</li>
</ol>
<span id="more"></span>

<h2 id="2、搭建"><a href="#2、搭建" class="headerlink" title="2、搭建"></a>2、搭建</h2><ol>
<li><p>全局安装 hexo-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到放置博客静态文件的位置，使用 Git Bash Here 打开</span></span><br><span class="line">hexo init blog # 初始化创建文件夹</span><br><span class="line">cd blog # 进入 blog 目录</span><br><span class="line">npm i # 进一步安装 hexo 所需依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean # 清除所有记录</span><br><span class="line">hexo generate # 生成静态网页</span><br><span class="line">hexo server -p 80 # 启动服务，-p 80 表示端口号为 80，默认为 4000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在浏览器中使用 http://localhost:80 即可访问</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主题配置</p>
<!--more-->

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://hexo.io/themes/ 下载自己喜欢的主题，以 yilia-plus 为例</span></span><br><span class="line">git clone git@github.com:JoeyBling/hexo-theme-yilia-plus.git themes/yilia-plus</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 打开 blog 文件夹下的 _config.yml，修改 theme: landscape 为 theme: yilia-plus</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新输入</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server -p 80</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决图片路径问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装 hexo-asset-image 插件</span></span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 _config.yml 中 post_asset_folder: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成新的网页</span></span><br><span class="line">hexo new test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span>/_posts 下会出现 <span class="built_in">test</span> 文件夹 和 test.md 文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 ssh</p>
</li>
<li><p>创建仓库</p>
<p>最好仓库名与用户名一致</p>
</li>
<li><p>上传到 gitee</p>
<ul>
<li>_config.yml 中配置 deploy 部分</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment">#仓库的地址，比如我的就是：https://gitee.com/hqzqaq/hqzqaq</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/用户名/仓库名</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装 hexo-deployer-git 插件，防止推送出现问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 git bash 窗口执行</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>部署</p>
<p>Gitee 仓库 -&gt; 服务 ——&gt; Gitee Pages ——&gt; 部署分支选择 master，点击启动即可。</p>
</li>
<li><p>常用 hexo 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建文章</span></span><br><span class="line">hexo new &quot;postName&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建页面</span></span><br><span class="line">hexo new page &quot;pageName&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成静态页面至public目录</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启预览访问端口（默认端口4000，<span class="string">&#x27;ctrl + c&#x27;</span>关闭server）</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署到 Gitee</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助</span></span><br><span class="line">hexo help</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Hexo的版本</span></span><br><span class="line">hexo version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组合命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成并本地预览</span></span><br><span class="line">hexo s -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成并上传</span></span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>写博客</p>
<ul>
<li><p>创建博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定位到 hexo 根目录</span></span><br><span class="line">hexo new &#x27;我的第一篇博客&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">source</span>/_post 目录下自动生成 我的第一篇博客 文件夹 我的第一篇博客.md 文件</span></span><br></pre></td></tr></table></figure>

<p>使用命令会自动生成时间</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名称  #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16  #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类  #分类</span><br><span class="line">tags: [tag1,tag2,tag3]  #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line"><span class="section">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;我的第二篇博客&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 <span class="built_in">source</span> 下面生成 我的第二篇博客 文件夹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件夹下包含 index 文件夹和 index.md 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最终部署时生成：hexo\public\我的第二篇博客\index.html，但是它不会作为文章出现在博文目录。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如何让博文列表不显示全部内容</p>
<p>在适当的位置加上 more 即可</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 1. 前言 </span></span><br><span class="line">在开始教程之前，你可以了解一下使用gitee pages服务搭建博客有哪些好处： </span><br><span class="line"><span class="bullet">*</span> gitee 是国内的网站，相较于 github 访问速度更快；</span><br><span class="line"><span class="bullet">*</span> 全是静态文件，访问速度快；</span><br><span class="line"><span class="bullet">*</span> 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="bullet">*</span> 数据绝对安全，基于gitee的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line"><span class="bullet">*</span> 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line"><span class="bullet">*</span> 等等。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意点</p>
<p>博客更新后，上传之后需要手动到 Gitee 仓库里面 <code>更新</code> 一下 Gitee Pages</p>
</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署环境搭建</title>
    <url>/2022/09/23/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Jenkins自动化部署环境搭建"><a href="#Jenkins自动化部署环境搭建" class="headerlink" title="Jenkins自动化部署环境搭建"></a>Jenkins自动化部署环境搭建</h1><p>本文的目的是将多模块的项目利用 jenkins 实现自动化的部署，再将代码推送到 gitlab 时，jenkins 通过轮询的方式查看 gitlab 的代码是否有变化，有变化则拉取仓库的代码，使用 maven 打包，而我的项目各个子模块又集成了 docker-mavne 插件，会将各模块的服务打包为 docker 镜像推送到服务器，在服务器编写好对应 docker-compose.yml 编排文件启动项目，所以 jenkind 需要在 maven 打包完成后，向服务器发送编排启动项目的命令，即可达到自动化部署项目的目的。</p>
<span id="more"></span>

<h2 id="1、1-拉取镜像"><a href="#1、1-拉取镜像" class="headerlink" title="1、1.拉取镜像"></a>1、1.拉取镜像</h2><p>有很多的 jenkins 镜像，我们选择 jdk8 这一个</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:latest-jdk8</span><br></pre></td></tr></table></figure>

<h2 id="2、2-准备-maven-和-jdk"><a href="#2、2-准备-maven-和-jdk" class="headerlink" title="2、2.准备 maven 和 jdk"></a>2、2.准备 maven 和 jdk</h2><p>自行前往官网下载对应的版本，这里采用的 maven3.6.3 和 jdk8</p>
<h2 id="3、3-编写编排文件"><a href="#3、3-编写编排文件" class="headerlink" title="3、3.编写编排文件"></a>3、3.编写编排文件</h2><ol>
<li>准备一个目录放置挂载文件和 docker-compose.yml 文件</li>
<li>新建一个名为 hudson.model.UpdateCenter.xml 的文件,填入一下内容</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 清华大学的Jenkins插件 镜像地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>新建 docker-compose.yml 文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span>                         </span><br><span class="line">  <span class="attr">docker_jenkins:</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span>            </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>            </span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:latest-jdk8</span>   </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span>          </span><br><span class="line">    <span class="attr">ports:</span>                  </span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span> <span class="comment"># 挂载位置（镜像和宿主机器之间时间保持一致）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./jenkins_home:/var/jenkins_home</span></span><br><span class="line">      <span class="comment"># 挂载maven,按自己的需求修改maven的配置文件,配置仓库地址和本地仓库存储地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./apache-maven-3.6.3:/var/jenkins_home/maven</span></span><br><span class="line">      <span class="comment"># 挂载 jdk8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./jdk1.8.0_202:/var/jenkins_home/jdk8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./jenkinsci:/usr/jenkinsci</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/bin/docker:/usr/bin/docker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span><br><span class="line">      <span class="comment"># 挂载出生成的密钥</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ssh:/root/.ssh</span></span><br><span class="line"> <span class="comment"># 如果容器无法解析域名，则需要将容器的网络模式修改为 host 模式</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动项目：docker-compose up -d</li>
</ol>
<h2 id="4、4-初始化-Jenkins"><a href="#4、4-初始化-Jenkins" class="headerlink" title="4、4.初始化 Jenkins"></a>4、4.初始化 Jenkins</h2><ol>
<li>第一次登录需要在服务模块下获取密码，因为已经将 jenkins_home 目录挂载出来了，直接去对应的目录下找即可。</li>
</ol>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701150215096.png" alt="登录" style="zoom:80%;">



<ol start="2">
<li>选择安装推荐的插进</li>
</ol>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/20200815203457224_2022-07-01_15-55-16.png" alt="安装推荐的插件" style="zoom: 67%;">



<ol start="3">
<li><p>创建一个账户</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701153158735.png" alt="创建账户" style="zoom:80%;">


</li>
<li><p>进入管理界面</p>
</li>
</ol>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701155629160.png" alt="管理界面" style="zoom: 67%;">



<ol start="5">
<li><p>安装插件</p>
<p>这里主要安装 Maven Integration 和 publish over ssh 插件</p>
<p>系统管理 -&gt; 插件管理 -&gt; 可选插件 搜索这两个插件下载即可</p>
</li>
</ol>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701155901912.png" alt="下载插件" style="zoom:80%;">



<ol start="6">
<li><p>配置 maven 环境和 jdk 环境</p>
<ol>
<li>进入 系统管理 -&gt; 全局工具配置</li>
</ol>
<ul>
<li><p>配置 maven，新增maven，配置 maven_home</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701160505068.png" alt="新增maven" style="zoom:80%;"></li>
</ul>
</li>
</ol>
<ul>
<li><p>配置 settings 所在的路径</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701160730333.png" alt="配置maven配置文件所在地" style="zoom:80%;"></li>
</ul>
<ol start="2">
<li><p>配置 jdk</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701160905126.png" alt="jdk8配置" style="zoom:80%;">
</li>
<li><p>配置 Publish over SSH，增加一个 ssh server，方便使用 ssh 连接服务器执行一些命令，或者传输文件</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701173338580.png" alt="Publish over SSH配置ssh server" style="zoom:80%;"></li>
</ol>
<h2 id="5、5-gitlab配置ssh"><a href="#5、5-gitlab配置ssh" class="headerlink" title="5、5.gitlab配置ssh"></a>5、5.gitlab配置ssh</h2><ol>
<li><p>安装 gitlab 插件</p>
<p>系统管理 -&gt; 插件管理 -&gt; 可选插件 搜索 gitlab<br><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701161450251.png" alt="gitlab安装"></p>
</li>
<li><p>登录到jenkins服务器，生成秘钥，进入 jenkins 容器内部执行命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span> -f ~/.ssh/id_rsa</span><br><span class="line"><span class="comment"># 查看公钥</span></span><br><span class="line"><span class="built_in">cat</span> /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录到 gitlab 添加 ssh keys</p>
<p>点击头像 -&gt; settings -&gt; SSH Keys 把id_rsa.pub 复制到网页框中</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701164549614.png" alt="添加 ssh key" style="zoom:80%;">


</li>
<li><p>创建 Access Token</p>
<p>点击头像 -&gt; settings -&gt; Access Token</p>
</li>
</ol>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701165008169.png" alt="Access Token" style="zoom:80%;">



<p><code>复制这个令牌保存起来</code>，作为之后访问 gitlab 的令牌</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701165141184.png" alt="令牌" style="zoom:80%;">



<ol start="5">
<li><p>jenkins 配置 gitlab 登录</p>
<ul>
<li><p>系统管理 -&gt; 系统设置 -&gt; gitlab</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701170022724.png" alt="配置gitlab" style="zoom:80%;">
</li>
<li><p>添加登录凭据，api token 就是在 gitlab 创建的 Access Token</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701170155880.png" alt="添加登录凭据" style="zoom:80%;">
</li>
<li><p>测试连接是否成功，成功之后点击保存即可</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701170519233.png" alt="测试连接是否成功" style="zoom:80%;"></li>
</ul>
</li>
</ol>
<h2 id="6、6-git-plugins-配置"><a href="#6、6-git-plugins-配置" class="headerlink" title="6、6.git plugins 配置"></a>6、6.git plugins 配置</h2><p>系统管理 -&gt; 系统设置 -&gt; git plugin 配置姓名和邮箱</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701170852191.png" alt="git plugin配置" style="zoom:80%;">

<h2 id="7、7-新建任务"><a href="#7、7-新建任务" class="headerlink" title="7、7.新建任务"></a>7、7.新建任务</h2><p>首页 -&gt; 新建任务 -&gt; 构建一个 maven 项目</p>
<ul>
<li><p>在源码管理中选择 Git，复制仓库的 ssh 连接地址，此时提示无法连接仓库，点击添加</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701171306733.png" alt="复制仓库地址" style="zoom:80%;">
</li>
<li><p>类型选择 SSH Username with private key，Username 填 root，PrivateKey 选择Enter directly，点击add<br>登录到 jenkins 服务器查看私钥，挂载了 .ssh目录出来，在 ssh 下，查看 id_rsa 的文件内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>将私钥内容复制的网页上面，点击添加</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701171521531.png" alt="配置私钥" style="zoom:80%;">
</li>
<li><p>在“credentials”里选择我们刚刚创建的认证方式：root</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701171831969.png" alt="认证方式" style="zoom:80%;">
jenkins job默认对master分支进行构建，也可以自定义分支。
</li>
<li><p>配置 Job 的构建触发器</p>
<ul>
<li><p>选择“构建触发器”，勾选“Pull SCM”，这个选项会每隔一段时间检查一下GitLab仓库中代码是否有更新，有的话就执行构建操作。日程表如何设置，在这个输入框下面有说明，轮询的时间还可以再缩短一点，比如 10s、半分钟、一分钟之类的</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701172137343.png" alt="触发构建的方式" style="zoom:80%;">

<p>常见构建触发器：</p>
<ul>
<li>Build after other projects are built 当另一个构建任务完成之后触发</li>
<li>Build periodically 周期性的触发</li>
<li>Build when a change is pushed to GitLab. GitLab CI Service 当代码有更新的时候触发，通过GitLab CI</li>
<li>GitHub hook trigger for GITScm polling 通过Github钩子触发</li>
<li>Poll SCM 定期检查代码有无更新，有更新时触发</li>
</ul>
</li>
</ul>
</li>
<li><p>配置 maven 的 pom 文件位置</p>
<p>我这里是多模块的项目，配置父模块 pom 文件所在位置</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701173420922.png" alt="配置打包pom文件位置和maven打包命令" style="zoom:80%;">
</li>
<li><p>构建后执行远程shell命令</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701173444876.png" alt="构建后操作"></p>
<p>选择ssh服务，配置执行的编排命令</p>
<p><code>我这里的项目是多模块的工程，然后每个子模块集成了 docker-maven 插件，会将每个服务的 jar 打包成镜像推送到服务器，在服务中编写对应的 docker-compose.yml 文件编排每个项目的容器，所以我这里在 jenkins 调用 maven 打包好项目之后，使用 ssh 连接服务器切换到对应的目录执行编排命令，即可启动服务，不同的部署方式可灵活变通，这里只是演示本项目所使用的一种方式。</code></p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701173522673.png" alt="ssh远程执行命令" style="zoom:80%;">


<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录服务器，执行docker-compose编排命令</span></span><br><span class="line"><span class="built_in">cd</span> /data/docker/farmland-chief-server</span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose <span class="built_in">rm</span> -f</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker rmi $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于是父模块 pom 进行打包的，子模块要依据父模块 pom 的位置配置 dockerfile 所在的位置</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220701173925271.png" alt="dockerfile配置" style="zoom:80%;">
</li>
<li><p>点击执行构建任务</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/7a8c40d42a5d4b1ba721213e9a98ed86_2022-07-01_23-37-27.png" alt="执行构建任务" style="zoom:80%;">



<p>可以查看构建项目的控制台输出，输出 maven 打包的日志</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/7b2fe92831a74e61a76f29756d3c1075_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt="查看控制台输出" style="zoom:80%;"></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>运维</tag>
        <tag>docker</tag>
        <tag>docker-maven</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose</title>
    <url>/2022/09/23/docker-compose/</url>
    <content><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h3 id="0-1、Compose-简介"><a href="#0-1、Compose-简介" class="headerlink" title="0.1、Compose 简介"></a>0.1、Compose 简介</h3><p>Compose 是用于 <font color="orange">定义和运行多容器 Docker 应用程序</font> 的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
<p>Compose 使用的三个步骤：</p>
<ul>
<li>使用 <code>Dockerfile </code>定义应用程序的环境。</li>
<li>使用 <code>docker-compose.yml</code> 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行 <code>docker-compose up</code> 命令来启动并运行整个应用程序。</li>
</ul>
<p><code>docker-compose.yml</code> 的配置案例如下（配置参数参考下文）：</p>
<span id="more"></span>

<h2 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yaml 配置实例</span></span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line"> web:</span><br><span class="line">  build: .</span><br><span class="line">  ports:</span><br><span class="line"></span><br><span class="line">  - &quot;5000:5000&quot;</span><br><span class="line">  volumes:</span><br><span class="line"></span><br><span class="line">  - .:/code</span><br><span class="line">  - logvolume01:/var/log</span><br><span class="line">  links:</span><br><span class="line"></span><br><span class="line">  - redis</span><br><span class="line"> redis:</span><br><span class="line">  image: redis</span><br><span class="line">volumes:</span><br><span class="line"> logvolume01: &#123;&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2、Compose-安装"><a href="#2、Compose-安装" class="headerlink" title="2、Compose 安装"></a>2、Compose 安装</h2><p>Linux</p>
<p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases%E3%80%82">https://github.com/docker/compose/releases。</a></p>
<p>运行以下命令以下载 Docker Compose 的当前稳定版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<p>要安装其他版本的 Compose，请替换 1.24.1。</p>
<p>将可执行权限应用于二进制文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<p>创建软链：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<p>测试是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose --version</span></span><br><span class="line">cker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。</p>
<h2 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h2><ol>
<li><p>新建 <code>docker-compose.ym </code>文件，写入一下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 描述 Compose文件的版本信息</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务,可以多个</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="attr">nginx:</span>	<span class="comment"># 服务名称</span></span><br><span class="line">		<span class="attr">image:</span> <span class="string">nginx</span>	<span class="comment"># 创建容器时所需的镜像</span></span><br><span class="line">		<span class="attr">container_name:</span> <span class="string">mynginx</span>	<span class="comment"># 容器名称,默认为&quot;工程名称_服务条目名称_序号</span></span><br><span class="line">		<span class="attr">ports:</span>	<span class="comment"># 宿主机与容器的端口映射关系</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span>	<span class="comment"># 左边宿主机端口:右边容器端口</span></span><br><span class="line">		<span class="attr">networks:</span>	<span class="comment"># 配置容器连接的网络,引用顶级 networks下的条目</span></span><br><span class="line">			<span class="bullet">-</span> <span class="string">nginx-net</span></span><br><span class="line">			</span><br><span class="line"><span class="comment"># 定义网络,可以多个。如果不声明,默认会创建一个网络名称为&quot;工程名称 default&quot;的 bridge 网络</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">	<span class="attr">nginx-net:</span>	<span class="comment"># 一个具体网络的条目名称</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">nginx-net</span> <span class="comment"># 网络名称,默认为&quot;工程名称_网络条目名称</span></span><br><span class="line">		<span class="attr">driver:</span> <span class="string">bridge</span> <span class="comment">#网络模式,默认为 bridg</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h2><h3 id="4-1、准备"><a href="#4-1、准备" class="headerlink" title="4.1、准备"></a>4.1、准备</h3><p>创建一个测试目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> composetest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> composetest</span></span><br></pre></td></tr></table></figure>

<p>在测试目录中创建一个名为 app.py 的文件，并复制粘贴以下内容：</p>
<h2 id="5、composetest-x2F-app-py-文件代码"><a href="#5、composetest-x2F-app-py-文件代码" class="headerlink" title="5、composetest&#x2F;app.py 文件代码"></a>5、composetest&#x2F;app.py 文件代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(name)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">  retries = <span class="number">5</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">      <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> exc</span><br><span class="line">      retries -= <span class="number">1</span></span><br><span class="line">      time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">  count = get_hit_count()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure>



<p>在此示例中，redis 是应用程序网络上的 redis 容器的主机名，该主机使用的端口为 6379。</p>
<p>在 composetest 目录中创建另一个名为 <strong>requirements.txt</strong> 的文件，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>

<h3 id="5-1、创建-Dockerfile-文件"><a href="#5-1、创建-Dockerfile-文件" class="headerlink" title="5.1、创建 Dockerfile 文件"></a>5.1、创建 Dockerfile 文件</h3><p>在 composetest 目录中，创建一个名为的文件 Dockerfile，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP app.py</span><br><span class="line">ENV FLASK_RUN_HOST 0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">COPY . .</span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>Dockerfile 内容解释：</strong></p>
<ul>
<li><p><strong>FROM python:3.7-alpine</strong>: 从 Python 3.7 映像开始构建镜像。</p>
</li>
<li><p><strong>WORKDIR &#x2F;code</strong>: 将工作目录设置为 &#x2F;code。</p>
</li>
<li><pre><code class="shell">ENV FLASK_APP app.py
ENV FLASK_RUN_HOST 0.0.0.0
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  设置 flask 命令使用的环境变量。</span><br><span class="line"></span><br><span class="line">- **RUN apk add --no-cache gcc musl-dev linux-headers**: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  COPY requirements.txt requirements.txt</span><br><span class="line">  RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

复制 requirements.txt 并安装 Python 依赖项。
</code></pre>
</li>
<li><p><strong>COPY . .</strong>: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</p>
</li>
<li><p><strong>CMD [“flask”, “run”]</strong>: 容器提供默认的执行命令为：flask run。</p>
</li>
</ul>
<h3 id="5-2、创建-docker-compose-yml"><a href="#5-2、创建-docker-compose-yml" class="headerlink" title="5.2、创建 docker-compose.yml"></a>5.2、创建 docker-compose.yml</h3><p>在测试目录中创建一个名为 docker-compose.yml 的文件，然后粘贴以下内容：</p>
<h2 id="6、docker-compose-yml-配置文件"><a href="#6、docker-compose-yml-配置文件" class="headerlink" title="6、docker-compose.yml 配置文件"></a>6、docker-compose.yml 配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yaml 配置</span></span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line"> web:</span><br><span class="line">  build: .</span><br><span class="line">  ports:</span><br><span class="line"></span><br><span class="line">   - &quot;5000:5000&quot;</span><br><span class="line"> redis:</span><br><span class="line">  image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>



<p>该 Compose 文件定义了两个服务：web 和 redis。</p>
<ul>
<li><strong>web</strong>：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li>
<li><strong>redis</strong>：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li>
</ul>
<h3 id="6-1、使用-Compose-命令构建和运行您的应用"><a href="#6-1、使用-Compose-命令构建和运行您的应用" class="headerlink" title="6.1、使用 Compose 命令构建和运行您的应用"></a>6.1、使用 Compose 命令构建和运行您的应用</h3><p>在测试目录中，执行以下命令来启动应用程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>如果你想在后台执行该服务可以加上 <strong>-d</strong> 参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7、yml-配置指令参考"><a href="#7、yml-配置指令参考" class="headerlink" title="7、yml 配置指令参考"></a>7、yml 配置指令参考</h2><h3 id="7-1、version"><a href="#7-1、version" class="headerlink" title="7.1、version"></a>7.1、version</h3><p>指定本 yml 依从的 compose 哪个版本制定的。</p>
<h3 id="7-2、build"><a href="#7-2、build" class="headerlink" title="7.2、build"></a>7.2、build</h3><p>指定为构建镜像上下文路径：</p>
<p>例如 webapp 服务，指定为从上下文路径 .&#x2F;dir&#x2F;Dockerfile 所构建的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build: ./dir</span><br></pre></td></tr></table></figure>

<p>或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build:</span><br><span class="line">      context: ./dir</span><br><span class="line">      dockerfile: Dockerfile-alternate</span><br><span class="line">      args:</span><br><span class="line">        buildno: 1</span><br><span class="line">      labels:</span><br><span class="line">        - &quot;com.example.description=Accounting webapp&quot;</span><br><span class="line">        - &quot;com.example.department=Finance&quot;</span><br><span class="line">        - &quot;com.example.label-with-empty-value&quot;</span><br><span class="line">      target: prod</span><br></pre></td></tr></table></figure>

<ul>
<li>context：上下文路径。</li>
<li>dockerfile：指定构建镜像的 Dockerfile 文件名。</li>
<li>args：添加构建参数，这是只能在构建过程中访问的环境变量。</li>
<li>labels：设置构建镜像的标签。</li>
<li>target：多层构建，可以指定构建哪一层。</li>
</ul>
<h3 id="7-3、cap-add，cap-drop"><a href="#7-3、cap-add，cap-drop" class="headerlink" title="7.3、cap_add，cap_drop"></a>7.3、cap_add，cap_drop</h3><p>添加或删除容器拥有的宿主机的内核功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cap_add:</span><br><span class="line">  - ALL # 开启全部权限</span><br><span class="line"></span><br><span class="line">cap_drop:</span><br><span class="line">  - SYS_PTRACE # 关闭 ptrace权限</span><br></pre></td></tr></table></figure>

<h3 id="7-4、cgroup-parent"><a href="#7-4、cgroup-parent" class="headerlink" title="7.4、cgroup_parent"></a>7.4、cgroup_parent</h3><p>为容器指定父 cgroup 组，意味着将继承该组的资源限制。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cgroup_parent: m-executor-abcd</span><br></pre></td></tr></table></figure>

<h3 id="7-5、command"><a href="#7-5、command" class="headerlink" title="7.5、command"></a>7.5、command</h3><p>覆盖容器启动的默认命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="7-6、container-name"><a href="#7-6、container-name" class="headerlink" title="7.6、container_name"></a>7.6、container_name</h3><p>指定自定义容器名称，而不是生成的默认名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">container_name: my-web-container</span><br></pre></td></tr></table></figure>

<h3 id="7-7、depends-on"><a href="#7-7、depends-on" class="headerlink" title="7.7、depends_on"></a>7.7、depends_on</h3><p>设置依赖关系。</p>
<ul>
<li>docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。</li>
<li>docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。</li>
<li>docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure>

<p>注意：web 服务不会等待 redis db 完全启动 之后才启动。</p>
<h3 id="7-8、deploy"><a href="#7-8、deploy" class="headerlink" title="7.8、deploy"></a>7.8、deploy</h3><p>指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    deploy:</span><br><span class="line">      mode：replicated</span><br><span class="line">      replicas: 6</span><br><span class="line">      endpoint_mode: dnsrr</span><br><span class="line">      labels: </span><br><span class="line">        description: &quot;This redis service label&quot;</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &#x27;0.50&#x27;</span><br><span class="line">          memory: 50M</span><br><span class="line">        reservations:</span><br><span class="line">          cpus: &#x27;0.25&#x27;</span><br><span class="line">          memory: 20M</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">        delay: 5s</span><br><span class="line">        max_attempts: 3</span><br><span class="line">        window: 120s</span><br></pre></td></tr></table></figure>

<p>可以选参数：</p>
<p><strong>endpoint_mode</strong>：访问集群服务的方式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">endpoint_mode: vip </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。</span></span><br><span class="line">endpoint_mode: dnsrr</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。</span></span><br></pre></td></tr></table></figure>

<p><strong>labels</strong>：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p>
<p><strong>mode</strong>：指定服务提供的模式。</p>
<ul>
<li><p><strong>replicated</strong>：复制服务，复制指定服务到集群的机器上。</p>
</li>
<li><p><strong>global</strong>：全局服务，服务将部署至集群的每个节点。</p>
</li>
<li><p>图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/11/docker-composex.png" alt="img"></p>
</li>
</ul>
<p><strong>replicas：mode</strong> 为 replicated 时，需要使用此参数配置具体运行的节点数量。</p>
<p><strong>resources</strong>：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p>
<p><strong>restart_policy</strong>：配置如何在退出容器时重新启动容器。</p>
<ul>
<li>condition：可选 none，on-failure 或者 any（默认值：any）。</li>
<li>delay：设置多久之后重启（默认值：0）。</li>
<li>max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。</li>
<li>window：设置容器重启超时时间（默认值：0）。</li>
</ul>
<p><strong>rollback_config</strong>：配置在更新失败的情况下应如何回滚服务。</p>
<ul>
<li>parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。</li>
<li>delay：每个容器组回滚之间等待的时间（默认为0s）。</li>
<li>failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。</li>
<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。</li>
<li>max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。</li>
<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。</li>
</ul>
<p><strong>update_config</strong>：配置应如何更新服务，对于配置滚动更新很有用。</p>
<ul>
<li>parallelism：一次更新的容器数。</li>
<li>delay：在更新一组容器之间等待的时间。</li>
<li>failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者pause （默认：pause）。</li>
<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。</li>
<li>max_failure_ratio：在更新过程中可以容忍的故障率。</li>
<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认stop-first）。</li>
</ul>
<p><strong>注</strong>：仅支持 V3.4 及更高版本。</p>
<h3 id="7-9、devices"><a href="#7-9、devices" class="headerlink" title="7.9、devices"></a>7.9、devices</h3><p>指定设备映射列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">devices:</span><br><span class="line">  - &quot;/dev/ttyUSB0:/dev/ttyUSB0&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-10、dns"><a href="#7-10、dns" class="headerlink" title="7.10、dns"></a>7.10、dns</h3><p>自定义 DNS 服务器，可以是单个值或列表的多个值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dns: 8.8.8.8</span><br><span class="line"></span><br><span class="line">dns:</span><br><span class="line">  - 8.8.8.8</span><br><span class="line">  - 9.9.9.9</span><br></pre></td></tr></table></figure>

<h3 id="7-11、dns-search"><a href="#7-11、dns-search" class="headerlink" title="7.11、dns_search"></a>7.11、dns_search</h3><p>自定义 DNS 搜索域。可以是单个值或列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dns_search: example.com</span><br><span class="line"></span><br><span class="line">dns_search:</span><br><span class="line">  - dc1.example.com</span><br><span class="line">  - dc2.example.com</span><br></pre></td></tr></table></figure>

<h3 id="7-12、entrypoint"><a href="#7-12、entrypoint" class="headerlink" title="7.12、entrypoint"></a>7.12、entrypoint</h3><p>覆盖容器默认的 entrypoint。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">entrypoint: /code/entrypoint.sh</span><br></pre></td></tr></table></figure>

<p>也可以是以下格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">entrypoint:</span><br><span class="line">    - php</span><br><span class="line">    - -d</span><br><span class="line">    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</span><br><span class="line">    - -d</span><br><span class="line">    - memory_limit=-1</span><br><span class="line">    - vendor/bin/phpunit</span><br></pre></td></tr></table></figure>

<h3 id="7-13、env-file"><a href="#7-13、env-file" class="headerlink" title="7.13、env_file"></a>7.13、env_file</h3><p>从文件添加环境变量。可以是单个值或列表的多个值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br></pre></td></tr></table></figure>

<p>也可以是列表格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure>

<h3 id="7-14、environment"><a href="#7-14、environment" class="headerlink" title="7.14、environment"></a>7.14、environment</h3><p>添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">  RACK_ENV: development</span><br><span class="line">  SHOW: &#x27;true&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="7-15、expose"><a href="#7-15、expose" class="headerlink" title="7.15、expose"></a>7.15、expose</h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>
<p>仅可以指定内部端口为参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expose:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-16、extra-hosts"><a href="#7-16、extra-hosts" class="headerlink" title="7.16、extra_hosts"></a>7.16、extra_hosts</h3><p>添加主机名映射。类似 docker client –add-host。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">extra_hosts:</span><br><span class="line"> - &quot;somehost:162.242.195.82&quot;</span><br><span class="line"> - &quot;otherhost:50.31.209.229&quot;</span><br></pre></td></tr></table></figure>

<p>以上会在此服务的内部容器中 &#x2F;etc&#x2F;hosts 创建一个具有 ip 地址和主机名的映射关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">162.242.195.82  somehost</span><br><span class="line">50.31.209.229   otherhost</span><br></pre></td></tr></table></figure>

<h3 id="7-17、healthcheck"><a href="#7-17、healthcheck" class="headerlink" title="7.17、healthcheck"></a>7.17、healthcheck</h3><p>用于检测 docker 服务是否健康运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">healthcheck:</span><br><span class="line">  test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] # 设置检测程序</span><br><span class="line">  interval: 1m30s # 设置检测间隔</span><br><span class="line">  timeout: 10s # 设置检测超时时间</span><br><span class="line">  retries: 3 # 设置重试次数</span><br><span class="line">  start_period: 40s # 启动后，多少秒开始启动检测程序</span><br></pre></td></tr></table></figure>

<h3 id="7-18、image"><a href="#7-18、image" class="headerlink" title="7.18、image"></a>7.18、image</h3><p>指定容器运行的镜像。以下格式都可以：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">image: redis</span><br><span class="line">image: ubuntu:14.04</span><br><span class="line">image: tutum/influxdb</span><br><span class="line">image: example-registry.com:4000/postgresql</span><br><span class="line">image: a4bc65fd # 镜像id</span><br></pre></td></tr></table></figure>

<h3 id="7-19、logging"><a href="#7-19、logging" class="headerlink" title="7.19、logging"></a>7.19、logging</h3><p>服务的日志记录配置。</p>
<p>driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">driver: &quot;json-file&quot;</span><br><span class="line">driver: &quot;syslog&quot;</span><br><span class="line">driver: &quot;none&quot;</span><br></pre></td></tr></table></figure>

<p>仅在 json-file 驱动程序下，可以使用以下参数，限制日志得数量和大小。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: json-file</span><br><span class="line">  options:</span><br><span class="line">    max-size: &quot;200k&quot; # 单个文件大小为200k</span><br><span class="line">    max-file: &quot;10&quot; # 最多10个文件</span><br></pre></td></tr></table></figure>

<p>当达到文件限制上限，会自动删除旧得文件。</p>
<p>syslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: syslog</span><br><span class="line">  options:</span><br><span class="line">    syslog-address: &quot;tcp://192.168.0.42:123&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-20、network-mode"><a href="#7-20、network-mode" class="headerlink" title="7.20、network_mode"></a>7.20、network_mode</h3><p>设置网络模式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">network_mode: &quot;bridge&quot;</span><br><span class="line">network_mode: &quot;host&quot;</span><br><span class="line">network_mode: &quot;none&quot;</span><br><span class="line">network_mode: &quot;service:[service name]&quot;</span><br><span class="line">network_mode: &quot;container:[container name/id]&quot;</span><br></pre></td></tr></table></figure>

<p>networks</p>
<p>配置容器连接的网络，引用顶级 networks 下的条目 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  some-service:</span><br><span class="line">    networks:</span><br><span class="line">      some-network:</span><br><span class="line">        aliases:</span><br><span class="line">         - alias1</span><br><span class="line">      other-network:</span><br><span class="line">        aliases:</span><br><span class="line">         - alias2</span><br><span class="line">networks:</span><br><span class="line">  some-network:</span><br><span class="line">    # Use a custom driver</span><br><span class="line">    driver: custom-driver-1</span><br><span class="line">  other-network:</span><br><span class="line">    # Use a custom driver which takes special options</span><br><span class="line">    driver: custom-driver-2</span><br></pre></td></tr></table></figure>

<p><strong>aliases</strong> ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。</p>
<h3 id="7-21、restart"><a href="#7-21、restart" class="headerlink" title="7.21、restart"></a>7.21、restart</h3><ul>
<li>no：是默认的重启策略，在任何情况下都不会重启容器。</li>
<li>always：容器总是重新启动。</li>
<li>on-failure：在容器非正常退出时（退出状态非0），才会重启容器。</li>
<li>unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">restart: &quot;no&quot;</span><br><span class="line">restart: always</span><br><span class="line">restart: on-failure</span><br><span class="line">restart: unless-stopped</span><br></pre></td></tr></table></figure>

<p>注：swarm 集群模式，请改用 restart_policy。</p>
<h3 id="7-22、secrets"><a href="#7-22、secrets" class="headerlink" title="7.22、secrets"></a>7.22、secrets</h3><p>存储敏感数据，例如密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.1&quot;</span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line">  image: mysql</span><br><span class="line">  environment:</span><br><span class="line">    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret</span><br><span class="line">  secrets:</span><br><span class="line">    - my_secret</span><br><span class="line"></span><br><span class="line">secrets:</span><br><span class="line">  my_secret:</span><br><span class="line">    file: ./my_secret.txt</span><br></pre></td></tr></table></figure>

<h3 id="7-23、security-opt"><a href="#7-23、security-opt" class="headerlink" title="7.23、security_opt"></a>7.23、security_opt</h3><p>修改容器默认的 schema 标签。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">security-opt：</span><br><span class="line">  - label:user:USER   # 设置容器的用户标签</span><br><span class="line">  - label:role:ROLE   # 设置容器的角色标签</span><br><span class="line">  - label:type:TYPE   # 设置容器的安全策略标签</span><br><span class="line">  - label:level:LEVEL  # 设置容器的安全等级标签</span><br></pre></td></tr></table></figure>

<h3 id="7-24、stop-grace-period"><a href="#7-24、stop-grace-period" class="headerlink" title="7.24、stop_grace_period"></a>7.24、stop_grace_period</h3><p>指定在容器无法处理 SIGTERM (或者任何 stop_signal 的信号)，等待多久后发送 SIGKILL 信号关闭容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop_grace_period: 1s # 等待 1 秒</span><br><span class="line">stop_grace_period: 1m30s # 等待 1 分 30 秒 </span><br></pre></td></tr></table></figure>

<p>默认的等待时间是 10 秒。</p>
<h3 id="7-25、stop-signal"><a href="#7-25、stop-signal" class="headerlink" title="7.25、stop_signal"></a>7.25、stop_signal</h3><p>设置停止容器的替代信号。默认情况下使用 SIGTERM 。</p>
<p>以下示例，使用 SIGUSR1 替代信号 SIGTERM 来停止容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop_signal: SIGUSR1</span><br></pre></td></tr></table></figure>

<h3 id="7-26、sysctls"><a href="#7-26、sysctls" class="headerlink" title="7.26、sysctls"></a>7.26、sysctls</h3><p>设置容器中的内核参数，可以使用数组或字典格式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctls:</span><br><span class="line">  net.core.somaxconn: 1024</span><br><span class="line">  net.ipv4.tcp_syncookies: 0</span><br><span class="line"></span><br><span class="line">sysctls:</span><br><span class="line">  - net.core.somaxconn=1024</span><br><span class="line">  - net.ipv4.tcp_syncookies=0</span><br></pre></td></tr></table></figure>

<h3 id="7-27、tmpfs"><a href="#7-27、tmpfs" class="headerlink" title="7.27、tmpfs"></a>7.27、tmpfs</h3><p>在容器内安装一个临时文件系统。可以是单个值或列表的多个值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmpfs: /run</span><br><span class="line"></span><br><span class="line">tmpfs:</span><br><span class="line">  - /run</span><br><span class="line">  - /tmp</span><br></pre></td></tr></table></figure>

<h3 id="7-28、ulimits"><a href="#7-28、ulimits" class="headerlink" title="7.28、ulimits"></a>7.28、ulimits</h3><p>覆盖容器默认的 ulimit。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimits:</span><br><span class="line">  nproc: 65535</span><br><span class="line">  nofile:</span><br><span class="line">    soft: 20000</span><br><span class="line">    hard: 40000</span><br></pre></td></tr></table></figure>

<h3 id="7-29、volumes"><a href="#7-29、volumes" class="headerlink" title="7.29、volumes"></a>7.29、volumes</h3><p>将主机的数据卷或着文件挂载到容器里。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/localhost/postgres.sock:/var/run/postgres/postgres.sock&quot;</span><br><span class="line">      - &quot;/localhost/data:/var/lib/postgresql/data&quot;</span><br></pre></td></tr></table></figure>

<h1 id="docker-compose常用命令实例"><a href="#docker-compose常用命令实例" class="headerlink" title="docker-compose常用命令实例"></a>docker-compose常用命令实例</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d nginx                     构建建启动nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose <span class="built_in">exec</span> nginx bash            登录到nginx容器中</span><br><span class="line"></span><br><span class="line">docker-compose down                              删除所有nginx容器,镜像</span><br><span class="line"></span><br><span class="line">docker-compose ps                                   显示所有容器</span><br><span class="line"></span><br><span class="line">docker-compose restart nginx                   重新启动nginx容器</span><br><span class="line"></span><br><span class="line">docker-compose run --no-deps --<span class="built_in">rm</span> php-fpm php -v  在php-fpm中不启动关联容器，并容器执行php -v 执行完成后删除容器</span><br><span class="line"></span><br><span class="line">docker-compose build nginx                     构建镜像 。        </span><br><span class="line"></span><br><span class="line">docker-compose build --no-cache nginx   不带缓存的构建。</span><br><span class="line"></span><br><span class="line">docker-compose logs  nginx                     查看nginx的日志 </span><br><span class="line"></span><br><span class="line">docker-compose logs -f nginx                   查看nginx的实时日志</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">docker-compose config  -q                        验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容，当文件配置错误，输出错误信息。 </span><br><span class="line"></span><br><span class="line">docker-compose events --json nginx       以json的形式输出nginx的docker日志</span><br><span class="line"></span><br><span class="line">docker-compose pause nginx                 暂停nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose unpause nginx             恢复ningx容器</span><br><span class="line"></span><br><span class="line">docker-compose <span class="built_in">rm</span> nginx                       删除容器（删除前必须关闭容器）</span><br><span class="line"></span><br><span class="line">docker-compose stop nginx                    停止nignx容器</span><br><span class="line"></span><br><span class="line">docker-compose start nginx                    启动nignx容器</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>运维</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2022/09/23/docker/</url>
    <content><![CDATA[<h1 id="Docker的使用"><a href="#Docker的使用" class="headerlink" title="Docker的使用"></a>Docker的使用</h1><h2 id="1、安装与卸载"><a href="#1、安装与卸载" class="headerlink" title="1、安装与卸载"></a>1、安装与卸载</h2><p>阿里云查看系统版本 cat &#x2F;etc&#x2F;os-release</p>
<span id="more"></span>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装</p>
</blockquote>
<p>帮助文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #默认国外</span><br><span class="line">    </span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清空 yum 缓存更新软件包的索引</span> </span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4、安装docker</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5、启动 docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6、测试是否安装成功</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7、测试 hello-world</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8、查看下载的镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>卸载docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h2 id="2、阿里云镜像加速"><a href="#2、阿里云镜像加速" class="headerlink" title="2、阿里云镜像加速"></a>2、阿里云镜像加速</h2><ol>
<li><p>找到阿里云容器镜像服务</p>
</li>
<li><p>镜像加速器</p>
</li>
<li><p>配置使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://r9elbpdx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3、docker-底层原理"><a href="#3、docker-底层原理" class="headerlink" title="3、docker 底层原理"></a>3、docker 底层原理</h2><p>docker 是一个 Client - Server 结构的系统，docker 的守护进程运行在主机上。通过 Socket 从客户端访问。</p>
<p>dockerServer 接受到 Docker-Client 的指令就会执行这个命令。</p>
<blockquote>
<p>docker为什么比VM快？</p>
</blockquote>
<ol>
<li><p>docker 有着比虚拟机更少的抽象层</p>
</li>
<li><p>docker 利用的是宿主机的内核，VM 需要的是 Guest OS。</p>
<p>新建一个容器的时候，docker 不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载 Guest OS，分钟级别的，而 docker 是利用宿主机的操作系统，省略了这个复杂的过程，秒级</p>
</li>
</ol>
<h2 id="4、docker的常用命令"><a href="#4、docker的常用命令" class="headerlink" title="4、docker的常用命令"></a>4、docker的常用命令</h2><blockquote>
<p>帮助命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version #显示 docker 的版本信息</span><br><span class="line">docker info	# 显示 docker 更详细的信息</span><br><span class="line">docker 命令 --help # 万能命令，列出所有的命令</span><br></pre></td></tr></table></figure>

<blockquote>
<p>镜像命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment">#查看所有本地的主机上的镜像</span></span><br><span class="line"><span class="comment">#解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line"></span><br><span class="line">docker search 镜像仓库名 <span class="comment"># 搜索镜像</span></span><br><span class="line"></span><br><span class="line">docker pull 镜像仓库名[:tag] <span class="comment"># 下载镜像 docker pull mysql:5.7</span></span><br><span class="line"></span><br><span class="line">docker rmi -f $(docker images -aq) <span class="comment">#删除全部镜像</span></span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像<span class="built_in">id</span> <span class="comment"># 根据镜像id删除镜像，加上空格 删除多个镜像</span></span><br><span class="line"></span><br><span class="line">docker rmi $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>) <span class="comment"># 删除名称为 none 镜像</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>容器命令</p>
</blockquote>
<p>有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<p><strong>新建容器并启动</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name=<span class="string">&quot;Name&quot;</span> 	容器名字，用来区分容器</span><br><span class="line">-d 			  	后台方式运行</span><br><span class="line">-it				使用交互方式运行，进入容器查看内容</span><br><span class="line">-p 				指定容器端口 -p 8080:8080</span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-P 				随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run -it centos /bin/bash 运行 centos容器并进入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的运行容器</span></span><br><span class="line">docker ps</span><br><span class="line">参数： -a <span class="comment"># 列出当前正在运行的容器+历史运行过的容器</span></span><br><span class="line">	  -n=? <span class="comment"># 显示最近创建的容器</span></span><br><span class="line">	  -q <span class="comment">#只显示容器的编号</span></span><br><span class="line">	  </span><br><span class="line">退出容器</span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 容器停止并退出</span></span><br><span class="line">ctrl + p + q <span class="comment"># 容器不停止。退出</span></span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span>				<span class="comment"># 删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -f</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq) <span class="comment"># 删除所有的容器</span></span><br><span class="line">docker ps -a -q|xargs docker <span class="built_in">rm</span> <span class="comment"># 删除所有的容器</span></span><br><span class="line">docker stop $(docker ps -aq) <span class="comment">#停止所有容器</span></span><br><span class="line"></span><br><span class="line">启动和停止容器的操作</span><br><span class="line">docker start 容器<span class="built_in">id</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用的其它命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台启动容器</span></span><br><span class="line">docker run -d centos</span><br><span class="line"><span class="comment"># 问题 docker ps，发现 cnetos 停止了</span></span><br><span class="line"><span class="comment"># 常见的坑：docker 容器使用后台运行就必须要有一个前台进程，docker 发现没有应用，就会自动停止</span></span><br><span class="line"><span class="comment"># nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#往容器中输入命令</span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">&quot;while true;do echo hqz;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment"># 查看日志 -tf 显示日志</span></span><br><span class="line">docker logs -tf --<span class="built_in">tail</span> [显示行数] 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器中进程信息 ps top命令</span></span><br><span class="line">docker top 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像的元数据</span></span><br><span class="line">docker inspect 容器<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bashShell <span class="comment">#进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="line">docker attach 容器<span class="built_in">id</span> <span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从容器内拷贝文件到主机上，从主机到容器就是反过来</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径 目的地主机路径</span><br></pre></td></tr></table></figure>

<h2 id="5、docker使用镜像实例"><a href="#5、docker使用镜像实例" class="headerlink" title="5、docker使用镜像实例"></a>5、docker使用镜像实例</h2><blockquote>
<p>docker部署nginx</p>
</blockquote>
<ol>
<li><p>搜索：在 dockerhub上搜索镜像</p>
</li>
<li><p>拉取镜像</p>
</li>
<li><p>启动镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 1314:80 nginx</span><br><span class="line"><span class="comment"># -d：后台运行</span></span><br><span class="line"><span class="comment"># --name：命名</span></span><br><span class="line"><span class="comment"># -p：通过服务器的1314端口去访问容器内的nginx的80端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 nginx </span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx01 /bin/bash</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>docker部署tomcat</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> tomcat:9.0 <span class="comment"># 官方使用 --rm 用完即删</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 /bin/bash</span><br><span class="line">docker run -it -p 8080:8080 --name mytomcat -v /home/webapps:/usr/local/apache-tomcat-9.0.52/webapps -v /home/logs:/usr/local/apache-tomcat-9.0.52/logs d1f14679a750</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker部署es+kibana</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># es </span></span><br><span class="line"><span class="comment"># 1、暴露的端口很多</span></span><br><span class="line"><span class="comment"># 2、占用内存大</span></span><br><span class="line"><span class="comment"># 3、es的数据需要放置到安全目录挂载</span></span><br><span class="line"><span class="comment"># --net somenetwork : 网络配置</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:tag</span><br><span class="line"></span><br><span class="line">docker stats <span class="comment"># 查看cpu的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加内存的限制，修改配置文件 -e 环境配置修改</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:tag</span><br></pre></td></tr></table></figure>

<h2 id="6、可视化管理界面"><a href="#6、可视化管理界面" class="headerlink" title="6、可视化管理界面"></a>6、可视化管理界面</h2><ol>
<li><p>portainer</p>
<p>Docker的图形化界面管理工具，提供一个后台面板进行操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7、commit镜像"><a href="#7、commit镜像" class="headerlink" title="7、commit镜像"></a>7、commit镜像</h2><p>保存当前容器的状态，就可以通过commit提交来获取一个镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker commit 提交容器成为一个新的版本</span></span><br><span class="line">docker commit -m=&quot;提交的描述消息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:版本号</span><br></pre></td></tr></table></figure>

<h2 id="8、容器数据卷"><a href="#8、容器数据卷" class="headerlink" title="8、容器数据卷"></a>8、容器数据卷</h2><p>容器之间数据共享的技术，docker容器中产生的数据同步到本地。</p>
<p>将容器内的目录挂载到linux上面。</p>
<p><strong>容器的持久化和同步操作，容器间也是可以数据共享的</strong></p>
<blockquote>
<p>数据卷的使用</p>
</blockquote>
<p>直接使用命令来挂载 -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line">				# 宿主机路径:容器路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过 docker inspect 容器<span class="built_in">id</span> 查看挂载情况</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">好处：目录挂载之后修改配置文件只需要在本地修改即可，容器内会自动同步。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>mysql实战</p>
</blockquote>
<ol>
<li><p>下载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行mysql容器，<strong>启动mysql要设置密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动成功之后可以使用 navicat 连接数据库</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>具名和匿名挂载</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载：只写容器内路径，不写容器外路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 容器内路径</span></span><br><span class="line">docker run -d -p --name nginx01 -v /etc/nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有卷 volume 的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载 juming-nginx：命名</span></span><br><span class="line">docker run -d -p --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 docker volume inspect juming-nginx 查看挂载的目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有指定目录的情况下都是在 /var/lib/docker/volumes/xxxx/_data</span></span><br><span class="line"></span><br><span class="line">-v 容器内路径 # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径 # 具名挂载</span><br><span class="line">-v 宿主机路径:容器内路径 # 指定路径挂载</span><br></pre></td></tr></table></figure>

<h2 id="9、Dockerfile-挂载目录"><a href="#9、Dockerfile-挂载目录" class="headerlink" title="9、Dockerfile 挂载目录"></a>9、Dockerfile 挂载目录</h2><p>用来构建docker镜像的构建文件，命令脚本</p>
<p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容 指令（大写）</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] # 挂载目录，匿名挂载</span><br><span class="line"></span><br><span class="line">CMD echo &quot;...end...&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的每个命令都是一层</span></span><br></pre></td></tr></table></figure>

<p>启动 dockerfile 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /home/docker-test-volume/dockerfile01 -t hqz/centos:1.0 .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">				dockerfile文件路径						 镜像名及版本</span>				</span><br></pre></td></tr></table></figure>

<p>查看挂载目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id	# 找 mounts</span><br></pre></td></tr></table></figure>

<h2 id="10、数据卷容器"><a href="#10、数据卷容器" class="headerlink" title="10、数据卷容器"></a>10、数据卷容器</h2><p>容器之间同步数据，如：多个mysql同步数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name docker02 --volume-from docker01 镜像id</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">						容器名					父容器名</span></span><br></pre></td></tr></table></figure>

<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p>
<p>容器删除本地数据不会删除。</p>
<h2 id="11、docker-镜像导出与加载"><a href="#11、docker-镜像导出与加载" class="headerlink" title="11、docker 镜像导出与加载"></a>11、docker 镜像导出与加载</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载</span></span><br><span class="line">docker load -i xxx.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line">docker save -o xxx.tar  aaa:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改进行名称</span></span><br><span class="line">docker tag 【镜像ID】【镜像名称】:【tag版本信息】 </span><br></pre></td></tr></table></figure>

<h2 id="12、Dockerfile"><a href="#12、Dockerfile" class="headerlink" title="12、Dockerfile"></a>12、Dockerfile</h2><p>命令参数脚本</p>
<p>构建步骤：</p>
<ol>
<li>编写一个 dockerfile 脚本</li>
<li>docker build 构建成为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像（dockerHub、阿里云镜像仓库）</li>
</ol>
<blockquote>
<p>dockerfile构建过程</p>
</blockquote>
<p><strong>基础知识：</strong></p>
<ol>
<li>每个保留关键字（指令）都必须是大写字母</li>
<li>以从上到下的顺序执行</li>
<li># 表示注释</li>
<li>每个指令都会创建提交一个新的镜像层，并提交</li>
</ol>
<p><strong>步骤：</strong>开发、部署、运维</p>
<p>Dockerfile：构建文件，定义了一切的步骤，源代码</p>
<p>DockerImages：通过 DockerFile 构建生成的镜像，最终发布和运行的产品</p>
<p>Docker容器：容器就是镜像运行起来提供服务器</p>
<blockquote>
<p>DockerFile指令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM			# 基础镜像，一切从这里开始构建 centos</span><br><span class="line">MAINTAINER		# 镜像的作者，姓名 + 邮箱</span><br><span class="line">RUN				# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD 			# 步骤：tomcat镜像，这个tomcat压缩包，添加内容</span><br><span class="line">WORKDIR			# 镜像的工作目录</span><br><span class="line">VOLUME			# 挂载的目录</span><br><span class="line">EXPOSE			# 暴露端口配置</span><br><span class="line">CMD				# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT		# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD			# 当构建一个被继承 Dockerfile 这个时候就会运行ONBUILD 的指令，触发指令</span><br><span class="line">COPY			# 类似 ADD 将文件拷贝到镜像中</span><br><span class="line">ENV				# 构建的时候设置环境变量</span><br><span class="line">ARG				# 参数变量，构建时生效</span><br><span class="line">LABEL			# 指定元数据信息，一些</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实战测试</p>
</blockquote>
<p>构建自己的 centos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER hqz&lt;1161028135@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p><font color="orange">docker history 镜像id</font> 可以查看镜像的构建过程</p>
<blockquote>
<p>CMD 与 ENTRYPOINT</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行这个 Dockerfile 在运行镜像时会执行 <span class="built_in">ls</span> -a 命令列出文件列表</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只会执行最后一个 CMD</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像时不可追加命令，会替换</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像时可以追加命令</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实战：Tomcat镜像</p>
</blockquote>
<ol>
<li>准备镜像文件 tomcat 压缩包，jdk 压缩包</li>
<li>编写 Dockerfile 文件</li>
</ol>
<p><strong>如果文件命名为 Dockerfile 就不需要 -f 指令了</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER hqz&lt;1161028135@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt # 将 readme.txt 拷贝到容器内部</span><br><span class="line"></span><br><span class="line">ADD jdk-8u11-linux-x64.tar.gz /usr/local/ # 压缩包会自动解压</span><br><span class="line">ADD apache-tomcat-9.0.22.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local # 镜像启动之后就会进入到这个目录</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_11</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar;$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV PATH $PATH;$JAVA_HOME/bin;$CATALINA_HOME/lib;$CATALINA_HOME/bin # 把目录放入总的 PATH 中</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.22/bin/logs/catalina.out</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build Dockerfile -t diytomcat:1.0 .</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令启动</span></span><br><span class="line">docker run -d -p 9090:8080 --name mytomcat -v /home/hqz/build/tomcat/test:/usr/local/apache-tomcat-9.0.22/webapps/test -v /home/hqz/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.22/logs diytomcat:1.0</span><br></pre></td></tr></table></figure>

<h2 id="13、发布镜像"><a href="#13、发布镜像" class="headerlink" title="13、发布镜像"></a>13、发布镜像</h2><blockquote>
<p>DockerHub</p>
</blockquote>
<ol>
<li>注册账号</li>
<li>确定这个账号可以登录</li>
<li>在服务器上提交自己的镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker login --<span class="built_in">help</span></span></span><br><span class="line">docker login -u -p</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>登录完毕后就可以提交镜像了，docker push</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag 原镜像名 用户名/镜像名:版本号</span><br><span class="line">docker push 作者/镜像名:版本号</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>阿里云镜像服务</p>
</blockquote>
<ol>
<li>登录阿里云</li>
<li>找到容器镜像服务</li>
<li>创建命名空间</li>
<li>创建容器镜像</li>
<li>镜像页面中有详细的拉取上传过程</li>
</ol>
<h2 id="14、SpringBoot微服务打包Docker镜像"><a href="#14、SpringBoot微服务打包Docker镜像" class="headerlink" title="14、SpringBoot微服务打包Docker镜像"></a>14、SpringBoot微服务打包Docker镜像</h2><ol>
<li>构建springboot项目</li>
<li>打包应用</li>
<li>编写dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ol>
<h2 id="15、docker-网络模式详解及容器间网络通信"><a href="#15、docker-网络模式详解及容器间网络通信" class="headerlink" title="15、docker 网络模式详解及容器间网络通信"></a>15、docker 网络模式详解及容器间网络通信</h2><p>安装 docker 之后会默认创建三种网络，通过 docker netword ls 查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izbp1btjqbqb2cvsfklp0yz ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME                    DRIVER    SCOPE</span><br><span class="line">3c96e315279b   bridge                  bridge    local</span><br><span class="line">962cd40d899a   host                    host      local</span><br><span class="line">c08aa62ab73b   none                    null      local</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>网络模式</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>bridge</td>
<td>为每一个容器分配、设置 IP 等，并将容器连接到一个 docker0 虚拟网桥，默认为该模式</td>
</tr>
<tr>
<td>host</td>
<td>容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口</td>
</tr>
<tr>
<td>none</td>
<td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网络桥接，IP 等</td>
</tr>
<tr>
<td>container</td>
<td>新创建的容器不会创建自己的网卡和配置自己的 IP，而是和一个指定的容器共享 IP、端口范围</td>
</tr>
</tbody></table>
<h3 id="15-1、bridge-网络模式"><a href="#15-1、bridge-网络模式" class="headerlink" title="15.1、bridge 网络模式"></a>15.1、bridge 网络模式</h3><p>​	在该模式中，Docker 守护进程创建了一个虚拟的以太网桥 <code>docker0</code>，新建的容器会自动桥接到这个接口，附加在其上的任何网卡之间都能自动转发数据包。</p>
<p>​	默认情况下，守护进程会创建一对对等虚拟设备接口 <code>veth pair</code>，将其中一个接口设置为容器的 <code>eth0</code>接口（容器的网卡），另一个接口放置在宿主机的命名空间中，以类似 vethxxx 这样的名字命名，从而将宿主机上所有的容器连接到这个内部网络上</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/dokcer-bridge.png" alt="dokcer-bridge"></p>
<blockquote>
<p><code>bridge</code> 网络模式的使用，只需要在创建容器的时通过参数 <code>--net bridge</code> 或者 <code>--network bridge</code> 指定即可，当然这也是创建容器默认使用的网络模式，也就是说这个参数是可以省略的</p>
</blockquote>
<p>bridge 桥接模式的实现步骤主要如下：</p>
<ul>
<li>Docker Daemon 利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备，假设为 veth0 和 veth1。而 veth pair 技术的特性可以保证无论哪一个 veth 接收到网络报文，都会将报文传输给另一方</li>
<li>Docker Daemon 将 veth0 附加到 Docker Daemon 创建的 docker0 网桥上，保证宿主机的网络报文可以发往 veth0</li>
<li>Docker Daemon 将 veth1 添加到 Docker Container 所属的 namespace 下，并改名为 eth0，如此一来，宿主机的网络报文若发往 veth0，则立即会被 Container 的 eth0 接收，实现宿主机到 Docker Container 网络的联通性，同时，也保证 Docker Container 单独使用 eth0，实现容器网络环境的隔离性</li>
</ul>
<h3 id="15-2、host-网络模式"><a href="#15-2、host-网络模式" class="headerlink" title="15.2、host 网络模式"></a>15.2、host 网络模式</h3><ul>
<li><code>host</code> 网络模式需要在创建容器时通过参数 <code>--net host</code> 或者 <code>--network host</code> 指定</li>
<li>采用 <code>host </code>网络模式的 <code>Docker Container</code>，可以直接使用宿主机的 <code>IP</code> 地址与外界进行通信，若宿主机的 <code>eth0</code> 是一个公有 IP，那么容器也拥有这个公有 <code>IP</code>。同时<code>容器内服务的端口也可以使用宿主机的端口</code>，无需额外进行 NAT 转换</li>
<li><code>host</code> 网络模式可以让容器共享宿主机网络栈，这样的好处是<code>外部主机与容器直接通信</code>，但是<code>容器的网络缺少隔离性</code></li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20210813141152656.png" alt="host网络模式"></p>
<h3 id="15-3、none-网络模式"><a href="#15-3、none-网络模式" class="headerlink" title="15.3、none 网络模式"></a>15.3、none 网络模式</h3><ul>
<li><code>none </code>网络模式是指禁用网络功能，只有 lo 接口 local 的简写，代表 <code>127.0.0.1</code>，即 <code>localhost</code> 本地环回接口。在创建容器时通过参数 <code>--net none</code> 或者 <code>--network none</code> 指定</li>
<li><code>none</code> 网络模式即不为 <code>Docker Container</code> 创建任何的网络环境，容器内部就只能使用 <code>loopback</code> 网络设备，不会再有其它的网络资源</li>
</ul>
<h3 id="15-4、Container-网络模式"><a href="#15-4、Container-网络模式" class="headerlink" title="15.4、Container 网络模式"></a>15.4、Container 网络模式</h3><ul>
<li><code>Container</code> 网络模式是 <code>Docker</code> 中一种较为特别的网络模式，在创建容器时通过参数 <code>--net container:已运行的容器名称|ID</code> 或者 <code>--network container:已运行的容器名称|ID</code> 指定</li>
<li>处于这个模式下的 <code>Docker</code> 容器会共享一个网络栈，这样两个容器之间就可以通过 <code>localhost</code> 高效快速通信</li>
<li><code>Container</code> 网络模式即新创建的容器不会创建自己的网卡，配置自己的 <code>IP</code>，而是和一个指定的容器共享 <code>IP</code>、端口范围等。同样两个容器除了网络方面相同之外，其他的如文件系统、进程列表还是隔离的</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20210813142740848.png" alt="Container网络模式"></p>
<h2 id="16、自定义网络"><a href="#16、自定义网络" class="headerlink" title="16、自定义网络"></a>16、自定义网络</h2><ul>
<li>在实际开发中更推荐使用自定义的网络进行容器管理，以及<code>启用容器名称到 IP 地址的自动 DNS 解析</code></li>
<li>通过 <code>docker network create + 网络名</code> 命令可以创建自定义网络模式，默认时 bridge 模式</li>
<li>使用自定义的网络，容器之间启用了容器名称到 <code>IP</code> 地址的自动 <code>DNS</code> 解析，前提是创建容器时需要使用 <code>--name</code> 指定容器名称</li>
</ul>
<hr>
<p>docker 安装 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=sqlserver -d mysql:5.7 --character -set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>

<p>docker 安装 redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6380:6379 -d redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line">cd /usr/local/bin/</span><br><span class="line">./redis-cli</span><br><span class="line">CONFIG get requirepass</span><br><span class="line">CONFIG set requirepass x</span><br></pre></td></tr></table></figure>



<h1 id="常用镜像的配置"><a href="#常用镜像的配置" class="headerlink" title="常用镜像的配置"></a>常用镜像的配置</h1><h2 id="17、nacos"><a href="#17、nacos" class="headerlink" title="17、nacos"></a>17、nacos</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos 镜像的拉取</span></span><br><span class="line">docker pull nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos 的启动</span></span><br><span class="line">docker run --<span class="built_in">env</span> MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker start [name]</span><br><span class="line">docker star</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库，进入容器，修改 config/application.properties 配置 host、dbName、username、password，也可挂载出配置文件</span></span><br></pre></td></tr></table></figure>

<h2 id="18、mysql"><a href="#18、mysql" class="headerlink" title="18、mysql"></a>18、mysql</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run --name mysql5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci -e MYSQL_ROOT_PASSWORD=sqlserver -v /e/docker-data/mysql/data:/var/lib/mysql -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="19、postgresql"><a href="#19、postgresql" class="headerlink" title="19、postgresql"></a>19、postgresql</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull postgresql:12.0</span><br><span class="line"></span><br><span class="line">docker run --name postgresql -e POSTGRES_PASSWORD=123456<span class="comment">#789 -v /e/docker-data/postgresql/data:/var/lib/postgresql/data -p 5433:5432 -d postgres:12.0</span></span><br></pre></td></tr></table></figure>

<h2 id="20、redis"><a href="#20、redis" class="headerlink" title="20、redis"></a>20、redis</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -p 6379:6379 --name redis -v /e/docker-data/redis/docker-redis-config/redis.conf:/etc/redis/redis.conf -v /e/docker-data/redis/docker-redis-data:/data -d redis redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h2 id="21、rabbitmq"><a href="#21、rabbitmq" class="headerlink" title="21、rabbitmq"></a>21、rabbitmq</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq</span><br><span class="line"></span><br><span class="line">docker run --hostname my_rabbit --name local_mq -p 15672:15672 -p 5672:5672 -v /e/docker-data/rabbitmq/data:/var/lib/rabbitmq/mnesia/  -d  rabbitmq</span><br><span class="line"></span><br><span class="line">docker run -d --name QcRabbitmq -e RABBITMQ_DEFAULT_USER=qcsys -e RABBITMQ_DEFAULT_PASS=qcsys -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure>

<h2 id="22、zookeeper"><a href="#22、zookeeper" class="headerlink" title="22、zookeeper"></a>22、zookeeper</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br><span class="line"></span><br><span class="line">docker run -d -e TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> -p 2181:2181 -v :/data --name zookeeper --restart always zookeeper</span><br><span class="line"></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --<span class="built_in">link</span> zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper</span><br><span class="line"></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --<span class="built_in">link</span> zoo1:zk1 --<span class="built_in">link</span> zoo2:zk2 --<span class="built_in">link</span> zoo3:zk3 --net zookeeper_default zookeeper:3.4.11 zkCli.sh -server zk1:2181,zk2:2181,zk3:2181</span><br></pre></td></tr></table></figure>

<h2 id="23、Nginx"><a href="#23、Nginx" class="headerlink" title="23、Nginx"></a>23、Nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name zhengzhou-nginx -p 22000:80 -v /data/docker/nginx/html:/usr/share/nginx/html -v /data/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /data/docker/nginx/logs:/var/log/nginx -v /data/docker/nginx/conf.d:/etc/nginx/conf.d -v /data/docker/nginx/static: -d --restart=always nginx:latest</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"> proxy_set_header  Host $host:$server_port;</span><br><span class="line"> proxy_set_header  X-Real-IP $remote_addr;  </span><br><span class="line"> proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"> proxy_set_header  X-Forwarded-Proto $scheme;  </span><br><span class="line"> proxy_pass http://127.0.0.1:8888;</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">index  index.html index.htm;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="docker-maven"><a href="#docker-maven" class="headerlink" title="docker maven"></a>docker maven</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker的注册服务器（windows 上 docker 开启 Expose daemon on tcp://localhost:2375 without TLS）</span></span><br><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br><span class="line"><span class="comment"># 开启docker远程api,原来文件描述符fd方式改为tcp，指定端口2375</span></span><br><span class="line">vi /usr/lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># 让docker支持http上传镜像文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123; &quot;insecure-registries&quot;:[&quot;ip:5000&quot;] &#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"><span class="comment"># 本地jar包的pom文件引入docker插件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>运维</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2022/09/23/git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><h3 id="0-1、获取-Git-仓库"><a href="#0-1、获取-Git-仓库" class="headerlink" title="0.1、获取 Git 仓库"></a>0.1、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E8%8E%B7%E5%8F%96-git-%E4%BB%93%E5%BA%93">获取 Git 仓库</a></h3><p>有两种取得 Git 项目仓库的方法。</p>
<ol>
<li>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</li>
<li>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</li>
</ol>
<span id="more"></span>

<h3 id="0-2、记录每次更新到仓库"><a href="#0-2、记录每次更新到仓库" class="headerlink" title="0.2、记录每次更新到仓库"></a>0.2、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93">记录每次更新到仓库</a></h3><ol>
<li><strong>检测当前文件状态</strong> : <code>git status</code></li>
<li><strong>提出更改（把它们添加到暂存区</strong>）：<code>git add filename </code> (针对特定文件)、<code>git add *</code>(所有文件)、<code>git add *.txt</code>（支持通配符，所有 .txt 文件）</li>
<li><strong>忽略文件</strong>：<code>.gitignore</code> 文件</li>
<li><strong>提交更新:</strong> <code>git commit -m &quot;代码提交信息&quot;</code> （每次准备提交前，先用 <code>git status</code> 看下，是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>）</li>
<li><strong>跳过使用暂存区域更新的方式</strong> : <code>git commit -a -m &quot;代码提交信息&quot;</code>。 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤。</li>
<li><strong>移除文件</strong> ：<code>git rm filename</code> （从暂存区域移除，然后提交。）</li>
<li><strong>对文件重命名</strong> ：<code>git mv README.md README</code>(这个命令相当于<code>mv README.md README</code>、<code>git rm README.md</code>、<code>git add README</code> 这三条命令的集合)</li>
</ol>
<h3 id="0-3、推送改动到远程仓库"><a href="#0-3、推送改动到远程仓库" class="headerlink" title="0.3、推送改动到远程仓库"></a>0.3、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E6%8E%A8%E9%80%81%E6%94%B9%E5%8A%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送改动到远程仓库</a></h3><ul>
<li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：·<code>git remote add origin &lt;server&gt;</code> ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/Snailclimb/test.git</code></p>
</li>
<li><p>将这些改动提交到远端仓库：<code>git push origin master</code> (可以把 <em>master</em> 换成你想要推送的任何分支)</p>
<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>
</li>
</ul>
<h3 id="0-4、远程仓库的移除与重命名"><a href="#0-4、远程仓库的移除与重命名" class="headerlink" title="0.4、远程仓库的移除与重命名"></a>0.4、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%A7%BB%E9%99%A4%E4%B8%8E%E9%87%8D%E5%91%BD%E5%90%8D">远程仓库的移除与重命名</a></h3><ul>
<li>将 test 重命名位 test1：<code>git remote rename test test1</code></li>
<li>移除远程仓库 test1:<code>git remote rm test1</code></li>
</ul>
<h3 id="0-5、查看提交历史"><a href="#0-5、查看提交历史" class="headerlink" title="0.5、查看提交历史"></a>0.5、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">查看提交历史</a></h3><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 <code>git log</code> 命令。<code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。</p>
<p><strong>可以添加一些参数来查看自己希望看到的内容：</strong></p>
<p>只看某个人的提交记录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --author=bobCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<h3 id="0-6、撤销操作"><a href="#0-6、撤销操作" class="headerlink" title="0.6、撤销操作"></a>0.6、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C">撤销操作</a></h3><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">git commit --amendCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>取消暂存的文件</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">git reset filenameCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>撤消对文件的修改:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">--</span> filenameCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset <span class="literal">--hard</span> origin/master</span><br></pre></td></tr></table></figure>

<h3 id="0-7、分支"><a href="#0-7、分支" class="headerlink" title="0.7、分支"></a>0.7、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git?id=%E5%88%86%E6%94%AF">分支</a></h3><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>
<p>我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p>
<p>创建一个名字叫做 test 的分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt="img"></p>
<p>你也可以直接这样创建分支并切换过去(上面两条命令的合写)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">-b</span> feature_xCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>切换到主分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout masterCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>合并分支(可能会有冲突)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git merge testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>把新建的分支删掉</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-d</span> feature_xCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p>将分支推送到远端仓库（推送成功后其他人可见）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git push origin </span><br></pre></td></tr></table></figure>





<h2 id="1、git-推送"><a href="#1、git-推送" class="headerlink" title="1、git 推送"></a>1、git 推送</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. git init //初始化仓库</span><br><span class="line"></span><br><span class="line">git add .(文件name) //添加文件到本地仓库</span><br><span class="line"></span><br><span class="line">git commit -m “first commit” //添加文件描述信息</span><br><span class="line"></span><br><span class="line">git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支</span><br><span class="line"></span><br><span class="line">git pull origin master // 把本地仓库的变化连接到远程仓库主分支</span><br><span class="line"></span><br><span class="line">git push -u origin master //把本地仓库的文件推送到远程仓库</span><br></pre></td></tr></table></figure>

<h2 id="2、Git命令提交代码"><a href="#2、Git命令提交代码" class="headerlink" title="2、Git命令提交代码"></a>2、Git命令提交代码</h2><p><code>Git 全局设置，依次输入命令：</code></p>
<ol>
<li>git config –global user.name “hqz”</li>
<li>git config –global user.email “<a href="mailto:&#49;&#x31;&#54;&#x31;&#x30;&#50;&#56;&#x31;&#51;&#x36;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;">&#49;&#x31;&#54;&#x31;&#x30;&#50;&#56;&#x31;&#51;&#x36;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;</a>“		&#x2F;&#x2F;Git绑定的邮箱</li>
<li>git init  &#x2F;&#x2F;初始化,会在项目根目录生成一个隐藏的.git文件夹</li>
<li>git add .  &#x2F;&#x2F;提交到本地仓库</li>
<li>git commit -m “项目描述”</li>
<li>git remote add origin <a href="https://gitee.com/">https://gitee.com/</a>…  &#x2F;&#x2F;提交地址，新建仓库里面就有，复制进来即可</li>
<li>git push -u origin master   &#x2F;&#x2F;提交！</li>
<li>git push -u origin master -f &#x2F;&#x2F;强制提交</li>
</ol>
<h2 id="3、Git-代码提交规范"><a href="#3、Git-代码提交规范" class="headerlink" title="3、Git 代码提交规范"></a>3、Git 代码提交规范</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">feat：新功能 feature</span><br><span class="line">fix：修复 bug</span><br><span class="line">docs：文档注释</span><br><span class="line">style：代码格式(不影响代码运行的变动)</span><br><span class="line">refactor：重构、优化(既不增加新功能，也不是修复bug)</span><br><span class="line">perf：性能优化</span><br><span class="line">test：增加测试</span><br><span class="line">chore： 构建过程或辅助工具的变动</span><br><span class="line">revert - 回退</span><br><span class="line">build - 打包</span><br></pre></td></tr></table></figure>

<h2 id="4、git-回滚"><a href="#4、git-回滚" class="headerlink" title="4、git 回滚"></a>4、git 回滚</h2><ol>
<li><p>已提交，没有 push</p>
<p>1）git reset –soft [版本号] 撤销 commit</p>
<p>2）git reset –mixed [版本号] 撤销 commit 和 add 两个动作</p>
</li>
<li><p>已提交并且 push</p>
<p>1）git reset –hard [版本号] 撤销并舍弃版本号之后的提交记录，使用需要谨慎</p>
<p>2）git revert [版本号] 撤销，但是保留了提交记录</p>
</li>
</ol>
<h2 id="5、IDEA-Git-撤销push（回退到指定版本）"><a href="#5、IDEA-Git-撤销push（回退到指定版本）" class="headerlink" title="5、IDEA Git 撤销push（回退到指定版本）"></a>5、IDEA Git 撤销push（回退到指定版本）</h2><ol>
<li>查看日志（获得指定版本号；回车查看更多，q退出）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<ol>
<li>回退到指定版本</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --soft 指定版本ID</span><br></pre></td></tr></table></figure>

<ol>
<li>再次推送到远程</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure>





<h2 id="6、Git的回滚与强推"><a href="#6、Git的回滚与强推" class="headerlink" title="6、Git的回滚与强推"></a>6、Git的回滚与强推</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220527150810154.png" alt="image-20220527150810154"></p>
<h3 id="6-1、本地未commit"><a href="#6-1、本地未commit" class="headerlink" title="6.1、本地未commit"></a>6.1、本地未commit</h3><p><font style="color:#eddd02;font-size:">变更文件——roll back</font></p>
<p>idea 中 git -&gt; rollback 回滚代码</p>
<p>新增文件——delete</p>
<h3 id="6-2、commit未push"><a href="#6-2、commit未push" class="headerlink" title="6.2、commit未push"></a>6.2、commit未push</h3><h3 id="6-3、undo-commit"><a href="#6-3、undo-commit" class="headerlink" title="6.3、undo commit"></a>6.3、<font style="color:#eddd02;font-size:">undo commit</font></h3><p>仅适用于最后一次提交进行回滚，代码不会被删除</p>
<h3 id="6-4、drop-commit"><a href="#6-4、drop-commit" class="headerlink" title="6.4、drop commit"></a>6.4、drop commit</h3><p>回滚任意一次提交，且不留下任何痕迹，代码会被删除</p>
<h3 id="6-5、revert-commit"><a href="#6-5、revert-commit" class="headerlink" title="6.5、revert commit"></a>6.5、revert commit</h3><p>回滚任意一次提交，留下一条commit记录，也就是revert记录</p>
<h3 id="6-6、reset"><a href="#6-6、reset" class="headerlink" title="6.6、reset"></a>6.6、reset</h3><p>从某个commit点开始，后面的的commit都删除</p>
<h4 id="6-6-1、soft"><a href="#6-6-1、soft" class="headerlink" title="6.6.1、soft"></a>6.6.1、soft</h4><p>在选定提交之后所做的所有更改都在暂存区，<code>commit的内容都会保留</code>，其新增文件+文件变更都在暂存区</p>
<h4 id="6-6-2、mixed"><a href="#6-6-2、mixed" class="headerlink" title="6.6.2、mixed"></a>6.6.2、mixed</h4><p>在选定提交之后所做的更改将被保留，但不会暂存以进行提交。<code>commit的内容都会保留，新增文件在工作区，文件变更在暂存区</code></p>
<h4 id="6-6-3、hard"><a href="#6-6-3、hard" class="headerlink" title="6.6.3、hard"></a>6.6.3、hard</h4><p>在选定提交之后所做的<code>所有更改都将被丢弃</code>（暂存和已提交），commit的内容 + 暂存区的内容全部被丢弃</p>
<h4 id="6-6-4、keep"><a href="#6-6-4、keep" class="headerlink" title="6.6.4、keep"></a>6.6.4、keep</h4><p>在选定提交之后的以commit内容将被丢弃，但未commit的部分将保留</p>
<p><code>commit部分内容被丢弃，未commit部分保留</code></p>
<h3 id="6-7、commit-amp-amp-push"><a href="#6-7、commit-amp-amp-push" class="headerlink" title="6.7、commit&amp;&amp;push"></a>6.7、commit&amp;&amp;push</h3><h4 id="6-7-1、reset-force-push"><a href="#6-7-1、reset-force-push" class="headerlink" title="6.7.1、reset + force push"></a>6.7.1、reset + force push</h4><p>先回滚本地的代码，在进行 force push，使远程的分支和本地的分支一样，<font color="red">操作需谨慎</font></p>
<h3 id="6-8、找回代码"><a href="#6-8、找回代码" class="headerlink" title="6.8、找回代码"></a>6.8、找回代码</h3><p>代码 rollback 之后，发现代码是需要的，通过 local history 中 reset</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代码版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>java Optional</title>
    <url>/2022/09/23/java-Optional/</url>
    <content><![CDATA[<p><font style="color:#57e615;font-size:30px">Optional的使用</font></p>
<h1 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h1><h2 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、<strong>创建</strong></h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Optional.empty()： 创建一个空的 Optional 实例</span><br><span class="line"></span><br><span class="line">Optional.of(T t)：创建一个 Optional 实例，当 t为null时抛出异常    </span><br><span class="line"></span><br><span class="line">Optional.ofNullable(T t)：创建一个 Optional 实例，但当 t为null时不会抛出异常，而是返回一个空的实例</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、获取"><a href="#2、获取" class="headerlink" title="2、获取"></a>2、<strong>获取</strong></h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">get()：获取optional实例中的对象，当optional 容器为空时报错</span><br></pre></td></tr></table></figure>

<h2 id="3、判断"><a href="#3、判断" class="headerlink" title="3、判断"></a>3、<strong>判断</strong></h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">isPresent()：判断optional是否为空，如果空则返回false，否则返回true</span><br><span class="line"></span><br><span class="line">ifPresent(Consumer c)：如果optional不为空，则将optional中的对象传给Comsumer函数</span><br><span class="line"></span><br><span class="line">orElse(T other)：如果optional不为空，则返回optional中的对象；如果为null，则返回 other 这个默认值</span><br><span class="line"></span><br><span class="line">orElseGet(Supplier&lt;T&gt; other)：如果optional不为空，则返回optional中的对象；如果为null，则使用Supplier函数生成默认值other</span><br><span class="line"></span><br><span class="line">orElseThrow(Supplier&lt;X&gt; exception)：如果optional不为空，则返回optional中的对象；如果为null，则抛出Supplier函数生成的异常</span><br></pre></td></tr></table></figure>

<h2 id="4、过滤"><a href="#4、过滤" class="headerlink" title="4、过滤"></a>4、<strong>过滤</strong></h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">filter(Predicate&lt;T&gt; p)：如果optional不为空，则执行断言函数p，如果p的结果为true，则返回原本的optional，否则返回空的optional </span><br></pre></td></tr></table></figure>

<h2 id="5、映射"><a href="#5、映射" class="headerlink" title="5、映射"></a>5、<strong>映射</strong></h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">map(Function&lt;T, U&gt; mapper)：如果optional不为空，则将optional中的对象 t 映射成另外一个对象 u，并将 u 存放到一个新的optional容器中。</span><br><span class="line"></span><br><span class="line">flatMap(Function&lt; T,Optional&lt;U&gt;&gt; mapper)：跟上面一样，在optional不为空的情况下，将对象t映射成另外一个optional</span><br><span class="line"></span><br><span class="line">区别：map会自动将u放到optional中，而flatMap则需要手动给u创建一个optional</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>optional</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop</title>
    <url>/2022/09/23/hadoop/</url>
    <content><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="1、大数据"><a href="#1、大数据" class="headerlink" title="1、大数据"></a>1、大数据</h2><p>指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>
<p>大数据主要解决<font color="red">海量</font>数据的<font color="red">采集</font>、<font color="red">存储</font>和<font color="red">分析</font>计算问题。</p>
<span id="more"></span>

<h2 id="2、大数据特点（4V）"><a href="#2、大数据特点（4V）" class="headerlink" title="2、大数据特点（4V）"></a>2、大数据特点（4V）</h2><ol>
<li>Volume（大量）</li>
<li>Velocity（高速）</li>
<li>Variety（多样）</li>
<li>Value（低价值密度）</li>
</ol>
<h2 id="3、大数据部门组织架构"><a href="#3、大数据部门组织架构" class="headerlink" title="3、大数据部门组织架构"></a>3、大数据部门组织架构</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220613150547638.png" alt="大数据部门组织架构"></p>
<h1 id="Hadoop入门"><a href="#Hadoop入门" class="headerlink" title="Hadoop入门"></a>Hadoop入门</h1><h2 id="4、Hadoop是什么"><a href="#4、Hadoop是什么" class="headerlink" title="4、Hadoop是什么"></a>4、Hadoop是什么</h2><ol>
<li>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。</li>
<li>主要解决海量数据的存储和海量数据的分析计算问题。</li>
</ol>
<h2 id="5、Hadoop的优势"><a href="#5、Hadoop的优势" class="headerlink" title="5、Hadoop的优势"></a>5、Hadoop的优势</h2><ol>
<li>高可靠性：hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>
<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>
<li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>
<li>高容错性：能够自动将失败的任务重新分配。</li>
</ol>
<h1 id="HDFS-简介"><a href="#HDFS-简介" class="headerlink" title="HDFS 简介"></a>HDFS 简介</h1><p>Hadoop Distributed File System 简称 HDFS，是一个分布式文件系统。</p>
<ol>
<li>NameNode(nn)：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。</li>
<li>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</li>
<li>Secondary NameNode(2nn)：每隔一段时间对 NameNode 元数据备份。</li>
</ol>
<h1 id="YARN-简介"><a href="#YARN-简介" class="headerlink" title="YARN 简介"></a>YARN 简介</h1><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/yarn.png" alt="yarn"></p>
<h1 id="MapReduce-简介"><a href="#MapReduce-简介" class="headerlink" title="MapReduce 简介"></a>MapReduce 简介</h1><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce</p>
<ol>
<li>Map 阶段并行处理输入数据</li>
<li>Reduce 阶段对 Map 结果进行汇总</li>
</ol>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220614212644361.png" alt="image-20220614212644361"></p>
<h1 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h1><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/hdfs-yarn-mapreduce%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" alt="hdfs-yarn-mapreduce三者关系"></p>
<h1 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h1><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220614213906591.png" alt="image-20220614213906591"></p>
<h1 id="Hadoop集群搭建"><a href="#Hadoop集群搭建" class="headerlink" title="Hadoop集群搭建"></a>Hadoop集群搭建</h1><h2 id="6、虚拟机环境准备"><a href="#6、虚拟机环境准备" class="headerlink" title="6、虚拟机环境准备"></a>6、虚拟机环境准备</h2><p>IP地址 192.168.174.100、主机名称 hadoop100、内存4G、硬盘50G，linux系统采用centos 7.5。</p>
<ol>
<li><p>按照 epel-release</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照 net-tool 工具包和 vim</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙及其开机自启</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 hqz 用户，并修改 hqz 用户的密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd hqz</span><br><span class="line">passwd hqz</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 hqz 用户具有 root 权限，方便后期加 sudo 执行 root权限的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 在 %wheel 这行下面添加一行</span></span><br><span class="line">hqz		ALL=(ALL)	NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
</li>
<li><p>在&#x2F;opt目录下创建文件夹，并修改所属主和所属组</p>
<ul>
<li><p>在&#x2F;opt目录下创建module、software文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/module</span><br><span class="line"><span class="built_in">mkdir</span> /opt/software</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改module、software文件夹的所有者和所属组均为hqz用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> hqz:root /opt/module</span><br><span class="line"><span class="built_in">chown</span> hqz:root /opt/software</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看module、software文件夹的所有者和所属组</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="7、克隆虚拟机"><a href="#7、克隆虚拟机" class="headerlink" title="7、克隆虚拟机"></a>7、克隆虚拟机</h2><ol>
<li><p>利用 hadoop100，克隆两台虚拟机：hadoop101、hadoop102</p>
</li>
<li><p>修改克隆机 IP，以 hadoop100 为例</p>
<ul>
<li><p>修改静态ip</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">IPADDR=192.168.174.102</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.174.2</span><br><span class="line">DNS1=192.168.174.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 Linux 虚拟机的虚拟网络编辑器，编辑 -&gt; 虚拟网络编辑器 -&gt; VMnet8，设置子网 ip 为 192.168.174.0 和网关为 192.168.174.2</p>
</li>
<li><p>查看Windows系统适配器VMware Network Adapter VMnet8 的 IP 地址 192.168.174.15 网关和 DNS 都为 192.168.174.2</p>
</li>
</ul>
</li>
<li><p>修改主机名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">hadoop100</span><br></pre></td></tr></table></figure>


</li>
<li><p>配置主机名称映射</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">192.168.174.100 hadoop100</span><br><span class="line">192.168.174.101 hadoop101</span><br><span class="line">192.168.174.102 hadoop102</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 windows 的 host 文件 C:\Windows\System32\drivers\etc</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">192.168.174.100 hadoop100</span><br><span class="line">192.168.174.101 hadoop101</span><br><span class="line">192.168.174.102 hadoop102</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="8、安装-jdk"><a href="#8、安装-jdk" class="headerlink" title="8、安装 jdk"></a>8、安装 jdk</h2><ol>
<li><p>将 jdk8 的安装包传入 &#x2F;opt&#x2F;software&#x2F; （我下载的</p>
</li>
<li><p>解压 jdk 安装包到 &#x2F;opt&#x2F;module&#x2F;</p>
</li>
<li><p>配置 jdk 环境变量</p>
<ul>
<li><p>新建 &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="9、安装-Hadoop"><a href="#9、安装-Hadoop" class="headerlink" title="9、安装 Hadoop"></a>9、安装 Hadoop</h2><ol>
<li><p>将在官网上下载的 Hadoop 安装包拷贝到 &#x2F;opt&#x2F;software&#x2F; 目录</p>
</li>
<li><p>将 Hadoop 安装包解压到 &#x2F;opt&#x2F;module&#x2F;</p>
</li>
<li><p>将 Hadoop 添加到环境变量</p>
<ul>
<li><p>打开 &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh 添加以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/module/hadoop-3.3.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>
</li>
<li><p>source &#x2F;etc&#x2F;profile 刷新环境变量</p>
</li>
</ul>
</li>
</ol>
<h2 id="10、编写集群分发脚本-xsync"><a href="#10、编写集群分发脚本-xsync" class="headerlink" title="10、编写集群分发脚本 xsync"></a>10、编写集群分发脚本 xsync</h2><ol>
<li><p>安装 rsync</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>xsync 集群分发脚本</p>
<ul>
<li><p>打开 &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh，添加一下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xsync</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/hqz/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 &#x2F;home&#x2F;hqz&#x2F;bin 目录下创建 xsync 文件，在文件中添加一下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1. 判断参数个数</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Not Enough Arguement!</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#2. 遍历集群所有机器，在 hadoop101 上遍历的机器改为 hadoop100 hadoop102 </span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hadoop101 hadoop102</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> ====================  <span class="variable">$host</span>  ====================</span><br><span class="line">    <span class="comment">#3. 遍历所有目录，挨个发送</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#4. 判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                <span class="comment">#5. 获取父目录</span></span><br><span class="line">                pdir=$(<span class="built_in">cd</span> -P $(<span class="built_in">dirname</span> <span class="variable">$file</span>); <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">#6. 获取当前文件的名称</span></span><br><span class="line">                fname=$(<span class="built_in">basename</span> <span class="variable">$file</span>)</span><br><span class="line">                ssh <span class="variable">$host</span> <span class="string">&quot;mkdir -p <span class="variable">$pdir</span>&quot;</span></span><br><span class="line">                rsync -av <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$host</span>:<span class="variable">$pdir</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$file</span> does not exists!</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 vim 模式下执行以下命令</span></span><br><span class="line">:<span class="built_in">set</span> ff</span><br><span class="line">:<span class="built_in">set</span> fileformat=unix</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改脚本 xsync 具有执行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x xsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步环境变量配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xsync /etc/profile.d/my_env.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="11、SSH-无密码登录配置"><a href="#11、SSH-无密码登录配置" class="headerlink" title="11、SSH 无密码登录配置"></a>11、SSH 无密码登录配置</h2><ol>
<li><p>生成公钥和私钥</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;root&#x2F;.ssh 目录下可以找到 id_rsa 和 id_rsa.pub 两个文件</p>
</li>
<li><p>切换到 &#x2F;root&#x2F;.ssh 目录，将公钥拷贝到要免密登录的目标机器上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hadoop101</span><br><span class="line">ssh-copy-id hadoop102</span><br></pre></td></tr></table></figure>

<p>其它的机器做类似的操作即可</p>
</li>
</ol>
<h2 id="12、集群配置"><a href="#12、集群配置" class="headerlink" title="12、集群配置"></a>12、集群配置</h2><h3 id="12-1、集群规划部署"><a href="#12-1、集群规划部署" class="headerlink" title="12.1、集群规划部署"></a>12.1、集群规划部署</h3><p><font color="orange">注意：</font></p>
<ul>
<li>NameNode 和 SecondaryNameNode 不要安装在同一个服务器</li>
<li>ResourceManager 也很消耗内存，不要和 NameNode、SecondaryNameNode 配置在同一台机器上</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>hadoop100</th>
<th>hadoop101</th>
<th>hadoop102</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br>DataNode</td>
<td>DataNode</td>
<td>SecondaryNameNode<br>DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>ResourceManager<br>NodeManager</td>
<td>NodeManager</td>
</tr>
</tbody></table>
<h3 id="12-2、配置文件说明"><a href="#12-2、配置文件说明" class="headerlink" title="12.2、配置文件说明"></a>12.2、配置文件说明</h3><p>Hadoop 配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。自定义配置文件：</p>
<p><code>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml</code> 四个配置文件存放在 <code>$HADOOP_HOME/etc/hadoop</code> 这个路径上，用户可以根据项目需求重新进行修改配置。</p>
<h3 id="12-3、配置集群"><a href="#12-3、配置集群" class="headerlink" title="12.3、配置集群"></a>12.3、配置集群</h3><ul>
<li><p>核心配置文件 core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.3.3/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为root --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HDFS 配置文件 hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>YARN 配置文件 yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop101<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 客户端通过该地址向RM提交对应用程序操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ResourceManager 对Applicationhadoop100暴露的访问地址。Applicationhadoop100通过该地址向RM申请资源、释放资源等。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RM HTTP访问地址,查看集群信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- NodeManager通过该地址交换信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--管理员通过该地址向RM发送管理命令 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.admin.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:23142<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.admin.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:23142<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>MapReduce配置文件 mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 workers </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /opt/module/hadoop-3.3.3/etc/hadoop/workers</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></table></figure>


</li>
<li><p>在集群上分发配置好的 Hadoop 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xsync /opt/module/hadoop-3.3.3/etc/hadoop/</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="orange">如果是 root 用户配置 hadoop</font></p>
<ul>
<li><p>在 start-dfs.sh，stop-dfs.sh 两个文件顶部添加以下参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure>


</li>
<li><p>在 start-yarn.sh，stop-yarn.sh 顶部添加以下参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 xsync .&#x2F;sbin 同步文件内容到其它机器</p>
</li>
</ul>
</li>
</ul>
<h3 id="12-4、启动集群"><a href="#12-4、启动集群" class="headerlink" title="12.4、启动集群"></a>12.4、启动集群</h3><ul>
<li><p>如果是第一次启动需要在 hadoop100 格式化 NameNode</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果集群在启动过程中报错，在格式化 NameNode 之前需要先停下 NameNode 和 DataNode 进程，并删除所有机器的 data 和 logs 目录，然后再进行格式化</p>
</li>
<li><p>启动 HDFS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置了 ResourceManager 的节点（hadoop101）启动 YARN</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>Web端查看 HDFS 的 NameNode</p>
<ul>
<li>在浏览器输入：<a href="http://hadoop100:9870（在修改了">http://hadoop100:9870（在修改了</a> windows 上的 host 文件的情况下，否则就把 hadoop100 替换为 ip）</li>
<li>查看 HDFS 上的存储的数据信息</li>
</ul>
</li>
<li><p>Web端查看 YARN 的 ResourceManager</p>
<ul>
<li>浏览器中输入：<a href="http://hadoop101:8088/">http://hadoop101:8088</a></li>
<li>查看 YARN 上运行的 Job 信息</li>
</ul>
</li>
</ul>
<h3 id="12-5、集群测试"><a href="#12-5、集群测试" class="headerlink" title="12.5、集群测试"></a>12.5、集群测试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传文件到集群</span></span><br><span class="line"><span class="comment"># 先创建集群的文件夹</span></span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> /input</span><br><span class="line"><span class="comment"># 上传小文件</span></span><br><span class="line">hadoop fs ./README.txt /input</span><br><span class="line"><span class="comment"># 上传大文件</span></span><br><span class="line">hadoop fs -put /opt/software/jdk-8u202-linux-x64.tar.gz /input</span><br><span class="line"><span class="comment"># 可以在 HDFS 的 web 面板中看到数据</span></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">hadoop fs -get /jdk-8u202-linux-x64.tar.gz ./</span><br><span class="line"><span class="comment"># 执行 wordcount 任务</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar wordcount /input /output</span><br></pre></td></tr></table></figure>



<h3 id="12-6、配置历史服务器"><a href="#12-6、配置历史服务器" class="headerlink" title="12.6、配置历史服务器"></a>12.6、配置历史服务器</h3><p>为了查看程序的历史运行情况，需要配置一下历史服务器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分发配置</span></span><br><span class="line">xsync etc/hadoop/mapred-site.xml</span><br><span class="line"><span class="comment"># 启动历史服务器</span></span><br><span class="line">bin/mapred --daemon start historyserver</span><br></pre></td></tr></table></figure>



<h3 id="12-7、配置日志的聚集"><a href="#12-7、配置日志的聚集" class="headerlink" title="12.7、配置日志的聚集"></a>12.7、配置日志的聚集</h3><p>应用运行完成之后，将程序运行日志信息上传到 HDFS 系统上。</p>
<p>好处：可以方便的查看到程序运行详情，方便开发调试。</p>
<p>注意：开启日志聚集功能，需要重新启动 NodeManager、ResourceManager 和 HistoryServer</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hadoop/</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://hadoop100:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 设置日志保留的时间为7天 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分发配置</span></span><br><span class="line">xsync etc/hadoop/yarn-site.xml</span><br><span class="line"><span class="comment"># 关闭 NodeManager、ResourceManager、HistoryServer hadoop101</span></span><br><span class="line">sbin/stop-yarn.sh</span><br><span class="line"><span class="comment"># hadoop100</span></span><br><span class="line">bin/stop-dfs.sh</span><br><span class="line">bin/mapred --daemon stop historyserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># hadoop100</span></span><br><span class="line">bin/start-dfs.sh</span><br><span class="line">bin/mapred --daemon start historyserver</span><br><span class="line"><span class="comment">#启动 NodeManager、ResourceManager、HistoryServer hadoop101</span></span><br><span class="line">sbin/start-yarn.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 HDFS 上已经存在的输出文件</span></span><br><span class="line">hadoop fs -<span class="built_in">rm</span> -r /optput</span><br><span class="line"><span class="comment"># 执行 wordCount 程序</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar wordcount /input /output</span><br></pre></td></tr></table></figure>



<h3 id="12-8、编写集群启停脚本"><a href="#12-8、编写集群启停脚本" class="headerlink" title="12.8、编写集群启停脚本"></a>12.8、编写集群启停脚本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/hqz/bin</span><br><span class="line">vim myhadoop.sh</span><br><span class="line"><span class="comment"># 脚本内容</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;No Args Input...&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> ;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; =================== 启动 hadoop集群 ===================&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 启动 hdfs ---------------&quot;</span></span><br><span class="line">        ssh hadoop100 <span class="string">&quot;/opt/module/hadoop-3.3.3/sbin/start-dfs.sh&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 启动 yarn ---------------&quot;</span></span><br><span class="line">        ssh hadoop101 <span class="string">&quot;/opt/module/hadoop-3.3.3/sbin/start-yarn.sh&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 启动 historyserver ---------------&quot;</span></span><br><span class="line">        ssh hadoop100 <span class="string">&quot;/opt/module/hadoop-3.3.3/bin/mapred --daemon start historyserver&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; =================== 关闭 hadoop集群 ===================&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 关闭 historyserver ---------------&quot;</span></span><br><span class="line">        ssh hadoop100 <span class="string">&quot;/opt/module/hadoop-3.3.3/bin/mapred --daemon stop historyserver&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 关闭 yarn ---------------&quot;</span></span><br><span class="line">        ssh hadoop101 <span class="string">&quot;/opt/module/hadoop-3.3.3/sbin/stop-yarn.sh&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; --------------- 关闭 hdfs ---------------&quot;</span></span><br><span class="line">        ssh hadoop100 <span class="string">&quot;/opt/module/hadoop-3.3.3/sbin/stop-dfs.sh&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Input Args Error...&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存后退出，然后赋予脚本执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x myhadoop.sh</span><br><span class="line"><span class="comment"># 启动、停止</span></span><br><span class="line">myhadoop stop</span><br><span class="line">myhadoop start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步文件</span></span><br><span class="line">xsync /home/hqz/bin</span><br></pre></td></tr></table></figure>

<h3 id="12-9、编写查询集群运行情况的脚本"><a href="#12-9、编写查询集群运行情况的脚本" class="headerlink" title="12.9、编写查询集群运行情况的脚本"></a>12.9、编写查询集群运行情况的脚本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim jpsall</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hadoop100 hadoop101 hadoop102</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> =============== <span class="variable">$host</span> ===============</span><br><span class="line">        ssh <span class="variable">$host</span> jps </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存后退出，然后赋予脚本执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x jpsall</span><br></pre></td></tr></table></figure>



<h3 id="12-10、常用端口号"><a href="#12-10、常用端口号" class="headerlink" title="12.10、常用端口号"></a>12.10、常用端口号</h3><table>
<thead>
<tr>
<th>端口名称</th>
<th>hadoop2.x</th>
<th>hadoop3.x</th>
</tr>
</thead>
<tbody><tr>
<td>NameNode 内部通信端口</td>
<td>8020&#x2F;9000</td>
<td>8020&#x2F;9000&#x2F;9820</td>
</tr>
<tr>
<td>NameNode HTTP UI</td>
<td>50070</td>
<td>9870</td>
</tr>
<tr>
<td>MapReduce 查看执行任务端口</td>
<td>8088</td>
<td>8088</td>
</tr>
<tr>
<td>历史服务器通信端口</td>
<td>19888</td>
<td>19888</td>
</tr>
</tbody></table>
<h3 id="12-11、常用配置文件"><a href="#12-11、常用配置文件" class="headerlink" title="12.11、常用配置文件"></a>12.11、常用配置文件</h3><table>
<thead>
<tr>
<th>版本</th>
<th>配置文件</th>
</tr>
</thead>
<tbody><tr>
<td>2.x</td>
<td>hdfs-site.xml yarn-site.xml mapred-site.xml workers</td>
</tr>
<tr>
<td>3.x</td>
<td>hdfs-site.xml yarn-site.xml mapred-site.xml slaves</td>
</tr>
</tbody></table>
<h3 id="12-12、集群时间同步"><a href="#12-12、集群时间同步" class="headerlink" title="12.12、集群时间同步"></a>12.12、集群时间同步</h3><p>如果服务器在公网环境（能连接外网），可以不采用集群时间同步。</p>
<p>如果服务器在内网，需要配置集群时间同步，否则可能会出现时间偏差，导致集群执行任务时间不同步。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有节点 ntpd 服务状态和开机自启动状态</span></span><br><span class="line">systemctl status ntpd</span><br><span class="line"><span class="comment"># 如果服务不存在，则安装</span></span><br><span class="line">yum install ntp</span><br><span class="line">systemctl start ntpd</span><br><span class="line"><span class="comment"># 设为开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># hadoop100 修改配置文件</span></span><br><span class="line">vim /etc/ntp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hosts on local network are less restricted. 解开17行的注释 192.168.174.0 为我的网段</span></span><br><span class="line">restrict 192.168.174.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第21行，将这四行注释掉，不向互联网获取时间</span></span><br><span class="line"><span class="comment"># server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment"># server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 末尾添加注释，当节点丢失网络时，可以采用本地时间作为时间服务器，为集群中的其它节点提供时间同步</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存后退出</span></span><br><span class="line">vim /etc/sysconfig/ntpd</span><br><span class="line"><span class="comment"># 增加一行，让硬件时间与系统时间一起同步</span></span><br><span class="line">SYNC_HWCLOCK=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 hadoop101 hadoop102 创建定时任务，一分钟同步一次时间</span></span><br><span class="line">crontab -e</span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate hadoop100</span><br><span class="line"><span class="comment"># 保存后退出</span></span><br></pre></td></tr></table></figure>





<h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><h2 id="13、概述"><a href="#13、概述" class="headerlink" title="13、概述"></a>13、概述</h2><h3 id="13-1、HDFS-的产生背景和定义"><a href="#13-1、HDFS-的产生背景和定义" class="headerlink" title="13.1、HDFS 的产生背景和定义"></a>13.1、HDFS 的产生背景和定义</h3><p>为了解决海量数据的存储问题。</p>
<p>HDFS 是一个分布式文件系统，用于存储文件，通过目录树来定位文件。</p>
<p>适合一次写入，多次读出的场景。</p>
<h3 id="13-2、优缺点"><a href="#13-2、优缺点" class="headerlink" title="13.2、优缺点"></a>13.2、优缺点</h3><blockquote>
<p>优点</p>
</blockquote>
<ol>
<li>高容错性<ul>
<li>数据自动保存多个副本，通过增加副本的形式，提高容错性。</li>
<li>某一个副本丢失以后，可以自动恢复。</li>
</ul>
</li>
<li>适合处理大数据<ul>
<li>数据规模：能处理的数据规模达到 GB、TB、甚至 PB 级别的数据。</li>
<li>文件规模：能处理百万规模以上的文件数量。</li>
</ul>
</li>
<li>可构建在廉价的机器上，通过多副本机制，提高可靠性。</li>
</ol>
<blockquote>
<p>缺点</p>
</blockquote>
<ol>
<li>不适合低延时数据访问。</li>
<li>无法高效的对大量小文件进行存储<ul>
<li>存储大量小文件的话，会占用 NameNode 大量的内存来存储文件目录和块信息，这样是不可取的，因为 NameNode 的内存总是有限的。</li>
<li>小文件存储的寻址时间会超过读取时间，违反了 HDFS 的设计目标。</li>
</ul>
</li>
<li>不支持并发写入和文件随机修改<ul>
<li>一个文件只能有一个写，不允许多个线程同时写。</li>
<li>仅支持数据 append（追加），不支持文件的随机修改。</li>
</ul>
</li>
</ol>
<h3 id="13-3、组成"><a href="#13-3、组成" class="headerlink" title="13.3、组成"></a>13.3、组成</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/hdfsarchitecture.png" alt="hdfs"></p>
<ol>
<li>NameNode(nn):<ul>
<li>管理 HDFS 的名称空间</li>
<li>配置副本策略</li>
<li>管理数据块（Block）映射信息</li>
<li>处理客户端读写请求</li>
</ul>
</li>
<li>DataNode：NameNode 下达命令，DataNode 执行实际的操作<ul>
<li>存储实际的数据块</li>
<li>执行数据块的读&#x2F;写操作</li>
</ul>
</li>
<li>Client：<ul>
<li>文件切分，文件上传 HDFS 的时候，Client 将文件切分成一个一个的 Block，然后进行上传</li>
<li>与 NameNode 交互，获取文件的位置信息</li>
<li>与 DataNode 交互，读取或者写入数据</li>
<li>Client 提供一些命令来管理 HDFS，比如 NameNode 格式化</li>
<li>Clent 可以通过一些命令来访问 HDFS，比如对 HDFS 增删改查操作</li>
</ul>
</li>
<li>Secondary NameNode：并非 NameNode 的热备，当 NameNode 挂掉的时候，它并不是能马上替换 NameNode 并提供服务<ul>
<li>辅助 NameNode，分担其工作量，比如定期合并 Fsimage 和 Edits，并推送给 NameNode</li>
<li>在紧急情况下，可辅助恢复 NameNode</li>
</ul>
</li>
</ol>
<h3 id="13-4、文件块的大小"><a href="#13-4、文件块的大小" class="headerlink" title="13.4、文件块的大小"></a>13.4、文件块的大小</h3><p>HDFS 中的文件在物理上是分块存储（Block），块的大小可以用过配置参数（dfs.blocksize）来规定默认大小在 Hadoop2.x&#x2F;3.x 版本中是 128M，1.x 版本中是 64 M。</p>
<ol>
<li>如果寻址时间为 10ms，即 查找到目标 block 的时间为 10ms</li>
<li><font color="orange">寻址时间为传输时间的 1% 时，为最佳状态</font>，因此传输时间 &#x3D; 10ms&#x2F;0.01 &#x3D; 1000mx &#x3D; 1s</li>
<li>目前磁盘的传输速率普遍为 100MB&#x2F;s</li>
</ol>
<p>为什么块的大小不能设置太小，也不能设置太大？</p>
<ol>
<li>HDFS 的块设置太小，会增加寻址时间，程序一直在找块的开始位置</li>
<li>如果块设置的太大，从<code>磁盘传输数据的时间</code>会明显<code>大于定位这个块开始位置所需的时间</code>，导致程序在处理这块数据时，会非常慢。</li>
</ol>
<p>总结：<font color="orange">HDFS 块的大小设置主要取决于磁盘传输速率</font></p>
<h2 id="14、HDFS-的-Shell-相关操作"><a href="#14、HDFS-的-Shell-相关操作" class="headerlink" title="14、HDFS 的 Shell 相关操作"></a>14、HDFS 的 Shell 相关操作</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出这个命令的参数</span></span><br><span class="line">hadoop fs -<span class="built_in">help</span> <span class="built_in">rm</span></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> /sanguo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 </span></span><br><span class="line"><span class="comment"># 从本地剪切粘贴到 HDFS</span></span><br><span class="line">hadoop fs -moveFromLocal ./guanyu.txt /sanguo</span><br><span class="line"><span class="comment"># 从本地文件系统中拷贝文件到 HDFS 路径中</span></span><br><span class="line">hadoop fs -copyFromLocal ./zhaoyun.txt /sanguo</span><br><span class="line"><span class="comment"># -put 等同于 copyFromLocal</span></span><br><span class="line">hadoop fs -put ./caocao.tx /sanguo</span><br><span class="line"><span class="comment"># 追加一个文件到已经存在的文件末尾</span></span><br><span class="line">hadoop fs -appendToFile ./caopei.txt /sanguo/caocao.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="comment"># 从 HDFS 拷贝到本地</span></span><br><span class="line">hadoop fs -copyToLocal /sanguo/caocao.txt ./</span><br><span class="line"><span class="comment"># -get 等同于 -copyToLocal</span></span><br><span class="line">hadoop fs -get /sanguo/caocao.txt ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># HDFS 直接操作</span></span><br><span class="line"><span class="comment"># -ls: 显示目录信息</span></span><br><span class="line">hadoop fs -<span class="built_in">ls</span> /sanguo</span><br><span class="line"><span class="comment"># -cat：显示文件内容</span></span><br><span class="line">hadoop fs -<span class="built_in">cat</span> /sanguo/caocao.txt</span><br><span class="line"><span class="comment"># -chgrp、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</span></span><br><span class="line">hadoop fs -<span class="built_in">chmod</span> 666 /sanguo/caocao.txt</span><br><span class="line">hadoop fs -<span class="built_in">chown</span> root:root /sanguo/caocao.txt</span><br><span class="line"><span class="comment"># -mkdir：创建路径</span></span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> /shuguo</span><br><span class="line"><span class="comment"># -cp：从HDFS的一个路径拷贝到HDFS的另一个路径</span></span><br><span class="line">hadoop fs -<span class="built_in">cp</span> /sanguo/guanyu.txt /shuguo</span><br><span class="line"><span class="comment"># -mv：在HDFS目录中移动文件</span></span><br><span class="line">hadoop fs -<span class="built_in">mv</span> /sanguo/zhaoyun.txt /shuguo</span><br><span class="line"><span class="comment"># -tail：显示一个文件的末尾1kb的数据</span></span><br><span class="line">hadoop fs -<span class="built_in">tail</span> /shuguo/guanyu.txt</span><br><span class="line"><span class="comment"># -rm：删除文件或文件夹</span></span><br><span class="line">hadoop fs -<span class="built_in">rm</span> /sanguo/guanyu.txt</span><br><span class="line"><span class="comment"># -rm -r：递归删除目录及目录里面内容</span></span><br><span class="line">hadoop fs -<span class="built_in">rm</span> -r /sanguo</span><br><span class="line"><span class="comment"># -du统计文件夹的大小信息</span></span><br><span class="line">hadoop fs -<span class="built_in">du</span> -s -h /shuguo</span><br><span class="line">hadoop fs -<span class="built_in">du</span> -h /shuguo</span><br><span class="line"></span><br><span class="line"><span class="comment"># -setrep：设置 HDFS 中文件的副本数量</span></span><br><span class="line">hadoop fs -setrep 10 /shuguo/guanyu.txt</span><br><span class="line"><span class="comment"># 设置的副本数只是记录在 NameNode 的元数据中，是否真的会有这么多副本，还得看 DataNode 的数量。只有节点数增加到 10 台时，副本数才能达到 10</span></span><br></pre></td></tr></table></figure>



<h2 id="15、HDFS-的读写流程"><a href="#15、HDFS-的读写流程" class="headerlink" title="15、HDFS 的读写流程"></a>15、<font color="orange">HDFS 的读写流程</font></h2><h3 id="15-1、HDFS-的写数据流程"><a href="#15-1、HDFS-的写数据流程" class="headerlink" title="15.1、HDFS 的写数据流程"></a>15.1、HDFS 的写数据流程</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713161914818.png" alt="HDFS 写流程"></p>
<ol>
<li><p>客户端通过 Distributed FileSystem 模块向 NameNode 请求上传文件，NameNode 检查目标文件是否已存在，父目录是否存在。</p>
</li>
<li><p>NameNode 返回是否可以上传。</p>
</li>
<li><p>客户端请求第一个 Block 上传到哪几个 DataNode 服务器上。</p>
</li>
<li><p>NameNode 返回3个 DataNode 节点，分别为 dn1、dn2、dn3。</p>
</li>
<li><p>客户端通过 FSDataOutputStream 模块请求 dn1 上传数据，dn1 收到请求会继续调用 dn2，然后 dn2 调用 dn3，将这个通信管道建立完成。</p>
</li>
<li><p>dn1、dn2、dn3 逐级应答客户端。</p>
</li>
<li><p>客户端开始往 dn1 上传第一个 Block（先从磁盘读取数据放到一个本地内存缓存），以 Packet 为单位，dn1 收到一个 Packet 就会传给 dn2，dn2 传给 dn3；<code>dn1 每传一个 packet 会放入一个应答队列等待应答</code>。</p>
</li>
<li><p>当一个 Block 传输完成之后，客户端再次请求 NameNode 上传第二个 Block 的服务器。（重复执行3-7步）。</p>
</li>
</ol>
<h3 id="15-2、网络拓扑-节点距离计算"><a href="#15-2、网络拓扑-节点距离计算" class="headerlink" title="15.2、网络拓扑-节点距离计算"></a>15.2、网络拓扑-节点距离计算</h3><p>在 HDFS 写数据的过程中，NameNode 会选择距离待上传数据最近距离的 DataNode 接收数据。</p>
<p>节点距离：两个节点到达最近的共同祖先的距离总和</p>
<h3 id="15-3、机架感知"><a href="#15-3、机架感知" class="headerlink" title="15.3、机架感知"></a>15.3、机架感知</h3><ol>
<li>第一个副本在 Client 所处的节点上，如果客户端在集群外，随机选一个。</li>
<li>第二个副本在另一个机架的随机一个节点。</li>
<li>第三个副本在第二个副本所在机架的随机节点。</li>
</ol>
<h3 id="15-4、HDFS-读数据流程"><a href="#15-4、HDFS-读数据流程" class="headerlink" title="15.4、HDFS 读数据流程"></a>15.4、HDFS 读数据流程</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713165158260.png" alt="HDFS 读数据流程"></p>
<ol>
<li>客户端通过 DistributedFileSystem 向 NameNode 请求下载文件，NameNode 通过查询元数据，找到文件块所在的 DataNode 地址。</li>
<li>挑选一台 DataNode（就近原则，然后随机）服务器，请求读取数据。</li>
<li>DataNode 开始传输数据给客户端（从磁盘里面读取数据输入流，以 Packet 为单位来做校验）。</li>
<li>客户端以 Packet 为单位接收，先在本地缓存，然后写入目标文件。</li>
</ol>
<h2 id="16、NN-和-2NN"><a href="#16、NN-和-2NN" class="headerlink" title="16、NN 和 2NN"></a>16、NN 和 2NN</h2><p>FsImage：磁盘中备份元数据的文件。</p>
<p>Edits：每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到 Edits 中，只进行追加操作。</p>
<p>SecondaryNameNode：用于 FsImage 和 Edits 的合并。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713170144576.png" alt="NN 和 2NN 工作机制"></p>
<ol>
<li><p>第一阶段 NameNode 启动</p>
<ul>
<li>第一次启动 NameNode 格式化后，创建 Fsimage 和 Edits 文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</li>
<li>客户端对元数据进行增删改的请求。</li>
<li>NameNode 记录操作日志，更新滚动日志。</li>
<li>NameNode 在内存中对元数据进行增删改。</li>
</ul>
</li>
<li><p>第二阶段：Secondary NameNode工作</p>
<ul>
<li>Secondary NameNode 询问 NameNode 是否需要 CheckPoint。直接带回 NameNode 是否检查结果。</li>
<li>Secondary NameNode 请求执行 CheckPoint。</li>
<li>NameNode 滚动正在写的 Edits 日志。</li>
<li>将滚动前的编辑日志和镜像文件拷贝到 Secondary NameNode。</li>
<li>Secondary NameNode 加载编辑日志和镜像文件到内存，并合并。</li>
<li>生成新的镜像文件 fsimage.chkpoint。</li>
<li>拷贝 fsimage.chkpoint 到 NameNode。</li>
<li>NameNode 将 fsimage.chkpoint 重新命名成 fsimage。</li>
</ul>
</li>
</ol>
<h3 id="16-1、FsImage-和-Edits"><a href="#16-1、FsImage-和-Edits" class="headerlink" title="16.1、FsImage 和 Edits"></a>16.1、FsImage 和 Edits</h3><ol>
<li>FsImage文件：HDFS 文件系统元数据的一个永久性的检查点，其中包含 HDFS 文件系统的所有目录和文件 inode 的序列化信息</li>
<li>Edits 文件：存放 HDFS 文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先会被记录到 Edits 文件中</li>
<li>seen_txid 文件保存的是一个数字，就是最后一个 edits_ 的数字</li>
<li>每次 NameNode 启动的时候，都会将 FsImage 文件读入内存，加载 Edits 里面的更新操作，保证内存中的元数据是最新的、同步的，可以看成 NameNode 启动的时候就将 FsImage 和 Edits 文件进行了合并</li>
</ol>
<h3 id="16-2、CheckPoint-时间设置"><a href="#16-2、CheckPoint-时间设置" class="headerlink" title="16.2、CheckPoint 时间设置"></a>16.2、CheckPoint 时间设置</h3><ol>
<li><p>通常情况下，SecondaryNameNode 每隔一小时执行一次（hdfs-default.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600s<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一分钟检查一次操作次数，当操作次数达到一百万时，SecondaryNameNode 执行一次。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.txns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>操作动作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.check.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>60s<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span> 1分钟检查一次操作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="17、DataNode-工作机制"><a href="#17、DataNode-工作机制" class="headerlink" title="17、DataNode 工作机制"></a>17、DataNode 工作机制</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713215927332.png" alt="DataNode工作机制"></p>
<ol>
<li><p>一个数据块在 DataNode 上以文件形式存储在磁盘上，包括两个文件，一个是<code>数据本身</code>，一个是<code>元数据</code>包括数据块的长度，块数据的校验和，以及时间戳。</p>
</li>
<li><p>DataNode 启动后向 NameNode 注册，通过后，周期性（6小时）的向 NameNode 上报所有的块信息。</p>
</li>
<li><p>DN 向 NN 汇报当前解读信息的时间间隔，默认6小时；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blockreport.intervalMsec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>21600000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Determines block reporting interval in milliseconds.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>DN 扫描自己节点块信息列表的时间，默认6小时</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.directoryscan.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>21600s<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Interval in seconds for Datanode to scan data directories and reconcile the 	difference between blocks in memory and on the disk.Support multiple time unit suffix(case insensitive), as describedin dfs.heartbeat.interval.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>心跳是每3秒一次，心跳返回结果带有 NameNode 给该 DataNode 的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个 DataNode 的心跳，则认为该节点不可用。</p>
</li>
<li><p>集群运行中可以安全加入和退出一些机器。</p>
</li>
</ol>
<h3 id="17-1、数据完整性"><a href="#17-1、数据完整性" class="headerlink" title="17.1、数据完整性"></a>17.1、数据完整性</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713220519078.png" alt="数据完整性"></p>
<ol>
<li>当 DataNode 读取 Block 的时候，它会计算 CheckSum。</li>
<li>如果计算后的 CheckSum，与 Block 创建时值不一样，说明 Block 已经损坏。</li>
<li>Client 读取其他 DataNode 上的 Block。</li>
<li>常见的校验算法crc（32），md5（128），sha1（160）</li>
<li>DataNode 在其文件创建后周期验证 CheckSum。</li>
</ol>
<h3 id="17-2、掉线时限参数限制"><a href="#17-2、掉线时限参数限制" class="headerlink" title="17.2、掉线时限参数限制"></a>17.2、掉线时限参数限制</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220713221409807.png" alt="掉线时限参数限制"></p>
<p>hdfs-site.xml 配置文件中的 heartbeat.recheck.interval 的单位为毫秒，dfs.heartbeat.interval 的单位为秒。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.heartbeat.recheck-interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>300000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.heartbeat.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="18、概述"><a href="#18、概述" class="headerlink" title="18、概述"></a>18、概述</h2><p>MapReduce 是一个分布式运算程序的编程框架，是用户开发”基于 Hadoop 的数据分析应用“的核心框架，其核心功能是将用户编写的<code>业务逻辑代码</code>和<code>自带默认组件</code>整合成一个完整的分布式运算程序，并发运行在一个 Hadoop 集群上。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ol>
<li>易于开发</li>
<li>良好的扩展性，可以通过简单的增加机器来扩展它的计算能力</li>
<li>高容错性，其中一个机器挂了，可以把上面的计算任务转移到另外一个节点上运行，不至于这个任务运行失败</li>
<li>适合 TB&#x2F;PB 级的海量数据处理</li>
</ol>
<blockquote>
<p>缺点</p>
</blockquote>
<ol>
<li>不擅长实时计算</li>
<li>不擅长流式计算，流式计算输入的数据是动态的，MapReduce 的输入数据集是静态的</li>
<li>不擅长 DAG（有向无环图）计算，DAG 指多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出</li>
</ol>
<blockquote>
<p>MapReduce 核心思想</p>
</blockquote>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220714113629758.png" alt="MapReduce 核心思想"></p>
<ol>
<li><p>分布式的运算程序往往需要分成至少2个阶段。</p>
</li>
<li><p>第一个阶段的 MapTask 并发实例，完全并行运行，互不相干。</p>
</li>
<li><p>第二个阶段的 ReduceTask 并发实例互不相干，但是他们的数据依赖于上一个阶段的所有 MapTask 并发实例的输出。</p>
</li>
<li><p>MapReduce 编程模型只能包含一个 Map 阶段和一个 Reduce 阶段，如果用户的业务逻辑非常复杂，那就只能多个 MapReduce 程序，串行运行。</p>
</li>
</ol>
<blockquote>
<p>MapReduce 实例进程</p>
</blockquote>
<p>一个完整的 MapReduce 程序在分布式运行时有三类实例进程：</p>
<ol>
<li>MrAppMaster：负责整个程序的过程调度及状态协调</li>
<li>MapTask：负责 Map 阶段的整个数据处理流程</li>
<li>ReduceTask：负责 Reduce 阶段的整个数据处理流程</li>
</ol>
<blockquote>
<p>常用数据序列化类型</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>Java类型</strong></th>
<th><strong>Hadoop Writable类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>BooleanWritable</td>
</tr>
<tr>
<td>Byte</td>
<td>ByteWritable</td>
</tr>
<tr>
<td>Int</td>
<td>IntWritable</td>
</tr>
<tr>
<td>Float</td>
<td>FloatWritable</td>
</tr>
<tr>
<td>Long</td>
<td>LongWritable</td>
</tr>
<tr>
<td>Double</td>
<td>DoubleWritable</td>
</tr>
<tr>
<td>String</td>
<td>Text</td>
</tr>
<tr>
<td>Map</td>
<td>MapWritable</td>
</tr>
<tr>
<td>Array</td>
<td>ArrayWritable</td>
</tr>
<tr>
<td>Null</td>
<td>NullWritable</td>
</tr>
</tbody></table>
<blockquote>
<p>MapReduce 编程规范</p>
</blockquote>
<ol>
<li><p>Mapper 阶段</p>
<ul>
<li>用户自定义的 Mapper 要继承自己的父类</li>
<li>Mapper 的输入数据是 KV 对的形式（KV类型可自定义）</li>
<li>Mapper 中的业务逻辑写在 map() 方法中</li>
<li>Mapper 的输出数据是 KV 对的形式（KV类型可自定义）</li>
<li><code>map() 方法（MapTask 进程）对每一个 &lt;K,V&gt; 调用一次</code></li>
</ul>
</li>
<li><p>Reducer 阶段</p>
<ul>
<li>用户自定义的 Reducer 要继承自己的父类</li>
<li>Reducer 的输入数据类型对应 Mapper 的输出数据类型，也是 KV</li>
<li>Reducer 的业务逻辑写在 reduce() 方法中</li>
<li><code>ReduceTask 进程对每一组相同 K 的 &lt;K,V&gt; 组调用一次 reduce() 方法</code></li>
</ul>
</li>
<li><p>Driver 阶段</p>
<p>相当于 YARN 集群的客户端，用于提交整个程序到 YARN 集群，提交的是封装了 MapReduce 程序相关运行参数的 job 对象</p>
</li>
</ol>
<h2 id="19、序列化"><a href="#19、序列化" class="headerlink" title="19、序列化"></a>19、序列化</h2><p>Hadoop 序列化特点：</p>
<ol>
<li>紧凑：高效使用存储空间</li>
<li>快速：读写数据的额外开销小</li>
<li>互操作：支持多语言的交互</li>
</ol>
<h2 id="20、核心框架原理"><a href="#20、核心框架原理" class="headerlink" title="20、核心框架原理"></a>20、核心框架原理</h2><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220715210617739.png" alt="框架原理" style="zoom:150%;">

<h3 id="20-1、输入的数据-InputFormat"><a href="#20-1、输入的数据-InputFormat" class="headerlink" title="20.1、输入的数据 InputFormat"></a>20.1、输入的数据 InputFormat</h3><h4 id="20-1-1、切片与-MapTask-并行度决定机制"><a href="#20-1-1、切片与-MapTask-并行度决定机制" class="headerlink" title="20.1.1、切片与 MapTask 并行度决定机制"></a>20.1.1、切片与 MapTask 并行度决定机制</h4><ul>
<li>数据块：Block 是 HDFS 物理上把数据分成一块一块，数据块是 HDFS 存储数据的单位</li>
<li>数据切片：在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。数据切片是 MapReduce 程序计算输入数据的单位，一个切片会对应启动一个 MapTask</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220715101433013.png" alt="MapTask 并行度决定机制"></p>
<h4 id="20-1-2、FileInputFormat"><a href="#20-1-2、FileInputFormat" class="headerlink" title="20.1.2、FileInputFormat"></a>20.1.2、FileInputFormat</h4><p>切片机制：</p>
<ol>
<li>简单地按照文件的内容长度进行切片</li>
<li>切片大小，默认等于 Block 大小</li>
<li>切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</li>
</ol>
<h3 id="20-2、FileInputFormat-实现类"><a href="#20-2、FileInputFormat-实现类" class="headerlink" title="20.2、FileInputFormat 实现类"></a>20.2、FileInputFormat 实现类</h3><h5 id="20-2-0-1、TextInputFormat"><a href="#20-2-0-1、TextInputFormat" class="headerlink" title="20.2.0.1、TextInputFormat"></a>20.2.0.1、TextInputFormat</h5><p>是默认的 FileInputFormat 实现类。按行读取每条记录。键是存储该行在整个文件中的起始字节偏移量， LongWritable 类型。值是这行的内容，不包括任何行终止符（换行符和回车符），Text 类型。</p>
<h5 id="20-2-0-2、CombineTextInputFormat"><a href="#20-2-0-2、CombineTextInputFormat" class="headerlink" title="20.2.0.2、CombineTextInputFormat"></a>20.2.0.2、CombineTextInputFormat</h5><p>CombineTextInputFormat 用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask 处理。</p>
<h3 id="20-3、MapReduce-工作流程"><a href="#20-3、MapReduce-工作流程" class="headerlink" title="20.3、MapReduce 工作流程"></a>20.3、MapReduce 工作流程</h3><h4 id="20-3-1、MapTask-工作机制"><a href="#20-3-1、MapTask-工作机制" class="headerlink" title="20.3.1、MapTask 工作机制"></a>20.3.1、MapTask 工作机制</h4><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Snipaste_2022-07-15_21-09-58_2022-07-15_21-10-28.png" alt="MapTask 工作机制"></p>
<ol>
<li><p><code>Read 阶段</code>：MapTask 通过 InputFormat 获得的 RecordReader，从输入 InputSplit 中解析出一个个 key&#x2F;value。</p>
</li>
<li><p><code>Map 阶段</code>：该节点主要是将解析出的 key&#x2F;value 交给用户编写 map() 函数处理，并产生一系列新的 key&#x2F;value。</p>
</li>
<li><p><code>Collect 收集阶段</code>：在用户编写 map() 函数中，当数据处理完成后，一般会调用 OutputCollector.collect() 输出结果。在该函数内部，它会将生成的 key&#x2F;value 分区（调用 Partitioner），并写入一个环形内存缓冲区中。</p>
</li>
<li><p><code>Spill 阶段</code>：即“溢写”，当环形缓冲区满后，MapReduce 会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p>
<p>溢写阶段详情：</p>
<ul>
<li>步骤1：利用<code>快速排序</code>算法对<code>缓存区内的数据</code>进行排序，排序方式是，先按照<code>分区编号 Partition</code> 进行排序，然后按照 <code>key 进行排序</code>。这样，经过排序后，数据以<code>分区为单位</code>聚集在一起，且同一分区内所有数据<code>按照key有序</code>。</li>
<li>步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件 output&#x2F;spillN.out（N表示当前溢写次数）中。如果用户设置了 <code>Combiner</code>，则写入文件之前，对每个分区中的数据进行一次聚集操作。</li>
<li>步骤3：将分区数据的元信息写到内存索引数据结构 SpillRecord 中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件 output&#x2F;spillN.out.index 中。</li>
</ul>
</li>
<li><p><code>Merge 阶段</code>：当所有数据处理完成后，MapTask 对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p>
<p>当所有数据处理完后，MapTask 会将所有临时文件合并成一个大文件，并保存到文件 output&#x2F;file.out 中，同时生成相应的索引文件output&#x2F;file.out.index。</p>
<p>在进行文件合并过程中，MapTask 以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并mapreduce.task.io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，<code>对文件排序后</code>，重复以上过程，直到最终得到一个大文件。</p>
<p><code>让每个 MapTask 最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</code></p>
</li>
</ol>
<h4 id="20-3-2、ReduceTask-工作机制"><a href="#20-3-2、ReduceTask-工作机制" class="headerlink" title="20.3.2、ReduceTask 工作机制"></a>20.3.2、ReduceTask 工作机制</h4><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/asda_2022-07-15_21-26-56.png" alt="ReduceTask 工作机制"></p>
<ol>
<li><p><code>Copy 阶段</code>：ReduceTask 从各个 MapTask 上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</p>
</li>
<li><p><code>Sort 阶段</code>：在远程拷贝数据的同时，ReduceTask 启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。按照 MapReduce 语义，用户编写 reduce() 函数输入数据是按 key 进行聚集的一组数据。为了将 key 相同的数据聚在一起，Hadoop 采用了基于排序的策略。由于各个 MapTask 已经实现对自己的处理结果进行了局部排序，因此，ReduceTask 只需对所有数据进行一次<code>归并排序</code>即可。</p>
</li>
<li><p><code>Reduce 阶段</code>：reduce() 函数将计算结果写到 HDFS 上。</p>
</li>
</ol>
<h3 id="20-4、Shuffle"><a href="#20-4、Shuffle" class="headerlink" title="20.4、Shuffle"></a>20.4、Shuffle</h3><p>处于 Map 方法之后，Reduce 方法之前的数据处理过程称之为 Shuffle。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Snipaste_2022-07-19_14-54-08_2022-07-19_14-54-48.png" alt="shuffle 流程"></p>
<ol>
<li><p>MapTask 收集我们的 map() 方法输出的 kv 对，放到内存缓冲区中</p>
</li>
<li><p>从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</p>
</li>
<li><p>多个溢出文件会被合并成大的溢出文件</p>
</li>
<li><p>在溢出过程及合并的过程中，都要调用 Partitioner 进行分区和针对 key 进行排序</p>
</li>
<li><p>ReduceTask 根据自己的分区号，去各个 MapTask 机器上取相应的结果分区数据</p>
</li>
<li><p>ReduceTask 会抓取到同一个分区的来自不同 MapTask 的结果文件，ReduceTask 会将这些文件再进行合并（归并排序）</p>
</li>
<li><p>合并成大文件后，Shuffle 的过程也就结束了，后面进入 ReduceTask 的逻辑运算过程（从文件中取出一个一个的键值对 Group，调用用户自定义的 reduce() 方法）</p>
</li>
<li><p>Shuffle 中的缓冲区大小会影响到 MapReduce 程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度就越快。</p>
</li>
<li><p>缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb 默认100M。</p>
</li>
</ol>
<h3 id="20-5、Partition-分区"><a href="#20-5、Partition-分区" class="headerlink" title="20.5、Partition 分区"></a>20.5、Partition 分区</h3><p>将统计结果按照条件输出到不同文件中</p>
<p>默认分区是根据 key 的 hashCode 对 ReduceTasks 个数取模得到的，用户没法控制哪个 key 存储到哪个分区。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义 Partitioner</span></span><br><span class="line"><span class="comment">// 重写 getPartition() 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">Public <span class="type">int</span> <span class="title function_">getPartition</span><span class="params">(Text key,FlowBean value,<span class="type">int</span> numPartitions)</span>&#123;</span><br><span class="line">    <span class="comment">// 控制分区代码逻辑</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> partition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 job 驱动中，设置自定义的 Partitioner</span></span><br><span class="line">job.setPartitionerClass(CustomPartitioner.class);</span><br><span class="line"><span class="comment">// 自定义 Partition 后，要根据自定义 Partitioner 的逻辑设置相应数量的 ReduceTask</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">5</span>);<span class="comment">// 要大于1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>分区总结</p>
</blockquote>
<ol>
<li>如果 ReduceTask 的数量大于 getPartition 的结果数，则会多产生几个空的输出文件 part-r-000xxx</li>
<li>如果 ReduceTask 的数量大于 1 且 小于 getPartition 的结果数，则有一部分分区数据无法安放，爆 IO&#x2F;Exception</li>
<li>如果 ReduceTask 的数量 &#x3D; 1，则不管 MapTask 端输出多少个分区文件，最终结果都交给一个 ReduceTask，最终也就只会产生一个结果文件 part-r-0000</li>
<li>分区号必须从零开始，逐一累加</li>
</ol>
<h3 id="20-6、排序"><a href="#20-6、排序" class="headerlink" title="20.6、排序"></a>20.6、排序</h3><p>MapTask 和 ReduceTask 均会对数据按照 <code>key</code> 进行排序，该操作属于 Hadoop 的默认行为。<code>任何应用程序中的数据均会被排序，而不管逻辑上是否需要</code>。</p>
<p>默认排序是按照<code>字典顺序排序</code>，且实现该排序的方法是<code>快速排序</code>。</p>
<p>对于 MapTask，它会将处理的结果暂时放到环形缓冲区中，当<code>环形缓冲区使用率达到一定阈值后，再对缓中区中的数据进行一次快速排序</code>，并将这些有序数据溢写到磁盘上，而当数据处理完毕后，它会对<code>磁盘上所有文件进行归并排序</code>。<br>对于 ReduceTask,它从每个 MapTask 上远程拷贝相应的数据文件，如果文件大小超过一定阈值，则溢写在磁盘上，否则存储在内存中。如果磁盘上文件数目达到一定阈值，则进行一次归并排序以生成一个更大文件；如果内存中文件大小或者数目超过一定阈值，则进行一次合并后将数据溢写到磁盘上。当所有数据拷贝完毕后，<code>ReduceTaska统一对内存和磁盘上的所有数据进行一次归并排序</code>。</p>
<blockquote>
<p>排序分类</p>
</blockquote>
<ol>
<li><p><font color="orange">部分排序</font></p>
<p>MapReduce 根据输入记录的键对数据集排序，保证<code>输出的每个文件内部有序</code>。</p>
</li>
<li><p>全排序</p>
<p><code>最终输出结果只有一个文件，且文件内部有序</code>，实现方式是只设置一个 ReduceTask，但该方法在处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了 MapReduce 所提供的并行架构。</p>
</li>
<li><p>辅助排序（GroupingComparator 分组）</p>
<p>在 Reduce 端对 key 进行分组，应用于：在接收的 key 为 bean 对象时，想让一个或几个字段相同（全部字段比较不相同）的 key 进入到同一个 Reduce 方法时，可以采用分组排序。</p>
</li>
<li><p>二次排序</p>
<p>在自定义排序过程中，如果 compareTo 中的判断条件为两个即为二次排序。</p>
</li>
</ol>
<blockquote>
<p>自定义排序 WritableComparable</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bean 对象作为 key 传输，需要实现 WritableComparable 接口重写 compareTo 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowBean</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;FlowBean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> upFlow; <span class="comment">//上行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> downFlow; <span class="comment">//下行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> sumFlow; <span class="comment">//总流量</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(FlowBean bean)</span> &#123;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        <span class="comment">// 按照总流量大小，倒序排列</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.sumFlow &gt; bean.getSumFlow()) &#123;</span><br><span class="line">            result = -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.sumFlow &lt; bean.getSumFlow()) &#123;</span><br><span class="line">            result = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现序列化和反序列化方法,注意顺序一定要一致</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeLong(<span class="built_in">this</span>.upFlow);</span><br><span class="line">        out.writeLong(<span class="built_in">this</span>.downFlow);</span><br><span class="line">        out.writeLong(<span class="built_in">this</span>.sumFlow);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.upFlow = in.readLong();</span><br><span class="line">        <span class="built_in">this</span>.downFlow = in.readLong();</span><br><span class="line">        <span class="built_in">this</span>.sumFlow = in.readLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="20-7、Combiner-合并"><a href="#20-7、Combiner-合并" class="headerlink" title="20.7、Combiner 合并"></a>20.7、Combiner 合并</h3><ol>
<li>Combiner 是 MR 程序中，Mapper 和 Reducer 之外的一种组件</li>
<li>Combiner 组件的父类就是 Reducer</li>
<li>Combiner 和 Reducer 的区别在于运行的位置<ul>
<li><code>Combiner 是在每一个 MapTask 所在的节点运行</code></li>
<li><code>Reducer 是接收全局所有 Mapper 的输出结果</code></li>
</ul>
</li>
<li>Combiner 的意义就是对每一个 MapTask 的输出进行局部汇总，以减小网络传输量</li>
<li><code>Combiner 能够应用的前提是不能影响最终的业务逻辑</code>，而且 Combiner 的输出 kv 应该跟 Reducer 的输入 kv 类型要对应起来</li>
</ol>
<blockquote>
<p>自定义 Combiner</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义一个Combiner继承Reducer，重写Reduce方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountCombiner</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">outV</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在Job驱动类中设置</span></span><br><span class="line">job.setCombinerClass(WordCountCombiner.class);</span><br></pre></td></tr></table></figure>



<h3 id="20-8、输出数据-OutputFormat"><a href="#20-8、输出数据-OutputFormat" class="headerlink" title="20.8、输出数据 OutputFormat"></a>20.8、输出数据 OutputFormat</h3><p>OutputFormat 是 MapReduce 输出的基类，所有实现 MapReduce 输出都实现了 OutputFormat 接口。</p>
<blockquote>
<p>自定义 OutputFormat</p>
</blockquote>
<ol>
<li>自定义一个类继承 FileOutputFormat</li>
<li>改写 RecordWriter，具体改写输出数据的 write 方法</li>
</ol>
<h3 id="20-9、ReduceTask-并行度决定机制"><a href="#20-9、ReduceTask-并行度决定机制" class="headerlink" title="20.9、ReduceTask 并行度决定机制"></a>20.9、ReduceTask 并行度决定机制</h3><p>ReduceTask 的并行度同样影响整个 Job 的执行并发度和执行效率，但与 MapTask 的并发数由切片数决定不同，ReduceTask 数量的决定是可以直接手动设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认值是1，手动设置为4</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项</p>
</blockquote>
<ol>
<li>ReduceTask &#x3D; 0，表示没有 Reduce 阶段，输出文件个数和 Map 个数一致</li>
<li>ReduceTask 默认值就是 1，所以输出文件个数为一个</li>
<li>如果数据分布不均匀，就有可能在 Reduce 阶段产生<code>数据倾斜</code></li>
<li>ReduceTask 数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计算全局汇总结果，就只能有一个 ReduceTask</li>
<li>具体多少个 ReduceTask 需要根据集群性能而定</li>
<li>如果分区数不是 1，但是 ReduceTask 为 1，不会执行分区过程</li>
</ol>
<h3 id="20-10、Join"><a href="#20-10、Join" class="headerlink" title="20.10、Join"></a>20.10、Join</h3><p>Map 端的主要工作：为来自不同表或文件的 key&#x2F;value 对，<code>打标签以区别不同来源的记录</code>。然后用<code>连接字段作为 key</code>，其余部分和新加的标志作为 value，最后进行输出。</p>
<p>Reduce 端的主要工作：在 Reduce 端以<code>连接字段作为 key 的分组已经完成</code>，我们只需要在每一个分组当中将那些来源于不同文件的记录（在 Map 阶段已经打标志）分开，最后进行合并。</p>
<h4 id="20-10-1、Reduce-Join"><a href="#20-10-1、Reduce-Join" class="headerlink" title="20.10.1、Reduce Join"></a>20.10.1、Reduce Join</h4><p>缺点：合并的操作是在 Reduce 阶段完成，Reduce 端的处理压力太大，Map 节点的运算负载则很低，资源利用率不高，且在 Reduce 阶段极易产生数据倾斜。</p>
<h4 id="20-10-2、Map-Join"><a href="#20-10-2、Map-Join" class="headerlink" title="20.10.2、Map Join"></a>20.10.2、Map Join</h4><p>适用于一张表十分小、一张表很大的场景。</p>
<p>在 Map 端缓存多张表，提前处理业务逻辑，这样增加 Map 端业务，减少 Reduce 端数据的压力，尽可能的减少数据倾斜。</p>
<blockquote>
<p>DistributedCache</p>
</blockquote>
<ol>
<li><p>在 Mapper 的 setup 阶段，将文件读取到缓存集合中</p>
</li>
<li><p>在 Driver 驱动类中加载缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缓存普通文件到Task运行节点。</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;file://E:/desktop/cache/pd.txt&quot;</span>));</span><br><span class="line"><span class="comment">//如果是集群运行,需要设置HDFS路径</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop100:8020/cache/pd.txt&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="20-11、ETL-数据清洗"><a href="#20-11、ETL-数据清洗" class="headerlink" title="20.11、ETL 数据清洗"></a>20.11、ETL 数据清洗</h3><p>ETL（Extract-Transform-Load）用来描述将数据从来源端经过抽取（Extract）、转换（Transform）、加载（Load）至目的端的过程。</p>
<p>在运行核心业务 MapReduce 程序之前，往往要先对数据进行清洗，清理掉不符合用户要求的数据。清理的过程往往只需要运行 Mapper 程序，不需要运行 Reduce 程序。</p>
<h2 id="21、压缩"><a href="#21、压缩" class="headerlink" title="21、压缩"></a>21、压缩</h2><blockquote>
<p>压缩的优缺点</p>
</blockquote>
<p>优点：减少磁盘 IO、减少磁盘存储空间</p>
<p>缺点：增加 cpu 开销</p>
<blockquote>
<p>压缩使用原则</p>
</blockquote>
<ol>
<li>运算密集型的 Job，少用压缩</li>
<li>IO 密集型的 Job，多用压缩</li>
</ol>
<h3 id="21-1、压缩算法"><a href="#21-1、压缩算法" class="headerlink" title="21.1、压缩算法"></a>21.1、压缩算法</h3><table>
<thead>
<tr>
<th>压缩格式</th>
<th>Hadoop自带？</th>
<th>算法</th>
<th>文件扩展名</th>
<th>是否可切片</th>
<th>换成压缩格式后，原来的程序是否需要修改</th>
<th>优缺点</th>
</tr>
</thead>
<tbody><tr>
<td>DEFLATE</td>
<td>是，直接使用</td>
<td>DEFLATE</td>
<td>.deflate</td>
<td>否</td>
<td>和文本处理一样，不需要修改</td>
<td></td>
</tr>
<tr>
<td>Gzip</td>
<td>是，直接使用</td>
<td>DEFLATE</td>
<td>.gz</td>
<td>否</td>
<td>和文本处理一样，不需要修改</td>
<td>压缩率比较高；不支持split，压缩&#x2F;解压速度一般</td>
</tr>
<tr>
<td>bzip2</td>
<td>是，直接使用</td>
<td>bzip2</td>
<td>.bz2</td>
<td><code>是</code></td>
<td>和文本处理一样，不需要修改</td>
<td>压缩率高，支持split；压缩&#x2F;解压速度慢</td>
</tr>
<tr>
<td>LZO</td>
<td>否，需要安装</td>
<td>LZO</td>
<td>.lzo</td>
<td><code>是</code></td>
<td><code>需要建索引，还需要指定输入格式</code></td>
<td>压缩&#x2F;解压速度比较快，支持split；压缩率一般，想支持切片需要额外创建索引</td>
</tr>
<tr>
<td>Snappy</td>
<td>是，直接使用</td>
<td>Snappy</td>
<td>.snappy</td>
<td>否</td>
<td>和文本处理一样，不需要修改</td>
<td>压缩&#x2F;解压速度快；不支持split，压缩率一般</td>
</tr>
</tbody></table>
<h3 id="21-2、性能比较"><a href="#21-2、性能比较" class="headerlink" title="21.2、性能比较"></a>21.2、性能比较</h3><table>
<thead>
<tr>
<th>压缩算法</th>
<th>原始文件大小</th>
<th>压缩文件大小</th>
<th>压缩速度</th>
<th>解压速度</th>
</tr>
</thead>
<tbody><tr>
<td>gzip</td>
<td>8.3GB</td>
<td>1.8GB</td>
<td>17.5MB&#x2F;s</td>
<td>58MB&#x2F;s</td>
</tr>
<tr>
<td>bzip2</td>
<td>8.3GB</td>
<td>1.1GB</td>
<td>2.4MB&#x2F;s</td>
<td>9.5MB&#x2F;s</td>
</tr>
<tr>
<td>LZO</td>
<td>8.3GB</td>
<td>2.9GB</td>
<td>49.3MB&#x2F;s</td>
<td>74.6MB&#x2F;s</td>
</tr>
</tbody></table>
<h3 id="21-3、压缩方式的选择"><a href="#21-3、压缩方式的选择" class="headerlink" title="21.3、压缩方式的选择"></a>21.3、压缩方式的选择</h3><p>选择压缩方式时应考虑：压缩&#x2F;解压缩速度、压缩率（压缩后存储大小）、压缩后是否可以支持切片</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220723221209119.png" alt="压缩方式的选择"></p>
<h3 id="21-4、压缩参数配置"><a href="#21-4、压缩参数配置" class="headerlink" title="21.4、压缩参数配置"></a>21.4、压缩参数配置</h3><blockquote>
<p>编码器&amp;解码器</p>
</blockquote>
<table>
<thead>
<tr>
<th>压缩格式</th>
<th>对应的编码&#x2F;解码器</th>
</tr>
</thead>
<tbody><tr>
<td>DEFLATE</td>
<td>org.apache.hadoop.io.compress.DefaultCodec</td>
</tr>
<tr>
<td>gzip</td>
<td>org.apache.hadoop.io.compress.GzipCodec</td>
</tr>
<tr>
<td>bzip2</td>
<td>org.apache.hadoop.io.compress.BZip2Codec</td>
</tr>
<tr>
<td>LZO</td>
<td>com.hadoop.compression.lzo.LzopCodec</td>
</tr>
<tr>
<td>Snappy</td>
<td>org.apache.hadoop.io.compress.SnappyCodec</td>
</tr>
</tbody></table>
<blockquote>
<p>压缩参数配置</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值</th>
<th>阶段</th>
<th>建议</th>
</tr>
</thead>
<tbody><tr>
<td>io.compression.codecs<br>（在core-site.xml中配置）</td>
<td>无，这个需要在命令行输入<br>hadoop checknative查看</td>
<td>输入压缩</td>
<td>Hadoop使用文件扩展名判断是否支持某种编解码器</td>
</tr>
<tr>
<td>mapreduce.map.output.compress<br>（在mapred-site.xml中配置）</td>
<td>false</td>
<td>mapper输出</td>
<td>这个参数设为true启用压缩</td>
</tr>
<tr>
<td>mapreduce.map.output.compress.codec<br>（在mapred-site.xml中配置）</td>
<td>org.apache.hadoop.io<br>.compress.DefaultCodec</td>
<td>mapper输出</td>
<td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td>
</tr>
<tr>
<td>mapreduce.output.fileoutputformat.compress<br>（在mapred-site.xml中配置）</td>
<td>false</td>
<td>reducer输出</td>
<td>这个参数设为true启用压缩</td>
</tr>
<tr>
<td>mapreduce.output.fileoutputformat.compress.codec<br>（在mapred-site.xml中配置）</td>
<td>org.apache.hadoop.io<br>.compress.DefaultCodec</td>
<td>reducer输出</td>
<td>使用标准工具或者编解码器，如gzip和bzip2</td>
</tr>
</tbody></table>
<h2 id="22、MapReduce开发总结"><a href="#22、MapReduce开发总结" class="headerlink" title="22、MapReduce开发总结"></a>22、MapReduce开发总结</h2><ol>
<li>输入数据接口：InputFormat<ul>
<li>默认使用的实现类是：TextInputFormat</li>
<li>TextInputFormat 的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为 key，行内容作为 value 返回。</li>
<li>CombineTextInputFormat 可以把多个小文件合并成一个切片处理，提高处理效率。</li>
</ul>
</li>
<li>逻辑处理接口：Mapper <ul>
<li>用户根据业务需求实现其中三个方法：setup() map() cleanup()</li>
</ul>
</li>
<li>分区：Partitioner<ul>
<li>有默认实现 HashPartitioner，逻辑是根据 key 的哈希值和 numReduces 来返回一个分区号；key.hashCode() &amp; Integer.MAXVALUE % numReduces</li>
<li>如果业务上有特别的需求，可以自定义分区</li>
</ul>
</li>
<li>排序：Comparable<ul>
<li>当我们用自定义的对象作为 key 来输出时，就必须要实现 WritableComparable 接口，重写其中的 compareTo() 方法。</li>
<li>部分排序：对最终输出的每一个文件进行内部排序</li>
<li>全排序：对所有数据进行排序，通常只有一个 Reduce</li>
<li>二次排序：排序的条件有两个</li>
</ul>
</li>
<li>合并：Combiner<ul>
<li>Combiner 合并可以提高程序执行效率，减少IO传输。但是使用时必须不能影响原有的业务处理结果。</li>
</ul>
</li>
<li>逻辑处理接口：Reducer<ul>
<li>用户根据业务需求实现其中三个方法：setup() reduce() cleanup ()</li>
</ul>
</li>
<li>输出数据接口：OutputFormat<ul>
<li>默认实现类是 TextOutputFormat，功能逻辑是：将每一个 KV 对，向目标文本文件输出一行。</li>
<li>用户还可以自定义 OutputFormat。</li>
</ul>
</li>
</ol>
<h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><p><code>Yarn</code> 是一个资源调度平台，负责为运算程序提供服务器运算资源，相当于一个分布式的<code>操作系统平台</code>，而 <code>MapReduce</code> 等运算程序则相当于运行于操作系统之上的<code>应用程序</code>。</p>
<h2 id="23、Yarn-基础架构"><a href="#23、Yarn-基础架构" class="headerlink" title="23、Yarn 基础架构"></a>23、Yarn 基础架构</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Snipaste_2022-07-25_10-24-16_2022-07-25_10-26-45.png" alt="Yarn 基础架构"></p>
<h2 id="24、Yarn-工作机制"><a href="#24、Yarn-工作机制" class="headerlink" title="24、Yarn 工作机制"></a>24、Yarn 工作机制</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Snipaste_2022-07-25_10-59-59_2022-07-25_11-01-30.png" alt="Yarn 工作机制"></p>
<ol>
<li>MR 程序提交到客户端所在的节点</li>
<li>YarnRunner 向 ResourceManager 申请一个 Application</li>
<li>RM 将该应用程序的资源路径返回给 YarnRunner</li>
<li>该程序将运行所需资源提交到 HDFS 上</li>
<li>程序资源提交完毕后，申请运行 mrAppMaster</li>
<li>RM 将用户的请求初始化成一个 Task</li>
<li>其中一个 NodeManager 领取到Task任务</li>
<li>该 NodeManager 创建容器 Container，并产生 MRAppmaster</li>
<li>Container 从 HDFS 上拷贝资源到本地</li>
<li>MRAppmaster 向 RM 申请运行 MapTask 资源</li>
<li>RM 将运行 MapTask 任务分配给另外两个 NodeManager，另两个 NodeManager 分别领取任务并创建容器</li>
<li>MR 向两个接收到任务的 NodeManager 发送程序启动脚本，这两个 NodeManager 分别启动 MapTask，MapTask 对数据分区排序</li>
<li>MrAppMaster 等待所有 MapTask 运行完毕后，向RM申请容器，运行 ReduceTask</li>
<li>ReduceTask 向 MapTask 获取相应分区的数据</li>
<li>程序运行完毕后，MR 会向 RM 申请注销自己</li>
</ol>
<h2 id="25、Yarn调度器和调度算法"><a href="#25、Yarn调度器和调度算法" class="headerlink" title="25、Yarn调度器和调度算法"></a>25、Yarn调度器和调度算法</h2><p>Hadoop 作业调度器主要有三种：FIFO 调度器（First In Firest Out）、容量调度器（Capacity Scheduler）、公平调度器（Fair Scheduler），Apache Hadoop 3.x 默认的资源调度器是 Capacity Scheduler</p>
<h3 id="25-1、先进先出调度器（FIFO）"><a href="#25-1、先进先出调度器（FIFO）" class="headerlink" title="25.1、先进先出调度器（FIFO）"></a>25.1、先进先出调度器（FIFO）</h3><p>根据提交任务的先后顺序，先来先服务。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220725141854005.png" alt="FIFO 调度器"></p>
<h3 id="25-2、容量调度器（Capacity-Scheduler）"><a href="#25-2、容量调度器（Capacity-Scheduler）" class="headerlink" title="25.2、容量调度器（Capacity Scheduler）"></a>25.2、容量调度器（Capacity Scheduler）</h3><p>Capacity Scheduler 是 Yahoo 开发的多用户调度器</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%AE%B9%E9%87%8F%E8%B0%83%E5%BA%A6%E5%99%A8%E7%89%B9%E7%82%B9_2022-07-25_14-48-08.png" alt="容量调度器特点"></p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%AE%B9%E9%87%8F%E8%B0%83%E5%BA%A6%E5%99%A8%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95_2022-07-25_14-52-07.png" alt="容量调度器资源分配算法"></p>
<h3 id="25-3、公平调度器（Fair-Scheduler）"><a href="#25-3、公平调度器（Fair-Scheduler）" class="headerlink" title="25.3、公平调度器（Fair Scheduler）"></a>25.3、公平调度器（Fair Scheduler）</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9A%84%E7%89%B9%E7%82%B9_2022-07-25_15-11-11.png" alt="公平调度器的特点"></p>
<blockquote>
<p>缺额</p>
</blockquote>
<ul>
<li>公平调度器设计目标是：在时间尺度上，所有作业获得公平的资源，某一时刻一个作业应获资源和实际获取资源的差额称之为”缺额“</li>
<li>调度器会优先为缺额大的作业分配资源</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8%E9%98%9F%E5%88%97%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F_2022-07-25_15-25-42.png" alt="公平调度器队列资源分配方式"></p>
<h2 id="26、Yarn-常用命令"><a href="#26、Yarn-常用命令" class="headerlink" title="26、Yarn 常用命令"></a>26、Yarn 常用命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有的 Application</span></span><br><span class="line">yarn application -list</span><br><span class="line"><span class="comment"># Application 状态查询过滤</span></span><br><span class="line">yarn application -list -appStates ALL/NEW/NEW_SAVING/SUBMITTED/ACCEPTED/RUNNING/FINISHED/FAILED/KILLED</span><br><span class="line"><span class="comment"># kill Application</span></span><br><span class="line">yarn application -<span class="built_in">kill</span> &lt;ApplicationId&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志查看</span></span><br><span class="line"><span class="comment"># 查询 Application 日志</span></span><br><span class="line">yarn logs -applicationId &lt;ApplicationId&gt;</span><br><span class="line"><span class="comment"># 查看 Container 日志</span></span><br><span class="line">yarn logs -applicationId &lt;ApplicationId&gt; -containerId &lt;ContainerId&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看尝试运行的任务</span></span><br><span class="line"><span class="comment"># 列出所有 Application 尝试的列表</span></span><br><span class="line">yarn applicationattempt -list &lt;ApplicationId&gt;</span><br><span class="line"><span class="comment"># 打印 ApplicationAttemp 状态</span></span><br><span class="line">yarn applicationattempt -status &lt;ApplicationAttemptId&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line"><span class="comment"># 列出所有 Container</span></span><br><span class="line">yarn container -list &lt;ApplicationAttemptId&gt;</span><br><span class="line"><span class="comment"># 打印 Container 状态，只有在任务运行的途中才能看到 container 的状态</span></span><br><span class="line">yarn container -status &lt;ContainerId&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line"><span class="comment"># 列出所有节点</span></span><br><span class="line">yarn node -list -all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line">yarn rmadmin -refreshQueues</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看队列</span></span><br><span class="line">yarn queue -status &lt;QueueName&gt;</span><br></pre></td></tr></table></figure>



<h2 id="27、Yarn-生产环境核心参数"><a href="#27、Yarn-生产环境核心参数" class="headerlink" title="27、Yarn 生产环境核心参数"></a>27、Yarn 生产环境核心参数</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220726140416070.png" alt="Yarn 生产环境核心参数"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yarn-site.xml 配置案例，若是不同节点的 cpu、内存不一样，要单独配置，不能集群分发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选择调度器，默认容量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>The class to use as the resource scheduler.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ResourceManager处理调度器请求的线程数量,默认50；如果提交的任务数大于50，可以增加该值，但是不能超过3台 * 4线程 = 12线程（去除其他应用程序实际不能超过8） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Number of threads to handle scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.client.thread-count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否让yarn自动检测硬件进行配置，默认是false，如果该节点有很多其他应用程序，建议手动配置。如果该节点没有其他应用程序，可以采用自动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Enable auto-detection of node capabilities such as</span><br><span class="line">	memory and CPU.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.detect-hardware-capabilities<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将虚拟核数当作CPU核数，默认是false，采用物理CPU核数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Flag to determine if logical processors(such as</span><br><span class="line">	hyperthreads) should be counted as cores. Only applicable on Linux</span><br><span class="line">	when yarn.nodemanager.resource.cpu-vcores is set to -1 and</span><br><span class="line">	yarn.nodemanager.resource.detect-hardware-capabilities is true.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.count-logical-processors-as-cores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 虚拟核数和物理核数乘数，默认是1.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Multiplier to determine how to convert phyiscal cores to</span><br><span class="line">	vcores. This value is used if yarn.nodemanager.resource.cpu-vcores</span><br><span class="line">	is set to -1(which implies auto-calculate vcores) and</span><br><span class="line">	yarn.nodemanager.resource.detect-hardware-capabilities is set to true. The	number of vcores will be calculated as	number of CPUs * multiplier.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.pcores-vcores-multiplier<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- NodeManager使用内存数，默认8G，修改为4G内存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Amount of physical memory, in MB, that can be allocated </span><br><span class="line">	for containers. If set to -1 and</span><br><span class="line">	yarn.nodemanager.resource.detect-hardware-capabilities is true, it is</span><br><span class="line">	automatically calculated(in case of Windows and Linux).</span><br><span class="line">	In other cases, the default is 8192MB.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nodemanager的CPU核数，不按照硬件环境自动设定时默认是8个，修改为4个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Number of vcores that can be allocated</span><br><span class="line">	for containers. This is used by the RM scheduler when allocating</span><br><span class="line">	resources for containers. This is not used to limit the number of</span><br><span class="line">	CPUs used by YARN containers. If it is set to -1 and</span><br><span class="line">	yarn.nodemanager.resource.detect-hardware-capabilities is true, it is</span><br><span class="line">	automatically determined from the hardware in case of Windows and Linux.</span><br><span class="line">	In other cases, number of vcores is 8 by default.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 容器最小内存，默认1G --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>The minimum allocation for every container request at the RM	in MBs. Memory requests lower than this will be set to the value of this	property. Additionally, a node manager that is configured to have less memory	than this value will be shut down by the resource manager.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 容器最大内存，默认8G，修改为2G --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>The maximum allocation for every container request at the RM	in MBs. Memory requests higher than this will throw an	InvalidResourceRequestException.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 容器最小CPU核数，默认1个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>The minimum allocation for every container request at the RM	in terms of virtual CPU cores. Requests lower than this will be set to the	value of this property. Additionally, a node manager that is configured to	have fewer virtual cores than this value will be shut down by the resource	manager.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 容器最大CPU核数，默认4个，修改为2个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>The maximum allocation for every container request at the RM	in terms of virtual CPU cores. Requests higher than this will throw an</span><br><span class="line">	InvalidResourceRequestException.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 虚拟内存检查，默认打开，修改为关闭 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether virtual memory limits will be enforced for</span><br><span class="line">	containers.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 虚拟内存和物理内存设置比例,默认2.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Ratio between virtual memory to physical memory when	setting memory limits for containers. Container allocations are	expressed in terms of physical memory, and virtual memory usage	is allowed to exceed this allocation by this ratio.</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="28、容量调度器多队列"><a href="#28、容量调度器多队列" class="headerlink" title="28、容量调度器多队列"></a>28、容量调度器多队列</h2><p>好处：</p>
<ol>
<li>可以避免因为单队列耗尽所有资源而导致集群不可用</li>
<li>可以实现任务的降级，在特殊时期保证重要的任务队列资源充足</li>
</ol>
<h3 id="28-1、多队列配置"><a href="#28-1、多队列配置" class="headerlink" title="28.1、多队列配置"></a>28.1、多队列配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- capacity-scheduler.xml 中配置如下 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定多队列，增加hive队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>default,hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      The queues at the this level (root is the root queue).</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 降低default队列资源额定容量为40%，默认100% --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.default.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>40<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 降低default队列资源最大容量为60%，默认100% --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.default.maximum-capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 新加队列添加必要属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定hive队列的资源额定容量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用户最多可以使用队列多少资源，1表示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.user-limit-factor<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定hive队列的资源最大容量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.maximum-capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>80<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启动hive队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.state<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>RUNNING<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 哪些用户有权向队列提交作业 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.acl_submit_applications<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 哪些用户有权操作队列，管理员权限（查看/杀死） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.acl_administer_queue<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 哪些用户有权配置提交任务优先级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.acl_application_max_priority<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 任务的超时时间设置：yarn application -appId appId -updateLifetime Timeout</span></span><br><span class="line"><span class="comment">参考资料：https://blog.cloudera.com/enforcing-application-lifetime-slas-yarn/ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果application指定了超时时间，则提交到该队列的application能够指定的最大超时时间不能超过该值。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.maximum-application-lifetime<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果application没指定超时时间，则用default-application-lifetime作为默认值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.hive.default-application-lifetime<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 向集群分发配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重启 Yarn 或者执行命令：yarn rmadmin -refreshQueues --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行任务时指定队列</span></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar wordcount -D mapreduce.job.queuename=hive /input /optput</span><br><span class="line"><span class="comment"># 也可以在 Driver 类中中指定</span></span><br><span class="line"><span class="comment"># new Configuration().set(&quot;mapreduce.job.qunuename&quot;,&quot;hive&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="28-2、任务优先级"><a href="#28-2、任务优先级" class="headerlink" title="28.2、任务优先级"></a>28.2、任务优先级</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改yarn-site.xml文件，增加以下参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.cluster.max-application-priority<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分发配置，重启 yarn --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交任务时，指定优先级 mapreduce.job.priority=优先级</span></span><br><span class="line">hadoop jar /opt/module/hadoop-3.1.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar pi  -D mapreduce.job.priority=5 5 2000000</span><br><span class="line"><span class="comment"># 提升正在执行的任务的优先级</span></span><br><span class="line">yarn application -appID &lt;ApplicationID&gt; -updatePriority 优先级</span><br></pre></td></tr></table></figure>

<h2 id="29、公平调度器"><a href="#29、公平调度器" class="headerlink" title="29、公平调度器"></a>29、公平调度器</h2><p>创建两个队列，分别是 test 和 hqz（以用户所属组命名）。</p>
<p>期望实现以下效果：若用户提交任务时指定队列，则任务提交到指定队列运行；</p>
<p>若未指定队列，test 用户提交的任务到 root.group.test 队列运行，hqz提交的任务到 root.group.hqz 队列运行（注：group 为用户所属组）。</p>
<p>公平调度器的配置涉及到两个文件，一个是 yarn-site.xml，另一个是公平调度器队列分配文件 fair-scheduler.xml（文件名可自定义）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改yarn-site.xml文件，加入以下参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>配置使用公平调度器<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.fair.allocation.file<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/etc/hadoop/fair-scheduler.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>指明公平调度器队列分配配置文件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.fair.preemption<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>禁止队列间资源抢占<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置fair-scheduler.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allocations</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单个队列中Application Master占用资源的最大比例,取值0-1 ，企业一般配置0.1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queueMaxAMShareDefault</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">queueMaxAMShareDefault</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单个队列最大资源的默认值 test hqz default --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queueMaxResourcesDefault</span>&gt;</span>4096mb,4vcores<span class="tag">&lt;/<span class="name">queueMaxResourcesDefault</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 增加一个队列test --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列最小资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minResources</span>&gt;</span>2048mb,2vcores<span class="tag">&lt;/<span class="name">minResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列最大资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxResources</span>&gt;</span>4096mb,4vcores<span class="tag">&lt;/<span class="name">maxResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列中最多同时运行的应用数，默认50，根据线程数配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxRunningApps</span>&gt;</span>4<span class="tag">&lt;/<span class="name">maxRunningApps</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列中Application Master占用资源的最大比例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxAMShare</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 增加一个队列hqz --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;hqz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列最小资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minResources</span>&gt;</span>2048mb,2vcores<span class="tag">&lt;/<span class="name">minResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列最大资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxResources</span>&gt;</span>4096mb,4vcores<span class="tag">&lt;/<span class="name">maxResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列中最多同时运行的应用数，默认50，根据线程数配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxRunningApps</span>&gt;</span>4<span class="tag">&lt;/<span class="name">maxRunningApps</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列中Application Master占用资源的最大比例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxAMShare</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">maxAMShare</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该队列资源权重,默认值为1.0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">weight</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 队列内部的资源分配策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schedulingPolicy</span>&gt;</span>fair<span class="tag">&lt;/<span class="name">schedulingPolicy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 任务队列分配策略,可配置多层规则,从第一个规则开始匹配,直到匹配成功 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">queuePlacementPolicy</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交任务时指定队列,如未指定提交队列,则继续匹配下一个规则; false表示：如果指定队列不存在,不允许自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;specified&quot;</span> <span class="attr">create</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交到root.group.username队列,若root.group不存在,不允许自动创建；若root.group.user不存在,允许自动创建 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;nestedUserQueue&quot;</span> <span class="attr">create</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;primaryGroup&quot;</span> <span class="attr">create</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最后一个规则必须为reject或者default。Reject表示拒绝创建提交失败，default表示把任务提交到default队列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;reject&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queuePlacementPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">allocations</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分发配置之后，重启 Yarn</span></span><br><span class="line"><span class="comment"># 提交任务时指定队列，按照配置规则，任务会到指定的 root.test 队列</span></span><br><span class="line">hadoop jar /opt/module/hadoop-3.3.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar pi -Dmapreduce.job.queuename=root.test 1 1</span><br><span class="line"><span class="comment"># 提交任务时不指定队列，按照配置规则，任务会到 root.hqz 队列</span></span><br><span class="line">hadoop jar /opt/module/hadoop-3.3.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.3.jar pi 1 1</span><br></pre></td></tr></table></figure>

<h3 id="29-1、Yarn的Tool接口"><a href="#29-1、Yarn的Tool接口" class="headerlink" title="29.1、Yarn的Tool接口"></a>29.1、Yarn的Tool接口</h3><p>可以实现动态传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ToolRunner.run(conf, tool, Arrays.copyOfRange(args, <span class="number">1</span>, args.length));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>bigData</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>hadoop</tag>
        <tag>基石</tag>
      </tags>
  </entry>
  <entry>
    <title>java lambda表达式使用示例</title>
    <url>/2022/09/23/java-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="Java-8-lambda表达式示例"><a href="#Java-8-lambda表达式示例" class="headerlink" title="Java 8 lambda表达式示例"></a>Java 8 lambda表达式示例</h1><h2 id="1、用lambda表达式实现Runnable"><a href="#1、用lambda表达式实现Runnable" class="headerlink" title="1、用lambda表达式实现Runnable"></a>1、用lambda表达式实现Runnable</h2><p>我开始使用Java 8时，首先做的就是使用lambda表达式替换匿名类，而实现<strong>Runnable</strong>接口是匿名类的最好示例。看一下Java 8之前的<strong>runnable</strong>实现方法，需要4行代码，而使用lambda表达式只需要一行代码。我们在这里做了什么呢？那就是用() -&gt; {}代码块替代了整个<a href="https://link.zhihu.com/?target=http://javarevisited.blogspot.sg/2012/12/inner-class-and-nested-static-class-in-java-difference.html">匿名类</a>。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Before Java8, too much code for too little to do&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 8方式：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>( () -&gt; System.out.println(<span class="string">&quot;In Java8, Lambda expression rocks !!&quot;</span>) ).start();</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">too much code, <span class="keyword">for</span> too little to <span class="keyword">do</span></span><br><span class="line">Lambda expression rocks !! </span><br></pre></td></tr></table></figure>

<p>这个例子向我们展示了Java 8 lambda表达式的语法。你可以使用lambda写出如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(params) -&gt; expression</span><br><span class="line">(params) -&gt; statement</span><br><span class="line">(params) -&gt; &#123; statements &#125; </span><br></pre></td></tr></table></figure>

<p>例如，如果你的方法不对参数进行修改、重写，只是在控制台打印点东西的话，那么可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello Lambda Expressions&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果你的方法接收两个参数，那么可以写成如下这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="type">int</span> even, <span class="type">int</span> odd) -&gt; even + odd </span><br></pre></td></tr></table></figure>

<p>顺便提一句，通常都会把lambda表达式内部变量的名字起得短一些。这样能使代码更简短，放在同一行。所以，在上述代码中，变量名选用a、b或者x、y会比even、odd要好。</p>
<h2 id="2、使用Java-8-lambda表达式进行事件处理"><a href="#2、使用Java-8-lambda表达式进行事件处理" class="headerlink" title="2、使用Java 8 lambda表达式进行事件处理"></a>2、使用Java 8 lambda表达式进行事件处理</h2><p>如果你用过Swing API编程，你就会记得怎样写事件监听代码。这又是一个旧版本简单匿名类的经典用例，但现在可以不这样了。你可以用lambda表达式写出更好的事件监听代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">show</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Show&quot;</span>);</span><br><span class="line">show.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Event handling without lambda expression is boring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8方式：</span></span><br><span class="line">show.addActionListener((e) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Light, Camera, Action !! Lambda expressions Rocks&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3、使用lambda表达式对列表进行迭代"><a href="#3、使用lambda表达式对列表进行迭代" class="headerlink" title="3、使用lambda表达式对列表进行迭代"></a>3、使用lambda表达式对列表进行迭代</h2><p>如果你使过几年Java，你就知道针对集合类，最常见的操作就是进行迭代，并将业务逻辑应用于各个元素，例如处理订单、交易和事件的列表。由于Java是命令式语言，Java 8之前的所有循环代码都是顺序的，即可以对其元素进行并行化处理。如果你想做并行过滤，就需要自己写代码，这并不是那么容易。通过引入lambda表达式和默认方法，将做什么和怎么做的问题分开了，这意味着Java集合现在知道怎样做迭代，并可以在API层面对集合元素进行并行处理。下面的例子里，我将介绍如何在<a href="https://link.zhihu.com/?target=http://javarevisited.blogspot.sg/2012/03/how-to-loop-arraylist-in-java-code.html">使用</a><a href="https://link.zhihu.com/?target=http://javarevisited.blogspot.sg/2012/03/how-to-loop-arraylist-in-java-code.html">lambda</a>或不使用lambda表达式的情况下迭代列表。你可以看到列表现在有了一个 forEach() 方法，它可以迭代所有对象，并将你的lambda代码应用在其中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">    System.out.println(feature);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">features</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Lambdas&quot;</span>, <span class="string">&quot;Default Method&quot;</span>, <span class="string">&quot;Stream API&quot;</span>, <span class="string">&quot;Date and Time API&quot;</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line"><span class="comment">// 看起来像C++的作用域解析运算符</span></span><br><span class="line">features.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Lambdas</span><br><span class="line">Default Method</span><br><span class="line">Stream API</span><br><span class="line">Date and Time API </span><br></pre></td></tr></table></figure>

<p><a href="https://link.zhihu.com/?target=http://javarevisited.blogspot.sg/2012/10/jstl-foreach-tag-example-in-jsp-looping.html">列表循环</a>的最后一个例子展示了如何在Java 8中使用方法引用（method reference）。你可以看到C++里面的双冒号、范围解析操作符现在在Java 8中用来表示方法引用。</p>
<h2 id="4、使用lambda表达式和函数式接口Predicate"><a href="#4、使用lambda表达式和函数式接口Predicate" class="headerlink" title="4、使用lambda表达式和函数式接口Predicate"></a>4、使用lambda表达式和函数式接口Predicate</h2><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 <strong>java.util.function</strong>。它包含了很多类，用来支持Java的函数式编程。其中一个便是<strong>Predicate</strong>，使用 <strong>java.util.function.Predicate</strong> 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate 的例子，展示了过滤集合数据的多种常用方法。<strong>Predicate</strong>接口非常适用于做过滤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; languages = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Haskell&quot;</span>, <span class="string">&quot;Lisp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Languages which starts with J :&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;((String)str).startsWith(<span class="string">&quot;J&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Languages which ends with a &quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;((String)str).endsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Print all languages :&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Print no language : &quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Print language whose length greater than 4:&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;((String)str).length() &gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;String&gt; names, Predicate condition)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(String  name: names)  &#123;</span><br><span class="line">        <span class="keyword">if</span>(condition.test(name)) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Languages which starts with J :</span><br><span class="line">Java</span><br><span class="line">Languages which ends with a</span><br><span class="line">Java</span><br><span class="line">Scala</span><br><span class="line">Print all languages :</span><br><span class="line">Java</span><br><span class="line">Scala</span><br><span class="line">C++</span><br><span class="line">Haskell</span><br><span class="line">Lisp</span><br><span class="line">Print no language :</span><br><span class="line">Print language whose length greater than <span class="number">4</span>:</span><br><span class="line">Scala</span><br><span class="line">Haskell</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好的办法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List names, Predicate condition)</span> &#123;</span><br><span class="line">    names.stream().filter((name) -&gt; (condition.test(name))).forEach((name) -&gt; &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，Stream API的过滤方法也接受一个<strong>Predicate</strong>，这意味着可以将我们定制的 filter() 方法替换成写在里面的内联代码，这就是lambda表达式的魔力。另外，<strong>Predicate</strong>接口也允许进行多重条件的测试，下个例子将要讲到。</p>
<h2 id="5、如何在lambda表达式中加入Predicate"><a href="#5、如何在lambda表达式中加入Predicate" class="headerlink" title="5、如何在lambda表达式中加入Predicate"></a>5、如何在lambda表达式中加入Predicate</h2><p>上个例子说到，<strong>java.util.function.Predicate</strong> 允许将两个或更多的 <strong>Predicate</strong> 合成一个。它提供类似于逻辑操作符AND和OR的方法，名字叫做 **and()<strong>、</strong>or()**，用于将传入 <strong>filter()</strong> 方法的条件合并起来。例如，要得到所有以J开始，长度为四个字母的语言，可以定义两个独立的 <strong>Predicate</strong> 示例分别表示每一个条件，然后用 <strong>Predicate.and()</strong> 方法将它们合并起来，如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 甚至可以用and()、or()逻辑函数来合并Predicate，</span></span><br><span class="line"><span class="comment">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span><br><span class="line">Predicate&lt;String&gt; startsWithJ = (n) -&gt; n.startsWith(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong = (n) -&gt; n.length() == <span class="number">4</span>;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(<span class="string">&quot;nName, which starts with &#x27;J&#x27; and four letter long is : &quot;</span> + n)); </span><br></pre></td></tr></table></figure>

<p>类似地，也可以使用 <strong>or()</strong> 方法。本例着重介绍了如下要点：可按需要将 <strong>Predicate</strong> 作为单独条件然后将其合并起来使用。简而言之，你可以以传统Java命令方式使用 <strong>Predicate</strong> 接口，也可以充分利用lambda表达式达到事半功倍的效果。</p>
<h2 id="6、Java-8中使用lambda表达式的Map和Reduce示例"><a href="#6、Java-8中使用lambda表达式的Map和Reduce示例" class="headerlink" title="6、Java 8中使用lambda表达式的Map和Reduce示例"></a>6、Java 8中使用lambda表达式的Map和Reduce示例</h2><p>本例介绍最广为人知的函数式编程概念map。它允许你将对象进行转换。例如在本例中，我们将 <strong>costBeforeTax</strong> 列表的每个元素转换成为税后的值。我们将 <strong>x -&gt; x*x</strong> lambda表达式传到 map() 方法，后者将其应用到流中的每一个元素。然后用 forEach() 将列表元素打印出来。使用流API的收集器类，可以得到所有含税的开销。有 toList() 这样的方法将 map 或任何其他操作的结果合并起来。由于收集器在流上做终端操作，因此之后便不能重用流了。你甚至可以用流API的 reduce() 方法将所有数字合成一个，下一个例子将会讲到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用lambda表达式为每个订单加上12%的税</span></span><br><span class="line"><span class="type">List</span> <span class="variable">costBeforeTax</span> <span class="operator">=</span> Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> cost + <span class="number">.12</span>*cost;</span><br><span class="line">    System.out.println(price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lambda表达式</span></span><br><span class="line"><span class="type">List</span> <span class="variable">costBeforeTax</span> <span class="operator">=</span> Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line">costBeforeTax.stream().map((cost) -&gt; cost + <span class="number">.12</span>*cost).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">112.0</span><br><span class="line">224.0</span><br><span class="line">336.0</span><br><span class="line">448.0</span><br><span class="line">560.0</span><br><span class="line">112.0</span><br><span class="line">224.0</span><br><span class="line">336.0</span><br><span class="line">448.0</span><br><span class="line">560.0 </span><br></pre></td></tr></table></figure>

<h2 id="7、Java-8中使用lambda表达式的Map和Reduce示例"><a href="#7、Java-8中使用lambda表达式的Map和Reduce示例" class="headerlink" title="7、Java 8中使用lambda表达式的Map和Reduce示例"></a>7、Java 8中使用lambda表达式的Map和Reduce示例</h2><p>在上个例子中，可以看到map将集合类（例如列表）元素进行转换的。还有一个 <strong>reduce()</strong> 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。另外，reduce 并不是一个新的操作，你有可能已经在使用它。SQL中类似 <strong>sum()<strong>、</strong>avg()</strong> 或者 <strong>count()</strong> 的聚集函数，实际上就是 reduce 操作，因为它们接收多个值并返回一个值。流API定义的 reduce() 函数可以接受lambda表达式，并对所有值进行合并。IntStream这样的类有类似 <strong>average()、count()、sum()</strong> 的内建方法来做 reduce 操作，也有<strong>mapToLong()、mapToDouble()</strong> 方法来做转换。这并不会限制你，你可以用内建方法，也可以自己定义。在这个Java 8的Map Reduce示例里，我们首先对所有价格应用 <em>12%</em> 的VAT，然后用 <strong>reduce()</strong> 方法计算总和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为每个订单加上12%的税</span></span><br><span class="line"><span class="comment">// 老方法：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">costBeforeTax</span> <span class="operator">=</span> Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> cost + <span class="number">.12</span>*cost;</span><br><span class="line">    total = total + price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Total : &quot;</span> + total);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新方法：</span></span><br><span class="line"><span class="type">List</span> <span class="variable">costBeforeTax</span> <span class="operator">=</span> Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">bill</span> <span class="operator">=</span> costBeforeTax.stream().map((cost) -&gt; cost + <span class="number">.12</span>*cost).reduce((sum, cost) -&gt; sum + cost).get();</span><br><span class="line">System.out.println(<span class="string">&quot;Total : &quot;</span> + bill); </span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Total : 1680.0</span><br><span class="line">Total : 1680.0</span><br></pre></td></tr></table></figure>

<h2 id="8、通过过滤创建一个String列表"><a href="#8、通过过滤创建一个String列表" class="headerlink" title="8、通过过滤创建一个String列表"></a>8、通过过滤创建一个String列表</h2><p>过滤是Java开发者在大规模集合上的一个常用操作，而现在使用lambda表达式和流API过滤大规模数据集合是惊人的简单。流提供了一个 <strong>filter()</strong> 方法，接受一个 <strong>Predicate</strong> 对象，即可以传入一个lambda表达式作为过滤逻辑。下面的例子是用lambda表达式过滤Java集合，将帮助理解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></span><br><span class="line">List&lt;String&gt; filtered = strList.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">System.out.printf(<span class="string">&quot;Original List : %s, filtered list : %s %n&quot;</span>, strList, filtered);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Original List : [abc, , bcd, , defg, jk], filtered list : [abc, bcd, defg] </span><br></pre></td></tr></table></figure>

<p>另外，关于 filter() 方法有个常见误解。在现实生活中，做过滤的时候，通常会丢弃部分，但使用filter()方法则是获得一个新的列表，且其每个元素符合过滤原则。</p>
<h2 id="9、对列表的每个元素应用函数"><a href="#9、对列表的每个元素应用函数" class="headerlink" title="9、对列表的每个元素应用函数"></a>9、对列表的每个元素应用函数</h2><p>我们通常需要对列表的每个元素使用某个函数，例如逐一乘以某个数、除以某个数或者做其它操作。这些操作都很适合用 <strong>map()</strong> 方法，可以将转换逻辑以lambda表达式的形式放在 map() 方法里，就可以对集合的各个元素进行转换了，如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将字符串换成大写并用逗号链接起来</span></span><br><span class="line">List&lt;String&gt; G7 = Arrays.asList(<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;Italy&quot;</span>, <span class="string">&quot;U.K.&quot;</span>,<span class="string">&quot;Canada&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">G7Countries</span> <span class="operator">=</span> G7.stream().map(x -&gt; x.toUpperCase()).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">System.out.println(G7Countries); </span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USA, JAPAN, FRANCE, GERMANY, ITALY, U.K., CANADA </span><br></pre></td></tr></table></figure>

<h2 id="10、复制不同的值，创建一个子列表"><a href="#10、复制不同的值，创建一个子列表" class="headerlink" title="10、复制不同的值，创建一个子列表"></a>10、复制不同的值，创建一个子列表</h2><p>本例展示了如何利用流的 <strong>distinct()</strong> 方法来对集合进行去重。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用所有不同的数字创建一个正方形列表</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; distinct = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br><span class="line">System.out.printf(<span class="string">&quot;Original List : %s,  Square Without duplicates : %s %n&quot;</span>, numbers, distinct); </span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Original List : [9, 10, 3, 4, 7, 3, 4],  Square Without duplicates : [81, 100, 9, 16, 49] </span><br></pre></td></tr></table></figure>

<h2 id="11、计算集合元素的最大值、最小值、总和以及平均值"><a href="#11、计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="11、计算集合元素的最大值、最小值、总和以及平均值"></a>11、计算集合元素的最大值、最小值、总和以及平均值</h2><p><strong>IntStream</strong>、<strong>LongStream</strong> 和 <strong>DoubleStream</strong> 等流的类中，有个非常有用的方法叫做 <strong>summaryStatistics()</strong> 。可以返回 <strong>IntSummaryStatistics</strong>、<strong>LongSummaryStatistics</strong> 或者 <strong>DoubleSummaryStatistics</strong>，描述流中元素的各种摘要数据。在本例中，我们用这个方法来计算列表的最大值和最小值。它也有 <strong>getSum()</strong> 和 <strong>getAverage()</strong> 方法来获得列表的所有元素的总和及平均值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数字的个数、最小值、最大值、总和以及平均值</span></span><br><span class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>);</span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> primes.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">System.out.println(<span class="string">&quot;Highest prime number in List : &quot;</span> + stats.getMax());</span><br><span class="line">System.out.println(<span class="string">&quot;Lowest prime number in List : &quot;</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">&quot;Sum of all prime numbers : &quot;</span> + stats.getSum());</span><br><span class="line">System.out.println(<span class="string">&quot;Average of all prime numbers : &quot;</span> + stats.getAverage());</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Highest prime number in List : 29</span><br><span class="line">Lowest prime number in List : 2</span><br><span class="line">Sum of all prime numbers : 129</span><br><span class="line">Average of all prime numbers : 12.9</span><br></pre></td></tr></table></figure>

<h2 id="12、Lambda表达式-vs-匿名类"><a href="#12、Lambda表达式-vs-匿名类" class="headerlink" title="12、Lambda表达式 vs 匿名类"></a>12、Lambda表达式 vs 匿名类</h2><p>既然lambda表达式即将正式取代Java代码中的匿名内部类，那么有必要对二者做一个比较分析。一个关键的不同点就是关键字 <strong>this</strong>。匿名类的 <strong>this</strong> 关键字指向匿名类，而lambda表达式的 <strong>this</strong> 关键字指向包围lambda表达式的类。另一个不同点是二者的编译方式。Java编译器将lambda表达式编译成类的私有方法。使用了Java 7的 <strong>invokedynamic</strong> 字节码指令来动态绑定这个方法。</p>
<h2 id="13、Java-8-Lambda表达式要点"><a href="#13、Java-8-Lambda表达式要点" class="headerlink" title="13、Java 8 Lambda表达式要点"></a>13、Java 8 Lambda表达式要点</h2><h2 id="14、10个Java-lambda表达式、流API示例"><a href="#14、10个Java-lambda表达式、流API示例" class="headerlink" title="14、10个Java lambda表达式、流API示例"></a>14、10个Java lambda表达式、流API示例</h2><p>到目前为止我们看到了Java 8的10个lambda表达式，这对于新手来说是个合适的任务量，你可能需要亲自运行示例程序以便掌握。试着修改要求创建自己的例子，达到快速学习的目的。我还想建议大家使用Netbeans IDE来练习lambda表达式，它对Java 8支持良好。当把代码转换成函数式的时候，Netbeans会及时给你提示。只需跟着Netbeans的提示，就能很容易地把匿名类转换成lambda表达式。此外，如果你喜欢阅读，那么记得看一下Java 8的lambdas，实用函数式编程这本书（<a href="https://link.zhihu.com/?target=http://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming/dp/B00OVMRHPO/ref=sr_1_3?ie=UTF8&qid=1438567374&sr=8-3&keywords=Java+8+Lambdas,+pragmatic+functional+programming">Java 8 Lambdas, pragmatic functional programming</a>），作者是Richard Warburton，或者也可以看看Manning的Java 8实战（<a href="https://link.zhihu.com/?target=http://www.amazon.com/Java-Action-Lambdas-functional-style-programming/dp/1617291994/ref=sr_1_1?ie=UTF8&qid=1438567348&sr=8-1&keywords=Java+8+in+Action">Java 8 in Action</a>），这本书虽然还没出版，但我猜线上有第一章的免费pdf。不过，在你开始忙其它事情之前，先回顾一下Java 8的lambda表达式、默认方法和函数式接口的重点知识。</p>
<p>1）lambda表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，或者SAM（Single Abstract Method 单个抽象方法）类型。这些称为lambda表达式的目标类型，可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。</p>
<p>2）lambda表达式内可以使用方法引用，仅当该方法不修改lambda表达式提供的参数。本例中的lambda表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.forEach(n -&gt; System.out.println(n)); </span><br><span class="line">list.forEach(System.out::println);  <span class="comment">// 使用方法引用 </span></span><br></pre></td></tr></table></figure>

<p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地lambda表达式，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.forEach((String s) -&gt; System.out.println(<span class="string">&quot;*&quot;</span> + s + <span class="string">&quot;*&quot;</span>)); </span><br></pre></td></tr></table></figure>

<p>事实上，可以省略这里的lambda参数的类型声明，编译器可以从列表的类属性推测出来。</p>
<p>3）lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</p>
<p>4）Lambda表达式在Java中又称为闭包或匿名函数，所以如果有同事把它叫闭包的时候，不用惊讶。</p>
<p>5）Lambda方法在编译器内部被翻译成私有方法，并派发 <strong>invokedynamic</strong> 字节码指令来进行调用。可以使用JDK中的 <strong>javap</strong> 工具来反编译class文件。使用 <strong>javap -p</strong> 或 <strong>javap -c -v</strong> 命令来看一看lambda表达式生成的字节码。大致应该长这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> java.lang.Object lambda$<span class="number">0</span>(java.lang.String);</span><br></pre></td></tr></table></figure>

<p>6）lambda表达式有个限制，那就是只能引用 <strong>final</strong> 或 <strong>final</strong> 局部变量，这就是说不能在lambda内部修改定义在域外的变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;);</span><br><span class="line"><span class="type">int</span> <span class="variable">factor</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">primes.forEach(element -&gt; &#123; factor++; &#125;); </span><br><span class="line"></span><br><span class="line">Compile time error : <span class="string">&quot;local variables referenced from a lambda expression must be final or effectively final&quot;</span></span><br></pre></td></tr></table></figure>

<p>另外，只是访问它而不作修改是可以的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;);</span><br><span class="line"><span class="type">int</span> <span class="variable">factor</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">primes.forEach(element -&gt; &#123; System.out.println(factor*element); &#125;); </span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">14 </span><br></pre></td></tr></table></figure>

<p>因此，它看起来更像不可变闭包，类似于Python。</p>
<p>以上就是Java 8的lambda表达式的全部10个例子。此次修改将成为Java史上最大的一次，将深远影响未来Java开发者使用集合框架的方式。我想规模最相似的一次修改就是Java 5的发布了，它带来了很多优点，提升了代码质量，例如：泛型、枚举、自动装箱（Autoboxing）、静态导入、并发API和变量参数。上述特性使得Java代码更加清晰，我想lambda表达式也将进一步改进它。我在期待着开发并行第三方库，这可以使高性能应用变得更容易写。</p>
<h2 id="15、stream流"><a href="#15、stream流" class="headerlink" title="15、stream流"></a>15、stream流</h2><h3 id="15-1、stream无状态的中间操作"><a href="#15-1、stream无状态的中间操作" class="headerlink" title="15.1、stream无状态的中间操作"></a>15.1、stream无状态的中间操作</h3><p><code>filter(过滤)、map(逻辑判断)、flatMap(多维处理)</code></p>
<blockquote>
<p>过滤</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;String&gt; nameStrs = Arrays.asList(<span class="string">&quot;Monkey&quot;</span>,<span class="string">&quot;Lion&quot;</span>,<span class="string">&quot;Giraffe&quot;</span>,<span class="string">&quot;Lemur&quot;</span>);</span><br><span class="line"><span class="comment">//        Stream.of(Array) 数组转换为流</span></span><br><span class="line"><span class="comment">//        过滤出以L字母开头的项，并转为大写</span></span><br><span class="line">        List&lt;String&gt; list = nameStrs.stream()</span><br><span class="line">                .filter(s -&gt; s.startsWith(<span class="string">&quot;L&quot;</span>))<span class="comment">// s.startsWith(&quot;L&quot;) 过滤条件</span></span><br><span class="line">                .map(String::toUpperCase)<span class="comment">//对过滤之后的元素进行的操作 String::toUpperCase 处理方法 :: 调用string的toUpperCase方法</span></span><br><span class="line">                .sorted()<span class="comment">//排序 可以指定排序规则</span></span><br><span class="line">                .collect(Collectors.toList());<span class="comment">//转为集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        Stream&lt;String&gt; stringStream = Files.lines(Paths.get(<span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line">        List&lt;String&gt; stringList = stringStream.filter(s -&gt; s.startsWith(<span class="string">&quot;L&quot;</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        stringList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>定义谓语逻辑</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    定义谓语逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Employee&gt; ageGreaterThan20 = x -&gt; x.getAge() &gt; <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;Employee&gt; genderM = x -&gt; x.getGender().equals(<span class="string">&quot;M&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;qz&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="number">20</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;zm&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;yc&quot;</span>);</span><br><span class="line">        List&lt;Employee&gt; employeeList = Arrays.asList(e1, e2, e3, e4, e5);</span><br><span class="line"><span class="comment">//        List&lt;Employee&gt; employees = employeeList.stream()</span></span><br><span class="line"><span class="comment">//                .filter(e -&gt; e.getAge() &gt; 20 &amp;&amp; e.getAge() &lt; 23)</span></span><br><span class="line"><span class="comment">//                .collect(Collectors.toList());</span></span><br><span class="line">        List&lt;Employee&gt; employees = employeeList.stream()</span><br><span class="line">                .filter(Employee.ageGreaterThan20.and(Employee.genderM))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>stream的map转换数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>);</span><br><span class="line">        List&lt;String&gt; collect = list.stream().map(String::toUpperCase).collect(Collectors.toList());<span class="comment">//转换为大写</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; collect = list.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.toList());</span></span><br><span class="line">        collect.forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 输出每一项的长度</span></span><br><span class="line">        Stream.of(<span class="string">&quot;Monkey&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Giraffe&quot;</span>, <span class="string">&quot;Lemur&quot;</span>).mapToInt(String::length).forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;qz&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="number">20</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;zm&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;yc&quot;</span>);</span><br><span class="line">        List&lt;Employee&gt; employeeList = Arrays.asList(e1, e2, e3, e4, e5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;Employee&gt; employees = employeeList.stream().map(e -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            e.setAge(e.getAge() + 1);</span></span><br><span class="line"><span class="comment">//            e.setGender(e.getGender().equals(&quot;M&quot;) ? &quot;Male&quot; : &quot;Female&quot;);</span></span><br><span class="line"><span class="comment">//            return e;</span></span><br><span class="line"><span class="comment">//        &#125;).collect(Collectors.toList());</span></span><br><span class="line">        <span class="comment">//map 复杂逻辑处理</span></span><br><span class="line">        <span class="comment">// peek 特殊的map方法，不需要写 return</span></span><br><span class="line">        List&lt;Employee&gt; employees = employeeList.stream().peek(e -&gt; &#123;</span><br><span class="line">            e.setAge(e.getAge() + <span class="number">1</span>);</span><br><span class="line">            e.setGender(e.getGender().equals(<span class="string">&quot;M&quot;</span>) ? <span class="string">&quot;Male&quot;</span> : <span class="string">&quot;Female&quot;</span>);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//FlatMap 针对二维以上的情况，管道里面还有管道，数组里面还有数组</span></span><br><span class="line">                List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        stringList.stream()</span><br><span class="line">                .map(w -&gt; w.split(<span class="string">&quot;&quot;</span>))<span class="comment">//[h,e,l,l,o],[w,o,r,l,d] w.split(&quot;&quot;) 截出来为数组</span></span><br><span class="line">                .forEach(System.out::println);<span class="comment">//打印出的是数组对象</span></span><br><span class="line">        stringList.stream()</span><br><span class="line">                .flatMap(w-&gt;Arrays.stream(w.split(<span class="string">&quot;&quot;</span>)))<span class="comment">//流里面的流</span></span><br><span class="line">                .forEach(System.out::println);<span class="comment">//打印出每一个字母</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="15-2、Stream有状态的中间操作"><a href="#15-2、Stream有状态的中间操作" class="headerlink" title="15.2、Stream有状态的中间操作"></a>15.2、Stream有状态的中间操作</h3><p><code>distinct(去重)、limit(取前多少个)、skip(跳过前多少个)、sorted(排序)</code></p>
<h3 id="15-3、集合排序"><a href="#15-3、集合排序" class="headerlink" title="15.3、集合排序"></a>15.3、集合排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Milan&quot;</span>, <span class="string">&quot;london&quot;</span>, <span class="string">&quot;San Francisco&quot;</span>, <span class="string">&quot;Tokyo&quot;</span>, <span class="string">&quot;New Delhi&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//        大小写不敏感的排序</span></span><br><span class="line">        list.sort(String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        System.out.println(list);<span class="comment">//[london, Milan, New Delhi, San Francisco, Tokyo]</span></span><br><span class="line"><span class="comment">//        自然排序，先排大写</span></span><br><span class="line">        list.sort(Comparator.naturalOrder());<span class="comment">//[Milan, New Delhi, San Francisco, Tokyo, london]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;qz&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>,<span class="number">20</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">3</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;zm&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="number">21</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;yc&quot;</span>);</span><br><span class="line">        List&lt;Employee&gt; employeeList = Arrays.asList(e1, e2, e3, e4, e5);</span><br><span class="line"><span class="comment">//        都是正序，不加reversed</span></span><br><span class="line"><span class="comment">//        都是倒序，最后加一个reversed</span></span><br><span class="line"><span class="comment">//        先是倒序（加reversed），然后正序</span></span><br><span class="line"><span class="comment">//        显示正序（加reversed），然后倒序（加reversed）</span></span><br><span class="line">        employeeList.sort(Comparator.comparing(Employee::getGender)</span><br><span class="line">                .reversed()</span><br><span class="line">                .thenComparingInt(Employee::getAge));</span><br><span class="line">     </span><br><span class="line">        employeeList.sort(((o1, o2) -&gt; &#123;<span class="comment">//使用lambda表达式实现的排序规则，降序</span></span><br><span class="line">            <span class="keyword">if</span> (o1.getAge() == o2.getAge()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o1.getAge() - o2.getAge() &gt; <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="15-4、函数式接口"><a href="#15-4、函数式接口" class="headerlink" title="15.4、函数式接口"></a>15.4、函数式接口</h3><ul>
<li>接口中有且仅有一个抽象方法</li>
<li>允许定义静态非抽象方法</li>
<li>允许定义默认default非抽象方法</li>
<li>允许java.lang.Object中的public方法</li>
<li>FunctionInterface注解不是必须的</li>
</ul>
<blockquote>
<p>default关键字</p>
</blockquote>
<ul>
<li>解决的问题：当一个接口中有很多的实现类的时候，修改这个接口就变成了一个非常麻烦的事，需要修改这个接口的所有实现类</li>
<li>default方法可以有自己的默认实现，即有方法体</li>
<li>接口实现类可以不去实现default方法，并且可以使用default方法</li>
</ul>
<p>接口中的<strong>default</strong>关键字修饰的方法，解决在接口的定义<strong>非抽象方法</strong>的问题，子类可以不实现此方法</p>
<h3 id="15-5、Stream查找与匹配元素"><a href="#15-5、Stream查找与匹配元素" class="headerlink" title="15.5、Stream查找与匹配元素"></a>15.5、Stream查找与匹配元素</h3><p>需求：</p>
<ul>
<li><p>是否包含某一个“匹配规则”的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        是否存在年龄大于19岁的 anyMatch 是否包含任意一个符合匹配规则的元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> employeeList.stream().anyMatch(e -&gt; e.getAge() &gt; <span class="number">19</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>是否所有的元素都符合某一个“匹配规则”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否所有的元素都大于10岁 allMatch 是否所有元素都符合匹配规则 </span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> employeeList.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>是否所有的元素都不符合某一个”匹配规则“</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否存在不小于20岁的人   noneMatch 是否存在不满足规则的元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> employeeList.stream().noneMatch(e -&gt; e.getAge() &lt; <span class="number">20</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>查找第一个符合“匹配规则”的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        获得过滤后的第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; first = employeeList.stream().filter(e -&gt; e.getAge() &gt; <span class="number">20</span>).findFirst();</span><br><span class="line"><span class="comment">//        是否存在元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">present</span> <span class="operator">=</span> employeeList.stream().filter(e -&gt; e.getAge() &gt; <span class="number">20</span>).findFirst().isPresent();</span><br><span class="line"><span class="comment">// 			不存在时返回的对象</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeList.stream().filter(e -&gt; e.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">                .findFirst().orElse(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="number">19</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;yf&quot;</span>));</span><br></pre></td></tr></table></figure>


</li>
<li><p>查找任意一个符合“匹配规则”的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Employee&gt; any = employeeList.stream().filter(e -&gt; e.getAge() &gt; <span class="number">20</span>).findAny();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-6、集合元素归约"><a href="#15-6、集合元素归约" class="headerlink" title="15.6、集合元素归约"></a>15.6、集合元素归约</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> integerList.stream().reduce(<span class="number">0</span>, (subtotal, element) -&gt; subtotal + element);</span><br><span class="line">        integer = integerList.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      parallelStream 并行流 </span></span><br><span class="line"><span class="comment">//      reduce(0, Integer::sum, Integer::sum)</span></span><br><span class="line"><span class="comment">//      第一个参数：起始值</span></span><br><span class="line"><span class="comment">//      第二个参数：累加器</span></span><br><span class="line"><span class="comment">//      第三个参数：合并器（因为串行流，分为了几组去相加，合并最后的结果）</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> employeeList.parallelStream().map(Employee::getAge).reduce(<span class="number">0</span>, Integer::sum, Integer::sum);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>hive</title>
    <url>/2022/10/06/hive/</url>
    <content><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p>Hive 是由 Facebook 开源用于解决海量结构化日志的数据统计工具，是基于 Hadoop 的一个<code>数据仓库工具</code>，可以将<code>结构化的数据文件映射为一张表</code>，并提供类 SQL 查询功能。</p>
<p>本质是将 HQL 转化成 MapReduce 程序</p>
<ol>
<li>Hive 处理的数据存储在 HDFS 上</li>
<li>Hive 分析数据的底层实现是 MapReduce</li>
<li>程序运行在 Yarn 上</li>
</ol>
<span id="more"></span>

<h2 id="1、Hive-的优缺点"><a href="#1、Hive-的优缺点" class="headerlink" title="1、Hive 的优缺点"></a>1、Hive 的优缺点</h2><h3 id="1-1、优点"><a href="#1-1、优点" class="headerlink" title="1.1、优点"></a>1.1、优点</h3><ol>
<li>操作接口采用类 SQL 语法，提供快速开发的能力（简单、容易上手）</li>
<li>避免了去写 MapReduce，减少了开发人员的学习成本</li>
<li>Hive 的执行延迟比较高，因此 Hive 常用于数据分析，对实时性要求不高的场合</li>
<li>Hive 优势在于处理大数据，对于处理小数据没有优势，因为 Hive 的执行延迟比较高</li>
<li>Hive 支持用户自定义函数，用户可以根据自己的需求来实现自己的函数</li>
</ol>
<h3 id="1-2、缺点"><a href="#1-2、缺点" class="headerlink" title="1.2、缺点"></a>1.2、缺点</h3><ol>
<li>Hive 的 HQL 表达能力有限<ul>
<li>迭代式算法无法表达</li>
<li>数据挖掘方面不擅长，由于 MapReduce 数据处理流程的限制，效率更高的算法缺无法实现</li>
</ul>
</li>
<li>Hive 的效率比较低<ul>
<li>Hive 自动生成的 MapReduce 作业通常情况下不够智能化</li>
<li>Hive 调优比较困难，粒度较粗</li>
</ul>
</li>
</ol>
<h2 id="2、Hive-架构"><a href="#2、Hive-架构" class="headerlink" title="2、Hive 架构"></a>2、Hive 架构</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220729110915874.png" alt="Hive 架构"></p>
<ol>
<li><p>用户接口：</p>
<ul>
<li>Client CLI（command-line interface）</li>
<li>JDBC&#x2F;ODBC(jdbc 访问 hive)</li>
<li>WEBUI（浏览器访问 hive）</li>
</ul>
</li>
<li><p>元数据：Metastore 元数据包括：</p>
<ul>
<li>表名、表所属的数据库（默认是 default）</li>
<li>表的拥有者、列&#x2F;分区字段、 表的类型（是否是外部表）</li>
<li>表的数据所在目录等</li>
</ul>
<p><code>默认存储在自带的 derby 数据库中，推荐使用 MySQL 存储 Metastore</code></p>
</li>
<li><p>Hadoop：使用 HDFS 进行存储，使用 MapReduce 进行计算。 </p>
</li>
<li><p>驱动器：Driver </p>
<ul>
<li>解析器（SQL Parser）：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第 三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、SQL 语义是否有误。</li>
<li>编译器（Physical Plan）：将 AST 编译生成逻辑执行计划。</li>
<li>优化器（Query Optimizer）：对逻辑执行计划进行优化。</li>
<li>执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来 说，就是 MR&#x2F;Spark。</li>
</ul>
</li>
</ol>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220729140108234.png" alt="Hive运行机制"></p>
<p>Hive 通过给用户提供的一系列交互接口，接收到用户的指令（SQL），使用自己的 Driver， 结合元数据（MetaStore），将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。</p>
<h2 id="3、Hive-和数据库比较"><a href="#3、Hive-和数据库比较" class="headerlink" title="3、Hive 和数据库比较"></a>3、Hive 和数据库比较</h2><blockquote>
<p>查询语言</p>
</blockquote>
<p>Hive 使用的是类 SQL 的查询语言 HQL</p>
<blockquote>
<p>数据更新</p>
</blockquote>
<p>Hive 是针对数据仓库应用设计的，而<code>数据仓库的内容是读多写少</code>的。因此，Hive 中 <code>不建议对数据的改写</code>，所有的数据都是在加载的时候确定好的。而数据库中的数据通常是需 要经常进行修改的</p>
<blockquote>
<p>执行延迟</p>
</blockquote>
<p>Hive 在查询数据的时候，由于没有索引和 MapReduce 本身的特性，因此延迟较高。数据库的执行延迟较低，但当数据规模大到超过数据库的处理能力的时候， Hive 的并行计算就能体现出优势</p>
<blockquote>
<p>数据规模</p>
</blockquote>
<p>Hive 建立在集群上并可以利用 MapReduce 进行并行计算，因此可以支持很大规模 的数据</p>
<h2 id="4、Hive-安装"><a href="#4、Hive-安装" class="headerlink" title="4、Hive 安装"></a>4、Hive 安装</h2><p>从官网下载 apache-hive-3.1.3-bin.tar.gz 解压到 hadoop100 &#x2F;opt&#x2F;module 目录下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改名称为 hive</span></span><br><span class="line"><span class="built_in">mv</span> /opt/module/apache-hive-3.1.3-bin/ /opt/module/hive</span><br><span class="line"><span class="comment"># 增加环境变量</span></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line"><span class="comment">#HIVE_HOME</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/opt/module/hive</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"><span class="comment"># 解决日志 jar 包冲突</span></span><br><span class="line"> <span class="built_in">mv</span> <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.17.1.jar <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.17.1.bak</span><br><span class="line"> <span class="comment"># 初始化数据库，在 /opt/module/hive 路径下执行 derby zhi</span></span><br><span class="line"> bin/schematool -dbType derby -initSchema</span><br></pre></td></tr></table></figure>

<h2 id="5、Hive-启动"><a href="#5、Hive-启动" class="headerlink" title="5、Hive 启动"></a>5、Hive 启动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先启动hadoop 集群</span></span><br><span class="line">myhadoop.sh start</span><br><span class="line"><span class="comment"># 启动 hive</span></span><br><span class="line">bin/hive</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">show databases;</span><br><span class="line">show tables;</span><br><span class="line">create table <span class="built_in">test</span>(<span class="built_in">id</span> int);</span><br><span class="line">insert into <span class="built_in">test</span> values(1001);</span><br><span class="line">select * from <span class="built_in">test</span>;</span><br><span class="line"><span class="comment"># 默认的存储路径在 hdfs 中的 /user/hive/warehouse/</span></span><br></pre></td></tr></table></figure>

<h2 id="6、Mysql-安装"><a href="#6、Mysql-安装" class="headerlink" title="6、Mysql 安装"></a>6、Mysql 安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 mysql-5.7.36-1.el7.x86_64.rpm-bundle.tar 安装包上传到 /opt/software 目录</span></span><br><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar -xf mysql-5.7.36-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除自带的数据库</span></span><br><span class="line">rpm -e --nodeps mariadb-libs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 rpm 安装</span></span><br><span class="line">rpm -ivh mysql-community-common-5.7.36-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-libs-5.7.36-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.36-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-client-5.7.36-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-server-5.7.36-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql 初始化</span></span><br><span class="line">mysqld --initialize --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看初始密码</span></span><br><span class="line"><span class="comment"># 查看日志的存放位置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/my.cnf</span><br><span class="line"><span class="comment"># 查看日志文件路径 log-error=/var/log/mysqld.log</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log</span><br><span class="line"><span class="comment"># A temporary password is generated for root@localhost: ?,IUZo?Cz5&amp;)</span></span><br><span class="line"><span class="comment"># 复制密码：?,IUZo?Cz5&amp;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 mysql 开机自启</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line"><span class="built_in">set</span> password=password(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment"># 设置 mysql 为任意 ip 可访问</span></span><br><span class="line">use mysql;</span><br><span class="line">update mysql.user <span class="built_in">set</span> host=<span class="string">&quot;%&quot;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 设置立即生效</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h2 id="7、Hive-元数据配置到-Mysql"><a href="#7、Hive-元数据配置到-Mysql" class="headerlink" title="7、Hive 元数据配置到 Mysql"></a>7、Hive 元数据配置到 Mysql</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 mysql 连接驱动包到 hive 目录下的 lib 文件夹下</span></span><br><span class="line"><span class="built_in">cp</span> /opt/software/mysql-connector-java-5.1.37.jar ./lib/</span><br><span class="line"><span class="comment"># 在 hive 目录下的 conf 文件夹下 添加 hive-site.xml 文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc 连接的 URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop100:3306/metastore?useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc 连接的 Driver--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc 连接的 username--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc 连接的 password --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hive 元数据存储版本的验证 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--元数据存储授权--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hive 默认在 HDFS 的工作目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 新建 Hive 元数据库</span></span><br><span class="line">create database metastore;</span><br><span class="line">quit;</span><br><span class="line"><span class="comment"># 初始化 Hive 元数据库</span></span><br><span class="line">schematool -initSchema -dbType mysql -verbose</span><br><span class="line"><span class="comment"># 再次启动 hive</span></span><br><span class="line">bin/hive</span><br><span class="line">show databases;</span><br><span class="line">show tables;</span><br><span class="line">create table <span class="built_in">test</span> (<span class="built_in">id</span> int);</span><br><span class="line">insert into <span class="built_in">test</span> values(1);</span><br><span class="line">select * from <span class="built_in">test</span>;</span><br><span class="line"><span class="comment"># 新打开一个 ssh 连接窗口，重复 hive 的命令，看是否能连接 hive ，hive 命令是否能执行</span></span><br></pre></td></tr></table></figure>

<h2 id="8、使用元数据服务的方式访问-Hive"><a href="#8、使用元数据服务的方式访问-Hive" class="headerlink" title="8、使用元数据服务的方式访问 Hive"></a>8、使用元数据服务的方式访问 Hive</h2><ol>
<li><p>在 hive-site.xml 文件中添加一下配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定存储元数据要连接的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://hadoop100:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 metastore</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hive --service metastore</span><br><span class="line"><span class="comment"># 启动后该窗口不能再操作，需要打开一个新的 shell 窗口执行操作</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="9、使用-JDBC-方式访问-Hive"><a href="#9、使用-JDBC-方式访问-Hive" class="headerlink" title="9、使用 JDBC 方式访问 Hive"></a>9、使用 JDBC 方式访问 Hive</h2><p>这种方式依赖于<code>元数据服务</code>的启动</p>
<ol>
<li><p>在 hive-site.xml 文件中添加一下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定 hiveserver2 连接的 host --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 hiveserver2 连接的端口号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个选项设置为false,查询将会使用运行 hiveserver2 的用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.enable.doAs <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 hiveserver2</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/hive --service hiveserver2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 beeline 客户端</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/beeline -u jdbc:hive2://hadoop100:10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 hive 服务启动脚本</p>
<ul>
<li><p>nohup: 放在命令开头，表示不挂起,也就是关闭终端进程也继续保持运行状态</p>
</li>
<li><p>&#x2F;dev&#x2F;null：是 Linux 文件系统中的一个文件，被称为黑洞，所有写入改文件的内容 都会被自动丢弃</p>
</li>
<li><p>2&gt;&amp;1 : 表示将错误重定向到标准输出上</p>
</li>
<li><p>&amp;: 放在命令结尾,表示后台运行 一般会组合使用: nohup [xxx 命令操作]&gt; file 2&gt;&amp;1 &amp;，表示将 xxx 命令运行的结 果输出到 file 中，并保持命令启动的进程在后台运行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> hive --service metastore 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">nohup</span> hive --service metastore 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 hiveservices.sh 脚本到 &#x2F;home&#x2F;hqz&#x2F;bin</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HIVE_LOG_DIR=<span class="variable">$HIVE_HOME</span>/logs</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$HIVE_LOG_DIR</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$HIVE_LOG_DIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#检查进程是否运行正常，参数 1 为进程名，参数 2 为进程端口</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_process</span></span>() &#123;</span><br><span class="line">    pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i <span class="variable">$1</span> | awk <span class="string">&#x27;&#123;print </span></span><br><span class="line"><span class="string">$2&#125;&#x27;</span>)</span><br><span class="line">    ppid=$(</span><br><span class="line">        netstat -nltp 2&gt;/dev/null | grep <span class="variable">$2</span> | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | <span class="built_in">cut</span> -</span><br><span class="line">        d <span class="string">&#x27;/&#x27;</span> -f 1</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line">    [[ <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> =~ <span class="string">&quot;<span class="variable">$ppid</span>&quot;</span> ]] &amp;&amp; [ <span class="string">&quot;<span class="variable">$ppid</span>&quot;</span> ] &amp;&amp; <span class="built_in">return</span> 0 || <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hive_start</span></span>() &#123;</span><br><span class="line">    metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">    cmd=<span class="string">&quot;nohup hive --service metastore &gt;<span class="variable">$HIVE_LOG_DIR</span>/metastore.log 2&gt;&amp;1 </span></span><br><span class="line"><span class="string">&amp;&quot;</span></span><br><span class="line">    [ -z <span class="string">&quot;<span class="variable">$metapid</span>&quot;</span> ] &amp;&amp; <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;Metastroe 服务已启动&quot;</span></span><br><span class="line">    server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">    cmd=<span class="string">&quot;nohup hiveserver2 &gt;<span class="variable">$HIVE_LOG_DIR</span>/hiveServer2.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class="line">    [ -z <span class="string">&quot;<span class="variable">$server2pid</span>&quot;</span> ] &amp;&amp; <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;HiveServer2 服务已启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hive_stop</span></span>() &#123;</span><br><span class="line">    metapid=$(check_process HiveMetastore 9083)</span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$metapid</span>&quot;</span> ] &amp;&amp; <span class="built_in">kill</span> <span class="variable">$metapid</span> || <span class="built_in">echo</span> <span class="string">&quot;Metastore 服务未启动&quot;</span></span><br><span class="line">    server2pid=$(check_process HiveServer2 10000)</span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$server2pid</span>&quot;</span> ] &amp;&amp; <span class="built_in">kill</span> <span class="variable">$server2pid</span> || <span class="built_in">echo</span> <span class="string">&quot;HiveServer2 服务未启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">    hive_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">    hive_stop</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;restart&quot;</span>)</span><br><span class="line">    hive_stop</span><br><span class="line">    <span class="built_in">sleep</span> 2</span><br><span class="line">    hive_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">    check_process HiveMetastore 9083 &gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Metastore 服务运行</span></span><br><span class="line"><span class="string">正常&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Metastore 服务运行异常&quot;</span></span><br><span class="line">    check_process HiveServer2 10000 &gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;HiveServer2 服务运</span></span><br><span class="line"><span class="string">行正常&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;HiveServer2 服务运行异常&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> Invalid Args!</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: &#x27;</span>$(<span class="built_in">basename</span> <span class="variable">$0</span>)<span class="string">&#x27; start|stop|restart|status&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x hiveservices.sh</span><br><span class="line"><span class="comment"># 启动 hive</span></span><br><span class="line">hiveservices.sh start</span><br><span class="line">bin/beeline -u jdbc:hive2://hadoop100:10000</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Hive-常用交互命令"><a href="#Hive-常用交互命令" class="headerlink" title="Hive 常用交互命令"></a>Hive 常用交互命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -e 不进入 hive 的交互窗口执行 sql 语句</span></span><br><span class="line">bin/hive -e <span class="string">&quot;select id from test;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 执行脚本中 sql 语句</span></span><br><span class="line"><span class="comment"># 执行文件中的 sql 语句</span></span><br><span class="line">bin/hive -f ./hivef.sql</span><br><span class="line"><span class="comment"># 执行文件中的 sql 语句并将结果写入文件中</span></span><br><span class="line">bin/hive -f ./hivef.sql &gt; ./hive_result.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># hive 窗口的其它命令</span></span><br><span class="line"><span class="comment"># 退出 hive 窗口</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">quit;</span><br><span class="line"><span class="comment"># 查看 hdfs 文件系统</span></span><br><span class="line">dfs -<span class="built_in">ls</span> /;</span><br><span class="line"><span class="comment"># 查看 hive 中输入的所有历史命令</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"><span class="built_in">cat</span> .hivehistory</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="10、Hive-常见属性配置"><a href="#10、Hive-常见属性配置" class="headerlink" title="10、Hive 常见属性配置"></a>10、Hive 常见属性配置</h2><ol>
<li><p>Hive 运行日志信息配置</p>
<ul>
<li><p>Hive 的 log 默认存放在 &#x2F;tmp&#x2F;root&#x2F;hive.log 目录下（当前用户名下）</p>
</li>
<li><p>修改 hive 的 log 存放日志到 &#x2F;opt&#x2F;module&#x2F;hive&#x2F;logs</p>
<ol>
<li><p>修改&#x2F;opt&#x2F;module&#x2F;hive&#x2F;conf&#x2F;hive-log4j2.properties.template 文件名称为 hive-log4j2.properties</p>
</li>
<li><p>在 hive-log4j2.properties 文件中修改 log 存放位置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hive.log.dir=/opt/module/hive/logs</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p>打印当前库和表头</p>
<p>在 hive-site.xml 中加入如下两个配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数配置方式</p>
<ul>
<li><p>查看当前所有的配置信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数配置的三种方式</p>
<ol>
<li><p>配置文件方式</p>
<ul>
<li><p>默认配置文件：hive-default.xml</p>
</li>
<li><p>用户自定义的配置文件：hive-site.xml</p>
<p>注意：<font color="orange">用户自定义配置会覆盖默认配置</font>。另外，<strong>Hive 也会读入 Hadoop 的配置</strong>，因为 Hive 是作为 Hadoop 的客户端启动的，Hive 的配置会覆盖 Hadoop 的配置。<code>配置文件的设定对本机启动的所有 Hive 进程都有效</code>。</p>
</li>
</ul>
</li>
<li><p>命令行参数方式</p>
<p>启动 Hive 时，可以在命令行添加 -hiveconf param&#x3D;value 来设定参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅对本次 hive 有效</span></span><br><span class="line">bin/hive -hiveconf mapred.reduce.tasks=10;</span><br><span class="line"><span class="comment"># 查看参数设置</span></span><br><span class="line"><span class="built_in">set</span> mapred.reduce.tasks;</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数声明方式</p>
<p>可以在 HQL 中使用 SET 关键字设定参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 仅对本次 hive 有效</span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"># 查看参数设置</span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>配置优先级为：配置文件 &lt; 命令行参数 &lt; 参数声明 （某些系统级的参数，必须用配置文件或者命令行参数设置）</p>
</li>
</ul>
</li>
</ol>
<h2 id="11、Hive-数据类型"><a href="#11、Hive-数据类型" class="headerlink" title="11、Hive 数据类型"></a>11、Hive 数据类型</h2><h3 id="11-1、基本数据类型"><a href="#11-1、基本数据类型" class="headerlink" title="11.1、基本数据类型"></a>11.1、基本数据类型</h3><table>
<thead>
<tr>
<th>Hive 数据类型</th>
<th>java 数据类型</th>
<th>长度</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>byte</td>
<td>1byte 有符号整数</td>
<td>20</td>
</tr>
<tr>
<td>SMALINT</td>
<td>short</td>
<td>2byte 有符号整数</td>
<td>20</td>
</tr>
<tr>
<td>INT</td>
<td>int</td>
<td>4byte 有符号整数</td>
<td>20</td>
</tr>
<tr>
<td>BIGINT</td>
<td>long</td>
<td>8byte 有符号整数</td>
<td>20</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>boolean</td>
<td>布尔类型，true 或者 false</td>
<td>TRUE FALSE</td>
</tr>
<tr>
<td>FLOAT</td>
<td>float</td>
<td>单精度浮点数</td>
<td>3.14159</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>double</td>
<td>双精度浮点数</td>
<td>3.14159</td>
</tr>
<tr>
<td>STRING</td>
<td>string</td>
<td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td>
<td>‘now is the time’ “for all good men”</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td></td>
<td>时间类型</td>
<td></td>
</tr>
<tr>
<td>BINARY</td>
<td></td>
<td>字节数组</td>
<td></td>
</tr>
</tbody></table>
<p>对于 Hive 的 String 类型相当于数据库的 varchar 类型，该类型是一个可变的字符串，不 过它不能声明其中最多能存储多少个字符，理论上它可以存储 2GB 的字符数。</p>
<h3 id="11-2、集合数据类型"><a href="#11-2、集合数据类型" class="headerlink" title="11.2、集合数据类型"></a>11.2、集合数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
<th>语法示例</th>
</tr>
</thead>
<tbody><tr>
<td>STRUCT</td>
<td>和 c 语言中的 struct 类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是 STRUCT{first STRING, last STRING},那么<code>第1个元素可以通过字段.first来引用</code>。</td>
<td>struct() 例如struct&lt;street:string, city:string&gt;</td>
</tr>
<tr>
<td>MAP</td>
<td>MAP 是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是 MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么<code>可以通过字段名[‘last’]获取最后一个元素</code>。</td>
<td>map() 例如 map&lt;string, int&gt;</td>
</tr>
<tr>
<td>ARRAY</td>
<td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么<code>第2个元素可以通过数组名[1]进行引用</code>。</td>
<td>Array() 例如 array&lt;string&gt;</td>
</tr>
</tbody></table>
<p>Hive 有三种复杂数据类型 ARRAY、MAP 和 STRUCT。ARRAY 和 MAP 与 Java 中的 Array 和 Map 类似，而 STRUCT 与 C 语言中的 Struct 类似，它封装了一个命名字段集合，复杂数据 类型允许任意层次的嵌套。</p>
<h3 id="11-3、案例"><a href="#11-3、案例" class="headerlink" title="11.3、案例"></a>11.3、案例</h3><ol>
<li><p>假设某表有如下一行，我们用 JSON 格式来表示其数据结构。在 Hive 下访问的格式为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;songsong&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;friends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;bingbing&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lili&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//列表 Array, </span></span><br><span class="line">    <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//键值 Map,</span></span><br><span class="line">        <span class="attr">&quot;xiao song&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;xiaoxiao song&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//结构 Struct,</span></span><br><span class="line">        <span class="attr">&quot;street&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hui long guan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;beijing&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建本地测试 test.txt 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">songsong,bingbing_lili,xiao song:18_xiaoxiao song:19,hui long guan_beijing</span><br><span class="line">yangyang,caicai_susu,xiao yang:18_xiaoxiao yang:19,chao yang_beijing</span><br></pre></td></tr></table></figure>

<p>注意：MAP，STRUCT 和 ARRAY 里的元素间关系都可以用同一个字符表示，这里用“_”。</p>
</li>
<li><p>在 Hive 上创建测试表 test2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table test2(</span><br><span class="line">name string,</span><br><span class="line">friends array&lt;string&gt;,</span><br><span class="line">children map&lt;string, int&gt;,</span><br><span class="line">address struct&lt;street:string, city:string&gt;</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line">collection items terminated by &#x27;_&#x27;</span><br><span class="line">map keys terminated by &#x27;:&#x27;</span><br><span class="line">lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure>

<p>字段解释： </p>
<ul>
<li>row format delimited fields terminated by ‘,’ – 列分隔符</li>
<li>collection items terminated by ‘_’ –MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)</li>
<li>map keys terminated by ‘:’ – MAP 中的 key 与 value 的分隔符</li>
<li>lines terminated by ‘\n’; – 行分隔符</li>
</ul>
</li>
<li><p>导入 test.txt 到 hadoop 中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop fs -put ./test.txt /user/hive/warehouse/test2</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select friends[1],children[&#x27;xiao song&#x27;],address.city from </span><br><span class="line">test2</span><br><span class="line">where name=&quot;songsong&quot;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="11-4、类型转化"><a href="#11-4、类型转化" class="headerlink" title="11.4、类型转化"></a>11.4、类型转化</h3><ol>
<li>隐式类型转换，规则如下：<ul>
<li>任何整数类型都可以隐式地转换为一个范围更广的类型，如 TINYINT 可以转换成 INT，INT 可以转换成 BIGINT。</li>
<li>所有整数类型、FLOAT 和 STRING 类型都可以隐式地转换成 DOUBLE。</li>
<li>TINYINT、SMALLINT、INT 都可以转换为 FLOAT。</li>
<li>BOOLEAN 类型不可以转换为任何其它的类型。</li>
</ul>
</li>
<li>使用 cast 显示转换<ul>
<li>例如 CAST(‘1’ AS INT) 将把字符串’1’ 转换成整数 1。</li>
<li>如果强制类型转换失败，如执行 CAST(‘X’ AS INT)，表达式返回空值 NULL。</li>
</ul>
</li>
</ol>
<h2 id="12、DDL-数据定义"><a href="#12、DDL-数据定义" class="headerlink" title="12、DDL 数据定义"></a>12、DDL 数据定义</h2><h3 id="12-1、创建数据库"><a href="#12-1、创建数据库" class="headerlink" title="12.1、创建数据库"></a>12.1、创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- [里面的内容为可选项]</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">[COMMENT database_comment]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[<span class="keyword">WITH</span> DBPROPERTIES (property_name<span class="operator">=</span>property_value, ...)];</span><br><span class="line"><span class="comment">-- 创建的数据库在 HDFS 上的默认存储路径是/user/hive/warehouse/*.db。</span></span><br><span class="line"><span class="comment">-- 指定存放位置</span></span><br><span class="line"><span class="keyword">create</span> database db_hive location <span class="string">&#x27;/db_hive.db&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="12-2、数据库基本命令"><a href="#12-2、数据库基本命令" class="headerlink" title="12.2、数据库基本命令"></a>12.2、数据库基本命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 查询数据库详情</span></span><br><span class="line"><span class="comment">-- 显示数据库信息</span></span><br><span class="line"><span class="keyword">desc</span> database db_hive;</span><br><span class="line"><span class="comment">-- 显示数据库详细信息</span></span><br><span class="line"><span class="keyword">desc</span> database extended db_hive;</span><br><span class="line"><span class="comment">-- 切换当前数据库</span></span><br><span class="line">use db_hive;</span><br><span class="line"><span class="comment">-- 可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对属性值，来描述这个数据库的属性信息。</span></span><br><span class="line"><span class="keyword">alter</span> database db_hive <span class="keyword">set</span> dbproperties(<span class="string">&#x27;createtime&#x27;</span><span class="operator">=</span><span class="string">&#x27;20170830&#x27;</span>);</span><br><span class="line"><span class="comment">-- 删除空数据库</span></span><br><span class="line"><span class="keyword">drop</span> database db_hive;</span><br><span class="line"><span class="comment">-- 强制删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database db_hive cascade;</span><br></pre></td></tr></table></figure>

<h3 id="12-3、建表语句"><a href="#12-3、建表语句" class="headerlink" title="12.3、建表语句"></a>12.3、建表语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- hive 有内外表之分，EXTERNAL 创建外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name</span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">[COMMENT table_comment]</span><br><span class="line"><span class="comment">-- PARTITIONED BY 创建分区表</span></span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line"><span class="comment">-- CLUSTERED BY 创建分桶表</span></span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...)</span><br><span class="line"><span class="comment">-- SORTED BY 对桶中的一个或多个列另外排序</span></span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line"><span class="comment">-- 在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive 通过 SerDe 确定表的具体的列的数据</span></span><br><span class="line"><span class="comment">-- SerDe 是 Serialize/Deserilize 的简称， hive 使用 Serde 进行行对象的序列与反序列化</span></span><br><span class="line">[<span class="type">ROW</span> FORMAT row_format]</span><br><span class="line"><span class="comment">-- STORED AS 指定存储文件类型，有：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）</span></span><br><span class="line"><span class="comment">-- 纯文本，可以使用 STORED AS TEXTFILE。数据需要压缩，使用 STORED AS SEQUENCEFILE</span></span><br><span class="line">[STORED <span class="keyword">AS</span> file_format]</span><br><span class="line"><span class="comment">-- LOCATION ：指定表在 HDFS 上的存储位置</span></span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name<span class="operator">=</span>property_value, ...)]</span><br><span class="line"><span class="comment">-- AS：后跟查询语句，根据查询结果创建表</span></span><br><span class="line">[<span class="keyword">AS</span> select_statement]</span><br></pre></td></tr></table></figure>

<h3 id="12-4、管理表"><a href="#12-4、管理表" class="headerlink" title="12.4、管理表"></a>12.4、管理表</h3><p>默认创建的表是管理表，也被称为内部表。Hive 默认情况下会将这些表的数据存储在由配置项 hive.metastore.warehouse.dir(例如，&#x2F;user&#x2F;hive&#x2F;warehouse) 所定义的目录的子目录下。</p>
<p><font color="orange">删除一个管理表时，Hive 也会删除这个表中数据。</font>管理表不适合和其他工具共享数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line">id <span class="type">int</span>, name string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> textfile</span><br><span class="line">location <span class="string">&#x27;/user/hive/warehouse/student&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="12-5、外部表"><a href="#12-5、外部表" class="headerlink" title="12.5、外部表"></a>12.5、外部表</h3><p>Hive 认为其没有完全拥有这份数据，因此删除该表并不会删除掉这份数据，不过会删除掉描述表的元数据信息。</p>
<p>使用场景：每天将收集到的网站日志定期流入 HDFS 文本文件。在外部表（原始日志表）的基础上 做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过 SELECT+INSERT 进入内部表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dept(</span><br><span class="line">deptno <span class="type">int</span>,</span><br><span class="line">dname string,</span><br><span class="line">loc <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="12-6、管理表与外部表的互相转换"><a href="#12-6、管理表与外部表的互相转换" class="headerlink" title="12.6、管理表与外部表的互相转换"></a>12.6、管理表与外部表的互相转换</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改内部表为外部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;TRUE&#x27;</span>);</span><br><span class="line"><span class="comment">-- 修改外部表为内部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;FALSE&#x27;</span>);</span><br><span class="line"><span class="comment">-- 注意区分大小写</span></span><br></pre></td></tr></table></figure>

<h3 id="12-7、修改表"><a href="#12-7、修改表" class="headerlink" title="12.7、修改表"></a>12.7、修改表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 重命名表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME <span class="keyword">TO</span> new_table_name</span><br><span class="line"><span class="comment">-- 更新列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CHANGE [<span class="keyword">COLUMN</span>] col_old_name col_new_name column_type [COMMENT col_comment] [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER column_name]</span><br><span class="line"><span class="comment">-- 增加和替换列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span><span class="operator">|</span>REPLACE COLUMNS (col_name data_type [COMMENT col_comment], ...)</span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>

<h2 id="13、DML-数据操作"><a href="#13、DML-数据操作" class="headerlink" title="13、DML 数据操作"></a>13、DML 数据操作</h2><h3 id="13-1、数据导入"><a href="#13-1、数据导入" class="headerlink" title="13.1、数据导入"></a>13.1、数据导入</h3><ol>
<li><p>向表中装载数据 load</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;data path&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1<span class="operator">=</span>val1,…)];</span><br><span class="line"><span class="comment">-- load data:表示加载数据</span></span><br><span class="line"><span class="comment">-- local:表示从本地加载数据到 hive 表；否则从 HDFS 加载数据到 hive 表</span></span><br><span class="line"><span class="comment">-- inpath:表示加载数据的路径</span></span><br><span class="line"><span class="comment">-- overwrite:表示覆盖表中已有数据，否则表示追加</span></span><br><span class="line"><span class="comment">-- into table:表示加载到哪张表</span></span><br><span class="line"><span class="comment">-- student:表示具体的表</span></span><br><span class="line"><span class="comment">-- partition:表示上传到指定分区</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过查询语句向表中插入数据 insert</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 基本插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;wangwu&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;zhaoliu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基本模式插入（根据单张表查询结果）</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">select</span> id, name <span class="keyword">from</span> student_par <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201709&#x27;</span>;</span><br><span class="line"><span class="comment">-- insert into：以追加数据的方式插入到表或分区，原有数据不会删除</span></span><br><span class="line"><span class="comment">-- insert overwrite：会覆盖表中已存在的数据</span></span><br><span class="line"><span class="comment">-- 注意：insert 不支持插入部分字段</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多表（多分区）插入模式（根据多张表查询结果）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201707&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201709&#x27;</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201706&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201709&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询语句中创建表并加载数据 As Select</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student2 <span class="keyword">as</span> <span class="keyword">select</span> id, name <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表时通过 Location 指定加载数据路径</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dfs -<span class="built_in">mkdir</span> /student;</span><br><span class="line">dfs -put /opt/module/datas/student.txt /student;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student5(</span><br><span class="line"> id <span class="type">int</span>, name string</span><br><span class="line"> )</span><br><span class="line"> <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"> location <span class="string">&#x27;/student;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>import 数据到指定 Hive 表中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先用 export 导出后，再将数据导入</span></span><br><span class="line">import <span class="keyword">table</span> student2 <span class="keyword">from</span> <span class="string">&#x27;/user/hive/warehouse/export/student&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="13-2、数据导出"><a href="#13-2、数据导出" class="headerlink" title="13.2、数据导出"></a>13.2、数据导出</h3><ol>
<li><p>Insert 导出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;/opt/module/hive/data/export/student&#x27;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将查询的结果格式化导出到本地</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;/opt/module/hive/data/export/student1&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将查询结果导出到 HDFS 上（没有 local）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite directory <span class="string">&#x27;/user/hqz/student2&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hadoop 命令导出到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dfs -get /user/hive/warehouse/student/student.txt /opt/module/data/export/student3.txt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Hive Shell 命令导出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/hive -e <span class="string">&#x27;select * from default.student;&#x27;</span> &gt; /opt/module/hive/data/export/student4.txt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Export 导出到 HDFS 上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> table db_hive.student to <span class="string">&#x27;/user/hive/warehouse/export/student&#x27;</span>;</span><br><span class="line"><span class="comment"># export 和 import 主要用于两个 Hadoop 平台集群之间 Hive 表迁移。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>清除表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="14、查询"><a href="#14、查询" class="headerlink" title="14、查询"></a>14、查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">	<span class="keyword">FROM</span> table_reference</span><br><span class="line">	[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">	[<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">	[<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">	[CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">		<span class="operator">|</span> [DISTRIBUTE <span class="keyword">BY</span> col_list] [SORT <span class="keyword">BY</span> col_list]</span><br><span class="line">	]</span><br><span class="line">	[LIMIT number]</span><br></pre></td></tr></table></figure>

<h3 id="14-1、基本查询（select…From）"><a href="#14-1、基本查询（select…From）" class="headerlink" title="14.1、基本查询（select…From）"></a>14.1、基本查询（select…From）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全表查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选择特定列查询</span></span><br><span class="line"><span class="keyword">select</span> empno, ename <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 语言大小写不敏感</span></span><br><span class="line"><span class="comment">-- SQL 可以写在一行或者多行</span></span><br><span class="line"><span class="comment">-- 关键字不能被缩写也不能分行</span></span><br><span class="line"><span class="comment">-- 各子句一般要分行写</span></span><br><span class="line"><span class="comment">-- 使用缩进提高语句的可读性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列别名</span></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">AS</span> name, deptno dn <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LIMIT 子句用于限制返回的行数。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- WHERE 子句，将不满足条件的行过滤掉</span></span><br><span class="line"><span class="comment">-- WHERE 子句紧随 FROM 子句</span></span><br><span class="line"><span class="comment">-- where 子句中不能使用字段别名。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="14-1-1、算数运算符"><a href="#14-1-1、算数运算符" class="headerlink" title="14.1.1、算数运算符"></a>14.1.1、算数运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A + B</td>
<td align="center">A 加 B 的结果</td>
</tr>
<tr>
<td align="center">A - B</td>
<td align="center">A 减去 B 的结果</td>
</tr>
<tr>
<td align="center">A * B</td>
<td align="center">A 乘以 B 的结果</td>
</tr>
<tr>
<td align="center">A &#x2F; B</td>
<td align="center">A 除以 B 的结果</td>
</tr>
<tr>
<td align="center">A % B</td>
<td align="center">A 除以 B 产生的余数</td>
</tr>
<tr>
<td align="center">A &amp; B</td>
<td align="center">A 和 B 的按位与结果</td>
</tr>
<tr>
<td align="center">A | B</td>
<td align="center">A 和 B 的按位或结果</td>
</tr>
<tr>
<td align="center">A ^ B</td>
<td align="center">A 和 B 的按位异或结果</td>
</tr>
<tr>
<td align="center">~A</td>
<td align="center">A 按位非的结果</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sal <span class="operator">+</span> <span class="number">1</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h4 id="14-1-2、常用函数"><a href="#14-1-2、常用函数" class="headerlink" title="14.1.2、常用函数"></a>14.1.2、常用函数</h4><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">count()</td>
<td align="center">求总行数</td>
</tr>
<tr>
<td align="center">max(col_name)</td>
<td align="center">求最大值</td>
</tr>
<tr>
<td align="center">min(col_name)</td>
<td align="center">求最小值</td>
</tr>
<tr>
<td align="center">sum(col_name)</td>
<td align="center">求总和</td>
</tr>
<tr>
<td align="center">avg(col_name)</td>
<td align="center">求平均值</td>
</tr>
</tbody></table>
<h4 id="14-1-3、比较运算符（Betweeb-x2F-In-x2F-Is-x2F-Is-Null）"><a href="#14-1-3、比较运算符（Betweeb-x2F-In-x2F-Is-x2F-Is-Null）" class="headerlink" title="14.1.3、比较运算符（Betweeb&#x2F;In&#x2F;Is&#x2F;Is Null）"></a>14.1.3、比较运算符（Betweeb&#x2F;In&#x2F;Is&#x2F;Is Null）</h4><p>谓词操作符，可以用于 <strong>JOIN…ON</strong> 和 <strong>HAVING</strong> 语句中</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">操作</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A &#x3D; B</td>
<td align="center">所有基本类型</td>
<td align="center">如果表达 A 等于表达 B，结果 TRUE ，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &lt;&#x3D;&gt; B</td>
<td align="center">所有基本类型</td>
<td align="center">如果 A 和 B 都为 NULL，则返回 TRUE，如果一边为 NULL， 返回 False</td>
</tr>
<tr>
<td align="center">A !&#x3D; B</td>
<td align="center">所有基本类型</td>
<td align="center">如果 A 不等于表达式 B 表达返回 TRUE ，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &lt;&gt; B</td>
<td align="center">所有基本类型</td>
<td align="center">A 或者 B 为 NULL 则返回 NULL</td>
</tr>
<tr>
<td align="center">A &lt; B</td>
<td align="center">所有基本类型</td>
<td align="center">TRUE，如果表达式 A 小于表达式 B，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &lt;&#x3D; B</td>
<td align="center">所有基本类型</td>
<td align="center">TRUE，如果表达式 A 小于或等于表达式 B，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &gt; B</td>
<td align="center">所有基本类型</td>
<td align="center">TRUE，如果表达式 A 大于表达式 B，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &gt;&#x3D; B</td>
<td align="center">所有基本类型</td>
<td align="center">TRUE，如果表达式 A 大于或等于表达式 B，否则 FALSE</td>
</tr>
<tr>
<td align="center">A [NOT] BETWEEN B AND C</td>
<td align="center">所有基本类型</td>
<td align="center">如果 A，B 或者 C 任一为 NULL，则结果为 NULL；如果 A 的 值大于等于 B 而且小于或等于 C，则结果为 TRUE，反之为 FALSE。 如果使用 NOT 关键字则可达到相反的效果</td>
</tr>
<tr>
<td align="center">A IS NULL</td>
<td align="center">所有类型</td>
<td align="center">TRUE，如果表达式的计算结果为 NULL，否则 FALSE</td>
</tr>
<tr>
<td align="center">A IS NOT NULL</td>
<td align="center">所有类型</td>
<td align="center">FALSE，如果表达式 A 的计算结果为 NULL，否则 TRUE</td>
</tr>
<tr>
<td align="center">IN(num_1,num_2)</td>
<td align="center">所有类型</td>
<td align="center">使用 IN 运算显示列表中的值</td>
</tr>
<tr>
<td align="center">A [NOT] LIKE B</td>
<td align="center">字符串</td>
<td align="center">TRUE，如果字符串模式 A 匹配到 B，否则 FALSE，如果使用 NOT 关键字则可达到相反的效果</td>
</tr>
<tr>
<td align="center">A RLIKE B</td>
<td align="center">字符串</td>
<td align="center">NULL，如果 A 或 B 为 NULL；TRUE，如果 A 任何子字符串匹配 Java 正则表达式 B；否则FALSE</td>
</tr>
<tr>
<td align="center">A REGEXP B</td>
<td align="center">字符串</td>
<td align="center">等同于RLIKE</td>
</tr>
</tbody></table>
<blockquote>
<p>LIKE 和 RLIKE</p>
</blockquote>
<ol>
<li><p>使用 LIKE 运算选择类似的值</p>
</li>
<li><p>选择条件可以包含字符或数字：</p>
<ul>
<li>% 代表零个或多个字符（任意个字符）</li>
<li>_ 代表一个字符</li>
</ul>
</li>
<li><p>RLIKE 子句</p>
<p>RLIKE 子句是 HIVE 中这个功能的一个扩展，其可以通过 <strong>java 的正则表达式</strong>这个更强大的语言来指定匹配条件</p>
</li>
</ol>
<h4 id="14-1-4、逻辑运算符"><a href="#14-1-4、逻辑运算符" class="headerlink" title="14.1.4、逻辑运算符"></a>14.1.4、逻辑运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">操作</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A AND B</td>
<td align="center">boolean</td>
<td align="center">TRUE，如果 A 和 B 都是 TRUE，否则 FALSE</td>
</tr>
<tr>
<td align="center">A &amp;&amp; B</td>
<td align="center">boolean</td>
<td align="center">类似于 A AND B</td>
</tr>
<tr>
<td align="center">A OR B</td>
<td align="center">boolean</td>
<td align="center">TRUE，如果 A 或 B 或两者都是 TRUE，否则 FALSE</td>
</tr>
<tr>
<td align="center">A || B</td>
<td align="center">boolean</td>
<td align="center">类似于 A OR B</td>
</tr>
<tr>
<td align="center">NOT A</td>
<td align="center">boolean</td>
<td align="center">TRUE，如果 A 是 FALSE，否则 FALSE</td>
</tr>
<tr>
<td align="center">!A</td>
<td align="center">boolean</td>
<td align="center">类似于 NOT A</td>
</tr>
</tbody></table>
<h3 id="14-2、分组"><a href="#14-2、分组" class="headerlink" title="14.2、分组"></a>14.2、分组</h3><h4 id="14-2-1、Group-By-语句"><a href="#14-2-1、Group-By-语句" class="headerlink" title="14.2.1、Group By 语句"></a>14.2.1、Group By 语句</h4><p>GROUP BY 语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 计算每个部门的平均工资</span></span><br><span class="line"><span class="keyword">select</span> t.deptno, <span class="built_in">avg</span>(t.sal) avg_sal <span class="keyword">from</span> emp t <span class="keyword">group</span> <span class="keyword">by</span> t.deptno;</span><br></pre></td></tr></table></figure>

<h4 id="14-2-2、Having-语句"><a href="#14-2-2、Having-语句" class="headerlink" title="14.2.2、Having 语句"></a>14.2.2、Having 语句</h4><blockquote>
<p>having 与 where 不同点</p>
</blockquote>
<ol>
<li>where 后面不能写分组函数，而 having 后面可以使用分组函数。</li>
<li>having 只用于 group by 分组统计语句。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询平均薪水大于 2000 的部门</span></span><br><span class="line"><span class="keyword">select</span> deptno, <span class="built_in">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> avg_sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="14-2-3、Join-语句"><a href="#14-2-3、Join-语句" class="headerlink" title="14.2.3、Join 语句"></a>14.2.3、Join 语句</h4><ol>
<li><p>等值 Join</p>
<p>Hive 支持通常的 SQL JOIN 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门名称</span></span><br><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno, d.dname <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>表的别名</p>
</blockquote>
<ul>
<li>使用别名可以简化查询</li>
<li>使用表名前缀可以提高执行效率</li>
</ul>
</li>
<li><p>内连接</p>
<p>只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左外连接</p>
<p>JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>右外连接</p>
<p>JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>满外连接</p>
<p>将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多表连接</p>
<p>连接 n 个表，至少需要 n-1 个连接条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename, d.dname, l.loc_name</span><br><span class="line">	<span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line">	<span class="keyword">ON</span> d.deptno <span class="operator">=</span> e.deptno </span><br><span class="line"><span class="keyword">JOIN</span> location l</span><br><span class="line">	<span class="keyword">ON</span> d.loc <span class="operator">=</span> l.loc;</span><br></pre></td></tr></table></figure>

<ul>
<li>大多数情况下，Hive 会对每对 JOIN 连接对象启动一个 MapReduce 任务</li>
<li>Hive 总是按照从左到右的顺序执行</li>
<li>当 3 个或者更多表进行 join 连接时，如果每个 on 子句都使用相同的连接键的话，那么只会产生一个 MapReduce Job</li>
</ul>
</li>
</ol>
<h4 id="14-2-4、笛卡尔积"><a href="#14-2-4、笛卡尔积" class="headerlink" title="14.2.4、笛卡尔积"></a>14.2.4、笛卡尔积</h4><p>A 表中的每一条数据与 B 表中的每一条数据都能连接上</p>
<p>产生条件：</p>
<ol>
<li>省略连接条件</li>
<li>连接条件无效</li>
<li>所有表中的所有行互相连接</li>
</ol>
<h4 id="14-2-5、排序"><a href="#14-2-5、排序" class="headerlink" title="14.2.5、排序"></a>14.2.5、排序</h4><ol>
<li><p>全局排序（Order By）</p>
<p>Order By：全局排序，只有一个 Reducer</p>
<ul>
<li><p>使用 ORDER BY 子句排序</p>
<p>ASC：升序（默认）</p>
<p>DESC：降序</p>
</li>
<li><p>ORDER BY 子句在 SELECT 语句的结尾</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按工资降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- 按别名排序</span></span><br><span class="line"><span class="keyword">select</span> ename, sal<span class="operator">*</span><span class="number">2</span> twosal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> twosal;</span><br><span class="line"><span class="comment">-- 多个列排序</span></span><br><span class="line"><span class="keyword">select</span> ename, deptno, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno, sal;</span><br></pre></td></tr></table></figure>
</li>
<li><p>每个 Reduce 内部排序（Sort By)</p>
<p>对于大规模的数据集 order by 的效率非常低，在很多情况下不需要全局排序，此时可以使用 sort by</p>
<p>sort by 为每个 reducer 产生一个排序文件，每个 Reducer 内部进行排序，对全局结果集来说不是排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置 reduce 个数</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 查看设置 reduce 个数</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces;</span><br><span class="line"><span class="comment">-- 根据部门编号降序查看员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp sort <span class="keyword">by</span> deptno <span class="keyword">desc</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>分区（Distribute By）</p>
<p>在有些情况下，需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的<strong>聚集操作</strong>。distribute by 子句可以做这件事。distribute by 类似 MR 中 partition （自定义分区），进行分区，结合 sort by 使用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置多 reduce 才能看到效果</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 按照部门编号分区，再按照员工编号降序排序</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;/opt/module/data/distribute-result&#x27;</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp distribute <span class="keyword">by</span> deptno sort <span class="keyword">by</span> empno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>distribute by 的分区规则是根据分区字段的 hash 码与 reduce 的个数进行模除后，余数相同的分到一个区。</p>
</li>
<li><p>Hive 要求 DISTRIBUTE BY 语句要写在 SORT BY 语句之前。</p>
</li>
</ul>
</li>
<li><p>Cluster By</p>
<p>当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。 </p>
<p>cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序 排序，不能指定排序规则为 ASC 或者 DESC。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这两种写法等价</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp cluster <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp distribute <span class="keyword">by</span> deptno sort <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="15、分区表和分桶表"><a href="#15、分区表和分桶表" class="headerlink" title="15、分区表和分桶表"></a>15、分区表和分桶表</h2><h3 id="15-1、分区表"><a href="#15-1、分区表" class="headerlink" title="15.1、分区表"></a>15.1、分区表</h3><p>分区表实际上就是对应一个 HDFS 文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。<font color="red">Hive 中的分区就是分目录</font>，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过 WHERE 子句中的表达式选择查询所需要的指定的分区，这样的查询效率 会提高很多。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建分区表</span><br><span class="line">CREATE table dept_partition(</span><br><span class="line">	deptno int,</span><br><span class="line">	dname string,</span><br><span class="line">	loc string</span><br><span class="line">)</span><br><span class="line">partitioned by (day string) -- 创建表之后，day相当于表的一个字段，注意：partitioned</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line">show tables;</span><br><span class="line">-- 在 /opt/moudule/data 目录下准备三个文件：dept1.log dept2.log dept3.log</span><br><span class="line">-- dept1.log</span><br><span class="line">-- 10	ACCOUNTING	1700</span><br><span class="line">-- 20	RESEARCH	1800</span><br><span class="line"></span><br><span class="line">-- dept2.log</span><br><span class="line">-- 30	SALES	1900</span><br><span class="line">-- 40	OPERATIONS	1700</span><br><span class="line"></span><br><span class="line">-- dept3.log</span><br><span class="line">-- 50	TEST	2000</span><br><span class="line">-- 60	DEV	1900</span><br><span class="line"></span><br><span class="line">-- 加载数据到分区表中</span><br><span class="line">load data local inpath </span><br><span class="line">&#x27;/opt/module/data/dept1.log&#x27; into table dept_partition </span><br><span class="line">partition(day=&#x27;20220913&#x27;);</span><br><span class="line"></span><br><span class="line">load data local inpath </span><br><span class="line">&#x27;/opt/module/data/dept2.log&#x27; into table dept_partition </span><br><span class="line">partition(day=&#x27;20220914&#x27;);</span><br><span class="line"></span><br><span class="line">load data local inpath </span><br><span class="line">&#x27;/opt/module/data/dept3.log&#x27; into table dept_partition </span><br><span class="line">partition(day=&#x27;20220915&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">SELECT * from dept_partition; -- 全表扫描</span><br><span class="line">SELECT * FROM db_hive.dept_partition WHERE `day` = &#x27;20220913&#x27;; -- 分区扫描</span><br><span class="line"></span><br><span class="line">-- 增加分区</span><br><span class="line">alter table dept_partition add partition(day=&#x27;20220916&#x27;); -- 增加单个分区</span><br><span class="line">alter table dept_partition add partition(day=&#x27;20220917&#x27;) partition(day=&#x27;20220918&#x27;); -- 增加多个分区</span><br><span class="line">-- 删除分区</span><br><span class="line">alter table dept_partition drop partition (day=&#x27;20220916&#x27;); -- 删除单个分区</span><br><span class="line">alter table dept_partition drop partition (day=&#x27;20220917&#x27;), partition(day=&#x27;20220918&#x27;); -- 删除多个分区，注意：多个分区之间用 , 分割</span><br><span class="line"></span><br><span class="line">-- 查看分区表中有多少分区</span><br><span class="line">show partitions dept_partition;</span><br><span class="line"></span><br><span class="line">-- 查看分区表结构</span><br><span class="line">desc formatted dept_partition;</span><br></pre></td></tr></table></figure>

<h4 id="15-1-1、二级分区"><a href="#15-1-1、二级分区" class="headerlink" title="15.1.1、二级分区"></a>15.1.1、二级分区</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 二级分区</span><br><span class="line">create table dept_partition2(</span><br><span class="line">deptno int, dname string, loc string</span><br><span class="line">)</span><br><span class="line">partitioned by (day string, hour string) -- 可以加多个分区字段</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line"></span><br><span class="line">-- 加载数据</span><br><span class="line">load data local inpath </span><br><span class="line">&#x27;/opt/module/data/dept1.log&#x27; into table</span><br><span class="line">dept_partition2 partition(day=&#x27;20220913&#x27;, hour=&#x27;10&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">select * from dept_partition2 where day=&#x27;20220913&#x27; and hour=&#x27;10&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="15-1-2、导入数据到分区表"><a href="#15-1-2、导入数据到分区表" class="headerlink" title="15.1.2、导入数据到分区表"></a>15.1.2、导入数据到分区表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 把数据直接上传到分区目录上，让分区表和数据产生关联的三种方式</span><br><span class="line">-- 1.上传数据后修复</span><br><span class="line">-- 创建文件夹</span><br><span class="line">hdfs -mkdir -p /user/hive/warehouse/db_hive.db/dept_partition2/day=20220916;</span><br><span class="line">-- 上传文件</span><br><span class="line">hdfs -put /opt/module/data/dept1.log /user/hive/warehouse/db_hive.db/dept_partition/day=20220916;</span><br><span class="line">-- 因为 hdfs 的操作不会更新元数据，所以查询不到数据，需要执行修复命令</span><br><span class="line">msck repair table dept_partition;</span><br><span class="line">select * from dept_partition where day=&#x27;20220916&#x27;;</span><br><span class="line"></span><br><span class="line">-- 2.上传数据之后添加分区</span><br><span class="line">-- 创建文件夹</span><br><span class="line">hdfs -mkdir -p /user/hive/warehouse/db_hive.db/dept_partition2/day=20220916;</span><br><span class="line">-- 上传文件</span><br><span class="line">hdfs -put /opt/module/data/dept1.log /user/hive/warehouse/db_hive.db/dept_partition/day=20220916;</span><br><span class="line">-- 添加分区</span><br><span class="line">alter table dept_partition add partition(day=&#x27;20220916&#x27;);</span><br><span class="line"></span><br><span class="line">-- 3.创建文件夹之后 load 数据到分区</span><br><span class="line">-- 创建文件夹</span><br><span class="line">hdfs -mkdir -p /user/hive/warehouse/db_hive.db/dept_partition2/day=20220916;</span><br><span class="line">-- 上传数据</span><br><span class="line">load data local inpath &#x27;/opt/module/data/dept1.log&#x27; into table dept_partition partition(day=&#x27;20220916&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="15-1-3、动态分区"><a href="#15-1-3、动态分区" class="headerlink" title="15.1.3、动态分区"></a>15.1.3、动态分区</h4><p>关系型数据库中，对分区表 Insert 数据时候，数据库自动会根据分区字段的值，将数据 插入到相应的分区中，Hive 中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过， 使用 Hive 的动态分区，需要进行相应的配置。</p>
<p>开启动态分区参数设置：</p>
<ol>
<li><p>开启动态分区功能（默认 true，开启）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.exec.dynamic.partition=true</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置为非严格模式（动态分区的模式，默认 strict，表示必须指定至少一个分区为静态分区，nonstrict 模式表示允许所有的分区字段都可以使用动态分区）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.exec.dynamic.partition.mode=nonstrict</span><br></pre></td></tr></table></figure>
</li>
<li><p>在所有执行 MR 的节点上，最大一共可以创建多少个动态分区，默认 1000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions=1000</span><br></pre></td></tr></table></figure>
</li>
<li><p>在每个执行 MR 的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即 <code>day 字段有 365 个值，那么该参数就需要设置成大于 365</code>，如果使用默认值 100，则会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.exec.max.dynamic.partitions.pernode=100</span><br></pre></td></tr></table></figure>
</li>
<li><p>整个 MR Job 中，最大可以创建多少个 HDFS 文件，默认 100000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.exec.max.created.files=100000</span><br></pre></td></tr></table></figure>
</li>
<li><p>当有空分区生成时，是否抛出异常，一般不需要设置，默认 false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive.error.on.empty.partition=false</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 案例</span><br><span class="line">-- 创建分区表</span><br><span class="line">create table dept_partition_dy(id int, name string) </span><br><span class="line">partitioned by (loc int)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line">-- 设置为非严格模式</span><br><span class="line">set hive.exec.dynamic.partition.mode = nonstrict;</span><br><span class="line">-- 插入数据</span><br><span class="line">insert into table dept_partition_dy partition(loc) </span><br><span class="line">select deptno, dname, loc from dept; -- loc 字段自动为动态分区字段</span><br><span class="line">-- 查看目标分区表情况</span><br><span class="line">show partitions dept_partition_dy;</span><br></pre></td></tr></table></figure>

<h3 id="15-2、分桶表"><a href="#15-2、分桶表" class="headerlink" title="15.2、分桶表"></a>15.2、分桶表</h3><p>分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</p>
<p>分桶是将数据集分解成更容易管理的若干部分的另一个技术。</p>
<p>分区针对的是<code>数据的存储路径</code>；分桶针对的是<code>数据文件</code>。</p>
<ol>
<li><p>创建分桶表</p>
<ul>
<li><p>准备数据，在 &#x2F;opt&#x2F;module&#x2F;data 目录下创建 stu_buck.txt</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1001	ss1</span><br><span class="line">1002	ss2</span><br><span class="line">1003	ss3</span><br><span class="line">1004	ss4</span><br><span class="line">1005	ss5</span><br><span class="line">1006	ss6</span><br><span class="line">1007	ss7</span><br><span class="line">1008	ss8</span><br><span class="line">1009	ss9</span><br><span class="line">1010	ss10</span><br><span class="line">1011	ss11</span><br><span class="line">1012	ss12</span><br><span class="line">1013	ss13</span><br><span class="line">1014	ss14</span><br><span class="line">1015	ss15</span><br><span class="line">1016	ss16</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建分桶表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE table stu_buck(id int, name string)</span><br><span class="line">clustered by (id) -- clustered</span><br><span class="line">INTO 4 buckets -- 分成 4 个桶</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc formatted stu_buck;</span><br><span class="line">-- 查看 Num Buckets 参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入数据到分桶表中，load 的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- local inpath 有可能找不到数据，可以将数据导入到 hdfs 中，使用 inpath 导入，也可以直接在 hive 的命令行中执行下面的命令</span><br><span class="line">load data local inpath &#x27;/opt/module/data/stu_buck.txt&#x27; into table stu_buck;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 hdfs 中查看分桶表中是否包含 4 个桶</p>
</li>
<li><p>查询分桶数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from stu_buck;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分桶规则</p>
<p>Hive 的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方法决定该条记录存放在哪个桶当中</p>
</li>
</ul>
</li>
<li><p>分桶表注意事项</p>
<ul>
<li><p>reduce 的个数设置为-1,让 Job 自行决定需要用多少个 reduce 或者将 reduce 的个数设置为大于等于分桶表的桶数</p>
</li>
<li><p>从 hdfs 中 load 数据到分桶表中，避免本地文件找不到问题</p>
</li>
<li><p>不要使用本地模式</p>
</li>
</ul>
</li>
<li><p>insert 方式将数据导入分桶表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table stu_buck select * from student_insert;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="15-2-1、抽样查询"><a href="#15-2-1、抽样查询" class="headerlink" title="15.2.1、抽样查询"></a>15.2.1、抽样查询</h4><p>对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive 可以通过对表进行抽样来满足这个需求。</p>
<p>语法: TABLESAMPLE(BUCKET x OUT OF y)</p>
<p>查询表 stu_buck 中的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM stu_buck tablesample(bucket 1 out of 4 on id);</span><br></pre></td></tr></table></figure>

<h2 id="16、函数"><a href="#16、函数" class="headerlink" title="16、函数"></a>16、函数</h2><h3 id="16-1、系统内置函数"><a href="#16-1、系统内置函数" class="headerlink" title="16.1、系统内置函数"></a>16.1、系统内置函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看系统自带的函数</span><br><span class="line">show functions;</span><br><span class="line">-- 函数分为 三类</span><br><span class="line">-- UDF：一进一出</span><br><span class="line">-- UDAF：多进一出</span><br><span class="line">-- UDTF：一进多出</span><br><span class="line">-- 显示自带的函数的用法</span><br><span class="line">desc function </span><br><span class="line">-- 详细显示自带的函数的用法</span><br><span class="line">desc function extended upper</span><br></pre></td></tr></table></figure>

<h3 id="16-2、常用内置函数"><a href="#16-2、常用内置函数" class="headerlink" title="16.2、常用内置函数"></a>16.2、常用内置函数</h3><h4 id="16-2-1、空字段赋值"><a href="#16-2-1、空字段赋值" class="headerlink" title="16.2.1、空字段赋值"></a>16.2.1、空字段赋值</h4><p><strong>NVL</strong>：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值，如果两个参数 都为 NULL ，则返回 NULL。</p>
<h4 id="16-2-2、case-when-then-else-end"><a href="#16-2-2、case-when-then-else-end" class="headerlink" title="16.2.2、case when then else end"></a>16.2.2、case when then else end</h4><ol>
<li><p>创建本地 emp_sex.txt，导入数据</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">悟空	A	男</span><br><span class="line">大海	A	男</span><br><span class="line">宋宋	B	男</span><br><span class="line">凤姐	A	女</span><br><span class="line">婷姐	B	女</span><br><span class="line">婷婷	B	女</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 hive 表并导入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">create table emp_sex(</span><br><span class="line">	name string, </span><br><span class="line">	dept_id string, </span><br><span class="line">	sex string</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">-- 导入数据</span><br><span class="line">load data local inpath &#x27;/opt/module/data/emp_sex.txt&#x27; into table emp_sex;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 需求：求出不同部门男女各多少人</span><br><span class="line">select</span><br><span class="line"> dept_id,</span><br><span class="line"> sum(case sex when &#x27;男&#x27; then 1 else 0 end) male_count, -- 如果用if实现：if(sex=&#x27;男&#x27;,1,0)</span><br><span class="line"> sum(case sex when &#x27;女&#x27; then 1 else 0 end) female_count</span><br><span class="line">from emp_sex</span><br><span class="line">group by dept_id;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="16-2-3、行转列"><a href="#16-2-3、行转列" class="headerlink" title="16.2.3、行转列"></a>16.2.3、行转列</h4><p>函数说明：</p>
<ul>
<li><p>CONCAT(string A&#x2F;col, string B&#x2F;col…)：返回输入字符串连接后的结果，支持任意个输入字符串;</p>
</li>
<li><p>CONCAT_WS(separator, str1, str2,…)：它是一个特殊形式的 CONCAT()。第一个参数是剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是 NULL，返回值也将 为 NULL。这个函数会跳过分隔符参数后的任何 NULL 和空字符串。分隔符将被加到被连接的字符串之间; </p>
<p><font color="orange">注意: CONCAT_WS must be “string or array</font></p>
</li>
<li><p>COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生 Array 类型字段。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 数据</span><br><span class="line">-- 孙悟空 白羊座 A</span><br><span class="line">-- 大海 射手座 A</span><br><span class="line">-- 曹操 白羊座 B</span><br><span class="line">-- 猪八戒 白羊座 A</span><br><span class="line">-- 天空 射手座 A</span><br><span class="line">-- 刘备 白羊座 B</span><br><span class="line"></span><br><span class="line">create table person_info(</span><br><span class="line">name string, </span><br><span class="line">constellation string, </span><br><span class="line">blood_type string) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &quot;/opt/module/data/person_info.txt&quot; into table </span><br><span class="line">person_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">t1.c_b,</span><br><span class="line">CONCAT_WS(&quot;|&quot;,collect_set(t1.name))</span><br><span class="line">FROM (</span><br><span class="line">SELECT</span><br><span class="line">NAME,</span><br><span class="line">CONCAT_WS(&#x27;,&#x27;,constellation,blood_type) c_b</span><br><span class="line">FROM person_info</span><br><span class="line">)t1</span><br><span class="line">GROUP BY t1.c_b</span><br><span class="line"></span><br><span class="line">-- 结果</span><br><span class="line">-- 射手座,A 大海|天空</span><br><span class="line">-- 白羊座,A 孙悟空|猪八戒</span><br><span class="line">--  白羊座,B 曹操|刘备</span><br></pre></td></tr></table></figure>

<h4 id="16-2-4、列转行"><a href="#16-2-4、列转行" class="headerlink" title="16.2.4、列转行"></a>16.2.4、列转行</h4><p>函数说明：</p>
<ul>
<li><p>EXPLODE(col)：将 hive 一列中复杂的 Array 或者 Map 结构拆分成多行。</p>
</li>
<li><p>LATERAL VIEW</p>
<p>用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias</p>
<p>解释：用于和 split, explode 等 UDTF 一起使用，它能够将一列数据拆成多行数据，在此 基础上可以对拆分后的数据进行聚合。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--  数据</span><br><span class="line">-- 《疑犯追踪》 悬疑,动作,科幻,剧情</span><br><span class="line">-- 《Lie to me》悬疑,警匪,动作,心理,剧情</span><br><span class="line">-- 《战狼 2》 战争,动作,灾难</span><br><span class="line"></span><br><span class="line">-- 建表</span><br><span class="line">create table movie_info(</span><br><span class="line"> movie string,</span><br><span class="line"> category string)</span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &quot;/opt/module/data/movie_info.txt&quot; into table </span><br><span class="line">movie_info;</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">SELECT</span><br><span class="line">movie,</span><br><span class="line">category_name</span><br><span class="line">FROM</span><br><span class="line">movie_info</span><br><span class="line">lateral VIEW -- 侧写表，如果炸裂出来的数据还需要与原来的表进行关联，就需要侧写表</span><br><span class="line">explode(split(category,&quot;,&quot;)) movie_info_tmp AS category_name;</span><br><span class="line"></span><br><span class="line">-- 结果</span><br><span class="line">-- 《疑犯追踪》 悬疑</span><br><span class="line">-- 《疑犯追踪》 动作</span><br><span class="line">-- 《疑犯追踪》 科幻</span><br><span class="line">-- 《疑犯追踪》 剧情</span><br><span class="line">-- 《Lie to me》 悬疑</span><br><span class="line">-- 《Lie to me》 警匪</span><br><span class="line">-- 《Lie to me》 动作</span><br><span class="line">-- 《Lie to me》 心理</span><br><span class="line">-- 《Lie to me》 剧情</span><br><span class="line">-- 《战狼 2》 战争</span><br><span class="line">-- 《战狼 2》 动作</span><br><span class="line">-- 《战狼 2》 灾难</span><br></pre></td></tr></table></figure>

<h4 id="16-2-5、窗口函数"><a href="#16-2-5、窗口函数" class="headerlink" title="16.2.5、窗口函数"></a>16.2.5、窗口函数</h4><p><code>即需要原表数据又需要聚合后的数据时使用较多</code></p>
<p>能不用窗口函数解决的不要用窗口函数解决，效率相对较低</p>
<p>函数说明：</p>
<ul>
<li><p>OVER()：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化。</p>
<ul>
<li><p>写在 OVER 函数里面</p>
<ul>
<li><p>CURRENT ROW：当前行</p>
</li>
<li><p>n PRECEDING：往前 n 行数据</p>
</li>
<li><p>n FOLLOWING：往后 n 行数据</p>
</li>
<li><p>UNBOUNDED：起点，</p>
<p>UNBOUNDED PRECEDING 表示从前面的起点，</p>
<p>UNBOUNDED FOLLOWING 表示到后面的终点</p>
</li>
</ul>
</li>
<li><p>写在 OVER 函数前面</p>
<ul>
<li><p>LAG(col,n,default_val)：往前第 n 行数据</p>
</li>
<li><p>LEAD(col,n,default_val)：往后第 n 行数据</p>
</li>
<li><p>NTILE(n)：把有序窗口的行分发到指定数据的组中，各个组有编号，编号从 1 开始，对于每一行，NTILE 返回此行所属的组的编号。<code>注意：n 必须为 int 类型</code>。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 引入数据</span><br><span class="line">-- jack,2017-01-01,10</span><br><span class="line">-- tony,2017-01-02,15</span><br><span class="line">-- jack,2017-02-03,23</span><br><span class="line">-- tony,2017-01-04,29</span><br><span class="line">-- jack,2017-01-05,46</span><br><span class="line">-- jack,2017-04-06,42</span><br><span class="line">-- tony,2017-01-07,50</span><br><span class="line">-- jack,2017-01-08,55</span><br><span class="line">-- mart,2017-04-08,62</span><br><span class="line">-- mart,2017-04-09,68</span><br><span class="line">-- neil,2017-05-10,12</span><br><span class="line">-- mart,2017-04-11,75</span><br><span class="line">-- neil,2017-06-12,80</span><br><span class="line">-- mart,2017-04-13,94</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table business(</span><br><span class="line">name string,</span><br><span class="line">orderdate string,</span><br><span class="line">cost int</span><br><span class="line">) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;</span><br><span class="line">load data local inpath &quot;/opt/module/data/business.txt&quot; into table </span><br><span class="line">business;</span><br><span class="line"></span><br><span class="line">-- 查询在 2017 年 4 月份购买过的顾客及总人数</span><br><span class="line">select name,count(*) over()</span><br><span class="line">from business</span><br><span class="line">where substring(orderdate,1,7) = &#x27;2017-04&#x27;</span><br><span class="line">group by name; -- 执行出错，不知道原因</span><br><span class="line"></span><br><span class="line">-- 理论结果为：</span><br><span class="line">-- jack 2</span><br><span class="line">-- mart 2</span><br><span class="line"></span><br><span class="line">-- 查询顾客的购买明细及月购买总额</span><br><span class="line">select name,orderdate,cost,sum(cost) over(partition by name,MONTH(orderdate)) </span><br><span class="line">from business;</span><br><span class="line">-- 查询结果</span><br><span class="line">-- jack	2017-01-05	46	111</span><br><span class="line">-- jack	2017-01-08	55	111</span><br><span class="line">-- jack	2017-01-01	10	111</span><br><span class="line">-- jack	2017-02-03	23	23</span><br><span class="line">-- jack	2017-04-06	42	42</span><br><span class="line"></span><br><span class="line">-- 将每个顾客的 cost 按照日期进行累加</span><br><span class="line">select name,orderdate,cost,</span><br><span class="line">sum(cost) over(partition by name ORDER BY orderdate) </span><br><span class="line">-- sum(cost) over(partition by name order by orderdate rows between UNBOUNDED PRECEDING and current row ) as sample4 ,--和 sample3 一样,由起点到当前行的聚合</span><br><span class="line">-- sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING and current row) as sample5, --当前行和前面一行做聚合</span><br><span class="line">-- sum(cost) over(partition by name order by orderdate rows between 1 PRECEDING AND 1 FOLLOWING ) as sample6,--当前行和前边一行及后面一行</span><br><span class="line">-- sum(cost) over(partition by name order by orderdate rows between current row and UNBOUNDED FOLLOWING ) as sample7 --当前行及后面所有行</span><br><span class="line">from business; -- 开窗大小默认从第一行到当前行</span><br><span class="line">-- rows 必须跟在 order by 子句之后，对排序的结果进行限制，使用固定的行数来限制分区中的数据行数量</span><br><span class="line">-- 查询结果</span><br><span class="line">-- jack	2017-01-01	10	10</span><br><span class="line">-- jack	2017-01-05	46	56</span><br><span class="line">-- jack	2017-01-08	55	111</span><br><span class="line">-- jack	2017-02-03	23	134</span><br><span class="line">-- jack	2017-04-06	42	176</span><br><span class="line"></span><br><span class="line">-- 查看顾客上次的购买时间</span><br><span class="line">select name,orderdate,cost,lag(orderdate,1,&#x27;1970-01-01&#x27;) over(partition by name order by orderdate ) as time1 from business;</span><br><span class="line">-- 查询结果</span><br><span class="line">-- jack	2017-01-01	10	1970-01-01</span><br><span class="line">-- jack	2017-01-05	46	2017-01-01</span><br><span class="line">-- jack	2017-01-08	55	2017-01-05</span><br><span class="line">-- jack	2017-02-03	23	2017-01-08</span><br><span class="line">-- jack	2017-04-06	42	2017-02-03</span><br><span class="line"></span><br><span class="line">-- 查询前20%时间的订单信息</span><br><span class="line">select * from (</span><br><span class="line"> select name,orderdate,cost, ntile(5) over(order by orderdate) sorted</span><br><span class="line"> from business</span><br><span class="line">) t</span><br><span class="line">where sorted = 1; -- ntile 分为 5 组，取第一组</span><br></pre></td></tr></table></figure>

<h4 id="16-2-6、Rank"><a href="#16-2-6、Rank" class="headerlink" title="16.2.6、Rank"></a>16.2.6、Rank</h4><p>函数说明：</p>
<ul>
<li>RANK() 排序相同时会重复，总数不会变 6-6-8</li>
<li>DENSE_RANK() 排序相同时会重复，总数会减少 6-6-7</li>
<li>ROW_NUMBER() 会根据顺序计算 6-7-8</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 数据</span><br><span class="line">--孙悟空 语文 87</span><br><span class="line">--孙悟空 数学 95</span><br><span class="line">--孙悟空 英语 68</span><br><span class="line">--大海 语文 94</span><br><span class="line">--大海 数学 56</span><br><span class="line">--大海 英语 84</span><br><span class="line">--宋宋 语文 64</span><br><span class="line">--宋宋 数学 86</span><br><span class="line">--宋宋 英语 84</span><br><span class="line">--婷婷 语文 65</span><br><span class="line">--婷婷 数学 85</span><br><span class="line">--婷婷 英语 78</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table score(</span><br><span class="line">name string,</span><br><span class="line">subject string, </span><br><span class="line">score int) </span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line">load data local inpath &#x27;/opt/module/data/score.txt&#x27; into table score;</span><br><span class="line"></span><br><span class="line">-- 计算每门学科成绩排名</span><br><span class="line">select name,subject,score,</span><br><span class="line">rank() over(partition by subject order by score desc) rp,</span><br><span class="line">dense_rank() over(partition by subject order by score desc) drp,</span><br><span class="line">row_number() over(partition by subject order by score desc) rmp</span><br><span class="line">from score;</span><br><span class="line"></span><br><span class="line">--孙悟空	数学	95	1	1	1</span><br><span class="line">--宋宋	数学	86	2	2	2</span><br><span class="line">--婷婷	数学	85	3	3	3</span><br><span class="line">--大海	数学	56	4	4	4</span><br><span class="line">--宋宋	英语	84	1	1	1</span><br><span class="line">--大海	英语	84	1	1	2</span><br><span class="line">--婷婷	英语	78	3	2	3</span><br><span class="line">--孙悟空	英语	68	4	3	4</span><br><span class="line">--大海	语文	94	1	1	1</span><br><span class="line">--孙悟空	语文	87	2	2	2</span><br><span class="line">--婷婷	语文	65	3	3	3</span><br><span class="line">--宋宋	语文	64	4	4	4</span><br></pre></td></tr></table></figure>

<h4 id="16-2-7、自定义函数"><a href="#16-2-7、自定义函数" class="headerlink" title="16.2.7、自定义函数"></a>16.2.7、自定义函数</h4><p>自定义函数类别分为以下三种：</p>
<ol>
<li><p>UDF（User-Defined-Function）</p>
<p>一进一出</p>
</li>
<li><p>UDAF（User-Defined Aggregation Function）</p>
<p>聚集函数，多进一出</p>
<p>类似于：count&#x2F;max&#x2F;min</p>
</li>
<li><p>UDTF（User-Defined Table-Generating Functions）</p>
<p>一进多出</p>
<p>如 lateral view explode()</p>
</li>
</ol>
<h2 id="17、压缩和存储"><a href="#17、压缩和存储" class="headerlink" title="17、压缩和存储"></a>17、压缩和存储</h2><h3 id="17-1、开启-Map-输出阶段压缩（MR-引擎）"><a href="#17-1、开启-Map-输出阶段压缩（MR-引擎）" class="headerlink" title="17.1、开启 Map 输出阶段压缩（MR 引擎）"></a>17.1、开启 Map 输出阶段压缩（MR 引擎）</h3><p>开启 map 输出阶段压缩可以减少 job 中 map 和 Reduce task 间数据传输量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 开启 hive 中间传输数据压缩功能</span><br><span class="line">set hive.exec.compress.intermediate=true;</span><br><span class="line">-- 开启 mapreduce 中 map 输出压缩功能</span><br><span class="line">set mapreduce.map.output.compress=true;</span><br><span class="line">-- 设置 mapreduce 中 map 输出数据的压缩方式</span><br><span class="line">set mapreduce.map.output.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;</span><br></pre></td></tr></table></figure>

<h3 id="17-2、开启-Reduce-输出阶段压缩"><a href="#17-2、开启-Reduce-输出阶段压缩" class="headerlink" title="17.2、开启 Reduce 输出阶段压缩"></a>17.2、开启 Reduce 输出阶段压缩</h3><p>当 Hive 将输出写入到表中时，输出内容同样可以进行压缩。属性 hive.exec.compress.output 控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为 true，来开启输出结果压缩功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 开启 hive 最终输出数据压缩功能</span><br><span class="line">set hive.exec.compress.output=true;</span><br><span class="line">-- 开启 mapreduce 最终输出数据压缩</span><br><span class="line">set mapreduce.output.fileoutputformat.compress=true;</span><br><span class="line">-- 设置 mapreduce 最终数据输出压缩方式</span><br><span class="line">set mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line">-- 设置 mapreduce 最终数据输出压缩为块压缩</span><br><span class="line">set mapreduce.output.fileoutputformat.compress.type=BLOCK;</span><br></pre></td></tr></table></figure>

<h3 id="17-3、文件存储格式"><a href="#17-3、文件存储格式" class="headerlink" title="17.3、文件存储格式"></a>17.3、文件存储格式</h3><p>Hive 支持的存储数据的格式主要有：TEXTFILE、SEQUENCEFILE、ORC、PARQUET</p>
<h4 id="17-3-1、列式存储和行式存储"><a href="#17-3-1、列式存储和行式存储" class="headerlink" title="17.3.1、列式存储和行式存储"></a>17.3.1、列式存储和行式存储</h4><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8.png" alt="列式存储与行式存储"></p>
<ol>
<li><p>行存储的特点：</p>
<p>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p>
</li>
<li><p>列存储的特点：</p>
<p>因为每个字段的数据聚集存储，在查询只需要<code>少数几个字段</code>的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计<strong>压缩</strong>算法。</p>
<p>TEXTFILE 和 SEQUENCEFILE 的存储格式都是基于行存储的；</p>
<p>ORC 和 PARQUET 是基于列式存储的。</p>
</li>
</ol>
<h4 id="17-3-2、TextFile-格式"><a href="#17-3-2、TextFile-格式" class="headerlink" title="17.3.2、TextFile 格式"></a>17.3.2、TextFile 格式</h4><p>默认格式，<code>数据不做压缩，磁盘开销大，数据解析开销大</code>。可结合 Gzip、Bzip2 使用，但使用 Gzip 这种方式，hive 不会对数据进行切分，从而无法对数据进行并行操作。</p>
<h4 id="17-3-3、Orc-格式"><a href="#17-3-3、Orc-格式" class="headerlink" title="17.3.3、Orc 格式"></a>17.3.3、Orc 格式</h4><p>如下图所示，每个 Orc 文件由 1 个或多个 stripe 组成，每个 stripe 一般为 HDFS 的块大小，每一个 stripe 包含多条记录，这些记录按照列进行独立存储，对应到 Parquet 中的 row group 的概念。每个 Stripe 里有三部分组成，分别是 Index Data，Row Data，Stripe Footer</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/orc%E6%A0%BC%E5%BC%8F.jpg" alt="orc格式"></p>
<ol>
<li><p>Index Data：一个轻量级的 index，默认是每隔 1W 行做一个索引。这里做的索引应该只是记录某行的各字段在 Row Data 中的 offset。</p>
</li>
<li><p>Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个 Stream 来存储。</p>
</li>
<li><p>Stripe Footer：存的是各个 Stream 的类型，长度等信息。 </p>
<p>每个文件有一个 File Footer，这里面存的是每个 Stripe 的行数，每个 Column 的数据类型信息等；每个文件的尾部是一个 PostScript，这里面记录了整个文件的压缩类型以及 FileFooter 的长度信息等。在读取文件时，会 seek 到文件尾部读 PostScript，从里面解析到 File Footer 长度，再读 FileFooter，从里面解析到各个 Stripe 信息，再读各个 Stripe，即从后往前读。</p>
</li>
</ol>
<h4 id="17-3-4、Parquet-格式"><a href="#17-3-4、Parquet-格式" class="headerlink" title="17.3.4、Parquet 格式"></a>17.3.4、Parquet 格式</h4><p>Parquet 文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，<font color="orange">因此 Parquet 格式文件是自解析的。</font></p>
<ol>
<li>行组(Row Group)：每一个行组包含一定的行数，在一个 HDFS 文件中至少存储一个行组，类似于 orc 的 stripe 的概念。</li>
<li>列块(Column Chunk)：在一个行组中每一列保存在一个列块中，行组中的所有列连续的存储在这个行组文件中。一个列块中的值都是相同类型的，不同的列块可能使用不同的算法进行压缩。</li>
<li>页(Page)：每一个列块划分为多个页，一个页是最小的编码的单位，在同一个列块的不同页可能使用不同的编码方式。</li>
</ol>
<p>通常情况下，在存储 Parquet 数据的时候会按照 Block 大小设置行组的大小，由于一般情况下每一个 Mapper 任务处理数据的最小单位是一个 Block，这样可以<font color="orange">把每一个行组由一个 Mapper 任务处理，增大任务执行并行度</font>。</p>
<p>![Parquet 文件的格式.png](<a href="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Parquet">https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/Parquet</a> 文件的格式.png)</p>
<p>上图展示了一个 Parquet 文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的 Magic Code，用于校验它是否是一个 Parquet 文件，Footer length 记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的 Schema 信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在 Parquet 中，有三种类型的页：<font color="orange">数据页、字典页和索引页</font>。</p>
<ul>
<li>数据页用于存储当前行组中该列的值</li>
<li>字典页存储该列值的编码字典，每一个列块中最 多包含一个字典页</li>
<li>索引页用来存储当前行组下该列的索引，目前 Parquet 中还不支持索引页。</li>
</ul>
<h4 id="17-3-5、创建压缩表"><a href="#17-3-5、创建压缩表" class="headerlink" title="17.3.5、创建压缩表"></a>17.3.5、创建压缩表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table log_orc_zlib(</span><br><span class="line">track_time string,</span><br><span class="line">url string,</span><br><span class="line">session_id string,</span><br><span class="line">referer string,</span><br><span class="line">ip string,</span><br><span class="line">end_user_id string,</span><br><span class="line">city_id string</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;</span><br><span class="line">stored as orc</span><br><span class="line">tblproperties(&quot;orc.compress&quot;=&quot;ZLIB&quot;);</span><br><span class="line">-- 所有关于 ORCFile 的参数都是在 HQL 语句的 TBLPROPERTIES 字段里面出现</span><br><span class="line">-- ，hive 表的数据存储格式一般选择：orc 或 parquet。压缩方式一般选择 snappy，lzo。</span><br></pre></td></tr></table></figure>

<h2 id="18、企业级调优"><a href="#18、企业级调优" class="headerlink" title="18、企业级调优"></a>18、企业级调优</h2><h3 id="18-1、执行计划（Explain）"><a href="#18-1、执行计划（Explain）" class="headerlink" title="18.1、执行计划（Explain）"></a>18.1、执行计划（Explain）</h3><ol>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 没有生成 MR 任务</span><br><span class="line">explain select * from emp;</span><br><span class="line">-- 生成 MR 任务</span><br><span class="line">explain select deptno, avg(sal) avg_sal from emp group by deptno;</span><br><span class="line">-- 查看详细执行计划</span><br><span class="line">explain extended select * from emp;</span><br><span class="line">explain extended select deptno, avg(sal) avg_sal from emp group by deptno;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="18-2、Fetch-抓取"><a href="#18-2、Fetch-抓取" class="headerlink" title="18.2、Fetch 抓取"></a>18.2、Fetch 抓取</h3><p>Fetch 抓取是指，<font color="orange">Hive 中对某些情况的查询可以不必使用 MapReduce 计算</font>。例如：SELECT * FROM employees;在这种情况下，Hive 可以简单地读取 employee 对应的存储目录下的文件，然后输出查询结果到控制台。</p>
<p>在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是 more，老版本 hive 默认是 <code>minimal</code>，该属性修改为 more 以后，在全局查找、字段查找、limit 查找等都不走 mapreduce。</p>
<h3 id="18-3、本地模式"><a href="#18-3、本地模式" class="headerlink" title="18.3、本地模式"></a>18.3、本地模式</h3><p>大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量是非常小的。在这种情况下，为查询触发执行任务消耗的时间可能会比实际 job 的执行时间要多的多。对于大多数这种情况，<font color="orange">Hive 可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短</font>。</p>
<p>用户可以通过设置 hive.exec.mode.local.auto 的值为 true，来让 Hive 在适当的时候自动 启动这个优化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set hive.exec.mode.local.auto=true; -- 开启本地 mr</span><br><span class="line">-- 设置 local mr 的最大输入数据量，当输入数据量小于这个值时采用 local mr 的方式，默认为 134217728，即 128M</span><br><span class="line">set hive.exec.mode.local.auto.inputbytes.max=50000000;</span><br><span class="line">-- 设置 local mr 的最大输入文件个数，当输入文件个数小于这个值时采用 local mr 的方式，默认为 4</span><br><span class="line">set hive.exec.mode.local.auto.input.files.max=10;</span><br></pre></td></tr></table></figure>

<h3 id="18-4、表的优化"><a href="#18-4、表的优化" class="headerlink" title="18.4、表的优化"></a>18.4、表的优化</h3><h4 id="18-4-1、小表大表-Join（MapJOIN）"><a href="#18-4-1、小表大表-Join（MapJOIN）" class="headerlink" title="18.4.1、小表大表 Join（MapJOIN）"></a>18.4.1、小表大表 Join（MapJOIN）</h4><p>将 key 相对分散，并且数据量小的表放在 join 的左边，可以使用 map join 让小的维度表先进内存。在 map 端完成 join。</p>
<p><font color="orange">实际测试发现：新版的 hive 已经对小表 JOIN 大表和大表 JOIN 小表进行了优化。小表放在左边和右边已经没有区别。</font></p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221004210454046.png" alt="MapJoin 工作机制"></p>
<h4 id="18-4-2、大表-Join-大表"><a href="#18-4-2、大表-Join-大表" class="headerlink" title="18.4.2、大表 Join 大表"></a>18.4.2、大表 Join 大表</h4><ol>
<li><p>空 key 过滤</p>
<p>有时 join 超时是因为某些 key 对应的数据太多，而相同 key 对应的数据都会发送到相同的 reducer 上，从而导致内存不够。此时我们应该仔细分析这些异常的 key，很多情况下，这些 key 对应的数据是异常数据，我们需要在 SQL 语句中进行过滤。例如 key 对应的字段为空，操作如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert overwrite table jointable select n.* from (select * from nullidtable where id is not null) n left join bigtable o on n.id = o.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>空 key 转换</p>
<p>有时虽然某个 key 为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在 join 的结果中，此时我们可以为表 a 中 key 为空的字段赋一个随机的值，使得数据随机均匀地分到不同的 reducer 上。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert overwrite table jointable select n.* from nullidtable n full join bigtable o on nvl(n.id,rand()) = o.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SMB(Sort Merge Bucket join)</p>
</li>
</ol>
<h4 id="18-4-3、Group-By"><a href="#18-4-3、Group-By" class="headerlink" title="18.4.3、Group By"></a>18.4.3、Group By</h4><p>默认情况下，Map 阶段同一 Key 数据分发给一个 reduce，当一个 key 数据过大时就倾斜了。</p>
<p>并不是所有的聚合操作都需要在 Reduce 端完成，很多聚合操作都可以先在 Map 端进行部分聚合，最后在 Reduce 端得出最终结果。</p>
<ol>
<li><p>开启 Map 端聚合参数设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 是否在 Map 端聚合，默认为 True</span><br><span class="line">set hive.map.aggr = true</span><br><span class="line">-- 在 Map 端进行聚合操作的条目数目</span><br><span class="line">set hive.groupby.mapaggr.checkinterval = 100000</span><br><span class="line">-- 有数据倾斜的时候进行负载均衡（默认是 false）</span><br><span class="line">set hive.groupby.skewindata = true</span><br></pre></td></tr></table></figure>

<p><font color="orange">当有数据倾斜的时候进行负载均衡选项设定为 true 时，生成的查询计划会有两个 MR Job</font>。第一个 MR Job 中，Map 的输出结果会随机分布到 Reduce 中，每个 Reduce 做部分聚合操作，并输出结果，这样处理的结果是<font color="orange">相同的 Group By Key 有可能被分发到不同的 Reduce 中</font>，从而达到<strong>负载均衡</strong>的目的；第二 个 MR Job 再根据预处理的数据结果按照 Group By Key 分布到 Reduce 中（这个过程可以保证 相同的 Group By Key 被分布到同一个 Reduce 中），最后完成最终的聚合操作。</p>
<h4 id="Count（Distinct）去重统计"><a href="#Count（Distinct）去重统计" class="headerlink" title="Count（Distinct）去重统计"></a>Count（Distinct）去重统计</h4><p>数据量小的时候无所谓，数据量大的情况下，由于 COUNT DISTINCT 操作需要用一个 Reduce Task 来完成，这一个 Reduce 需要处理的数据量太大，就会导致整个 Job 很难完成， 一般 COUNT DISTINCT 使用先 GROUP BY 再 COUNT 的方式替换,但是<strong>需要注意 group by 造成 的数据倾斜问题</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 虽然会多用一个 Job 来完成，但在数据量大的情况下，这个绝对是值得的。</span><br><span class="line">select count(id) from (select id from bigtable group by id) a;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="18-4-4、笛卡尔积"><a href="#18-4-4、笛卡尔积" class="headerlink" title="18.4.4、笛卡尔积"></a>18.4.4、笛卡尔积</h4><p>尽量避免笛卡尔积，join 的时候不加 on 条件，或者无效的 on 条件，Hive 只能使用 1 个 reducer 来完成笛卡尔积。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select T1.*, T2.* from (select * from table1) T1</span><br><span class="line">join</span><br><span class="line">(select * from table2) T2</span><br><span class="line">on 1=1;</span><br></pre></td></tr></table></figure>

<h4 id="18-4-5、行列过滤"><a href="#18-4-5、行列过滤" class="headerlink" title="18.4.5、行列过滤"></a>18.4.5、行列过滤</h4><p>列处理：在 SELECT 中，只拿需要的列，如果有分区，尽量使用<strong>分区过滤</strong>，少用 SELECT  *。</p>
<p>行处理：在<strong>分区剪裁</strong>中，当使用外关联时，如果将副表的过滤条件写在 <strong>Where</strong> 后面， 那么就会先全表关联，之后再过滤，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 先关联两张表，再用 where 条件过滤</span><br><span class="line">select o.id from bigtable b</span><br><span class="line">join </span><br><span class="line">bigtable o</span><br><span class="line">on o.id = b.id</span><br><span class="line">where o.id &lt;= 10;</span><br><span class="line">-- 通过子查询后，再关联表</span><br><span class="line">select b.id from bigtable b</span><br><span class="line">join</span><br><span class="line">(select id from bigtable where id &lt;= 10) o </span><br><span class="line">on b.id = o.id;</span><br></pre></td></tr></table></figure>

<h4 id="18-4-6、分区"><a href="#18-4-6、分区" class="headerlink" title="18.4.6、分区"></a>18.4.6、分区</h4><h4 id="18-4-7、分桶"><a href="#18-4-7、分桶" class="headerlink" title="18.4.7、分桶"></a>18.4.7、分桶</h4><h3 id="18-5、合理设置-Map-及-Reduce-数"><a href="#18-5、合理设置-Map-及-Reduce-数" class="headerlink" title="18.5、合理设置 Map 及 Reduce 数"></a>18.5、合理设置 Map 及 Reduce 数</h3><ol>
<li><p>通常情况下，作业会通过 input 的目录产生一个或者多个 map 任务。</p>
<p>主要的决定因素有：input 的文件总个数，input 的文件大小，集群设置的文件块大小。</p>
</li>
<li><p>是不是 map 数越多越好？</p>
<p>答案是否定的。如果一个任务有很多小文件（远远小于块大小 128m），则每个小文件 也会被当做一个块，用一个 map 任务来完成，而一个 map 任务启动和初始化的时间远远大 于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的 map 数是受限的。</p>
</li>
<li><p>是不是保证每个 map 处理接近 128m 的文件块，就高枕无忧了？</p>
<p>答案也是不一定。</p>
<ul>
<li>比如有一个 127m 的文件，正常会用一个 map 去完成，但这个文件只 有一个或者两个小字段，却有几千万的记录(增加 Map 数)；</li>
<li>如果 map 处理的逻辑比较复杂，用一个 map 任务去做，肯定也比较耗时（增加 Map 数）。</li>
</ul>
</li>
</ol>
<h4 id="18-5-1、复杂文件增加-Map-数"><a href="#18-5-1、复杂文件增加-Map-数" class="headerlink" title="18.5.1、复杂文件增加 Map 数"></a>18.5.1、复杂文件增加 Map 数</h4><p>当 input 的文件都很大，任务逻辑复杂，map 执行非常慢的时候，可以考虑增加 Map 数， 来使得每个 map 处理的数据量减少，从而提高任务的执行效率。</p>
<p>增加 map 的方法为：根据 computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize)))&#x3D;blocksize&#x3D;128M 公式， 调整 maxSize 最大值。让 maxSize 最大值低于 blocksize 就可以增加 map 的个数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 设置最大切片值为 100 个字节</span><br><span class="line">set mapreduce.input.fileinputformat.split.maxsize = 100;</span><br></pre></td></tr></table></figure>

<h4 id="18-5-2、小文件进行合并"><a href="#18-5-2、小文件进行合并" class="headerlink" title="18.5.2、小文件进行合并"></a>18.5.2、小文件进行合并</h4><ol>
<li><p>在 map 执行前合并小文件，减少 map 数：CombineHiveInputFormat 具有对小文件进行合 并的功能（系统默认的格式）。HiveInputFormat 没有对小文件合并功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Map-Reduce 的任务结束时合并小文件的设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在 map-only 任务结束时合并小文件，默认 true</span><br><span class="line">SET hive.merge.mapfiles = true;</span><br><span class="line">-- 在 map-reduce 任务结束时合并小文件，默认 false</span><br><span class="line">SET hive.merge.mapredfiles = true;</span><br><span class="line">-- 合并文件的大小，默认 256M</span><br><span class="line">SET hive.merge.size.per.task = 268435456;</span><br><span class="line">-- 当输出文件的平均大小小于该值时，启动一个独立的 map-reduce 任务进行文件 merge</span><br><span class="line">SET hive.merge.smallfiles.avgsize = 16777216;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="18-5-3、合理设置-Reduce-数"><a href="#18-5-3、合理设置-Reduce-数" class="headerlink" title="18.5.3、合理设置 Reduce 数"></a>18.5.3、合理设置 Reduce 数</h4><ol>
<li><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 参数1、每个 Reduce 处理的数据量默认是 256MB</span><br><span class="line">set hive.exec.reducers.bytes.per.reducer = 256000000</span><br><span class="line">-- 参数2、每个任务最大的 reduce 数，默认为 1009</span><br><span class="line">set hive.exec.reducers.max = 1009</span><br><span class="line">-- 计算 reducer 个数的公式</span><br><span class="line">N = min(参数2，总输入数据量/参数1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二</p>
<p>在 hadoop 的 mapred-default.xml 文件中修改，设置每个 job 的 Reduce 个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set mapreduce.job.reduces = 15;</span><br></pre></td></tr></table></figure>
</li>
<li><p>reduce 的个数不是越多越好</p>
<ul>
<li>过多的启动和初始化 reduce 也会消耗时间和资源；</li>
<li>另外，有多少个 reduce，就会有多少个输出文件，如果生成了很多个小文件，那 么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题。</li>
</ul>
<p>在设置 reduce 个数的时候也需要考虑这两个原则：</p>
<ul>
<li>处理大数据量利用合适的 reduce 数；</li>
<li>使单个 reduce 任务处理数据量大小要合适。</li>
</ul>
</li>
</ol>
<h3 id="18-6、并行执行"><a href="#18-6、并行执行" class="headerlink" title="18.6、并行执行"></a>18.6、并行执行</h3><p>Hive 会将一个查询转化成一个或者多个阶段。这样的阶段可以是 MapReduce 阶段、抽样阶段、合并阶段、limit 阶段或者 Hive 执行过程中可能需要的其他阶段。默认情况下， Hive 一次只会执行一个阶段。不过，某个特定的 job 可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以<strong>并行执行</strong>的，这样可能使得整个 job 的执行 时间缩短。如果有更多的阶段可以并行执行，那么 job 可能就越快完成。</p>
<p>通过设置参数 hive.exec.parallel 值为 true，就可以开启并发执行。不过，在共享集群中， 需要注意下，如果 job 中并行阶段增多，那么集群利用率就会增加。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 打开任务并行执行</span><br><span class="line">set hive.exec.parallel=true;</span><br><span class="line">-- 同一个 sql 允许最大并行度，默认为 8</span><br><span class="line">set hive.exec.parallel.thread.number=16; </span><br></pre></td></tr></table></figure>

<h3 id="18-7、严格模式"><a href="#18-7、严格模式" class="headerlink" title="18.7、严格模式"></a>18.7、严格模式</h3><p>Hive 可以通过设置防止一些危险操作：</p>
<ol>
<li><p>分区表不使用分区过滤</p>
<p>将 hive.strict.checks.no.partition.filter 设置为 true 时，对于分区表，<font color="orange">除非 where 语句中含有分区字段过滤条件来限制范围，否则不允许执行</font>。换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</p>
</li>
<li><p>使用 order by 没有 limit 过滤</p>
<p>将 hive.strict.checks.orderby.no.limit 设置为 true 时，对于<font color="orange">使用了 order by 语句的查询，要求必须使用 limit 语句</font>。因为 order by 为了执行排序过程会将所有的结果数据分发到同一个 Reducer 中进行处理，强制要求用户增加这个 LIMIT 语句可以防止 Reducer 额外执行很长一段时间。</p>
</li>
<li><p>笛卡尔积</p>
<p>将 hive.strict.checks.cartesian.product 设置为 true 时，<font color="orange">会限制笛卡尔积的查询</font>。对关系型数据库非常了解的用户可能期望在执行 JOIN 查询的时候不使用 ON 语句而是使用 where 语句，这样关系数据库的执行优化器就可以高效地将 WHERE 语句转化成那个 ON 语句。不幸的是，Hive 并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p>
<h3 id="JVM-重用"><a href="#JVM-重用" class="headerlink" title="JVM 重用"></a>JVM 重用</h3><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3></li>
</ol>
]]></content>
      <categories>
        <category>bigData</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>hive</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>java rabbitmq</title>
    <url>/2022/09/23/java-rabbitmq/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>消息队列（Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入,通常是来自用户。消息队列提供了异步的通信协议,每一个贮列中的纪录包含详细说明的数据,包含发生的时间,输入设备的种类,以及特定的输入参数,也就是说:消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中,直到接收者取回它。</p>
<span id="more"></span>

<h3 id="1-1、实现"><a href="#1-1、实现" class="headerlink" title="1.1、实现"></a>1.1、实现</h3><p>消息队列常常保存在链表结构中。拥有权限的进程可以向消息队列中写入或读取消息。</p>
<p>目前,有很多消息队列有很多开源的实现,包括 <code>JBoss Messaging</code>、<code>JORAM</code>、 <code>Apache ActiveMQ</code>、<code> Sun open Message Queue</code>、<code>IBM MQ</code>、 <code>Apache Qpid</code> 和 <code>HttpSQS</code>。</p>
<p>当前使用较多的消息队列有 <code>RabbitMQ</code>、 <code>RocketMQ</code>、 <code>ActiveMQ</code>、 <code>Kafka</code>、<code>zeroMQ</code>、 <code>MetaMQ</code>等,而部分数据库如 <code>Redis</code>、<code>Mysql</code>以及 <code>phxsql </code>也可实现消息队列的功能。</p>
<h3 id="1-2、特点"><a href="#1-2、特点" class="headerlink" title="1.2、特点"></a>1.2、特点</h3><p>MQ是消费者生产者模型的一个典型的代表,端往消息队列中不断写入消息,而另一端则可以读取或者订阅队列中的消息。</p>
<p>MQ和JMS类似,但不同的是JMS是SUN JAVA消息中间件服务的一个标准和API定义,而MQ则是遵循了AMQP协议的具体实现和产品。<br><font color="red">注意：</font><br>1.<code>AMQP</code>,即 Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息,并不受客户端&#x2F;中间件不同产品,不同的开发语言等条件的限制。<br>2.<code>JMS</code>,Java消息服务（Java Message Service）应用程序接口,是个 java 平台中关于面向消息中间件的 API,用于在两个应用程序之间,或分布式系统中发送消息,进行异步通信。Java 消息服务是一个与具体平台无关的API,绝大多数 MOM 提供商都对 JMS 提供支持。常见的消息队列,大部分都实现了 JMS API,如 <code>ActiveMQ</code>, <code>Redis</code> 以及 <code>Rabbit MQ</code> 等。</p>
<h3 id="1-3、优点"><a href="#1-3、优点" class="headerlink" title="1.3、优点"></a>1.3、优点</h3><blockquote>
<p>解耦：将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而原系统不需要做任何修改。</p>
<p>异步：把非必要的业务逻辑写入消息队列，需要消息的系统自己从消息队列中订阅，提高网站的响应效率。</p>
<p>流量削峰：系统 A 慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。在生产中，这个短暂的高峰期积压是允许的。</p>
</blockquote>
<h3 id="1-4、使用场景"><a href="#1-4、使用场景" class="headerlink" title="1.4、使用场景"></a>1.4、使用场景</h3><p><font color="orange">当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候</font></p>
<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>安装 Rabbit MQ 之前，先安装 erlang ，两者之间版本要对应。</p>
<blockquote>
<p>rabbitmq-plugins enable rabbitmq_management  启动插件</p>
</blockquote>
<h3 id="2-1、管理界面"><a href="#2-1、管理界面" class="headerlink" title="2.1、管理界面"></a>2.1、管理界面</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 启动服务后，通过 http://localhost:15672/#/ 进入后台管理</span><br><span class="line"><span class="bullet">-</span> Overview：查看概要信息</span><br><span class="line"><span class="bullet">-</span> Connections：查看连接信息</span><br><span class="line"><span class="bullet">-</span> Channels：通道列表</span><br><span class="line"><span class="bullet">-</span> Exchanges：发送消息时，背后的交换机</span><br><span class="line"><span class="bullet">-</span> Queues：队列</span><br><span class="line"><span class="bullet">-</span> Admin：对应当前 Rabbit MQ 中的用户</span><br></pre></td></tr></table></figure>



<h3 id="2-2、使用"><a href="#2-2、使用" class="headerlink" title="2.2、使用"></a>2.2、使用</h3><p>在 <code>Admin </code>中创建用户，在 <code>Virtual Hosts</code> 中创建 <code>virtual host</code> ，并为用户分配权限</p>
<h2 id="3、专业术语"><a href="#3、专业术语" class="headerlink" title="3、专业术语"></a>3、专业术语</h2><h3 id="3-1、Direct-Exchange"><a href="#3-1、Direct-Exchange" class="headerlink" title="3.1、Direct Exchange"></a>3.1、Direct Exchange</h3><p>直连型交换机，根据消息携带的路由键将消息投递给对应队列。</p>
<p>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p>
<h3 id="3-2、Fanout-Exchange"><a href="#3-2、Fanout-Exchange" class="headerlink" title="3.2、Fanout Exchange"></a>3.2、Fanout Exchange</h3><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p>
<h3 id="3-3、Topic-Exchange"><a href="#3-3、Topic-Exchange" class="headerlink" title="3.3、Topic Exchange"></a>3.3、Topic Exchange</h3><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。<br>简单地介绍下规则：</p>
<ul>
<li>(星号 *) 用来表示一个单词 (必须出现的)</li>
<li>(井号 #) 用来表示任意数量（零个或多个）单词</li>
</ul>
<p>通配的绑定键是跟队列进行绑定的</p>
<p>举个小例子<br>队列Q1 绑定键为 <strong>.TT.</strong> </p>
<p>队列Q2绑定键为  TT.#<br>如果一条消息携带的路由键为 A.TT.B，那么队列Q1将会收到；<br>如果一条消息携带的路由键为TT.AA.BB，那么队列Q2将会收到；</p>
<p>主题交换机是非常强大的<br>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当 * (星号) 和 # (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机的功能，和直连交换机的功能。</p>
<p>另外还有 Header Exchange 头交换机 ，Default Exchange 默认交换机，Dead Letter Exchange 死信交换机，这几个该篇暂不做讲述。</p>
<h2 id="4、简单队列"><a href="#4、简单队列" class="headerlink" title="4、简单队列"></a>4、简单队列</h2><p>有一个消费者和生产者，消费者生产消息，消费者消费消息，同时监听队列。</p>
<p><font color="yellow">不适用于生产环境</font></p>
<h2 id="5、工作队列"><a href="#5、工作队列" class="headerlink" title="5、工作队列"></a>5、工作队列</h2><h3 id="5-1、轮询模式"><a href="#5-1、轮询模式" class="headerlink" title="5.1、轮询模式"></a>5.1、轮询模式</h3><h3 id="5-2、公平模式"><a href="#5-2、公平模式" class="headerlink" title="5.2、公平模式"></a>5.2、公平模式</h3><p>公平分发，能者多劳</p>
<ol>
<li>消费者设置每次接收的消息 &lt;&#x3D;1</li>
<li>设置回执消息为手动 basicConsume 方法中 autoAck 设为 false</li>
<li>在具体的方法处理中手动回执消息，调用 basicAck 方法</li>
</ol>
<p><font color="yellow">适用一个消息被一个消费者消费的情况</font></p>
<h2 id="6、Publish-x2F-Subscribe-发布-x2F-订阅队列"><a href="#6、Publish-x2F-Subscribe-发布-x2F-订阅队列" class="headerlink" title="6、Publish&#x2F;Subscribe 发布&#x2F;订阅队列"></a>6、Publish&#x2F;Subscribe 发布&#x2F;订阅队列</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/u=2829723742,2399361864&fm=253.png"></p>
<ul>
<li>消息产生后不是直接投送到队列中，而是将消息先投送给 Exchange 交换机，然后消息经过 Exchange 交换机投递到相关队列。</li>
<li>多个消费者消费的不再是同一个队列，而是每个消费者消费属于自己的队列。</li>
</ul>
<h2 id="7、Routing-路由队列"><a href="#7、Routing-路由队列" class="headerlink" title="7、Routing 路由队列"></a>7、Routing 路由队列</h2><ol>
<li>生产者生产的消息投给交换机</li>
<li>交换机投送消息时的 Exchange Types 为 direct 类型</li>
<li>消息通过</li>
</ol>
<h2 id="8、Topics-主题队列"><a href="#8、Topics-主题队列" class="headerlink" title="8、Topics 主题队列"></a>8、Topics 主题队列</h2><ul>
<li>routing key 为一个句点号 <code>.</code> 分隔的字符串（将被句点号 <code>.</code> 分隔开的每一段独立的字符串称为一个单词），如 ”stock.usd.nyse“、”nyse.vmw”</li>
<li>routing key 中可以存在两种特殊的字符 <code>*</code> 与 <code>#</code> ，用于做模糊匹配，其中 <code>*</code> 用于匹配一个单词，<code>#</code> 用于匹配多个单词（可以是零个）</li>
</ul>
<p><img src="https://i.loli.net/2021/09/15/WFaQngHzqOCDVIL.png" alt="img"></p>
<h2 id="9、RPC队列"><a href="#9、RPC队列" class="headerlink" title="9、RPC队列"></a>9、RPC队列</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/u=2408417188,817710430&fm=15&gp=0.jpg" alt="img"></p>
<p>Rabbit MQ 中实现 RPC 的机制是：</p>
<ol>
<li>客户端发送请求（消息）时，在消息的属性（MessageProperties，在 AMQP 协议中定义了14种 properties ，这些属性会随着消息一起发送）中设置两个值 <code>replyTo</code> （一个 Queue 名称，用于告诉服务器处理完成之后将通知我的消息发送到这个 Queue 中）和 <code>correlationId</code> （此次请求的标识号，服务器处理完成之后需要将此属性返还，客户端将根据这个 id 了解哪条请求被成功执行了或执行失败。</li>
<li>服务端收到消息并处理</li>
<li>服务端处理完消息之后，将生成一条应答消息到 <code>replyTo </code>指定的 <code>Queue</code> ，同时携带 <code>correlationId</code>属性。</li>
</ol>
<p>客户端之前已订阅 <code>replyTo </code> 指定的 <code>Queue</code>，从中收到服务器的应答消息之后，根据其中的 <code>correlationId</code> 属性分析哪条请求被执行了，根据执行结果进行后续业务处理。</p>
<h2 id="10、Rabbit-MQ-消息的事务机制"><a href="#10、Rabbit-MQ-消息的事务机制" class="headerlink" title="10、Rabbit MQ 消息的事务机制"></a>10、Rabbit MQ 消息的事务机制</h2><ul>
<li>通过 AMQP 事务机制实现，这也是 AMQP 协议层面提供的解决方案</li>
<li><code>txSelect()</code> 开启事务，<code>txCommit()</code> 提交事务，<code>txRollback()</code> 回滚事务<ul>
<li>缺点：影响 Rabbit MQ 的性能</li>
</ul>
</li>
<li>通过将 channel 设置成 <code>confirm</code> 模式来实现 <code>confirmSelect() </code>方法<ul>
<li>三种方式：<ul>
<li>普通 confirm 模式：每发送一条消息后，调用 waitForConfirms() 方法，等待服务器 confirm。实际上是一种串行 confirm。</li>
<li>批量 confirm 模式：每发送一批消息后，调用 waitForConfirmsOrDie() 方法，等待服务器端 confirm。</li>
<li>异步 confirm 模式：提供一个回调方法，服务端 confirm 了一条或者多条消息后 Client 端会调用这个方法。</li>
</ul>
</li>
<li>同步：</li>
<li>异步：</li>
</ul>
</li>
</ul>
<h2 id="11、确认模式"><a href="#11、确认模式" class="headerlink" title="11、确认模式"></a>11、确认模式</h2><p>confirm</p>
<p>confirm ACK</p>
<p>channel.basicAck(deliveryTag,false) 方法确认签收消息</p>
<p>channel.basicNacl(…) 拒收消息</p>
<h2 id="12、SpringAMQP"><a href="#12、SpringAMQP" class="headerlink" title="12、SpringAMQP"></a>12、SpringAMQP</h2><p><font color="cornflowerblue">依赖</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> @RabbitListener 标注在类上，需要配合标注了 @RabbitHandler 的方法使用</span><br><span class="line"><span class="bullet">-</span> 多个方法标注 @RabbitHandler 通过方法参数区分</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> @RabbitListener 标注在方法上</span><br><span class="line"><span class="bullet">-</span> @RabbitListener(bindings=&#123;</span><br><span class="line"><span class="code">	@QueueBinding(</span></span><br><span class="line"><span class="code">		exchange = @Exchange(name = &quot;spring-rabbitmq-topic&quot;,type = &quot;topic&quot;),</span></span><br><span class="line"><span class="code">		value = @Queue(&quot;spring-rabbitmq-queue&quot;),</span></span><br><span class="line"><span class="code">		key = &#123;&quot;t&quot;&#125;</span></span><br><span class="line"><span class="code">	)</span></span><br><span class="line"><span class="code">&#125;)</span></span><br></pre></td></tr></table></figure>



<h2 id="13、消费端限流"><a href="#13、消费端限流" class="headerlink" title="13、消费端限流"></a>13、消费端限流</h2><ol>
<li>确保 ack 机制为手动确认</li>
<li>配置属性 perfetcj 一次消费多少条消息</li>
</ol>
<h2 id="14、TTL（Time-To-Live）"><a href="#14、TTL（Time-To-Live）" class="headerlink" title="14、TTL（Time To Live）"></a>14、TTL（Time To Live）</h2><p>存活时间&#x2F;过期时间</p>
<p>当消息到达存活时间之后，还没有被消费，会被自动清除。</p>
<p>RabbitMQ 可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p>
<p>整个队列过期（设置 x-message-ttl 参数），单个消息过期（设置 message.getMessageProperties().setExpiration(“毫米数”)</p>
<p><font color="yellow">两者都设置，以时间短的为准</font></p>
<p>队列过期，会将队列所有的消息全部移除</p>
<p>消息过期后，只有消息在队列顶端，才会判断其是否过期（移除掉）</p>
<h2 id="15、死信队列"><a href="#15、死信队列" class="headerlink" title="15、死信队列"></a>15、死信队列</h2><p>英文缩写 DLX，Dead Letter Exchange（死信交换机），当消息成为 Dead message 后，可以被重新发送到另一个交换机，这个交换机就是 DLX。</p>
<p>消息成为死信的情况：</p>
<ol>
<li>队列消息长度达到限制</li>
<li>消费者拒接消费消息，basicNack&#x2F;basicReject，并且不把消息重新放入原目标队列，requeue&#x3D;false</li>
<li>原队列存在消息过期设置，消息到达超时时间未被消费</li>
</ol>
<p>队列绑定死信交换机：</p>
<p>给队列设置参数：<code>x-dead-letter-exchange</code> 和 <code>x-dead-letter-routing-key</code></p>
<p><img src="https://i.loli.net/2021/09/28/BKpwEfjc1mXkPgZ.png" alt="image-20210928141301129"></p>
<ul>
<li>死信交换机和死信队列和普通的交换机和队列没有区别</li>
<li>当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列。</li>
</ul>
<h2 id="16、延迟队列"><a href="#16、延迟队列" class="headerlink" title="16、延迟队列"></a>16、延迟队列</h2><p>即消息进入消息队列后不会立即被消费，只有到达指定时间后，才会被消费。</p>
<p>需求：</p>
<ol>
<li>下单后，30分钟未支付，取消订单，回滚库存。</li>
<li>新用户注册成功 7 天后，发送短信问候。</li>
</ol>
<p>实现方式：</p>
<ol>
<li>定时器</li>
<li>延迟队列</li>
</ol>
<p><img src="https://i.loli.net/2021/09/28/iAdl8pYUKVzPjL3.png" alt="image-20210928145131461"></p>
<p>rabbitmq 并没有直接提供延迟队列的功能，但可以通过 <font color="orange">TTL + 死信队列</font> 组合实现延迟队列的效果。</p>
<p><img src="https://i.loli.net/2021/09/28/JeZHnKkjS7r25YR.png" alt="image-20210928151823342"></p>
<h2 id="17、日志与监控"><a href="#17、日志与监控" class="headerlink" title="17、日志与监控"></a>17、日志与监控</h2><h2 id="18、消息可靠性分析与追踪"><a href="#18、消息可靠性分析与追踪" class="headerlink" title="18、消息可靠性分析与追踪"></a>18、消息可靠性分析与追踪</h2><p><code>Firehose </code>：消息追踪，通过 rabbitmqctl trace_on &#x2F; rabbitmqctl_off 开启和关闭。</p>
<p><code>rabbitme_tracing</code> : 插件</p>
<h2 id="19、管理"><a href="#19、管理" class="headerlink" title="19、管理"></a>19、管理</h2><h2 id="20、消息可靠性保障"><a href="#20、消息可靠性保障" class="headerlink" title="20、消息可靠性保障"></a>20、消息可靠性保障</h2><ul>
<li>消息补偿机制</li>
</ul>
<p><img src="https://i.loli.net/2021/09/28/PatDeu9vFKgILZ8.png" alt="image-20210928162355791"></p>
<h2 id="21、消息幂等性处理"><a href="#21、消息幂等性处理" class="headerlink" title="21、消息幂等性处理"></a>21、消息幂等性处理</h2><ul>
<li>乐观锁解决方案</li>
</ul>
<p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果，也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p>
<p>在 MQ 中指，消费多条相同的消息，得到与消费该消息一次相同的结果。</p>
<p><img src="https://i.loli.net/2021/09/28/xNg8adZIUb1nX9m.png" alt="image-20210928163049716"></p>
<h2 id="22、RabbitMQ高可用集群"><a href="#22、RabbitMQ高可用集群" class="headerlink" title="22、RabbitMQ高可用集群"></a>22、RabbitMQ高可用集群</h2><p>部署多个 rabbitmq 实例，使用 HAProxy 做代理转发</p>
<p><img src="https://i.loli.net/2021/09/28/j3iGZ1ErXPT457D.png" alt="image-20210928163434630"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>rabbitmq</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>java redis</title>
    <url>/2022/09/23/java-redis/</url>
    <content><![CDATA[<p><font style="color:#52beee;font-size:50px">Redis</font></p>
<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>NoSQL &#x3D; Not Only SQL （不仅仅是 SQL）</p>
<p>关系型数据库：表格、行、列</p>
<p>NoSQL 泛指 非关系型数据库，随着 web 2.0 互联网的诞生，传统的关系型数据库很难对付 web 2.0 时代，尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL 在当今的大数据环境下发展的十分迅速，Redis 是发展最快的。</p>
<span id="more"></span>

<h2 id="1、NoSQL-特点"><a href="#1、NoSQL-特点" class="headerlink" title="1、NoSQL 特点"></a>1、NoSQL 特点</h2><ol>
<li>方便扩展（数据间没有关系，很好扩展）</li>
<li>大数据量性能高（Redis 一秒写 8 万次，读取 11 万次，NoSQL 的缓存记录级，是一种细粒度的缓存，性能比较高）</li>
<li>数据类型是多样的（不需要事先设计数据库，随取随用）</li>
</ol>
<h2 id="2、RDBMS-和-NoSQL"><a href="#2、RDBMS-和-NoSQL" class="headerlink" title="2、RDBMS 和 NoSQL"></a>2、RDBMS 和 NoSQL</h2><table>
<thead>
<tr>
<th>传统 RDBMS</th>
<th>NoSQL</th>
</tr>
</thead>
<tbody><tr>
<td>结构化组织</td>
<td>不仅仅是数据</td>
</tr>
<tr>
<td>SQL</td>
<td>没有固定的查询语言</td>
</tr>
<tr>
<td>数据和关系都存在单独的表中</td>
<td>键值对存储，列存储，文档存储，图形数据库（社交关系）</td>
</tr>
<tr>
<td>数据操作语言，数据定义语言</td>
<td>最终一致性</td>
</tr>
<tr>
<td>基础的事务</td>
<td>CPA 定理 和 BASE （异地多活）</td>
</tr>
<tr>
<td></td>
<td>高性能、高可用、高可扩</td>
</tr>
</tbody></table>
<h2 id="3、3-V-和-3-高"><a href="#3、3-V-和-3-高" class="headerlink" title="3、3 V 和 3 高"></a>3、3 V 和 3 高</h2><p>大数据时代的 3V ：主要是描述问题的</p>
<ol>
<li>海量 <code>Volume</code></li>
<li>多样 <code>Variety</code></li>
<li>实时 <code>Velocity</code></li>
</ol>
<p>大数据时代的 3 高：主要是对程序的要求</p>
<ol>
<li>高并发</li>
<li>高可扩</li>
<li>高性能</li>
</ol>
<h2 id="4、NoSQL-的四大分类"><a href="#4、NoSQL-的四大分类" class="headerlink" title="4、NoSQL 的四大分类"></a>4、NoSQL 的四大分类</h2><h3 id="4-1、K-V-键值对："><a href="#4-1、K-V-键值对：" class="headerlink" title="4.1、K - V 键值对："></a>4.1、K - V 键值对：</h3><ul>
<li>新浪：Redis</li>
<li>美团：Redis + Tair</li>
<li>阿里、百度：Redis + memecache</li>
</ul>
<h3 id="4-2、文档型数据（bson-格式-和-json-一样）"><a href="#4-2、文档型数据（bson-格式-和-json-一样）" class="headerlink" title="4.2、文档型数据（bson 格式 和 json 一样）"></a>4.2、文档型数据（bson 格式 和 json 一样）</h3><ul>
<li>MongoDB<ul>
<li>MongoDB 是一个基于分布式文件存储的数据库，由 c++ 编写，主要用来处理大量的文档</li>
<li>MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品，MongoDB 是非关系型数据库中功能最丰富，最像关系型数据库的</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<h3 id="4-3、列存储数据库"><a href="#4-3、列存储数据库" class="headerlink" title="4.3、列存储数据库"></a>4.3、列存储数据库</h3><ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<h3 id="4-4、图关系数据库"><a href="#4-4、图关系数据库" class="headerlink" title="4.4、图关系数据库"></a>4.4、图关系数据库</h3><ul>
<li>存的是关系，比如：朋友圈社交网络，广告推荐</li>
<li>Neo4j、InfoGrid</li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>Examples举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>键值（key-value）</td>
<td>Tokyo Cabinet&#x2F;Tyrant，<br>Redis，Voldemort，Oracle BDB</td>
<td>内容缓存，主要用于处理<br>大量数据的高访问负载，也用<br>于一些日志系统等等</td>
<td>key 指向 value的<br>键值对，通常用 hash table 来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常<br>只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>Cassandra，HBase，<br>Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，<br>将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，<br>更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>CouchDB，MongoDB</td>
<td>Web 应用（与 key - value 类似，value 是结构化的，<br>不同的是数据库能够了解 value 的内容</td>
<td>key - value 对应的键值对，<br>value 为结构化数据</td>
<td>数据结构要求不严格，表结构可变，<br>不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且<br>缺乏统一的查询语法</td>
</tr>
<tr>
<td>图形（Graph）数据库</td>
<td>Neo4J，InfoGrid，<br>Infinite Graph</td>
<td>社交网络，推荐系统等。<br>专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。<br>比如最短路径寻址，N度<br>关系查找</td>
<td>很多时候需要对整个图<br>做计算才能得出需要的信息，<br>而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody></table>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="5、概述"><a href="#5、概述" class="headerlink" title="5、概述"></a>5、概述</h2><blockquote>
<p>redis 是什么？</p>
</blockquote>
<p><code>Redis（Remote Dictionary Server）</code>，即远程字典服务</p>
<p>是一个开源的使用 ANSI c语言 编写、支持网络、可基于内存亦可持久化的日志型、key - value 数据库，并提供多种语言的 api</p>
<blockquote>
<p>redis 能干嘛 ?</p>
</blockquote>
<ol>
<li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）</li>
<li>效率高，可以用于高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器</li>
</ol>
<p>……</p>
<blockquote>
<p>特性</p>
</blockquote>
<ol>
<li>多样的数据类型</li>
<li>持久化</li>
<li>集群</li>
<li>事务</li>
</ol>
<p>……</p>
<h2 id="6、基础的知识"><a href="#6、基础的知识" class="headerlink" title="6、基础的知识"></a>6、基础的知识</h2><p>redis 默认有 16 个数据库，默认使用第一个数据库</p>
<blockquote>
<p>redis 是单线程的</p>
</blockquote>
<p>redis 是基于内存操作，cpu 不是 redis 的性能瓶颈，redis 的瓶颈是根据机器的内存和网络带宽来决定的</p>
<blockquote>
<p>redis 为什么这么快？</p>
</blockquote>
<p>redis 是将所有数据全部存放到内存中的，所以说使用单线程去操作效率就是最高的，多线程（cpu 上下文切换是耗时的操作），对于内存系统来说，没有上下文切换效率就是最高的。</p>
<h2 id="7、基础命令"><a href="#7、基础命令" class="headerlink" title="7、基础命令"></a>7、基础命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据库所有的键</span></span><br><span class="line">keys * </span><br><span class="line"><span class="comment"># 获取键值</span></span><br><span class="line">get [key]</span><br><span class="line"><span class="comment"># 设置键值</span></span><br><span class="line"><span class="built_in">set</span> [key] [value]</span><br><span class="line"><span class="comment"># 清除当前数据库</span></span><br><span class="line">flushdb</span><br><span class="line"><span class="comment"># 清除全部数据库内容 </span></span><br><span class="line">flushall</span><br><span class="line"><span class="comment"># 是否存在某个键 </span></span><br><span class="line">exists [key]</span><br><span class="line"> <span class="comment"># 移除键值</span></span><br><span class="line"> move [key] [value]</span><br><span class="line"> <span class="comment"># 设置过期时间</span></span><br><span class="line"> expire [key] [time]</span><br><span class="line"> <span class="comment"># 查看键值的数据类型</span></span><br><span class="line"> <span class="built_in">type</span> [key]</span><br><span class="line"> <span class="comment"># 追加字符串，如果当前 key 不存在相当于 setkey</span></span><br><span class="line"> append [key] [appendStr]</span><br><span class="line"> <span class="comment"># 查看字符串的长度</span></span><br><span class="line"> strlen [key]</span><br><span class="line"> <span class="comment"># 自增 1</span></span><br><span class="line"> incr [key]</span><br><span class="line"> <span class="comment"># 自减 1</span></span><br><span class="line"> decr [key]</span><br><span class="line"> <span class="comment"># 自增步长</span></span><br><span class="line"> incrby [key] [number] </span><br></pre></td></tr></table></figure>



<h2 id="8、基本数据类型"><a href="#8、基本数据类型" class="headerlink" title="8、基本数据类型"></a>8、基本数据类型</h2><h3 id="8-1、String"><a href="#8-1、String" class="headerlink" title="8.1、String"></a>8.1、String</h3><ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象缓存存储</li>
</ul>
<h3 id="8-2、List"><a href="#8-2、List" class="headerlink" title="8.2、List"></a>8.2、List</h3><p>redis 可以将 list 实现为 栈、队列、阻塞队列</p>
<p>所有的 list 命令都是以 l 开头的</p>
<p>左右两边都可以插入数据 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 左右插入数据</span></span><br><span class="line">lpush、rpush</span><br><span class="line"><span class="comment"># 移除元素</span></span><br><span class="line">lpop、rpop</span><br><span class="line"><span class="comment"># 根据下标获取元素</span></span><br><span class="line">lindex、rindex</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>它实际上是一个链表，before、node、after、left、right 都可以插入值</li>
<li>如果 key 不存在，创建新的链表</li>
<li>如果 key 存在，新增内容</li>
<li>如果移除了所有值，空链表，也代表不存在</li>
<li>在两边插入或者改动值，效率最高，中间元素，相对来说效率会低一点</li>
</ul>
<p>消息排队，消息队列（lpush、rpop）、栈（lpush、lpop）</p>
<h3 id="8-3、Set"><a href="#8-3、Set" class="headerlink" title="8.3、Set"></a>8.3、Set</h3><p>set 开头都是 s</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加值</span></span><br><span class="line">sadd</span><br><span class="line"><span class="comment"># 查看指定 set 所有值</span></span><br><span class="line">smembers</span><br><span class="line"><span class="comment"># 判断一个值是否在 set 集合中</span></span><br><span class="line">sismember</span><br><span class="line"><span class="comment"># 获取集合元素个数</span></span><br><span class="line">scard</span><br><span class="line"><span class="comment"># 移除 set 集合中的指定元素</span></span><br><span class="line">srem</span><br><span class="line"><span class="comment"># 随机抽出指定元素</span></span><br><span class="line">srandmember</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">sdiff</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">sinter</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">sunion</span><br></pre></td></tr></table></figure>



<h3 id="8-4、Hash"><a href="#8-4、Hash" class="headerlink" title="8.4、Hash"></a>8.4、Hash</h3><p>map 集合 key - map</p>
<p>命令以 h 开头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加值</span></span><br><span class="line">hset</span><br><span class="line">hget</span><br><span class="line"><span class="comment"># 存在即覆盖，不存在则创建</span></span><br><span class="line">hmset</span><br><span class="line"><span class="comment"># 获取多个值</span></span><br><span class="line">hmget</span><br></pre></td></tr></table></figure>



<p>hash 变更的数据 user name age 尤其是用户信息之类的，经常变动的信息，hash 更适合于对象的存储、string 类型更适合字符串存储</p>
<h3 id="8-5、Zset（有序集合）"><a href="#8-5、Zset（有序集合）" class="headerlink" title="8.5、Zset（有序集合）"></a>8.5、Zset（有序集合）</h3><p>在 set 的基础上，增加了一个值，zset k1 score1 v1</p>
<p>set 排序 存储班级成绩表 工资表排序</p>
<p>普通消息，1，重要消息 2，带权重进行判断</p>
<p>排行榜应用实现，取 top N 测试</p>
<h2 id="9、三大特殊的数据类型"><a href="#9、三大特殊的数据类型" class="headerlink" title="9、三大特殊的数据类型"></a>9、三大特殊的数据类型</h2><h3 id="9-1、geospatial-地理位置"><a href="#9-1、geospatial-地理位置" class="headerlink" title="9.1、geospatial 地理位置"></a>9.1、geospatial 地理位置</h3><p>朋友的定位、附近的人，打车距离计算，这个功能可以推算出地理位置的信息，两地之间的距离、方圆几里的人</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加地理位置</span></span><br><span class="line">geoadd [key] [lat] [lng] [locarion_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取地理位置</span></span><br><span class="line">geopos [key] [location_name] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># geodist 返回两人之间的距离</span></span><br><span class="line"><span class="comment"># 单位：</span></span><br><span class="line"><span class="comment"># m 米</span></span><br><span class="line"><span class="comment"># km 千米</span></span><br><span class="line"><span class="comment"># mi 英里</span></span><br><span class="line"><span class="comment"># ft 英尺</span></span><br><span class="line"></span><br><span class="line">geodist [key] [location_name1] [location_name2] [unit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以给定的经纬度为中心，找出某一半径内的元素</span></span><br><span class="line">georadius [key] [lat] [lng] [radius] [unit] withdist [显示到中间距离的位置] withcoord [显示他人的定位信息] count [筛选出指定的结果]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以成员为中心，找出某一半径内的元素</span></span><br><span class="line">georadiusbymember [key] [location_name] [radius] [unit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个或多个位置元素的 geohash 表示，返回 11 个字符的 geohash 字符串</span></span><br><span class="line">geohash</span><br><span class="line"></span><br><span class="line"><span class="comment"># geo 的底层实现原理是 zset，可以使用 zset 命令操作 geo</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2、Hyperloglog"><a href="#9-2、Hyperloglog" class="headerlink" title="9.2、Hyperloglog"></a>9.2、Hyperloglog</h3><blockquote>
<p>什么是基数？</p>
</blockquote>
<p>基数（不重复的元素），可以接受误差。</p>
<p>redis hyperloglog 基数统计的方法</p>
<p>优点：占用的内存是固定的，2^64不同的元素的技术，只需要12 kb</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>网页的 UV （一个人访问一个网站多次，但是还是算为一个人）</p>
<p>传统的方式：set集合 保存用户 id</p>
<p>这种方式保存大量的用户的 id 会比较麻烦，目的是为了计数不是为了保存用户 id</p>
<p>redis hyperloglog：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PFadd key1 a b c d</span><br><span class="line"></span><br><span class="line">PFCOUNT key1</span><br><span class="line"></span><br><span class="line">PFadd key2 a b c d e</span><br><span class="line"></span><br><span class="line">PFMERGE key3 key1 key2</span><br></pre></td></tr></table></figure>





<h3 id="9-3、Bitmaps"><a href="#9-3、Bitmaps" class="headerlink" title="9.3、Bitmaps"></a>9.3、Bitmaps</h3><blockquote>
<p>位存储</p>
</blockquote>
<p>两个状态的都可以使用 bitmaps</p>
<p>Bitmaps 位图，数据结构都是操作二进制位来进行记录，就只有 0 和 1 两个状态</p>
<p>使用 bitmapp 来记录 周一到周日的打卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit sign 0 1</span><br><span class="line">......</span><br><span class="line">setbit sign 6 0</span><br></pre></td></tr></table></figure>

<p>查看某一天是否有打卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getbit sign 0</span><br><span class="line">getbit sign 6</span><br><span class="line">bitcount sign # 统计所有打开的天数</span><br></pre></td></tr></table></figure>





<h2 id="10、事务"><a href="#10、事务" class="headerlink" title="10、事务"></a>10、事务</h2><p>redis 单条命令是保证原子性的，但是事务是不保证原子性的</p>
<blockquote>
<p>redis 事务的本质：一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行。</p>
<p>一次性、顺序性、排他性</p>
</blockquote>
<p><font color="orange">redis 事务没有隔离级别的概念</font></p>
<p>所有的命令在事务中并没有直接被执行，只有发起执行命令的时候才会执行</p>
<p>redis 事务：</p>
<ul>
<li>开启事务</li>
<li>执行事务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multi # 开启事务</span><br><span class="line">set k1 k2</span><br><span class="line">....</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">期间执行的命令都将入队</span></span><br><span class="line">exec # 执行事务,将按顺序执行队列里的所有命令</span><br><span class="line">DISCARD # 取消事务</span><br></pre></td></tr></table></figure>



<ul>
<li>编译型异常(代码有问题或命令有问题),事务中的所有命令都不会被执行</li>
<li>运行时异常(1&#x2F;0),如果事务队列中存在语法错误,那么执行命令的时候,其它命令是可以正常执行的,错误命令抛出异常</li>
</ul>
<blockquote>
<p>悲观锁</p>
</blockquote>
<blockquote>
<p>乐观锁</p>
</blockquote>
<p>使用 watch 可以当作 redis 的乐观锁操作,如果事务执行失败,用 unwatch 解锁</p>
<h1 id="redis-进阶"><a href="#redis-进阶" class="headerlink" title="redis 进阶"></a>redis 进阶</h1><h2 id="11、redis-conf"><a href="#11、redis-conf" class="headerlink" title="11、redis conf"></a>11、redis conf</h2><blockquote>
<p>网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 # 绑定的ip</span><br><span class="line">protecte-mode yes # 保护模式</span><br><span class="line">port 6379 # 端口设置</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通用 GENERAL</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">daemonize yes # 以守护进程的方式打开，默认是 no，需要自己开启</span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid # 如果以后台的方式运行需要指定一个 pid 文件</span><br><span class="line"></span><br><span class="line">loglevel notice # debug verbose notice warning 日志级别</span><br><span class="line"></span><br><span class="line">logfile &quot;&quot; # 日志文件的位置</span><br><span class="line">databases 16 # 数据库的数量</span><br><span class="line">always-show-logo no # 是否总是显示 logo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>快照</p>
</blockquote>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof </p>
<p>redis 是内存数据库，如果没有持久化，那么数据断电就会消失</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果 3600s 内进行了至少一次 key 操作，则进行持久化操作</span></span><br><span class="line">save 3600 1</span><br><span class="line">save 300 100</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化出错，是否还需要继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否压缩 rdb 文件，需要消耗一些 cpu 资源</span></span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes # 保存 rdb 文件的时候，进行错误的检查校验</span><br><span class="line"></span><br><span class="line">dir ./ # rdb 文件保存的目录</span><br></pre></td></tr></table></figure>



<blockquote>
<p>replication 主从复制</p>
</blockquote>
<blockquote>
<p>security</p>
</blockquote>
<p>设置 redis 密码，默认是没有密码的</p>
<blockquote>
<p>client</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">maxclients 10000</span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line">maxmemory-policy noeviction # 内存到达上限的处理策略</span><br></pre></td></tr></table></figure>

<blockquote>
<p>APPEND ONLY MODE aof 配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly no # 默认不开启，默认使用 rdb 方式持久化</span><br></pre></td></tr></table></figure>

<h2 id="12、redis-持久化"><a href="#12、redis-持久化" class="headerlink" title="12、redis 持久化"></a>12、redis 持久化</h2><p>指定的时间间隔内，将内存中的数据集快照写入磁盘。恢复时是将快照文件直接读到内存里</p>
<p>redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感的，那 RDB 方式要比 AOF 方式更加的高效。<font color="orange">RDB 的缺点是最后一次持久化后的数据可能丢失</font>。</p>
<blockquote>
<p>触发机制</p>
</blockquote>
<ol>
<li>save 的规则满足的情况下，会自动触发 rdb 规则</li>
<li>执行 flushall 命令，也会触发 rdb 规则</li>
<li>退出 redis ，也会产生 rdb 文件</li>
</ol>
<blockquote>
<p>恢复数据</p>
</blockquote>
<p>将 rdb 文件 放在 redis 的启动目录即可（&#x2F;usr&#x2F;local&#x2F;bin）</p>
<p><strong>优点：</strong></p>
<ol>
<li>适合大规模的数据恢复</li>
<li>对数据的完整性要求不高</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要一定的时间间隔进行操作，如果 redis 意外宕机了，这个最后一次修改的数据就没有了</li>
<li>fork 进程的时候会占用一点的内存空间</li>
</ol>
<h2 id="13、redis-发布订阅"><a href="#13、redis-发布订阅" class="headerlink" title="13、redis 发布订阅"></a>13、redis 发布订阅</h2><p>redi 发布订阅（pub&#x2F;sub）是一种<font color="orange">消息通信模式</font>：发送者（pub）发送消息，订阅者（sub）接收消息</p>
<p>redis 客户端可以订阅任意数量的频道</p>
<p>第一个：消息发送者，第二个：频道，第三个：消息订阅者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅一个或多个符合给定模式的频道</span></span><br><span class="line">PSUBSCRIBE pattern</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看订阅与发布系统状态</span></span><br><span class="line">PUBSUB subcommand [argument ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将消息发送到指定的频道</span></span><br><span class="line">PUBLISH channel message</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退订所有给定模式的频道</span></span><br><span class="line">PUNSUBSCRIBE [pattern]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">订阅给定的一个或多个频道的消息</span></span><br><span class="line">SUBSCRIBE channel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退订指定的频道</span></span><br><span class="line">UNSUBSCRIBE [channel]</span><br></pre></td></tr></table></figure>

<h2 id="14、redis-主从复制"><a href="#14、redis-主从复制" class="headerlink" title="14、redis 主从复制"></a>14、redis 主从复制</h2><p>主从复制，是指将一台 Redis 服务器的数据复制到其它的 redis 服务器。前者称为主节点（master&#x2F;leader），后者称为从节点（slave&#x2F;follower）数据的复制是单向的，只能由主节点到从节点。Master 以写为主，Slave 以读为主。</p>
<p>默认情况下，每台 redis 服务器都是主节点，且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：</p>
<ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 redis 数据时应用连接主节点，读 redis 数据时应用连接从节点），分担服务器负载，尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 redis 服务器的并发量</li>
<li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制时 redis 高可用的基础</li>
</ol>
<blockquote>
<p>环境配置</p>
</blockquote>
<p>只配置从库，不用配置主库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看角色</span></span><br><span class="line">info replication</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从机配置主库</span></span><br><span class="line">SLAVEOF [ip] [port]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>复制原理</p>
</blockquote>
<p>slave 启动成功连接到 master 后会发送一个 sync 同步命令</p>
<p>master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，并完成一次完全同步</p>
<p><code>全量复制</code>：slave 服务在接收到数据库文件数据之后，将其存盘并加载到内存中</p>
<p><code>增量复制</code>：master 继续将新的所有收集到的修改命令依次传给 slave ，完成同步</p>
<p>只要是重新连接 master，一次完成同步（全量复制）将被自动执行</p>
<blockquote>
<p>哨兵模式</p>
</blockquote>
<p>哨兵模式是一种特殊的模式，哨兵是一个独立的进程，它会独立运行，其原理是哨兵通过发送命令，等待 redis 服务器响应，从而监控运行的多个 redis 实例。一般哨兵也会配置集群</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1586252371307203.png" alt="img"></p>
<h2 id="15、redis-缓存穿透、击穿和雪崩"><a href="#15、redis-缓存穿透、击穿和雪崩" class="headerlink" title="15、redis 缓存穿透、击穿和雪崩"></a>15、redis 缓存穿透、击穿和雪崩</h2><blockquote>
<p>缓存穿透（查不到）</p>
</blockquote>
<p>用户查询一个数据，发现 redis 内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败，当用户很多时，缓存都没有命中，于是都去请求了持久层的数据库，这个会给持久层数据库库造成很大的压力，这时候就会出现缓存穿透</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>布隆过滤器：是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</li>
<li>缓存空对象：当存储层不命中后，即使是返回的空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据就会从缓存中获取，保护了后端数据源<ul>
<li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多空值的键</li>
<li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响</li>
</ul>
</li>
</ol>
<blockquote>
<p>缓存击穿（量太大，缓存过期）</p>
</blockquote>
<p>是指一个非常热点的 key 在不停的扛着大并发的集中访问，当这个 key 失效的瞬间，持续的大并发就会击穿缓存，直接请求数据库，就像在屏幕上凿开了一个洞</p>
<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库压力瞬间过大</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>设置热点数据永不过期</li>
<li>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其它线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大</li>
</ol>
<blockquote>
<p>缓存雪崩</p>
</blockquote>
<p>是指在某一个时间段，缓存集中失效</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>搭建集群，异地多活</li>
<li>限流降级，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其它线程等待</li>
<li>数据预热，在正式部署之前，把可能被大量访问的数据先访问一遍，这样部分可能被大量访问的数据就会加载到缓存中，在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>java 多线程</title>
    <url>/2022/09/23/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h1><h2 id="1、Process与Thread"><a href="#1、Process与Thread" class="headerlink" title="1、Process与Thread"></a>1、Process与Thread</h2><ul>
<li>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念</li>
<li>进程是执行程序的一次执行过程，是一个动态概念。是<code>系统资源分配的单位</code></li>
<li>一个进程中可以包含若干个线程，一个进程中至少有一个线程。线程是<code>CPU调度和执行的单位</code></li>
</ul>
<p><strong>注意：</strong>很多多线程都是模拟出来的，真正的多线程是指有<code>多个CPU</code>，即<font color="orange">多核</font>，如服务器。如果是模拟出来的多线程，即在一个CPU的情况下，在统一时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉</p>
<span id="more"></span>

<h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><ul>
<li>线程就是独立的执行路径</li>
<li>在程序运行时，即使自己没有创建线程，后台也会有多个线程，如主线程，gc线程</li>
<li><code>main()</code> 称之为<code>主线程</code>，为系统的入口，用于执行整个程序</li>
<li>在一个进程中，如果开辟了多个线程，线程的运行由<font color="orange">调度器</font>安排调度，调度器是与操作系统紧密相关的，先后的顺序是不能人为的干预的</li>
<li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制</li>
<li>线程会带来额外的开销，如<font color="red">CPU调度时间</font>，<font color="red">并发控制开销</font></li>
<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li>
</ul>
<h2 id="3、并发与并行"><a href="#3、并发与并行" class="headerlink" title="3、并发与并行"></a>3、并发与并行</h2><ul>
<li>并发（concurrent）：是同一时间应对（dealing with）多件事情的能力（<font color="orange">轮流交替</font>）</li>
<li>并行（parallel）：是同一时间动手做（doing）多件事情的能力（<font color="orange">同时</font>）</li>
</ul>
<h2 id="4、三种创建方式"><a href="#4、三种创建方式" class="headerlink" title="4、三种创建方式"></a>4、<strong>三种创建方式</strong></h2><ul>
<li><p>继承<strong>Thread</strong>类<font color="orange">（不建议使用：避免OOP单继承局限性）</font></p>
<ul>
<li><p>自定义线程类继承<code>Thread</code>类</p>
</li>
<li><p>重写<code>run()</code>方法，编写线程执行体</p>
</li>
<li><p>创建线程对象，调用<code>start()</code>方法启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程开启不一定立即执行，由CPU调度执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadDemo</span> <span class="variable">threadDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">        threadDemo.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在主线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">// 主线程与多线程执行结果交替出现</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实现<strong>Runnable</strong>接口<font color="orange">（推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用）</font></p>
<ul>
<li><p>定义类实现<code>Runnable</code>接口</p>
</li>
<li><p>实现<code>run()</code>方法，编写线程执行体</p>
</li>
<li><p>创建线程对象，调用<code>start()</code>方法启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RunnableDemo</span> <span class="variable">runnableDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>();</span><br><span class="line"><span class="comment">//        创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(runnableDemo).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在主线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>龟兔赛跑实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="comment">//    胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10001</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            判断比赛是否结束</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    判断是否完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span>&#123;</span><br><span class="line"><span class="comment">//        判断是否由胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            已经存在胜利者</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps &gt;= <span class="number">10000</span>)&#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;Winner is &quot;</span>+winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实现<strong>Callable</strong>接口</p>
<ul>
<li><p>实现Callable接口，需要返回值类型</p>
</li>
<li><p>重写call方法，需要抛出异常</p>
</li>
<li><p>创建目标对象</p>
</li>
<li><p>创建执行服务：ExecutorService ser &#x3D; Executors.newFixedThreadPool(1);</p>
</li>
<li><p>提交执行：Future<Boolean> result1 &#x3D; ser.submit(t1);</Boolean></p>
</li>
<li><p>获取结果：boolean r1 &#x3D; result1.get()</p>
</li>
<li><p>关闭服务：ser.shutdownNow();</p>
<p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableDemo</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallableDemo</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallableDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;看了&quot;</span> + i + <span class="string">&quot;个视频&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">CallableDemo</span> <span class="variable">callableDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableDemo</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="type">CallableDemo</span> <span class="variable">callableDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableDemo</span>(<span class="string">&quot;小智&quot;</span>);</span><br><span class="line">        <span class="type">CallableDemo</span> <span class="variable">callableDemo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableDemo</span>(<span class="string">&quot;小爱&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建执行服务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; submit1 = executorService.submit(callableDemo1);</span><br><span class="line">        Future&lt;Boolean&gt; submit2 = executorService.submit(callableDemo2);</span><br><span class="line">        Future&lt;Boolean&gt; submit3 = executorService.submit(callableDemo3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取结果</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> submit1.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean2</span> <span class="operator">=</span> submit2.get();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean3</span> <span class="operator">=</span> submit3.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        关闭服务</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;小明的观看结果&quot;</span>+aBoolean1);</span><br><span class="line">        System.out.println(<span class="string">&quot;小智的观看结果&quot;</span>+aBoolean2);</span><br><span class="line">        System.out.println(<span class="string">&quot;小爱的观看结果&quot;</span>+aBoolean3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="5、静态代理"><a href="#5、静态代理" class="headerlink" title="5、静态代理"></a>5、静态代理</h2><blockquote>
<p>概念</p>
</blockquote>
<ul>
<li>真实对象和代理对象都要实现<strong>同一个接口</strong></li>
<li>代理对象要代理真实角色</li>
<li>好处：<ul>
<li>代理对象可以做很多真实对象做不了的事情</li>
<li>真实对象专注做自己的事情</li>
</ul>
</li>
</ul>
<h2 id="6、Lamda表达式"><a href="#6、Lamda表达式" class="headerlink" title="6、Lamda表达式"></a>6、Lamda表达式</h2><blockquote>
<p>定义</p>
</blockquote>
<ul>
<li><p>避免匿名内部类定义过多、代码看起来简洁、去掉一堆没有意义的代码，只留下核心的逻辑</p>
</li>
<li><p>其实质属于函数式编程的概念</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(params) -&gt; expression[表达式]</span><br><span class="line">(params) -&gt; statement[语句]</span><br><span class="line">(params) -&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>（Functional Interface）函数式接口</p>
</blockquote>
<ul>
<li><p>任何接口，如果只包含<strong>唯一一个抽象方法</strong>，那么它就是一个函数式接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>对于函数式接口，可以通过lambda表达式来创建接口的对象</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li><p>lambda表达式只能有一行代码的情况下才能简化为一行，如果有多行，则必须用代码块包裹</p>
</li>
<li><p>使用lambda表达式的前提式接口为函数式接口</p>
</li>
<li><p>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ILove</span> <span class="variable">iLove</span> <span class="operator">=</span> (a, b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love you &quot;</span> + a + b);</span><br><span class="line">        &#125;;</span><br><span class="line">        iLove.love(<span class="number">13</span>, <span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ILove</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">love</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7、线程状态"><a href="#7、线程状态" class="headerlink" title="7、线程状态"></a>7、线程状态</h2><blockquote>
<p>停止线程</p>
</blockquote>
<ul>
<li>不推荐使用JDK提供的 <code>stop() 方法、destroy()</code>方法。</li>
<li>推荐让线程自己停下来</li>
<li>建议使用一个标志位进行终止变量，当 flag &#x3D; false ，则终止线程运行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStopDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//    volatile关键字修饰的变量看到的随时是自己的最新值。在线程1中对变量v的最新修改，对线程2是可见的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程在执行... &quot;</span> + i++ + <span class="string">&quot; 次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadStopDemo</span> <span class="variable">threadStopDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadStopDemo</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadStopDemo).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="comment">//                调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                threadStopDemo.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程该停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>线程休眠</p>
</blockquote>
<ul>
<li>sleep(时间)指定当前线程阻塞的毫秒数</li>
<li>sleep存在异常 <code>InterruptException</code></li>
<li>sleep时间达到后线程进入就绪状态</li>
<li>sleep可以模拟网络延时，倒计时等</li>
<li><strong>每一个对象都有一个锁，sleep不会释放锁</strong></li>
</ul>
<blockquote>
<p>礼让线程</p>
</blockquote>
<ul>
<li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li>
<li>将线程从运行状态转为就绪状态</li>
<li><strong>让CPU重新调度，礼让不一定成功！看CPU心情</strong></li>
</ul>
<blockquote>
<p>Join</p>
</blockquote>
<ul>
<li>Join合并线程，待此线程执行完成后，再执行其它线程，其它线程阻塞</li>
</ul>
<blockquote>
<p>线程状态观测 Thread.State</p>
</blockquote>
<ul>
<li><p><strong>NEW</strong></p>
<p>尚未启动的线程处于此状态</p>
</li>
<li><p><strong>RUNNABLE</strong></p>
<p>在java虚拟机中执行的线程处于此状态</p>
</li>
<li><p><strong>BLOCKED</strong></p>
<p>被阻塞等待监视器锁定的线程处于此状态</p>
</li>
<li><p><strong>WAITING</strong></p>
<p>正在等待另一个线程执行特定动作的线程处于此状态</p>
</li>
<li><p><strong>TIMED_WAITING</strong></p>
<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p>
</li>
<li><p><strong>TERMINATED</strong></p>
<p>已退出的线程处于此状态</p>
</li>
</ul>
<p>一个线程可以在给定时间点处于一个状态，这些状态是不反映任何操作系统线程状态的虚拟机状态</p>
<h3 id="7-1、线程优先级"><a href="#7-1、线程优先级" class="headerlink" title="7.1、线程优先级"></a>7.1、线程优先级</h3><ul>
<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</li>
<li>线程的优先级用数字表示，范围从1~10<ul>
<li>Thread.MIN_PRIORITY &#x3D; 1</li>
<li>Thread.MAX_PRIORITY &#x3D; 10</li>
<li>Thread.NORM_PRIORITY &#x3D; 5</li>
</ul>
</li>
<li>使用以下方式改变或获取优先级<ul>
<li>getPriority()</li>
<li>setPriority(int xxx)</li>
</ul>
</li>
</ul>
<p><strong>优先级的设定建议在start()调度前</strong></p>
<p><code>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度</code></p>
<h3 id="7-2、守护线程"><a href="#7-2、守护线程" class="headerlink" title="7.2、守护线程"></a>7.2、守护线程</h3><ul>
<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕，如：后台记录操作日志，监控内存，垃圾回收等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>); <span class="comment">// 默认为false，表示为用户线程，正常的线程都是用户线程</span></span><br><span class="line">        thread.start(); <span class="comment">// 守护线程启动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start();<span class="comment">// 用户线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//守护线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着你...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;天，你也活的很开心&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------Goodbye! World---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="8、线程的同步"><a href="#8、线程的同步" class="headerlink" title="8、线程的同步"></a>8、<strong>线程的同步</strong></h2><p><font color="orange">多个线程操作同一个资源</font></p>
<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这时候需要线程同步。</p>
<p>线程同步其实就是一直<code>等待机制</code>，多个需要同时访问此对象的线程进入这个<font color="red">对象的等待池</font>形成队列，等待前面的线程使用完毕，下一个线程再使用</p>
<blockquote>
<p>队列和锁</p>
</blockquote>
<ul>
<li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<font color="red">锁机制 synchronized</font>，当一个线程获得对象的排它锁，独占资源，其它线程必须等待，使用后释放锁即可。存在一下问题：<ul>
<li>一个线程持有锁会导致其它所有需要此锁的线程<code>挂起</code></li>
<li>在多线程竞争下，加锁，释放锁会导致比较多的<code>上下文切换</code> 和 <code>调度延时</code>，引起性能问题</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致<code>优先级倒置</code>，引起性能问题</li>
</ul>
</li>
</ul>
<h3 id="8-1、同步方法"><a href="#8-1、同步方法" class="headerlink" title="8.1、同步方法"></a>8.1、同步方法</h3><p>synchronized 方法和synchronized 块</p>
<blockquote>
<p>同步方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> voiidd <span class="title function_">method</span><span class="params">(init args)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>synchronized</code> 方法控制对对象的访问，每个对象对应一把<code>锁</code>，每个 <code>synchronized</code> 方法都必须获得调用该方法的对象的<code>锁</code>才能执行，否则线程会<code>阻塞</code>，方法一旦执行，就<code>独占该锁</code>，直到该<code>方法返回才释放锁</code>，后面被阻塞的线程才能获得这个锁，继续执行</li>
</ul>
<p><strong>缺陷：</strong> 若将一个大的方法声明为 <code>synchronized </code>将会影响效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaveThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(station, <span class="string">&quot;悲惨的我&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(station, <span class="string">&quot;牛逼的手速党&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(station, <span class="string">&quot;可恶的黄牛党&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//        模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// synchronized 同步方法，锁的是this</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买到第 &quot;</span> + ticketNum-- + <span class="string">&quot; 张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>同步块</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(Obj)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Obj称之为同步监视器</p>
<ul>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或是class</li>
</ul>
<p>同步监视器的执行过程</p>
<ol>
<li>第一个线程访问，锁定同步监视器，执行其中的代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问呢，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
<p><strong>锁的对象是变化的量，需要增删改的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="9、死锁"><a href="#9、死锁" class="headerlink" title="9、死锁"></a>9、死锁</h2><p>多个线程各自占有一些共享资源，并且互相等待其它线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放锁，都停止执行的情况，某一个同步块同时拥有“<font color="red">两个以上对象的锁</font>”时，就可能会发生“<font color="red">死锁</font>”的问题，<font color="red">避免 synchronized 嵌套</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">g1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">0</span>, <span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">g2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">1</span>, <span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makeup</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//    需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName;<span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    Makeup(<span class="type">int</span> choice, String girlName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//  化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//                synchronized (mirror) &#123;//一秒钟后想获得镜子</span></span><br><span class="line"><span class="comment">//                    System.out.println(this.getName() + &quot;获得镜子的锁&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">//一秒钟后想获得镜子</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//                synchronized (lipstick) &#123;//一秒钟后想获得口红</span></span><br><span class="line"><span class="comment">//                    System.out.println(this.getName() + &quot;获得口红的锁&quot;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">//一秒钟后想获得口红</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>产生死锁的四个必要条件</p>
</blockquote>
<ol>
<li>互斥条件：一个资源每次只能被一个进程使用</li>
<li>请求与保持条件：一个进程因请求资源而阻塞时，对以获得的资源保持不放</li>
<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li>
</ol>
<p><strong>上面列出了死锁的四个必要条件，只要破除其中任意一个或多个条件就可以避免死锁发生</strong></p>
<h2 id="10、Lock（锁）"><a href="#10、Lock（锁）" class="headerlink" title="10、Lock（锁）"></a>10、Lock（锁）</h2><ul>
<li><p>显示定义同步锁对象来实现同步，同步锁对象使用Lock对象充当</p>
</li>
<li><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。<code>锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁</code>，线程开始访问共享资源之前应先获得Lock对象</p>
</li>
<li><p><code>ReentrantLock（可重入锁）</code>类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，可以显示加锁，释放锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReenTrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//保证线程安全的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            <span class="comment">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SaleSheet</span> <span class="variable">saleSheet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaleSheet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(saleSheet, <span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(saleSheet, <span class="string">&quot;小智&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(saleSheet, <span class="string">&quot;小黑&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SaleSheet</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//    票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + tickets-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>synchronized 与 Lock 的对比</p>
</blockquote>
<ul>
<li><p>Lock 是显式锁（手动开启和关闭锁，<strong>别忘记关闭锁</strong>）<code>synchronized </code>是隐式锁，出了作用域自动释放</p>
</li>
<li><p>Lock 只有代码块锁，synchronized 有代码块锁和方法锁</p>
</li>
<li><p>使用 Lock 锁，JVM 将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</p>
</li>
<li><p>优先使用顺序：</p>
<ul>
<li><strong>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>wait() 方法的问题</p>
</blockquote>
<ol>
<li><p>一个线程占有了一个对象的锁以后，cpu 资源仍然能被其它线程抢走。</p>
</li>
<li><p>当其它线程抢走 cpu 后，发现获取不到对象锁，则此线程会进入阻塞状态，并且进入由于获取不到锁而阻塞的阻塞队列中。</p>
</li>
<li><p>当占有锁的线程，<font color="orange">释放锁</font> 的时候，就会立即唤醒等待对象锁的其它线程（在阻塞队列中的）。</p>
<ul>
<li><p>释放锁包含了所有释放锁的情况</p>
<ol>
<li><p>线程退出同步块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)&#123;<span class="comment">//线程进入同步块时，会尝试获取锁</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//线程退出同步块时，会释放占有的对象锁，且唤醒其它等待锁的线程（都在阻塞队列中）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>线程调用了 wait 方法时，会释放 cpu 释放锁，因为 wait 也会引起锁的释放，而一旦释放锁，也就会立即唤醒那些等待锁的线程。</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>线程阻塞的原因，有三大类：</p>
<ol>
<li>尝试获取锁，得不到锁时，就会进入等待锁的阻塞队列中<ul>
<li>只有占有锁的线程释放锁时才会唤醒这个队列中的线程</li>
<li>notify() 不会唤醒该队列中的线程</li>
</ul>
</li>
<li>正在占有锁的线程，调用了 wait() 就进入了 wait 阻塞队列中<ul>
<li>只有 obj.notify() 方法，才会唤醒这个队列中的线程</li>
<li>一般的释放锁，无法唤醒该队列中的线程</li>
</ul>
</li>
<li>正在执行中的线程，调用了 sleep() 或者 IO，就进入了另一个阻塞队列<ul>
<li>睡眠时间到，或者 IO 阻塞结束，线程才得以继续进入可运行的状态</li>
</ul>
</li>
<li>线程唤醒之后进入就绪队列</li>
</ol>
</li>
</ol>
<h2 id="11、线程协作"><a href="#11、线程协作" class="headerlink" title="11、线程协作"></a>11、线程协作</h2><p><strong>生产者消费者问题</strong></p>
<blockquote>
<p>线程通信</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>wait()</td>
<td>表示线程一直等待，直到其它线程通知，与sleep不同，会释放锁</td>
</tr>
<tr>
<td>wait(long timeout)</td>
<td>指定等待的毫秒数</td>
</tr>
<tr>
<td>notify()</td>
<td>唤醒一个处于等待状态的线程</td>
</tr>
<tr>
<td>notifyAll()</td>
<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>
</tr>
</tbody></table>
<p><strong>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常</strong></p>
<blockquote>
<p>并发协作模型</p>
</blockquote>
<p>并发协作模型”生产者&#x2F;消费者模式” –&gt; 管程法</p>
<ul>
<li>生产者:负责生产数据的模块(可能是方法,对象,线程,进程)</li>
<li>消费者:负责处理数据的模块(可能是方法,对象,线程,进程)</li>
<li>缓冲区:消费者不能直接使用生产者的数据,他们直接有个”缓冲区”</li>
</ul>
<p><strong>生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试：生产者、消费者 利用缓冲区来解决</span></span><br><span class="line"><span class="comment">//生产者、消费者、产品、缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了-------&gt;第&quot;</span> + container.pop().id + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">//    需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//    容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span> &#123;</span><br><span class="line"><span class="comment">//        如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">while</span> (count == chickens.length-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//            通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        如果没有满，我们就需要丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"><span class="comment">//        可以通知消费者消费了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    消费者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        判断能否消费</span></span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//            等待生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"><span class="comment">//        吃完了，通知生产者生产</span></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>并发协作模型”生产者&#x2F;消费者模式” –&gt; 信号灯法</p>
<h2 id="12、线程池"><a href="#12、线程池" class="headerlink" title="12、线程池"></a>12、线程池</h2><p>提前创建好多个线程,放入线程池中,使用时直接获取,使用完放回池中.可以避免频繁创建销毁,实现重复利用.</p>
<p>好处:</p>
<ul>
<li>提高响应速度(减少了创建新线程的时间)</li>
<li>降低资源消耗(重复利用线程池中线程,不需要每次都创建)</li>
<li>便于线程管理<ul>
<li>corePoolSize:核心池的大小</li>
<li>maximumPoolSize:最大线程数</li>
<li>keepAliveTime:线程没有任务时最多保持多长时间后会终止</li>
</ul>
</li>
</ul>
<p>线程池相关API: <strong>ExecutorService</strong> 和 <strong>Executors</strong></p>
<p>ExecutorService:真正的线程池接口,常见子类 ThreadPoolExecutor</p>
<ul>
<li>void execute(Runnable command):执行任务&#x2F;命令,没有返回值,一般用来执行Runnable</li>
<li><T>Future<T> submit(Callable<T> task):执行任务,有返回值,一般用来执行 Callable</T></T></T></li>
<li>void shutdown():关闭连接池</li>
</ul>
<p>Executors:工具类,线程池的工厂类,用于创建并返回不同类型的线程池</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>java 泛型</title>
    <url>/2022/09/23/java-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h1><p>泛型提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型数据结构</p>
<p>泛型的本质就是<code>参数化类型</code>，也就是所操作的数据类型被指定为一个参数</p>
<p>优点：编译时检查类型、减少了数据类型的转换</p>
<span id="more"></span>

<h2 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h2><blockquote>
<p>泛型类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名称 &lt;泛型标识,泛型标识, ...&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">类名&lt;具体的数据类型&gt; 对象名 = <span class="keyword">new</span> 类名&lt;具体的数据类型&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>常用的泛型标识：<font color="red">T、E、K、V</font></p>
</li>
<li><p>泛型在创建对象的时候，没有指定类型将按照object类型来操作。</p>
</li>
<li><p><font color="orange">泛型类不支持基本的数据类型</font></p>
</li>
<li><p>同一泛型类，根据不同的数据类型创建的对象，本质是同一类型。</p>
</li>
</ul>
<blockquote>
<p>从泛型类派生子类</p>
</blockquote>
<ul>
<li><p>子类也是泛型类，子类和父类的泛型类型要一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChildGeneric</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Generic</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类不是泛型类，父类要明确泛型的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChildGeneric</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Generic</span>&lt;String&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>泛型接口</p>
</blockquote>
<ul>
<li>实现类不是泛型类，接口要明确数据类型</li>
<li>实现类也是泛型类，实现类和接口的泛型类型要一致</li>
</ul>
<h2 id="2、2-泛型方法"><a href="#2、2-泛型方法" class="headerlink" title="2、2. 泛型方法"></a>2、2. 泛型方法</h2><p>调用方法的时候指明泛型的具体类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;T,E, ...&gt; 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">	方法体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>public与返回值中间<T>非常重要，可以理解为声明此方法为泛型方法</T></li>
<li>只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法</T></li>
<li><T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T</T></li>
<li>T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</li>
<li><font color="cornflowerblue">泛型方法能使方法独立与类而产生变化</font></li>
<li><font color="cornflowerblue">static 方法要使用泛型能力，就必须使其成为泛型方法</font></li>
</ul>
<blockquote>
<p>泛型可变参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(E... e)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(E e1:e)&#123;</span><br><span class="line">		System.out.printLn(e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3、3-类型通配符"><a href="#3、3-类型通配符" class="headerlink" title="3、3. 类型通配符"></a>3、3. 类型通配符</h2><ul>
<li>类型通配符一般是使用 <code>？</code> 代替具体的类型实参</li>
<li><font color="cyan">类型通配符是类型实参，而不是类型形参。代表任意类型</font></li>
</ul>
<blockquote>
<p>类型通配符的上限</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类/接口&lt;? extends 实参类型&gt;</span><br><span class="line"><span class="comment">//要求该泛型的类型只能是实参类型或实参类型的子类型</span></span><br><span class="line"><span class="comment">//不能填充元素</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>类型通配符的下限</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类/接口 &lt;? <span class="built_in">super</span> 实参类型&gt;</span><br><span class="line"><span class="comment">//要求该泛型的类型只能是实参类型或实参类型的父类类型</span></span><br></pre></td></tr></table></figure>



<h2 id="4、4-类型擦除"><a href="#4、4-类型擦除" class="headerlink" title="4、4. 类型擦除"></a>4、4. 类型擦除</h2><p>​	泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉，称之为类型擦除。</p>
<ul>
<li><p>无限制类型擦除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Erasure</span>&lt;T&gt;&#123;									<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Erasure</span>&#123;	</span><br><span class="line">	<span class="keyword">public</span> T key;												<span class="keyword">public</span> Object key;</span><br><span class="line">	<span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;											<span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> key;					类型擦除						<span class="keyword">return</span> key;</span><br><span class="line">	&#125;															&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(T key)</span>&#123;								<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(Object key)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.key = key;												<span class="built_in">this</span>.key = key;</span><br><span class="line">	&#125;															&#125;</span><br><span class="line">&#125;															&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有限制类型擦除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Erasure</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;						<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Erasure</span>&#123;	</span><br><span class="line">	<span class="keyword">public</span> T key;												<span class="keyword">public</span> Number key;</span><br><span class="line">	<span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;											<span class="keyword">public</span> Number <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> key;					类型擦除						<span class="keyword">return</span> key;</span><br><span class="line">	&#125;															&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(T key)</span>&#123;								<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(Number key)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.key = key;												<span class="built_in">this</span>.key = key;</span><br><span class="line">	&#125;															&#125;</span><br><span class="line">&#125;															&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>擦除方法中的类型定义的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; T <span class="title function_">getValue</span><span class="params">(T value)</span>&#123;							<span class="keyword">public</span> Number <span class="title function_">getValue</span><span class="params">(Number value)</span>&#123;</span><br><span class="line">	retuen value;									类型擦除				<span class="keyword">return</span> value;</span><br><span class="line">&#125;																		&#125;	</span><br></pre></td></tr></table></figure>
</li>
<li><p>桥接方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;												<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">	T <span class="title function_">info</span><span class="params">(T <span class="keyword">var</span>)</span>;															Object <span class="title function_">info</span><span class="params">(Object <span class="keyword">var</span>)</span>;</span><br><span class="line">&#125;																		&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoImpl</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;Integer&gt;&#123;				类型擦除	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoImpl</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span>																<span class="keyword">public</span> Integer <span class="title function_">info</span><span class="params">(Integer <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">info</span><span class="params">(Integer <span class="keyword">var</span>)</span>&#123;											<span class="keyword">return</span> <span class="keyword">var</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">var</span>;															&#125;</span><br><span class="line">	&#125;																	<span class="comment">//桥接方法，保持接口和类的实现关系</span></span><br><span class="line">&#125;																		<span class="meta">@Override</span></span><br><span class="line">                                               	<span class="keyword">public</span> Object <span class="title function_">info</span><span class="params">(Object <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">                                                	retuen <span class="title function_">info</span><span class="params">((Integer)</span><span class="keyword">var</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                              &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、5-泛型和数组"><a href="#5、5-泛型和数组" class="headerlink" title="5、5. 泛型和数组"></a>5、5. 泛型和数组</h2><ul>
<li>可以声明带泛型的数组引用，但是不能直接创建带泛型的数组对象</li>
<li>可以通过 java.lang.reflect.Array 的 newInstance(Class<T>, int) 创建 T[]数组</T></li>
</ul>
<h2 id="6、6-泛型和反射"><a href="#6、6-泛型和反射" class="headerlink" title="6、6. 泛型和反射"></a>6、6. 泛型和反射</h2><ul>
<li><p>Class<T></T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">Constructor&lt;Person&gt; constructor = personClass.getConstructor();</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Constructor<T></T></p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>泛型，泛型擦除</tag>
      </tags>
  </entry>
  <entry>
    <title>java 注解</title>
    <url>/2022/09/23/java-%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><font style="color:#fba801;font-size:50px">Java 注解</font></p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li>注解（Annotation）也叫元数据，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。是代码的特殊标志，这些标志可以在编译、类加载、运行时被读取，并根据这些信息执行相应的处理，以便于其他工具补充信息或者进行部署。</li>
</ul>
<span id="more"></span>

<h2 id="1、注解的类型"><a href="#1、注解的类型" class="headerlink" title="1、注解的类型"></a>1、注解的类型</h2><ol>
<li><p>元注解</p>
<ul>
<li><p>是用于定义注解的注解，包括：</p>
<ul>
<li>@Retention（标明注解被保留的阶段）</li>
<li>@Target（标明注解使用的范围）</li>
<li>@Inherited（标明注解可继承）</li>
<li>@Documented（标明是否生成 javadoc 文档）</li>
</ul>
</li>
<li><p>&#96;&#96;&#96;java<br>public enum RetentionPolicy {<br>  &#x2F;&#x2F; 此注解类型的信息只会记录在源文件中，编译时将被编译器丢弃，也就是说不会保存在编译好的 class 文件中<br>&#x2F;&#x2F; 例如：@SuppressWarnings<br>SOURCE,<br><br>&#x2F;&#x2F; 编译器将注解记录在 class 文件中，但不会加载到 JVM 中。如果一个注解声明没指定范围，则系统默认值就是 Class<br>&#x2F;&#x2F; 例如：@Override<br>CLASS,<br><br><br>&#x2F;&#x2F;注解信息会保留在源文件、类文件中，在执行的时候也会加载到 java 的 jvm 中，因此可以通过反射进行读取<br>&#x2F;&#x2F;例如：Deprecated<br>RUNTIME<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. java 自带的标准注解，使用这些注解后编译器就会进行检查</span><br><span class="line"></span><br><span class="line">   - @Override：标明重写某个方法</span><br><span class="line">   - @Deprecated：标明某个类或方法过时</span><br><span class="line">   - @SuppressWarnings：标明要忽略的警告</span><br><span class="line"></span><br><span class="line">3. 自定义注解，可以根据自己的需求定义注解</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2、注解配置和 xml 配置的关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 可以认为 xml 和注解都是元数据</span><br><span class="line">  - xml：是一种集中式的元数据，与源代码无绑定</span><br><span class="line">  - 注解：是一种分散式的元数据，与源代码紧绑定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 3、注解的作用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 生成文档，通过代码里标识的元数据生成 javadoc 文档</span><br><span class="line">2. 编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证</span><br><span class="line">3. 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码</span><br><span class="line">4. &lt;font color=&#x27;orange&#x27;&gt;运行时动态处理&lt;/font&gt;font&gt;，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4、注解实现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5、注解实现的步骤</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 声明注解</span><br><span class="line">2. 添加注解</span><br><span class="line">3. 获取添加了注解的目标，通常是 Class 对象，Method 对象，Field 对象，还有 Constructor 对象，Parameter 对象，Annotation 对象等</span><br><span class="line">   1. 通过已知对象，获取 Class 对象</span><br><span class="line">   2. 通过全类路径，获取 Class 对象</span><br><span class="line">   3. 扫描包路径，获取 Class 对象</span><br><span class="line">   4. 实现注解处理器，借助反射，获取注解对象，读取注解属性值，然后根据注解及属性值做相应处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 6、不基于 Spring 容器实现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 已知 Class 直接反射</span><br><span class="line"></span><br><span class="line">   1. 声明注解</span><br><span class="line"></span><br><span class="line">      ```java</span><br><span class="line">      // 运行时</span><br><span class="line">      @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">      // 作用在字段上</span><br><span class="line">      @Target(ElementType.FIELD)</span><br><span class="line">      public @interface Person &#123;</span><br><span class="line">          // 支持基本数据类型，枚举</span><br><span class="line">          String name() default &quot;&quot;;</span><br><span class="line">      </span><br><span class="line">          SexEnum sex() default SexEnum.UNKNOWN;</span><br><span class="line">      </span><br><span class="line">          int age() default 18;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>定义一个普通实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义注解处理方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initField</span><span class="params">(HumanTest humanTest)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">HumanTest</span>&gt; aClass = humanTest.getClass();</span><br><span class="line">  			<span class="comment">// 获取字段集</span></span><br><span class="line">        Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            <span class="comment">// 获取字段上的注解</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">declaredAnnotation</span> <span class="operator">=</span> declaredField.getDeclaredAnnotation(Person.class);</span><br><span class="line">            <span class="keyword">if</span>(declaredAnnotation != <span class="literal">null</span>)&#123;</span><br><span class="line">          			<span class="comment">// 获取字段的类型      </span></span><br><span class="line">                Class&lt;?&gt; type = declaredField.getType();</span><br><span class="line">                <span class="comment">// 获取字段的实例</span></span><br><span class="line">                Constructor&lt;?&gt; constructor = type.getConstructor();</span><br><span class="line">                <span class="type">Human</span> <span class="variable">human</span> <span class="operator">=</span> (Human) constructor.newInstance();</span><br><span class="line">                <span class="comment">// 为字段赋值</span></span><br><span class="line">                human.setName(declaredAnnotation.name());</span><br><span class="line">                human.setSex(declaredAnnotation.sex());</span><br><span class="line">                human.setAge(declaredAnnotation.age());</span><br><span class="line">                declaredField.set(humanTest,human);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>类扫码，然后反射</p>
<ol>
<li>spring（spring 工具包）</li>
<li>reflections（反射工具包）</li>
<li>自己实现</li>
</ol>
</li>
</ol>
<h2 id="7、基于-Spring-容器"><a href="#7、基于-Spring-容器" class="headerlink" title="7、基于 Spring 容器"></a>7、基于 Spring 容器</h2><p><img src="https://i.loli.net/2021/11/13/3oDmJlYFtSd62kc.png" alt="spring模块结构"></p>
<p>整个 Spring IOC 容器，核心模块包括构造 Bean 定义，实例化 BeanFactory，注册 Bean 定义，实例化 Bean 并完成依赖注入，提法 Bean 获取。核心组件包括 BeanDefinition 实例对象，BeanFactory 实例对象，Bean 实例对象。</p>
<p><img src="https://i0.hdslb.com/bfs/article/f22c51c4b1cee212114455cf05fca27122597d89.png@942w_242h_progressive.webp" alt="img"></p>
<p>加入钩子后流程：</p>
<p>1.<strong>BeanFactory实例化</strong></p>
<p>2.<strong>注册Bean定义</strong></p>
<p>3.<strong>注册后置处理</strong>，实现 <code>BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry</code></p>
<p>4.<strong>BeanFactory后置处理</strong>，实现 <code>BeanFactoryPostProcessor.postProcessBeanFactory</code></p>
<p>5.<strong>实例化Bean前置处理</strong>，实现 <code>InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation</code></p>
<p>6.<strong>实例化普通单例Bean</strong></p>
<p>7.<strong>依赖注入属性</strong></p>
<p>8.<strong>实例化Bean后置处理</strong>，实现 <code>InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation</code></p>
<p>9.<strong>依赖注入后置处理</strong>，实现<code> InstantiationAwareBeanPostProcessor.postProcessPropertyValues</code></p>
<p>10.<strong>Bean初始化前置处理</strong>，实现 <code>BeanPostProcessor.postProcessBeforeInitialization</code></p>
<p>11.<strong>普通Bean初始化</strong>（ <code>@PostConstruct</code> 注解方法初始化， <code>InitializingBean</code> 接口 <code>afterPropertiesSet</code> 方法初始化， <code>@Bean</code>注解 <code>init-method</code> 属性方法初始化）</p>
<p>12.<strong>Bean初始化后置处理</strong>，实现 <code>BeanPostProcessor.postProcessBeforeInitialization</code></p>
<p>13.<strong>所有普通单例Bean实例化完成</strong></p>
<p>14.<strong>所有普通单例bean实例化后置处理</strong>，实现 <code>SmartInitializingSingleton.afterSingletonsInstantiated</code> </p>
<h3 id="7-1、基于BeanDefinitionRegistryPostProcessor接口"><a href="#7-1、基于BeanDefinitionRegistryPostProcessor接口" class="headerlink" title="7.1、基于BeanDefinitionRegistryPostProcessor接口"></a>7.1、基于BeanDefinitionRegistryPostProcessor接口</h3><ul>
<li>这个接口一般用来<font color="orange">注册bean定义</font>，当然也可以<font color="orange">修改bean定义信息</font>，触发时机在BeanFactory实例化后，注册了一些系统内置的bean定义之后</li>
</ul>
<p><code>ConfigurationClassPostProcessor</code> 就是基于<code> BeanDefinitionRegistryPostProcessor</code>接口实现<code> @Configuration</code>、<code>@Bean</code>、<code>@Import</code>、<code>@ImportResource</code>、<code>@ComponentScan</code>、<code>@PropertySource</code>、<code>@Conditional</code> 等注解的。 </p>
<ol>
<li><p>声明注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">//声明应用在l上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//运行期生效</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Registry &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Registry</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注解实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">ClassPathScanningCandidateComponentProvider</span> <span class="variable">classPathScanningCandidateComponentProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathScanningCandidateComponentProvider</span>(<span class="literal">false</span>);</span><br><span class="line">        classPathScanningCandidateComponentProvider.addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(Registry.class));</span><br><span class="line">        Set&lt;BeanDefinition&gt; beanDefinitions = classPathScanningCandidateComponentProvider.findCandidateComponents(<span class="string">&quot;com.dblones.java.annotation.example05&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(BeanDefinition beanDefinition : beanDefinitions)&#123;</span><br><span class="line">            registry.registerBeanDefinition(beanDefinition.getBeanClassName(), beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-2、基于-BeanFactoryPostProcessor-接口"><a href="#7-2、基于-BeanFactoryPostProcessor-接口" class="headerlink" title="7.2、基于 BeanFactoryPostProcessor 接口"></a>7.2、基于 BeanFactoryPostProcessor 接口</h3><ul>
<li>这个接口一般<font color="orange">修改bean定义信息</font>，触发时机在<code>BeanFactory</code>实例化后，注册了<code>bean</code>定义之后，<code>BeanDefinitionRegistryPostProcessor</code>接口的<code>postProcessBeanDefinitionRegistry</code>方法之后</li>
</ul>
<p>@<code>Configuration</code>注解的代理实现就是在这个阶段通过<code>ConfigurationClassPostProcessor</code>类实现的</p>
<h3 id="7-3、基于-InstantiationAwareBeanPostProcessor-接口"><a href="#7-3、基于-InstantiationAwareBeanPostProcessor-接口" class="headerlink" title="7.3、基于 InstantiationAwareBeanPostProcessor 接口"></a>7.3、基于 InstantiationAwareBeanPostProcessor 接口</h3><ul>
<li>是<code>BeanPostProcessor</code>的子接口，通过接口字面意思翻译该接口的作用是<font color="orange">感知Bean实例化的处理器</font>。就是全面干预Bean实例化过程，包括Bean<code>实例化前后</code>，<code>设置属性</code>，<code>初始化前后</code></li>
</ul>
<p><code>@Autowired</code>、<code>@Value</code>、<code>@Inject</code>、<code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code>、<code>@WebServiceRef</code>、<code>@EJB</code>、<code>@Required</code>就是借助<font color="orange">InstantiationAwareBeanPostProcessor</font>接口实现的，其中<code>@Autowired</code>、<code>@Value</code>、<code>@Inject</code>是<code>AutowiredAnnotationBeanPostProcessor</code>类实现的，<code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code>、<code>@WebServiceRef</code>、<code>@EJB</code>是<font color="orange">CommonAnnotationBeanPostProcessor</font> 类实现的，<code>@Required</code>是<font color="orange">RequiredAnnotationBeanPostProcessor</font>类实现的。</p>
<h3 id="7-4、基于-BeanPostProcessor-接口"><a href="#7-4、基于-BeanPostProcessor-接口" class="headerlink" title="7.4、基于 BeanPostProcessor 接口"></a>7.4、基于 BeanPostProcessor 接口</h3><ul>
<li>对实例Bean进行后置处理, Bean初始化方法<code>调用前</code>被调用或Bean初始化方法<code>调用后</code>被调用</li>
</ul>
<p><code>@PostConstruct</code>、<code>@PreDestroy</code>就是借助<font color="orange">BeanPostProcessor </font>接口实现的，具体是通过<font color="orange">InitDestroyAnnotationBeanPostProcessor</font>类实现的。</p>
<h3 id="7-5、基于-SmartInitializingSingleton-接口"><a href="#7-5、基于-SmartInitializingSingleton-接口" class="headerlink" title="7.5、基于 SmartInitializingSingleton 接口"></a>7.5、基于 SmartInitializingSingleton 接口</h3><ul>
<li>对全体实例bean进行后置处理。</li>
</ul>
<p>Spring Cloud中的<code>@LoadBalanced</code>就是借助<font color="orange">SmartInitializingSingleton</font>接口实现的。</p>
<h3 id="7-6、AOP"><a href="#7-6、AOP" class="headerlink" title="7.6、AOP"></a>7.6、AOP</h3><ul>
<li>对方法进行拦截。</li>
</ul>
<p>常见权限，加解密，日志，方法调用等处理可以借助AOP完成</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>java 设计模式</title>
    <url>/2022/09/23/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="java设计模式"><a href="#java设计模式" class="headerlink" title="java设计模式"></a>java设计模式</h1><h2 id="1、设计模式中常用的七大原则"><a href="#1、设计模式中常用的七大原则" class="headerlink" title="1、设计模式中常用的七大原则"></a>1、设计模式中常用的七大原则</h2><ol>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>依赖倒转（倒置）原则</li>
<li>里氏替换原则</li>
<li>开闭原则 ocp</li>
<li>迪米特法则（最少知道原则）</li>
<li><strong>合成复用原则（组合优于继承原则）</strong></li>
</ol>
<span id="more"></span>

<blockquote>
<p>设计模式的原则</p>
</blockquote>
<ul>
<li>代码的重用性（相同功能的代码不用多次编写）</li>
<li>可读性（编程的规范性）</li>
<li>可扩展性（当需要增加新的功能时，非常的方便，称为可维护）</li>
<li>可靠性（当我们增加新的功能后对原来的功能没有影响）</li>
<li>使程序呈现高内聚，低耦合的特性</li>
</ul>
<p>学习设计模式，脑袋里要始终绷紧两根弦：</p>
<ol>
<li><p>开发代码的程序员，被分为两种角色：</p>
<p>作者（服务端程序员）</p>
<p>用户（客户端程序员）</p>
</li>
<li><p>我们手头并不会时时刻刻都拥有作者的源码，就算有源码也不能修改，因为要符合开闭原则。</p>
</li>
</ol>
<h3 id="1-1、单一职责原则"><a href="#1-1、单一职责原则" class="headerlink" title="1.1、单一职责原则"></a>1.1、单一职责原则</h3><p>每个方法、每个类、每个框架都只负责一件事情.<br>字符流：Reader默认查询的码表是与操作系统一致的码表，我们的操作系统是中文的，所以Reader就会使用<code>GBK码表</code>，而<font color="orange">GBK码表一个汉字占两个字节</font>，且汉字的两个字节都是以<code>1</code>开头的。<br>读取步骤：先读取到记事本中的数字45489 —&gt; gbk —&gt; 北 —&gt; unicode —&gt; 21271</p>
<p> 优势：</p>
<ol>
<li>代码的重用性提高了</li>
<li>代码的可读性提高了，此时的代码就像一个大纲一样</li>
<li>推荐：方法的语句在同一个抽象层级之上</li>
</ol>
<h3 id="1-2、开闭原则"><a href="#1-2、开闭原则" class="headerlink" title="1.2、开闭原则"></a>1.2、开闭原则</h3><ul>
<li><font color="cornflowerblue">对扩展新功能开放的</font></li>
<li><font color="cornflowerblue">对修改原有功能是关闭的</font></li>
</ul>
<p>比如：有一个刮胡刀，刮胡刀的作用就是刮胡子，现在想让刮胡刀具备吹风机的能力。</p>
<ol>
<li>违反开闭原则的做法是：把吹风机的功能加上了，可是不能刮胡子了。</li>
<li>符合开闭原则的做法是：把吹风的功能加上了，且没有影响以前的刮胡子功能。</li>
</ol>
<p>补充：</p>
<ul>
<li>如果一个类，从头到尾都是自己写的，那么可以随时随地修改源码，因为作者是自己。</li>
<li>如果一个类 ，作者不是自己，就不能修改代码，因为要符合开闭原则。</li>
</ul>
<h3 id="1-3、接口隔离原则"><a href="#1-3、接口隔离原则" class="headerlink" title="1.3、接口隔离原则"></a>1.3、接口隔离原则</h3><p>客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p>使用多个专门的接口比使用单一的总接口要好。</p>
<p>IUserDao 只负责 user 表的增删改查</p>
<p>一个类对另外一个类的依赖性应当是建立在最小的接口上的。</p>
<h3 id="1-4、依赖倒置原则"><a href="#1-4、依赖倒置原则" class="headerlink" title="1.4、依赖倒置原则"></a>1.4、依赖倒置原则</h3><p><font color="green">上层不能依赖于下层，它们都应该依赖于抽象。</font></p>
<p>举例：dao，service通过dao接口+dao工厂来访问下层的dao实现的。在以后扩展dao实现的时候上层service是不用改动的。</p>
<p>程序要依赖于抽象接口，不要依赖于具体实现，要求对抽象进行编程，不要对实现进行编程，降低客户与实现模块间的耦合。</p>
<ul>
<li>上层：调用别的方法的就是上层，被其它方法调用的就是下层。</li>
</ul>
<p><img src="/.io//desktop\typora-notes\图\类与类之间的关系.png" alt="类与类之间的关系"></p>
<p><img src="/.io//desktop\typora-notes\图\依赖倒置.png" alt="依赖倒置"></p>
<p>类的实例化顺序：</p>
<ol>
<li>先执行静态块（在整个运行期间只执行一次）</li>
<li>执行构造代码块</li>
<li>执行构造器</li>
</ol>
<ul>
<li>构造代码块总是随着构造器的执行而执行，且先执行构造代码块</li>
<li>类中的实例成员等价于构造代码块，也就是说构造代码块执行的时候，也就会执行实例成员的代码。</li>
<li>类中的静态成员等价于静态块，也就是说，静态块执行的时候，也就会执行静态成员代码。</li>
</ul>
<p>加载类的四种可能：</p>
<ol>
<li>调构造器</li>
<li>调 class.forName</li>
<li>调静态属性</li>
<li>调静态方法</li>
</ol>
<h3 id="1-5、迪米特法则（最少知道原则）：封装"><a href="#1-5、迪米特法则（最少知道原则）：封装" class="headerlink" title="1.5、迪米特法则（最少知道原则）：封装"></a>1.5、迪米特法则（最少知道原则）：封装</h3><p>一个类，对于其它类要知道的越深越好，对实现细节隐藏</p>
<p>只和朋友通信</p>
<blockquote>
<p>什么是朋友？</p>
</blockquote>
<p>a. 类中的字段</p>
<p>b. 方法的参数</p>
<p>c. 方法的返回值</p>
<p>d. 方法中实例化出来的对象</p>
<h3 id="1-6、里氏替换原则"><a href="#1-6、里氏替换原则" class="headerlink" title="1.6、里氏替换原则"></a>1.6、里氏替换原则</h3><p>任何能使用父类对象的地方，都应该透明的<font color="green">替换为子类对象</font>。</p>
<p>也就是说：子类对象可以随时随地替换父类对象，且替换完以后，语法不会报错，业务逻辑也不会出现问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p><code>方法重写</code>：在子类和父类中，出现了返回类型相同、方法名相同、方法参数相同的方法时，构成方法重写。</p>
<p>方法重写的两个限制：</p>
<ol>
<li>子类重写父类的方法时，子类方法的访问修饰符不能比父类的更严格。</li>
<li>子类重写父类的方法时，子类方法不能比父类抛出更多的异常。</li>
</ol>
<p><font color="cyan">保证子类对象在替换父类对象时，语法不会报错。符合里氏替换原则</font></p>
<p>继承的作用：</p>
<ol>
<li>提高代码的复用性</li>
<li>多态的前提</li>
</ol>
<p>实例：正方形不是长方形、鸵鸟非鸟</p>
<p>除了判定 <font color="purple">is a</font> 的关系还有在<font color="yellow">业务逻辑上子类是否能完全替代父类。</font></p>
<h3 id="1-7、组合优于继承"><a href="#1-7、组合优于继承" class="headerlink" title="1.7、组合优于继承"></a>1.7、组合优于继承</h3><p><font color="yellow">如果只是为了重用代码优先考虑组合</font></p>
<p>类与类之间的关系：</p>
<ol>
<li><p>继承</p>
</li>
<li><p>依赖：<font color="cornflowerblue">一个类的对象作为另一个类的局部变量</font></p>
</li>
<li><p>关联：<font color="cornflowerblue">一个类的对象作为另一个类的字段</font></p>
<p>关联可细分为：</p>
<ul>
<li>组合：关系强，鸟和翅膀的关系</li>
<li>聚合：关系弱，大雁与雁群的关系</li>
</ul>
</li>
</ol>
<p><font color="yellow">组合优于继承中的组合即是指关联关系</font></p>
<p><font color="yellow">继承重写方法有改变父类调用结构的风险</font></p>
<p><font color="orange">如果父类作者和子类作者不是用一个人就别继承</font></p>
<p>父类的作者不知道未来的子类会重写自己的哪个方法</p>
<p>子类作者不知道未来的父类会添加什么新方法</p>
<p>自己写代码，继承、重写随便使用。</p>
<p>重点是：<font color="red">不要修改别人的代码，包括继承去重写别人的方法</font></p>
<h2 id="2、设计模式"><a href="#2、设计模式" class="headerlink" title="2、设计模式"></a>2、设计模式</h2><h3 id="2-1、简单工厂模式"><a href="#2-1、简单工厂模式" class="headerlink" title="2.1、简单工厂模式"></a>2.1、简单工厂模式</h3><p>无需提供具体的子类类名，只需要提供一个字符串即可得到相应的实例对象，当<font color="cornflowerblue">子类的类名更换或者增加子类时</font>我们都无需修改客户端代码，只需要在简单工厂类上增加一个分支判断代码即可。</p>
<p><img src="/.io//desktop\typora-notes\图\面向接口编程.png" alt="img"></p>
<ol>
<li><p>产品</p>
<ul>
<li>类</li>
</ul>
</li>
<li><p>抽象产品</p>
<ul>
<li>抽象类、接口</li>
</ul>
</li>
<li><p>产品簇</p>
<ul>
<li>多个有内在联系，或者是有逻辑关系的产品</li>
</ul>
</li>
<li><p>产品等级</p>
</li>
</ol>
<p>简单工厂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoddle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单工厂，作者只需要修改switch即可，服务端代码的变动不会对客户端的使用有任何影响，只要继续保证 1 对应 Hamburger 2 对应 RiceNoddle</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> Food <span class="title function_">getFood</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                food = <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                food = <span class="keyword">new</span> <span class="title class_">RiceNoddle</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> FoodFactory.getFood(<span class="number">1</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>优点：</p>
<ol>
<li><p>把具体的产品类型从客户端代码中解耦出来。</p>
</li>
<li><p>服务器端，如果修改了具体产品的类名，客户端也不知道。</p>
<p>这便符合了<font color="cornflowerblue">”面向接口编程“</font>的思想</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li>客户端不得不死记硬背那些常量与具体产品的映射关系。</li>
<li>如果具体产品特别多，则简单工厂将会变得十分臃肿。</li>
<li>最重要的是，客户端需要扩展具体产品时，势必要修改简单工厂中的代码，这样就违反了<font color="cornflowerblue">”开闭原则“</font>。</li>
</ol>
<blockquote>
<p>简单工厂UML</p>
</blockquote>
<p><img src="/.io//desktop\typora-notes\图\简单工厂UML图-1626145217400.png" alt="简单工厂UML图"></p>
<p>写代码需要考虑： <font color="red">重用性、扩展性、能不能随意替换</font></p>
<h3 id="2-2、工厂方法模式"><a href="#2-2、工厂方法模式" class="headerlink" title="2.2、工厂方法模式"></a>2.2、工厂方法模式</h3><p>产品等级少时考虑工厂方法模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//===========================服务端=====================================</span></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoddle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line">    Food <span class="title function_">getFood</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HamburgerFactory</span> <span class="keyword">implements</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoddleFactory</span> <span class="keyword">implements</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RiceNoddle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Business</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">taste</span><span class="params">(FoodFactory ff)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> ff.getFood();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委1，品尝&quot;</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委2，品尝&quot;</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委3，品尝&quot;</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============================客户端=====================================</span></span><br><span class="line"><span class="comment">//满足可扩展性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Noddle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoddleFactory</span> <span class="keyword">implements</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Noddle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HamburgerFactory</span> <span class="variable">hamburgerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HamburgerFactory</span>();</span><br><span class="line">        <span class="comment">// Food food = hamburgerFactory.getFood();</span></span><br><span class="line">        <span class="comment">// food.eat();</span></span><br><span class="line">        Business.taste(hamburgerFactory);</span><br><span class="line">        <span class="comment">//自己扩展的业务也可以使用服务端的业务逻辑</span></span><br><span class="line">        <span class="type">NoddleFactory</span> <span class="variable">noddleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoddleFactory</span>();</span><br><span class="line">        Business.taste(noddleFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>优点：</p>
<ol>
<li>仍然具有简单工厂的优点：<font color="yellow">服务器端修改了具体的产品的类名以后，客户端并不知道</font>（最少知道原则）</li>
<li>当客户端需要扩展一个新的产品时，不需要修改作者原来的代码，只是扩展一个新的工厂而已。</li>
<li>作者有责任保证<font color="red">工厂名</font>尽可能稳定。</li>
</ol>
<p>缺点：</p>
<p>​	如果有多个产品等级，那么工厂类的数量就会爆炸式的增长。</p>
<p><img src="/.io//desktop\typora-notes\图\工厂方法UML.png" alt="工厂方法UML"></p>
<h3 id="2-3、抽象工厂模式"><a href="#2-3、抽象工厂模式" class="headerlink" title="2.3、抽象工厂模式"></a>2.3、抽象工厂模式</h3><p>抽象工厂中，可以生产多个产品，这多个产品之间，必须有内在联系。</p>
<p>同一个工厂中的产品都属于一个产品簇! 不能把不同产品簇中的产品混合到一个抽象工厂的实现类中。</p>
<p>面向对象三大特点：</p>
<ul>
<li>封装<ul>
<li>对外隐藏复杂的实现细节，暴露出简单的实现方法</li>
<li>隔离变化（实现接口的方法）</li>
<li>提高代码的重用性</li>
<li>保护数据</li>
</ul>
</li>
<li>继承<ul>
<li>提高代码的重用性。（如果仅仅是为了重用，可以优先考虑<font color="red">组合</font>。）</li>
<li>多态的前提</li>
</ul>
</li>
<li>多态<ul>
<li>多态的前提：继承</li>
<li>多态的作用：提高代码的扩展性（dao、jdbc）</li>
<li>多态的体现：向上转型</li>
<li>多态的限制：向上转型发生时，子类独有的成员无法使用</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//===========================服务端=====================================</span></span><br><span class="line"><span class="comment">// 针对工厂方法的问题：当有多个产品等级时，比如（食物、饮料、甜品等）工厂类会很多</span></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoddle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cola</span> <span class="keyword">implements</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可口可乐，你值得拥有&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IcePeak</span> <span class="keyword">implements</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从小就喝冰峰&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象工厂，名字不能具体，应为它不仅仅生产食物，也生产饮料</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    Food <span class="title function_">getFood</span><span class="params">()</span>;</span><br><span class="line">    Drink <span class="title function_">getDrink</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KFCFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">   	 <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cola</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SanQinFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RiceNoddle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IcePeak</span>();</span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Business</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">taste</span><span class="params">(Factory ff)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> ff.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink</span> <span class="operator">=</span> ff.getDrink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委1，品尝&quot;</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        drink.drink();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Food</span> <span class="variable">food2</span> <span class="operator">=</span> ff.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink2</span> <span class="operator">=</span> ff.getDrink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委2，品尝&quot;</span>);</span><br><span class="line">        food2.eat();</span><br><span class="line">        drink2.drink();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Food</span> <span class="variable">food3</span> <span class="operator">=</span> ff.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink3</span> <span class="operator">=</span> ff.getDrink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委3，品尝&quot;</span>);</span><br><span class="line">        food3.eat();</span><br><span class="line">        drink3.drink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============================客户端=====================================</span></span><br><span class="line"><span class="comment">//满足可扩展性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LP</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃凉皮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fenta</span> <span class="keyword">implements</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;芬达真好喝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaoJiFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LP</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fenta</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Business.taste(<span class="keyword">new</span> <span class="title class_">KFCFactory</span>);</span><br><span class="line">        <span class="comment">//自己扩展的业务也可以使用服务端的业务逻辑</span></span><br><span class="line">        <span class="type">NoddleFactory</span> <span class="variable">noddleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoddleFactory</span>();</span><br><span class="line">        Business.taste(noddleFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/.io//desktop\typora-notes\图\抽象工厂UML.png" alt="抽象工厂UML"></p>
<p>优点：</p>
<ol>
<li>仍然有简单工厂和工厂方法的优点</li>
<li>更重要的是，抽象工厂把工厂类的数量减少了！ 无论有多少个产品等级，工厂就一套。</li>
</ol>
<p>缺点：</p>
<ol>
<li>当产品等级发生变化时（增加产品等级、删除产品等级），都要引起所有以前工厂代码的修改。这就违反了”开闭原则“。</li>
</ol>
<p>结论：</p>
<p>​	当产品等级比较固定时，可以考虑使用抽象工厂。</p>
<p>​	如果产品等级经常变化则不建议使用抽象工厂。</p>
<p> <font color="red">如果产品不扩充，简单工厂最好、如果产品经常需要扩展，则使用工厂方法、如果产品等级很多就用抽象工厂。</font></p>
<h3 id="2-4、原型模式"><a href="#2-4、原型模式" class="headerlink" title="2.4、原型模式"></a>2.4、原型模式</h3><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<ol>
<li>必须让目标实现 Cloneable 接口，该接口中没有任何抽象方法。这样的接口仅仅是一个”标记接口“，作用是告诉 jvm ，任何实现了该 Cloneable 接口的类的对象，可以被克隆。</li>
<li>必须重写 java.lang.Object 的 clone 方法，一定要把该方法的访问修饰符重写为 public 不然无法调用 clone 方法。<ul>
<li>clone 方不会引起构造器的调用，clone 方法是直接复制内存中的2进制，效率更高。</li>
<li>克隆出的对象和原先的对象地址不一致，是两个不同空间中的对象。</li>
</ul>
</li>
<li>浅拷贝：把原来对象的二进制原样复制，导致原来对象里面包含的 <font color="cornflowerblue">引用字段对象的地址</font> 也一块复制，原来对象和克隆对象中 <font color="cornflowerblue">引用字段对象的地址</font> 还是 <font color="orange">一样</font> 的！ </li>
<li>深拷贝：把对象中的引用字段对象也拷贝<ol>
<li>引用字段对象较少，层级较浅时，可以在对象的 clone 方法中，将对象的应用字段对象再 clone。</li>
<li>使用序列化的方式，将对象序列化到内存流中再重写读取（<font color="cornflowerblue">ByteArrayOutputStream、ByteArrayInputStream</font>），此时会重新开辟新的存储空间接收对象。</li>
</ol>
</li>
</ol>
<p>java 创建对象的四种方式：</p>
<ol>
<li>new</li>
<li>反射</li>
<li>克隆</li>
<li>序列化</li>
</ol>
<h3 id="2-5、建造者模式"><a href="#2-5、建造者模式" class="headerlink" title="2.5、建造者模式"></a>2.5、建造者模式</h3><p>工厂模式，都是直接实例化出一个类的对象即可</p>
<p>建造者模式，是在实例化出类的对象之后，还要给该<font color="cornflowerblue">对象的属性赋值</font></p>
<p>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gpu=&#x27;&quot;</span> + gpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, Hd=&#x27;&quot;</span> + Hd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String Hd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">(String gpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gpu = gpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(String memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Hd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">(String hd)</span> &#123;</span><br><span class="line">        Hd = hd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//固定建造的流程</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Computer <span class="title function_">builder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddleComputerBuilder</span> <span class="keyword">implements</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setName(<span class="string">&quot;联想&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setCpu(<span class="string">&quot;i7 7000hq&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setGpu(<span class="string">&quot;gtx1060&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setMemory(<span class="string">&quot;32g&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setHd(<span class="string">&quot;250g固态 + 1T 机械&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvanceComputerBuilder</span> <span class="keyword">implements</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setName(<span class="string">&quot;外星人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setCpu(<span class="string">&quot;i9 7000hq&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setGpu(<span class="string">&quot;gtx1080T&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setMemory(<span class="string">&quot;64g&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setHd(<span class="string">&quot;2T固态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接封装 指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">(ComputerBuilder cb)</span>&#123;</span><br><span class="line">        cb.setName();</span><br><span class="line">        cb.setCpu();</span><br><span class="line">        cb.setGpu();</span><br><span class="line">        cb.setMemory();</span><br><span class="line">        cb.setHd();</span><br><span class="line">        <span class="keyword">return</span> cb.builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MiddleComputerBuilder</span> <span class="variable">middleComputerBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MiddleComputerBuilder</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>().build(middleComputerBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">AdvanceComputerBuilder</span> <span class="variable">advanceComputerBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvanceComputerBuilder</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>().build(advanceComputerBuilder);</span><br><span class="line"></span><br><span class="line">        System.out.println(builder);</span><br><span class="line">        System.out.println(build);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>优点：</p>
<ol>
<li>创建对象的过程稳定不变（因为有 ComputerBuilder 接口来稳定过程）</li>
<li>创建对象的过程只写了一次，没有重复代码（指挥者完成）</li>
<li>当需要扩展指挥者的时候，不用修改之前的代码，这符合了开闭原则</li>
</ol>
<p><img src="/.io//desktop\typora-notes\图\建造者模式UML.png" alt="建造者模式UML"></p>
<h3 id="2-6、装饰器设计模式"><a href="#2-6、装饰器设计模式" class="headerlink" title="2.6、装饰器设计模式"></a>2.6、装饰器设计模式</h3><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>
<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>jdk中的流就是典型的装饰器模式</p>
<p><img src="/.io//desktop\typora-notes\图\java.io流装饰器模式.webp" alt="java.io流装饰器模式"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Desc</span> 装饰器模式</span></span><br><span class="line"><span class="comment"> * 业务场景：星巴克卖咖啡，一开始只有四种咖啡：</span></span><br><span class="line"><span class="comment"> * Decaf Espresso DarkRoast HouseBlend</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有咖啡都有共性，所以开发人员把它们的共性提到一个父类中：Beverage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Beverage</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断两个类之间能不能有继承关系，主要看这两个类之间有没有 “is a” 关系，并且还要符合里氏替换原则</span></span><br><span class="line"><span class="comment"> * 以上只是原则，不是语法强制，也就是说，在特定的情况下，可以违反这个规则，比如在装饰器模式中就是这样</span></span><br><span class="line"><span class="comment"> * 尽管调料不是饮料，但是为了制作出装饰器模式，只能让调料去继承饮料</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Condiment</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="comment">//让调料类关联饮料类</span></span><br><span class="line">    <span class="keyword">protected</span> Beverage beverage;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Condiment</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;调料&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=======================饮料</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decaf</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decaf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;无咖啡因咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Espresso</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Espresso</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;浓缩咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HouseBlend</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseBlend</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;混合咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DarkRoast</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DarkRoast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;焦炒咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//====================调料</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Milk</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot; 牛奶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soy</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Soy</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">0.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot; 豆浆&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoKa</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MoKa</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">0.4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot; 摩卡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bubble</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bubble</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot; 泡沫&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================================</span></span><br><span class="line"><span class="comment">// 扩展饮料</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;茶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩展调料</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rival</span> <span class="keyword">extends</span> <span class="title class_">Condiment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rival</span><span class="params">(Beverage beverage)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beverage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// beverage 包装的对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;枸杞&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一层一层装饰</span></span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decaf</span>();</span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Milk</span>(b1);</span><br><span class="line">        <span class="type">Beverage</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoKa</span>(b2);</span><br><span class="line">        System.out.println(b3.getDescription()+<span class="string">&quot;:&quot;</span>+b3.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变化：</span></span><br><span class="line"><span class="comment"> * 星巴克老板为了提高自身的竞争力，想出了一个新的业务：调料，也就是可以给咖啡中放调料：牛奶、豆浆、摩卡、泡沫（只是为了好玩）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>









<p><img src="/.io//desktop\typora-notes\图\装饰器模式调用图解.png" alt="装饰器模式调用图解"></p>
<div style="color:red" align="center">一层一层装饰</div>

<blockquote>
<p>装饰器UML类图</p>
</blockquote>
<p><img src="/.io//desktop\typora-notes\图\装饰器模式UML.png" alt="装饰器模式UML"></p>
<p>优点：</p>
<ol>
<li>加入一个新的饮料和新的调料不会违反开闭原则</li>
</ol>
<p>缺点：</p>
<ol>
<li>类还是有点多</li>
</ol>
<h3 id="2-7、模板方法设计模式"><a href="#2-7、模板方法设计模式" class="headerlink" title="2.7、模板方法设计模式"></a>2.7、模板方法设计模式</h3><p>一个抽象类公开定义了执行它的方法的方式&#x2F;模板，它的子类可以按需要重写方法实现，但调用将以<font color="cornflowerblue">抽象类中定义的方法</font>进行，这种类型的设计模式属于行为型模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        code();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============================================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-8、适配器模式"><a href="#2-8、适配器模式" class="headerlink" title="2.8、适配器模式"></a>2.8、适配器模式</h3><p>一个类的接口转换成客户希望的另一个接口，适配器模式让那些接口不兼容的类可以一起工作。</p>
<p>为什么非要转换接口？</p>
<ul>
<li>原接口和目标接口都已经存在，不易修改接口代码</li>
<li>抽象接口希望复用已有组件的逻辑</li>
</ul>
<p>定义接口，抽象类实现接口，并定义一些公用的逻辑，子类继承抽象父类，并实现各自特定的逻辑</p>
<p>适用场景：</p>
<ol>
<li>封装第三方组件，如缓存组件</li>
<li>读取配置文件，支持多种文件格式</li>
<li>保持多态性，一个接口，多种实现</li>
</ol>
<p><font color="red">对外暴露统一的 API</font></p>
<p>合成复用原则：</p>
<ul>
<li>组合优于继承</li>
<li>设计模式用继承对行为变化进行分类，而不是用来继承来复用逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========================</span></span><br><span class="line"><span class="comment">//要求加三个数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcAdapter</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calc calc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalcAdapter</span><span class="params">(Calc calc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calc = calc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calc.add(a,calc.add(b,c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用接口，达到完全解耦</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">process</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">StringProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpCase</span> <span class="keyword">extends</span> <span class="title class_">StringProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="comment">//返回类型的协变，向上转型</span></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toUpperCase(Locale.ROOT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownCase</span> <span class="keyword">extends</span> <span class="title class_">StringProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((String) input).toLowerCase(Locale.ROOT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Splitter</span> <span class="keyword">extends</span> <span class="title class_">StringProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String) input).split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apply</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Processor p, Object s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Processor: &quot;</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;how are you!&quot;</span>;</span><br><span class="line">        process(<span class="keyword">new</span> <span class="title class_">UpCase</span>(), str);</span><br><span class="line">        process(<span class="keyword">new</span> <span class="title class_">DownCase</span>(), str);</span><br><span class="line">        process(<span class="keyword">new</span> <span class="title class_">Splitter</span>(), str);</span><br><span class="line"></span><br><span class="line">        process(<span class="keyword">new</span> <span class="title class_">FilterAdapter</span>(<span class="keyword">new</span> <span class="title class_">LowPass</span>(<span class="number">8</span>)),<span class="keyword">new</span> <span class="title class_">WaveForm</span>());</span><br><span class="line">        process(<span class="keyword">new</span> <span class="title class_">FilterAdapter</span>(<span class="keyword">new</span> <span class="title class_">BandPass</span>(<span class="number">8</span>,<span class="number">9</span>)),<span class="keyword">new</span> <span class="title class_">WaveForm</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaveForm</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> counter;</span><br><span class="line">    <span class="comment">//id 自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> counter++;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WaveForm&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发现了一个电子滤波器类，恰巧与 Processor 有相同的接口结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WaveForm <span class="title function_">process</span><span class="params">(WaveForm input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LowPass</span> <span class="keyword">extends</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="type">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LowPass</span><span class="params">(<span class="type">double</span> cutoff)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WaveForm <span class="title function_">process</span><span class="params">(WaveForm input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BandPass</span> <span class="keyword">extends</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="type">double</span> lowCutoff, highCutoff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BandPass</span><span class="params">(<span class="type">double</span> lowCutoff, <span class="type">double</span> highCutoff)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.lowCutoff = lowCutoff;</span><br><span class="line">        <span class="built_in">this</span>.highCutoff = highCutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WaveForm <span class="title function_">process</span><span class="params">(WaveForm input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器中的代码将接受你所拥有的接口，并产生你所需要的接口</span></span><br><span class="line"><span class="comment"> * FilterAdapter 的构造器接受你所拥有的 Filter，然后生成具有你所需要的 Processor 接口的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilterAdapter</span> <span class="keyword">implements</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Filter filter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FilterAdapter</span><span class="params">(Filter filter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filter.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WaveForm <span class="title function_">process</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filter.process((WaveForm) input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-9、策略模式"><a href="#2-9、策略模式" class="headerlink" title="2.9、策略模式"></a>2.9、策略模式</h3><p>一个类的行为或其算法可以在<font color="orange">运行时</font>更改。</p>
<p>创建表示各种策略的对象和一个行为，随着策略对象改变而改变的 <code>context </code>对象。策略对象改变 <code>context </code>对象的执行算法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MallardDuck</span> <span class="variable">mallardDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MallardDuck</span>();</span><br><span class="line">        mallardDuck.performFly();</span><br><span class="line">        mallardDuck.performQuack();</span><br><span class="line">        mallardDuck.swim();</span><br><span class="line">        mallardDuck.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quack</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Squeak</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吱吱叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MuteQuack</span> <span class="keyword">implements</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不会叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyWithWings</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用翅膀飞~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyNoWay</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞不起来的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyWithRocket</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;背上绑个窜天猴飞~！！~！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> FlyBehavior fb;</span><br><span class="line">    <span class="keyword">protected</span> QuackBehavior qb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游泳...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performFly</span><span class="params">()</span> &#123;</span><br><span class="line">        fb.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performQuack</span><span class="params">()</span> &#123;</span><br><span class="line">        qb.quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallardDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MallardDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fb = <span class="keyword">new</span> <span class="title class_">FlyWithWings</span>();</span><br><span class="line">        <span class="built_in">this</span>.qb = <span class="keyword">new</span> <span class="title class_">Quack</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外观是野鸡！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedHeadDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedHeadDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fb = <span class="keyword">new</span> <span class="title class_">FlyWithWings</span>();</span><br><span class="line">        <span class="built_in">this</span>.qb = <span class="keyword">new</span> <span class="title class_">Quack</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外观是红头鸭！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoyDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecoyDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fb = <span class="keyword">new</span> <span class="title class_">FlyNoWay</span>();</span><br><span class="line">        <span class="built_in">this</span>.qb = <span class="keyword">new</span> <span class="title class_">MuteQuack</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外观是诱饵鸭！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="/.io//desktop\typora-notes\图\281006154531426.png" alt="281006154531426">



<p>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。</p>
<p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p>
<p><strong>何时使用：</strong>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p>
<p><strong>如何解决：</strong>将这些算法封装成一个一个的类，任意地替换。</p>
<p><strong>关键代码：</strong>实现同一个接口。</p>
<p><strong>应用实例：</strong></p>
<p> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。</p>
<p> 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</p>
<p> 3、JAVA AWT 中的 LayoutManager。</p>
<p><strong>优点：</strong></p>
<p> 1、算法可以自由切换。</p>
<p> 2、避免使用多重条件判断。</p>
<p> 3、扩展性良好。</p>
<p><strong>缺点：</strong> </p>
<p>1、策略类会增多。 </p>
<p>2、所有策略类都需要对外暴露。</p>
<p><strong>使用场景：</strong></p>
<p> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</p>
<p> 2、一个系统需要动态地在几种算法中选择一种。</p>
<p> 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>
<p><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<h4 id="2-9-1、设计思想"><a href="#2-9-1、设计思想" class="headerlink" title="2.9.1、设计思想"></a>2.9.1、设计思想</h4><ol>
<li>不变性与可变性<ul>
<li>使用抽象固定不变的</li>
<li>使用具体子类封装可变的</li>
<li>寻找变化，将其封装在一个单独的类，然后将这个类的抽象包含在另一个类</li>
</ul>
</li>
<li>减少多重条件判断<ul>
<li>使用策略模式可以避免多重条件判断</li>
<li>将策略判断逻辑转移</li>
</ul>
</li>
<li>满足开闭原则<ul>
<li>结合工厂模式，生成具体的策略子类实例对象</li>
<li>新增策略，符合开闭原则</li>
</ul>
</li>
<li>重点在组织算法<ul>
<li>策略模式的重心不是如何实现算法，而是如何组织这些算法，从而让程序结构更加灵活，具有更好的维护性和扩展性</li>
</ul>
</li>
</ol>
<h3 id="2-10、代理模式"><a href="#2-10、代理模式" class="headerlink" title="2.10、代理模式"></a>2.10、代理模式</h3><p>为其它对象提供一种代理，以控制对这种对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<p><font color="red">真实对象需要实现接口</font></p>
<blockquote>
<p>jdk 中动态代理的使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一个参数：类加载器</span></span><br><span class="line"><span class="comment">         * 实例化一个对象，就必须调用类的构造器，在构造器调用之前，jvm会加载该类的字节码</span></span><br><span class="line"><span class="comment">         * jvm 恰恰就是使用 ”类加载器“ 来加载类的字节码的,这一步通常由 jvm 自动完成</span></span><br><span class="line"><span class="comment">         * 以下代码是动态创建一个代理对象的代码，是一种不太正常的创建对象的方式</span></span><br><span class="line"><span class="comment">         * 但凡创建对象，势必要加载字节码，加载字节码就必须要使用类加载器，与构造器实例化不同的是：</span></span><br><span class="line"><span class="comment">         * 使用构造器实例化对象时，jvm 会自动找到类加载器，而以下代码，必须我们手动传入类加载器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ProxyPatterns.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第二个参数，解决传入的类加载器加载的是哪个类的字节码</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 对比，使用构造器创建对象时，加载的字节码很明确</span></span><br><span class="line"><span class="comment">         * new String()     jvm 加载 String.class</span></span><br><span class="line"><span class="comment">         * new Date()     jvm 加载 Date.class</span></span><br><span class="line"><span class="comment">         * new ArrayList()     jvm 加载 ArrayList.class</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 动态代理创建对象时，加载的字节码是在运行期间 动态生成的字节码 ，它是不需要源代码的</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 动态代理API动态生成的字节码内容是根据第二个参数生成的，会动态生成一个实现了目标接口的类的字节码</span></span><br><span class="line"><span class="comment">         * 在本例中就是生成一个实现了 ICalc 接口的类的字节码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class[] interfaces = &#123;ICalc.class&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第三个参数：调用处理器，InvocationHandler</span></span><br><span class="line"><span class="comment">         * 动态代理会加载自己动态生成的字节码，且这个字节码是根据某些个接口生成的，</span></span><br><span class="line"><span class="comment">         * 在本例中就是根据 ICalc 接口生成的实现了 ICalc 接口的类的字节码</span></span><br><span class="line"><span class="comment">         * 实现了一个接口，就要实现其中的抽象方法，第三个参数决定这些抽象方法的方法体。</span></span><br><span class="line"><span class="comment">         * 本例中 MyHandler 类的 invoke 方法就是方法体的内容，可以这样理解</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * class 动态生成的类 implements ICalc&#123;</span></span><br><span class="line"><span class="comment">         *  int add(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">         *      new MyHandler().invoke();</span></span><br><span class="line"><span class="comment">         *  &#125;</span></span><br><span class="line"><span class="comment">         *  int sub(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">         *      new MyHandler().invoke();</span></span><br><span class="line"><span class="comment">         *  &#125;</span></span><br><span class="line"><span class="comment">         *  int mul(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">         *      new MyHandler().invoke();</span></span><br><span class="line"><span class="comment">         *  &#125;</span></span><br><span class="line"><span class="comment">         *  int div(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">         *      new MyHandler().invoke();</span></span><br><span class="line"><span class="comment">         *  &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//真实对象</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="comment">//创建一个代理对象时，需要传入三个对象</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">proxy</span> <span class="operator">=</span> (ICalc) Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> <span class="title class_">MyHandler</span>(calc));</span><br><span class="line">        <span class="comment">//代理对象的调用都会进入代理对象的调用处理器中，而不会直接进入真实的方法</span></span><br><span class="line">        proxy.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        proxy.sub(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        proxy.mul(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        proxy.div(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//与真实对象关联</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot; 方法开始，参数是：&quot;</span> + Arrays.toString(args));</span><br><span class="line">        <span class="comment">//执行真实对象中的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot; 方法结束，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="comment">//返回值要与抽象方法的返回值一致，这里的返回值会返回到代理对象的方法调用处。</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>代理模式解释图</p>
</blockquote>
<p><img src="/.io//desktop\typora-notes\图\代理模式解释.png" alt="代理模式解释"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理模式是一种设计模式，代码不是固定的，不一定非要使用 jdk 动态代理，jdk 动态代理不等价于代理模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatterns</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//目标对象也即真实对象</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="comment">// 根据目标对象 calc 动态生成一个代理对象</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">proxy</span> <span class="operator">=</span> (ICalc) MyProxy.getProxy(calc,<span class="keyword">new</span> <span class="title class_">AddInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把 proxy 这个代理对象，再当成一个新的目标对象，套娃</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">proxy1</span> <span class="operator">=</span> (ICalc)MyProxy.getProxy(proxy, <span class="keyword">new</span> <span class="title class_">SubInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理对象的调用都会进入代理对象的调用处理器中，而不会直接进入真实的方法</span></span><br><span class="line">        proxy1.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        proxy1.sub(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户只需要 传入 真实对象，和配置 配置文件 即可</span></span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">proxy2</span> <span class="operator">=</span> (ICalc)MyProxy.getProxyForConfigFile(<span class="keyword">new</span> <span class="title class_">CalcImpl</span>());</span><br><span class="line">        proxy2.add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        proxy2.sub(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装：对外隐藏复杂的实现细节，暴露出简单的使用方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target, Interceptor interceptor)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> MyProxy.class.getClassLoader();</span><br><span class="line">        <span class="comment">//获取该类实现的所有接口的字节码</span></span><br><span class="line">        Class[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//创建一个代理对象时，需要传入三个对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> <span class="title class_">MyHandler</span>(target, interceptor));</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxyForConfigFile</span><span class="params">(Object target)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> MyProxy.class.getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">interceptors</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;interceptors&quot;</span>);</span><br><span class="line">        String[] split = interceptors.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;Interceptor&gt; interceptorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            interceptorList.add((Interceptor)Class.forName(s).newInstance());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拦截器正向包装</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> interceptorList.size() -<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            target = (ICalc)MyProxy.getProxy(target,interceptorList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与真实对象关联</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Interceptor interceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHandler</span><span class="params">(Object target, Interceptor interceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="built_in">this</span>.interceptor = interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 通过前置方法的执行结果，可以控制是否执行真实对象中的方法，从而实现对 真实对象 的控制访问。</span></span><br><span class="line">        interceptor.before(method, args);</span><br><span class="line">        <span class="comment">//执行真实对象中的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        interceptor.after(method, args, result);</span><br><span class="line">        <span class="comment">//返回值要与抽象方法的返回值一致，这里的返回值会返回到代理对象的方法调用处。</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object[] args, Object result)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class LogInterceptor implements Interceptor &#123;</span></span><br><span class="line"><span class="comment">//     @Override</span></span><br><span class="line"><span class="comment">//     public void before(Method method, Object[] args) &#123;</span></span><br><span class="line"><span class="comment">//         System.out.println(method.getName() + &quot; 方法执行，参数是：&quot; + Arrays.toString(args));</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     @Override</span></span><br><span class="line"><span class="comment">//     public void after(Method method, Object[] args, Object result) &#123;</span></span><br><span class="line"><span class="comment">//         System.out.println(method.getName() + &quot; 方法结束，结果是：&quot; + result);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为满足单一职责，将 LogInterceptor 类中拦截 所有方法 处理为拦截 单一方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;add&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;add开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object[] args, Object result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;add&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;add结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;sub&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sub开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(Method method, Object[] args, Object result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;sub&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sub结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>静态代理：自己手写的代码，写死的代理类。</p>
<p>动态代理：运行时，动态地生成字节码。</p>
<blockquote>
<p>适配器模式与代理模式区别</p>
</blockquote>
<ol>
<li>代理模式中，代理对象和它所包裹的目标对象必须<font color="green">实现相同的接口</font>，适配器模式中，适配器和它所包裹的对象<font color="cyan">不用实现相同的接口</font>。</li>
<li>代理模式中，代理对象可以<font color="cornflowerblue">控制它所包裹的目标对象的方法是否执行</font>，适配器模式中，适配器<font color="orange">总会调用目标对象的方法</font>，无法控制</li>
</ol>
<h3 id="2-11、单例模式"><a href="#2-11、单例模式" class="headerlink" title="2.11、单例模式"></a>2.11、单例模式</h3><p>在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。</p>
<p>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p>
<p>2、省去了new操作符，<font color="cyan">降低了系统内存的使用频率，减轻GC压力</font>。</p>
<p>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p>
<blockquote>
<p>使用内部类来维护单例的实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* 此处使用一个内部类来维护单例 */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonFactory</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* 获取实例 */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> getInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<blockquote>
<p>在创建类的时候进行同步，将创建和getInstance()分开，单独为创建加synchronized关键字</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonTest</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonTest</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syncInit</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">SingletonTest</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            syncInit();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>





<h3 id="2-12、迭代器设计模式"><a href="#2-12、迭代器设计模式" class="headerlink" title="2.12、迭代器设计模式"></a>2.12、迭代器设计模式</h3><p>提供一种方法顺序访问一个容器对象中各个元素，而又<font color="cornflowerblue">不暴露该对象的内部细节</font>。</p>
<p>如：集合中的迭代器</p>
<p><img src="/.io//desktop\typora-notes\图\iterator-pattern-1.jpg" alt="iterator-pattern-1"></p>
<blockquote>
<p>定义集合 MyCollection。通过迭代器 iterator，按照正序返回集合中的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCollection</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T item)</span>&#123;</span><br><span class="line">        list.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T item)</span>&#123;</span><br><span class="line">        list.remove(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义迭代器</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;T&gt; dataSource;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当前位置的指针</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> curPos;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">(List&lt;T&gt; data)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dataSource = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> curPos &lt; dataSource.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> dataSource.get(curPos);</span><br><span class="line">            curPos ++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-13、组合模式"><a href="#2-13、组合模式" class="headerlink" title="2.13、组合模式"></a>2.13、组合模式</h3><p>将对象组合成树形结构以表示<font color="green">“部分-整体”</font>的层次结构，组合模式使得用户对<font color="cyan">单个对象和组合对象</font>的使用具有一致性。</p>
<p>组合模式可以让客户端像修改配置文件一样简单的完成本来需要流程控制语句来完成的功能。</p>
<p>但凡需要制作树形结构的地方，就可以使用组合模式。</p>
<ul>
<li><font color="orange">向上转型时，父类不能调用子类的对象。</font></li>
<li><font color="orange">向上转型时，调用的方法只和 new 的对象有关</font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CombinationPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;餐厅菜单&quot;</span>, <span class="string">&quot;aaaaaaaaaaaa&quot;</span>);</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;湘菜&quot;</span>, <span class="string">&quot;bbbbbbbbb&quot;</span>);</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;粤菜&quot;</span>, <span class="string">&quot;cccccccccccc&quot;</span>);</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;川菜&quot;</span>, <span class="string">&quot;dddddddddddddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;辣椒炒肉&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">false</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;凉皮&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">true</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;胡辣汤&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">true</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;剁椒鱼头&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">false</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;干煸斗鱼&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">false</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;鱼头&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">false</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;牛肉拉面&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">false</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;土豆丝&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">true</span>, <span class="number">7</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">mi9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;热干面&quot;</span>, <span class="string">&quot;aaaaa&quot;</span>, <span class="literal">true</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        menu1.add(mi1);</span><br><span class="line">        menu1.add(mi2);</span><br><span class="line">        menu1.add(mi3);</span><br><span class="line"></span><br><span class="line">        menu2.add(mi4);</span><br><span class="line">        menu2.add(mi5);</span><br><span class="line">        menu2.add(mi6);</span><br><span class="line"></span><br><span class="line">        menu3.add(mi7);</span><br><span class="line">        menu3.add(mi8);</span><br><span class="line">        menu3.add(mi9);</span><br><span class="line"></span><br><span class="line">        menu.add(menu1);</span><br><span class="line">        menu.add(menu2);</span><br><span class="line">        menu.add(menu3);</span><br><span class="line"></span><br><span class="line">        printV(menu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printV</span><span class="params">(MenuComponent menu)</span>&#123;</span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = menu.getList().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">MenuComponent</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              如果为 MenuItem 则打印是否为素食的项</span></span><br><span class="line"><span class="comment">              如果为 Menu 则调用 isVegetarian 方法抛出异常，则进入 catch 中递归</span></span><br><span class="line"><span class="comment">              此时，客户端只依赖于 MenuComponent，而不再知道 Menu 和 MenuItem 的存在</span></span><br><span class="line"><span class="comment">              这样符合最少知道原则</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(next.isVegetarian())&#123;</span><br><span class="line">                    next.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                printV(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuComponent</span><span class="params">(String name, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属于菜单的方法: add remove getChild</span></span><br><span class="line"><span class="comment">     * 属于菜单的方法，对菜单项而言是没有意义的，为什么非要定义在父类中？</span></span><br><span class="line"><span class="comment">     * 目的是：满足组合模式中 —— 单个对象和组合对象的使用具有一致性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent mc)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent mc)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;MenuComponent&gt; <span class="title function_">getList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属于菜单项的方法：getPrice isVegetarian</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVegetarian</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MenuComponent&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent mc)</span> &#123;</span><br><span class="line">        list.add(mc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent mc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.remove(mc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getChild(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        System.out.println(prefix + <span class="string">&quot;&lt;&lt;&quot;</span> + <span class="built_in">super</span>.getName() + <span class="string">&quot;&gt;&gt;&quot;</span> +<span class="built_in">super</span>.getDescription());</span><br><span class="line">        Iterator&lt;MenuComponent&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">MenuComponent</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            next.print(<span class="string">&quot;\t&quot;</span>+prefix);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name, String description, <span class="type">boolean</span> vegetarian, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, description);</span><br><span class="line">        <span class="built_in">this</span>.vegetarian = vegetarian;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVegetarian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVegetarian</span><span class="params">(<span class="type">boolean</span> vegetarian)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vegetarian = vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> vegetarian ? <span class="string">&quot;(素食)&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(prefix + <span class="built_in">super</span>.getName() +str + <span class="string">&quot;:&quot;</span> + <span class="built_in">super</span>.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-14、观察者模式"><a href="#2-14、观察者模式" class="headerlink" title="2.14、观察者模式"></a>2.14、观察者模式</h3><p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>
<p><strong>何时使用：</strong>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>
<p><strong>如何解决：</strong>使用面向对象技术，可以将这种依赖关系弱化。</p>
<p><strong>关键代码：</strong>在抽象类里有一个 ArrayList 存放观察者们。</p>
<p><strong>优点：</strong></p>
<ol>
<li><p>观察者和被观察者是抽象耦合的。 </p>
</li>
<li><p>建立一套触发机制。</p>
</li>
</ol>
<p><strong>缺点：</strong> </p>
<ol>
<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 </li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>
</ol>
<p><img src="/.io//desktop\typora-notes\图\观察者设计模式UML.jpg" alt="观察者设计模式UML"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatterns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherStation</span> <span class="variable">weatherStation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherStation</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(weatherStation);</span><br><span class="line">        <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>(weatherStation);</span><br><span class="line">        <span class="type">Billboard</span> <span class="variable">billboard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Billboard</span>(weatherStation);</span><br><span class="line">        weatherStation.addObserver(phone);</span><br><span class="line">        weatherStation.addObserver(window);</span><br><span class="line">        weatherStation.addObserver(billboard);</span><br><span class="line">        weatherStation.setData(<span class="number">20</span>,<span class="number">11</span>,<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherStation</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer temperature;</span><br><span class="line">    <span class="keyword">private</span> Integer humidity;</span><br><span class="line">    <span class="keyword">private</span> Integer pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span>&#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>&#123;</span><br><span class="line">        observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>&#123;</span><br><span class="line">        observerList.forEach(Observer::update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传感器可以感知：温度、湿度、气压，一旦感知到就给自己的属性赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Integer temperature, Integer humidity, Integer pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        <span class="comment">//通知其它观察者，数据发生改变</span></span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WeatherStation&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;temperature=&quot;</span> + temperature +</span><br><span class="line">                <span class="string">&quot;, humidity=&quot;</span> + humidity +</span><br><span class="line">                <span class="string">&quot;, pressure=&quot;</span> + pressure +</span><br><span class="line">                <span class="string">&quot;, observerList=&quot;</span> + observerList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeatherStation weatherStation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(WeatherStation weatherStation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherStation = weatherStation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机显示：&quot;</span>+weatherStation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeatherStation weatherStation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Window</span><span class="params">(WeatherStation weatherStation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherStation = weatherStation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能家具显示：&quot;</span>+weatherStation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============扩展观察者</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Billboard</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeatherStation weatherStation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Billboard</span><span class="params">(WeatherStation weatherStation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherStation = weatherStation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;广告牌显示：&quot;</span>+weatherStation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-15、责任链模式"><a href="#2-15、责任链模式" class="headerlink" title="2.15、责任链模式"></a>2.15、责任链模式</h3><p>java web 中的过滤器链，Filter 接口、FilterChain 接口、ApplicationFilterChain 实现 FilterChain 接口、自定义 Filter 实现 Filter 接口</p>
<p>每一个 Filter 只干一件事，质检规则可以应用上。</p>
<p><font color="orange">Filter 是什么模式？</font></p>
<ul>
<li>Servlet 是 java web 应用最基础的标准</li>
<li>在其中定义了 Filter 过滤器机制</li>
<li>经常使用 Filter 实现各种权限、身份控制等功能</li>
<li>一次 Http 请求进来，经过各种 filter 实例进行处理，每个 filter 都可以做自己的功能，可以直接返回请求，也可以交给下一个 filter 继续处理。</li>
</ul>
<h4 id="2-15-1、责任链模式结构类图"><a href="#2-15-1、责任链模式结构类图" class="headerlink" title="2.15.1、责任链模式结构类图"></a>2.15.1、责任链模式结构类图</h4><p><img src="https://i.loli.net/2021/10/25/tOaZz9ClvRGVsoN.gif" alt="责任链模式"></p>
<p>为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p>
<h4 id="2-15-2、效果"><a href="#2-15-2、效果" class="headerlink" title="2.15.2、效果"></a>2.15.2、效果</h4><ol>
<li>对同一个请求数据可以制定多个处理逻辑</li>
<li>处理逻辑可以固定一个顺序</li>
<li>处理逻辑可以自定决定是否处理这个请求数据</li>
<li>处理逻辑可以决定是否继续后续的处理</li>
</ol>
<h4 id="2-15-3、意图"><a href="#2-15-3、意图" class="headerlink" title="2.15.3、意图"></a>2.15.3、意图</h4><ol>
<li>责任链模式的本质是解耦请求与处理，让请求在处理链中能进行传递与被处理</li>
<li>责任链模式的独到之处是将其节点处理者组合成了链式结构，并允许节点自身决定是否进行请求处理或转发，相当于让请求流动起来</li>
</ol>
<h4 id="2-15-4、设计思想"><a href="#2-15-4、设计思想" class="headerlink" title="2.15.4、设计思想"></a>2.15.4、设计思想</h4><ol>
<li>降低耦合<ul>
<li>一个对象无需了解谁处理它，也不了解处理过程</li>
<li>多个处理类之间没有相互依赖，减少if else</li>
</ul>
</li>
<li>职责明确<ul>
<li>每个处理类只实现一个明确的处理逻辑</li>
<li>不该处理的直接交过其他处理类</li>
<li>符合单一职责原则</li>
</ul>
</li>
<li>增强扩展<ul>
<li>可以方便的增减处理类</li>
<li>满足开闭原则</li>
<li>处理类可以自行决定是否处理</li>
</ul>
</li>
<li>不足<ul>
<li>只能顺序执行，可能会有性能问题</li>
<li>具体处理类可以自行结束处理链，不能确保每个接收者都会执行</li>
</ul>
</li>
</ol>
<h3 id="2-16、命令模式"><a href="#2-16、命令模式" class="headerlink" title="2.16、命令模式"></a>2.16、命令模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cc8800bIP</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxx&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">spectrographIP</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种设备</span></span><br><span class="line"><span class="type">CC880OB</span> <span class="variable">cc880OB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC880OB</span>(cc8800bIP);</span><br><span class="line"><span class="type">Spectrograph</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Spectrograph</span>(spectrographIP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种命令</span></span><br><span class="line"><span class="type">AutoTestCommand</span> <span class="variable">command1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpectrographSetModeMER</span>(spec);</span><br><span class="line"><span class="type">AutoTestCommand</span> <span class="variable">command2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC880BOpenChannel1</span>(cc880OB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者</span></span><br><span class="line"><span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">invoker.setCommond(commond1);</span><br><span class="line">invoker.call();</span><br><span class="line">invoker.setCommond(commond2);</span><br><span class="line">invoker.call();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ***********************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutoTestCommand</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">excute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ***********************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpectrographSetModeMER</span> <span class="keyword">implements</span> <span class="title class_">AutoTestCommand</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Spectrograph device;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpectrographSetModeMER</span><span class="params">(Spectrograph device)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">excute</span><span class="params">()</span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="type">String</span> <span class="variable">modeName</span> <span class="operator">=</span> <span class="string">&quot;MER&quot;</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> device.setMode(modeName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **********************************************</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AutoTestCommand command;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(AutoTestCommand command)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 记录统一日志等信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.command.excute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-16-1、命令模式结构类图"><a href="#2-16-1、命令模式结构类图" class="headerlink" title="2.16.1、命令模式结构类图"></a>2.16.1、命令模式结构类图</h4><p><img src="https://i.loli.net/2021/10/25/CdUQIt1xfZWSKws.png" alt="设计模式之命令模式（Command）详解及代码示例- kosamino - 博客园"></p>
<h4 id="2-16-2、效果"><a href="#2-16-2、效果" class="headerlink" title="2.16.2、效果"></a>2.16.2、效果</h4><ol>
<li>待测试设备升级，只需要修改设备相关的 API，整个测试流程不用修改</li>
<li>测试流程如果有变化，新增命令即可，不用动设备的代码</li>
</ol>
<h4 id="2-16-3、意图"><a href="#2-16-3、意图" class="headerlink" title="2.16.3、意图"></a>2.16.3、意图</h4><ol>
<li>将调用者与实现者解耦</li>
<li>命令很容易新增、删除</li>
<li>命令可以组合</li>
</ol>
<h4 id="2-16-4、降低耦合性"><a href="#2-16-4、降低耦合性" class="headerlink" title="2.16.4、降低耦合性"></a>2.16.4、降低耦合性</h4><ol>
<li>配合各种工厂模式可以达到调用者与实现者完全解耦</li>
<li>扩展性好<ul>
<li>新增删除命令非常方便</li>
<li>满足开闭原则</li>
<li>命令可以组合</li>
<li>还可以实现命令的撤销和恢复</li>
<li>命令可以增加统一功能：日志，权限等</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>常用设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>java8 GDAL环境构建</title>
    <url>/2022/09/23/java8-GDAL%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="构建java8-GDAL-环境"><a href="#构建java8-GDAL-环境" class="headerlink" title="构建java8 GDAL 环境"></a>构建java8 GDAL 环境</h1><h2 id="1、拉取-ubuntu-镜像"><a href="#1、拉取-ubuntu-镜像" class="headerlink" title="1、拉取 ubuntu 镜像"></a>1、拉取 ubuntu 镜像</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、安装-java8-环境"><a href="#2、安装-java8-环境" class="headerlink" title="2、安装 java8 环境"></a>2、安装 java8 环境</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar -zxvf jdk-8u291-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量 （若 vim command not found 可以先 apt-get update 再 apt-get install vim 安装一下）</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在最后加上</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/data/docker/java8/jdk1.8.0_291 <span class="comment">#（自己 jdk 解压的路径）</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jreexport CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存之后</span></span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在最后加上</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存之后，刷新一下环境变量</span></span><br><span class="line"> <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看java 版本</span></span><br><span class="line">java -versoion</span><br></pre></td></tr></table></figure>

<h2 id="3、安装-gcc-和-g"><a href="#3、安装-gcc-和-g" class="headerlink" title="3、安装 gcc 和 g++"></a>3、安装 gcc 和 g++</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install gcc -y</span><br><span class="line">apt-get install g++ -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充缺失的环境依赖（可能需要选择时区）</span></span><br><span class="line">apt-get install pkg-config</span><br><span class="line">apt-get install libsqlite3-dev</span><br></pre></td></tr></table></figure>

<h2 id="4、安装-sqlite"><a href="#4、安装-sqlite" class="headerlink" title="4、安装 sqlite"></a>4、安装 sqlite</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install sqlite</span><br></pre></td></tr></table></figure>

<h2 id="5、安装-proj6"><a href="#5、安装-proj6" class="headerlink" title="5、安装 proj6"></a>5、安装 proj6</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://download.osgeo.org/proj/proj-6.3.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zip</span></span><br><span class="line"> apt-get install zip</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 解压压缩包</span></span><br><span class="line"> unzip proj-6.3.1.zip</span><br><span class="line"> <span class="built_in">cd</span> proj-6.3.1</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 生成 makefile</span></span><br><span class="line"> ./configure</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 安装 make 编译</span></span><br><span class="line"> apt-get install  gcc automake autoconf libtool make</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 编译</span></span><br><span class="line"> make</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 安装</span></span><br><span class="line"> make install</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 更新环境变量</span></span><br><span class="line"> ldconfig</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 测试安装是否成功</span></span><br><span class="line"> proj --version</span><br></pre></td></tr></table></figure>

<h2 id="6、安装-GDAL"><a href="#6、安装-GDAL" class="headerlink" title="6、安装 GDAL"></a>6、安装 GDAL</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://download.osgeo.org/gdal/3.0.4/gdal-3.0.4.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf gdal-3.0.4.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> gdal-3.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成makefile</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新环境变量</span></span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>

<h2 id="7、安装gdal4java"><a href="#7、安装gdal4java" class="headerlink" title="7、安装gdal4java"></a>7、安装gdal4java</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还可安装 gdal-bin libgdal-dev</span></span><br><span class="line">apt-get install libgdal-java</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdal java 接口文件路径下，libgdaljni.so</span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/jni</span><br><span class="line"><span class="comment"># java接口文件libgdaljni.so，拷贝到/urs/lib下</span></span><br><span class="line"><span class="built_in">cp</span> /usr/lib/jni/libgdaljni.so /usr/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdal.jar 存在于 /usr/share/java 中，将 gdal.jar 拷贝到容器外，之后的开发需要依赖这个 jar 包</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>或名称:/path/filename /path/filename</span><br></pre></td></tr></table></figure>

<h2 id="8、保存为镜像"><a href="#8、保存为镜像" class="headerlink" title="8、保存为镜像"></a>8、保存为镜像</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">&quot;hqz&quot;</span> -m <span class="string">&quot;Ubuntu gdal java8&quot;</span> feb24 ubuntugdal4java:1.0</span><br></pre></td></tr></table></figure>

<h2 id="9、编写测试程序"><a href="#9、编写测试程序" class="headerlink" title="9、编写测试程序"></a>9、编写测试程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用拷贝出来的gdal.jar包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="comment">//run-&gt;edit configuration-&gt;vm option: -Djava.library.path=&quot;/usr/lib/jni&quot;</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.library.path&quot;</span>));</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.library.path&quot;</span>, System.getProperty(<span class="string">&quot;java.library.path&quot;</span>)</span><br><span class="line">                + <span class="string">&quot;:/usr/lib/jni/&quot;</span>);</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.library.path&quot;</span>));</span><br><span class="line">        gdal.AllRegister();</span><br><span class="line">        <span class="type">Dataset</span> <span class="variable">hDataset</span> <span class="operator">=</span> gdal.Open(<span class="string">&quot;/usr/share/java/JAVAGDAL.tiff&quot;</span>) ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nband</span> <span class="operator">=</span> hDataset.getRasterCount() ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xsize</span> <span class="operator">=</span> hDataset.getRasterXSize() ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ysize</span> <span class="operator">=</span> hDataset.getRasterYSize() ;</span><br><span class="line">        System.out.println(xsize + <span class="string">&quot; &quot;</span> + ysize + <span class="string">&quot; &quot;</span> + nband );</span><br><span class="line">        hDataset.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        System.out.println(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10、运行结果"><a href="#10、运行结果" class="headerlink" title="10、运行结果"></a>10、运行结果</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20211228085412512.png" alt="image-20211228085412512"></p>
<p>在容器中运行测试代码打包的jar包，得到正常的输出。</p>
<h2 id="11、总结"><a href="#11、总结" class="headerlink" title="11、总结"></a>11、总结</h2><ol>
<li><p><code>ubuntu</code> 拉取的是最小的镜像，所以会缺失很多插件工具，如：vim、zip、make 等需要补充</p>
</li>
<li><p>最后打包生成的镜像很大，有 4.5 G ，实际上应该用不了这么大，增加了很多没有用到的依赖</p>
</li>
<li><p>编写测试代码时，使用 maven 构建项目，将导出的 gdal.jar 导入到本地 maven 仓库，打包时没有将依赖打入测试代码的 jar 包，尝试了很多插件，最后时这个插件解决了问题，maven 依赖引用如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.sf<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.dsa<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.rsa<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.EC<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.ec<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/MSFTSIG.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/MSFTSIG.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.apache.storm:storm-core<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!--主类全类名--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.southsmart.gdal.TestDemo<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">shadedArtifactAttached</span>&gt;</span>true<span class="tag">&lt;/<span class="name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">shadedClassifierName</span>&gt;</span>launcher<span class="tag">&lt;/<span class="name">shadedClassifierName</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>GDAL</tag>
        <tag>gis</tag>
      </tags>
  </entry>
  <entry>
    <title>.md 文档自动编号 js 脚本</title>
    <url>/2022/11/06/md-%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7-js-%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="md-文档自动编号-js-脚本"><a href="#md-文档自动编号-js-脚本" class="headerlink" title=".md 文档自动编号 js 脚本"></a>.md 文档自动编号 js 脚本</h1><h2 id="1、契机"><a href="#1、契机" class="headerlink" title="1、契机"></a>1、契机</h2><p>在使用 typora 的时候，没有自动编号，每一级标题要手动编号，比较累。之前有找过修改主题的 css 来实现自动编号的，但是只是个样式而已，没有真正的编号，而且导出的 pdf 中是没有编号的。这次找的脚本是直接修改 md 文档的，根据行首的 <code>#</code> 来判断是不是标题。</p>
<p>md 文档一共有六级标题，不对一级标题编号，二级、三级、四级、五级、六级标题进行级联编号。</p>
<span id="more"></span>

<p>根据这篇文章的 java 代码修改而来，并做了一点小小的改进，用 java 感觉有点重，最近喜欢用 js 写点脚本，比如一些字符串处理的，挺方便的。</p>
<p>文章链接：</p>
<p><a href="https://blog.csdn.net/oneby1314/article/details/107311743">https://blog.csdn.net/oneby1314/article/details/107311743</a></p>
<h2 id="2、脚本代码"><a href="#2、脚本代码" class="headerlink" title="2、脚本代码"></a>2、脚本代码</h2><p>js 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;once&#125; = <span class="built_in">require</span>(<span class="string">&#x27;node:events&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ncp = <span class="built_in">require</span>(<span class="string">&quot;copy-paste&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行标题自动编号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destMdFilePath MD 文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doTitleAutoNumbering</span>(<span class="params">destMdFilePath</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取标题自动编号的MD文件内容</span></span><br><span class="line">    <span class="keyword">const</span> mdFileContent = <span class="title function_">getAutoTitledMdContent</span>(destMdFilePath);</span><br><span class="line">    mdFileContent.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行保存（覆盖原文件）</span></span><br><span class="line">        <span class="title function_">saveMdContentToFile</span>(destMdFilePath, res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取标题自动编号的MD文件内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destMdFilePath MD 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAutoTitledMdContent</span>(<span class="params">destMdFilePath</span>) &#123;</span><br><span class="line">    <span class="comment">// 标题编号</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        标题编号规则：</span></span><br><span class="line"><span class="comment">        - 一级标题为文章的题目，不对一级标题编号</span></span><br><span class="line"><span class="comment">        - 二级、三级、四级、五级、六级标题需要级联编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> titleNumber = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 存储md文件内容</span></span><br><span class="line">    <span class="keyword">let</span> mdContent = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> md = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">        <span class="attr">input</span>: fs.<span class="title function_">createReadStream</span>(destMdFilePath),</span><br><span class="line">        <span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line">        <span class="attr">terminal</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一行一行读取数据</span></span><br><span class="line">    md.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为标题行，如果是标题，是几级标题</span></span><br><span class="line">        <span class="keyword">const</span> curTitleLevel = <span class="title function_">calcTitleLevel</span>(line);</span><br><span class="line">        <span class="keyword">if</span> (curTitleLevel !== -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入标题序号</span></span><br><span class="line">            line = <span class="title function_">insertTitleNumber</span>(line, titleNumber);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重新计算标题计数器</span></span><br><span class="line">            <span class="title function_">reCalcTitleCounter</span>(curTitleLevel, titleNumber);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        mdContent = mdContent.<span class="title function_">concat</span>(line, <span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待监听事件完成</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">once</span>(md, <span class="string">&#x27;close&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> mdContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算当前标题等级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> curLine 当前行的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> -1 ：非标题行；大于等于 2 的正数：当前行的标题等级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcTitleLevel</span>(<span class="params">curLine</span>) &#123;</span><br><span class="line">    <span class="comment">// 由于一级标题无需编号，所以从二级标题开始判断</span></span><br><span class="line">    <span class="keyword">let</span> isTitle = curLine.<span class="title function_">startsWith</span>(<span class="string">&quot;##&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isTitle) &#123;</span><br><span class="line">        <span class="comment">// 返回 -1 表示非标题行</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在来看看是几级标题</span></span><br><span class="line">    <span class="keyword">return</span> curLine.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向标题行中插入标题序号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> curLine     当前行内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> titleNumber 标题计数器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertTitleNumber</span>(<span class="params">curLine, titleNumber</span>) &#123;</span><br><span class="line">    <span class="comment">// 标题等级（以空格分隔的前提是 Typora 开启严格模式）</span></span><br><span class="line">    <span class="keyword">let</span> titleLevel = curLine.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="comment">// 标题等级部分</span></span><br><span class="line">    <span class="keyword">let</span> titleLevelStr = curLine.<span class="title function_">substring</span>(<span class="number">0</span>, titleLevel);</span><br><span class="line">    <span class="comment">// 标题内容部分</span></span><br><span class="line">    <span class="keyword">let</span> titleContent = curLine.<span class="title function_">substring</span>(titleLevel + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 先去除之前的编号</span></span><br><span class="line">    titleContent = <span class="title function_">removePreviousTitleNumber</span>(titleContent);</span><br><span class="line">    <span class="comment">// 标题等级递增</span></span><br><span class="line">    <span class="keyword">let</span> titleIndex = titleLevel - <span class="number">2</span>;</span><br><span class="line">    titleNumber[titleIndex] += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 标题序号</span></span><br><span class="line">    <span class="keyword">let</span> titleNumberStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (titleLevel) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            titleNumberStr = <span class="string">`<span class="subst">$&#123;titleNumber[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            titleNumberStr = <span class="string">`<span class="subst">$&#123;titleNumber[<span class="number">0</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            titleNumberStr = <span class="string">`<span class="subst">$&#123;titleNumber[<span class="number">0</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">1</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">2</span>]&#125;</span>`</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            titleNumberStr = <span class="string">`<span class="subst">$&#123;titleNumber[<span class="number">0</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">1</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">2</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">3</span>]&#125;</span>`</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            titleNumberStr = <span class="string">`<span class="subst">$&#123;titleNumber[<span class="number">0</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">1</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">2</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">3</span>]&#125;</span>.<span class="subst">$&#123;titleNumber[<span class="number">4</span>]&#125;</span>`</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    titleNumberStr += <span class="string">&quot;、&quot;</span>;</span><br><span class="line">    <span class="comment">// 插入标题序号</span></span><br><span class="line">    titleContent = titleNumberStr + titleContent;</span><br><span class="line">    <span class="comment">// 返回带序号的标题</span></span><br><span class="line">    curLine = titleLevelStr + <span class="string">&quot; &quot;</span> + titleContent;</span><br><span class="line">    <span class="keyword">return</span> curLine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去除之前标题的编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> titleContent 标题内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 去除标题编号之后的标题内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removePreviousTitleNumber</span>(<span class="params">titleContent</span>) &#123;</span><br><span class="line">    <span class="comment">// 寻找标题中的 、 字符</span></span><br><span class="line">    <span class="keyword">let</span> index = titleContent.<span class="title function_">indexOf</span>(<span class="string">&quot;、&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; index &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 之前已经进行过标号</span></span><br><span class="line">        <span class="keyword">return</span> titleContent.<span class="title function_">substring</span>(index + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 之前未进行过标号，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> titleContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  重新计算标题计数器的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> titleLevel  当前行的标题等级</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> titleNumber 标题计数器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reCalcTitleCounter</span>(<span class="params">titleLevel, titleNumber</span>) &#123;</span><br><span class="line">    <span class="comment">// 二级标题更新时，三级及三级以下的标题序号重置为 0</span></span><br><span class="line">    <span class="keyword">let</span> startIndex = titleLevel - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; titleNumber.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        titleNumber[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存MD文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destMdFilePath MD文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mdFileContent  MD文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveMdContentToFile</span>(<span class="params">destMdFilePath, mdFileContent</span>) &#123;</span><br><span class="line">    <span class="comment">// 不保存空文件</span></span><br><span class="line">    <span class="keyword">if</span> (mdFileContent == <span class="literal">null</span> || mdFileContent === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行保存</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(destMdFilePath, mdFileContent, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据写入成功！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNcpPath</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        ncp.<span class="title function_">paste</span>(<span class="function">(<span class="params">err, p</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> p === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(p)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">arguments</span> = process.<span class="property">argv</span>;</span><br><span class="line">    <span class="keyword">let</span> mdPath = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 可以使用循环迭代所有的命令行参数（包括node路径和文件路径）</span></span><br><span class="line">    <span class="comment">// 命令行输入参数的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// 解决路径带空格的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            mdPath = mdPath.<span class="title function_">concat</span>(<span class="variable language_">arguments</span>[i], <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        mdPath = mdPath.<span class="title function_">trim</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有输入参数的情况，则去粘贴板寻找是否有文件路径</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        mdPath = <span class="keyword">await</span> <span class="title function_">getNcpPath</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stat = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 路径带空格，需要输入双引号</span></span><br><span class="line">        stat = fs.<span class="title function_">lstatSync</span>(mdPath)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;参数错误，文件不存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stat.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mdPath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;参数错误，请输入md文件的路径&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行标题自动编号</span></span><br><span class="line">        <span class="title function_">doTitleAutoNumbering</span>(mdPath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stat.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">        <span class="keyword">let</span> dirFiles = fs.<span class="title function_">readdirSync</span>(mdPath);</span><br><span class="line">        dirFiles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> filePath = path.<span class="title function_">join</span>(mdPath, item)</span><br><span class="line">            <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 执行标题自动编号</span></span><br><span class="line">                <span class="title function_">doTitleAutoNumbering</span>(filePath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="3、使用说明"><a href="#3、使用说明" class="headerlink" title="3、使用说明"></a>3、使用说明</h2><h3 id="3-1、环境"><a href="#3-1、环境" class="headerlink" title="3.1、环境"></a>3.1、环境</h3><ol>
<li><p>需要本机安装了 node js，最好配置了国内镜像源</p>
</li>
<li><p>代码拷贝到 js 文件中，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忘了是不是这个命令初始化了</span></span><br><span class="line">npm init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2、运行"><a href="#3-2、运行" class="headerlink" title="3.2、运行"></a>3.2、运行</h3><h4 id="3-2-1、命令行方式"><a href="#3-2-1、命令行方式" class="headerlink" title="3.2.1、命令行方式"></a>3.2.1、命令行方式</h4><h5 id="3-2-1-1、传入文件参数"><a href="#3-2-1-1、传入文件参数" class="headerlink" title="3.2.1.1、传入文件参数"></a>3.2.1.1、传入文件参数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node autoNumMd.js ./test.md</span><br></pre></td></tr></table></figure>

<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221106100955421.png" alt="传入文件参数"></p>
<p>编号效果：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221106101046605.png" alt="编号效果"></p>
<h5 id="3-2-1-2、传入文件夹参数"><a href="#3-2-1-2、传入文件夹参数" class="headerlink" title="3.2.1.2、传入文件夹参数"></a>3.2.1.2、传入文件夹参数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是文件夹的话，就将文件夹下的 md 文档全部编号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是不会递归子文件夹</span></span><br><span class="line">node autoNumMd.js C:\...\_posts</span><br></pre></td></tr></table></figure>

<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221106101249420.png" alt="image-20221106101249420"></p>
<h5 id="3-2-1-3、无参数的情况"><a href="#3-2-1-3、无参数的情况" class="headerlink" title="3.2.1.3、无参数的情况"></a>3.2.1.3、无参数的情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有传入参数,则会去粘贴板查看是否有复制路径</span></span><br><span class="line">node autoNumMd.js</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2、bat-脚本"><a href="#3-2-2、bat-脚本" class="headerlink" title="3.2.2、bat 脚本"></a>3.2.2、bat 脚本</h4><p>新建 .bat 文件，写入以下内容,注意 <code>node Absolute path 需要替换为本机 node 的绝对路径，js 文件也是</code>，输入文件夹、文件路径或者直接回车（读取粘贴板路径）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setlocal EnableDelayedExpansion</span><br><span class="line"><span class="built_in">set</span> /p val=Please enter the .md file path or folder path:</span><br><span class="line"><span class="built_in">echo</span> %val%</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%val%&quot;</span> == <span class="string">&quot;&quot;</span> (</span><br><span class="line">node Absolute path <span class="string">&quot;autoNumMd.js Absolute path&quot;</span></span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">node Absolute path <span class="string">&quot;autoNumMd.js Absolute path&quot;</span> %val%</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="4、md-编写说明"><a href="#4、md-编写说明" class="headerlink" title="4、md 编写说明"></a>4、md 编写说明</h2><ol>
<li>分级标题要连续，按照二三四五六来，不要二级标题后接四五六级标题</li>
<li># 后面要接空格</li>
</ol>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ol>
<li>js 的异步编程把我真是烦透了，很多的操作都是要同步的。。。，异步转同步改了我好久阿，心累</li>
<li>bat 脚本也画了挺长时间的，这语法太怪了</li>
<li>此文档的编号使用脚本生成</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>js 脚本</tag>
        <tag>markdown</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>mermaid 语法</title>
    <url>/2022/09/23/mermaid-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="mermaid-语法"><a href="#mermaid-语法" class="headerlink" title="mermaid 语法"></a>mermaid 语法</h1><p>官网地址:<a href="http://knsv.github.io/mermaid/index.html">http://knsv.github.io/mermaid/index.html</a></p>
<span id="more"></span>

<h2 id="1、图"><a href="#1、图" class="headerlink" title="1、图"></a>1、<strong>图</strong></h2><p>例如从左到右的一个有向图</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A[aa bb]--&gt;B(wo);</span><br><span class="line">A--&gt;C((我是C));</span><br><span class="line">B--&gt;D&gt;我是D];</span><br><span class="line">C--&gt;D;</span><br><span class="line">D--&gt;E&#123;我是E&#125;;</span><br><span class="line">C--&gt;E;</span><br><span class="line">2--&gt;E;</span><br><span class="line"><span class="emphasis">_--&gt;E;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/ZJqR4jarVL1ugcn.png" alt="img"></p>
<ol>
<li>第一行的<code>graph LR</code>中<code>graph</code>指定是一个图，第二个<code>LR</code>指定图的方向，所有的方向关键词为:<ul>
<li>TB - top bottom</li>
<li>BT - bottom top</li>
<li>RL - right left</li>
<li>LR - left right</li>
<li>TD - same as TB</li>
</ul>
</li>
<li>之后的A,B,C等都是节点的标识（标识中不能使用空格）</li>
<li>节点默认只显示标识,但也可以通过如下方法控制其显示<ul>
<li><code>A[aa bb]</code> 显示字符串<code>aa bb</code>的方框</li>
<li><code>B(wo)</code> 显示字符串<code>wo</code>的圆角框</li>
<li><code>C((我是C))</code> 显示<code>我是C</code>字符串的圆圈</li>
<li><code>D&gt;我是D]</code> 显示<code>我是D</code>的半方框</li>
<li><code>E&#123;我是E&#125;</code> 显示<code>我是E</code>的正方形框</li>
</ul>
</li>
<li>连线可以选择如下形式:<ul>
<li><code>A--&gt;B</code> 箭头</li>
<li><code>A--B</code> 无箭头线</li>
<li><code>A--hh dd--B</code>或者<code>A--|hh dd|B</code> 线之间可以添加注释</li>
<li><code>A-.-&gt;B</code> 虚线箭头</li>
<li><code>A-. hh .-&gt;B</code> 添加了注释的虚线箭头</li>
<li><code>A==&gt;B</code> 加粗的箭头</li>
<li><code>A== hh ==&gt;B</code> 加注释加粗的箭头</li>
</ul>
</li>
<li>子图可以使用<code>subgraph id</code>定义</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line"><span class="code">         subgraph one</span></span><br><span class="line"><span class="code">         a1--&gt;a2</span></span><br><span class="line"><span class="code">         end</span></span><br><span class="line"><span class="code">         subgraph two</span></span><br><span class="line"><span class="code">         b1--&gt;b2</span></span><br><span class="line"><span class="code">         end</span></span><br><span class="line"><span class="code">         subgraph three</span></span><br><span class="line"><span class="code">         c1--&gt;c2</span></span><br><span class="line"><span class="code">         end</span></span><br><span class="line"><span class="code">         c1--&gt;a2</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/hTsNbUVPIcyKMrp.png" alt="img"></p>
<ol>
<li>使用如下语法给节点添加点击行为</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">click nodeId callback</span><br></pre></td></tr></table></figure>

<p><code>callback</code>是<code>javascript</code>回调函数</p>
<ol>
<li>修改节点的显示样式</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    id1(Start)--&gt;id2(Stop)</span></span><br><span class="line"><span class="code">    style id1 fill:#f9f,stroke:#333,stroke-width:4px;</span></span><br><span class="line"><span class="code">    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/xfmkKae2sjQ1Z79.png" alt="img"></p>
<p>或者使用如下方式修改<code>class</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">class nodeId1 className;</span><br><span class="line">class nodeId1,nodeId2 className;</span><br><span class="line">classDef default fill:#f9f,stroke:#333,stroke-width:4px;</span><br></pre></td></tr></table></figure>

<h2 id="2、时序图"><a href="#2、时序图" class="headerlink" title="2、时序图"></a>2、<strong>时序图</strong></h2><p>如下是一个基本的时序图</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant Alice</span></span><br><span class="line"><span class="code">    participant Bob</span></span><br><span class="line"><span class="code">    Alice-&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    loop Healthcheck</span></span><br><span class="line"><span class="code">        John-&gt;John: Fight against hypochondria</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Note right of John: Rational thoughts &lt;br/&gt;prevail...</span></span><br><span class="line"><span class="code">    John--&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    John-&gt;Bob: How about you?</span></span><br><span class="line"><span class="code">    Bob--&gt;&gt;John: Jolly good!</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/dZkqsHD9XhT4yaU.png" alt="img"></p>
<ol>
<li>时序图使用<code>sequenceDiagram</code>关键词声明</li>
<li>参与者使用<code>participant</code>声明</li>
<li>消息声明是使用<code>[参与者][发送方式][参与者]:消息内容</code>形式声明<br>发送方式有如下几种:<ul>
<li><code>-&gt;</code> 无箭头的线</li>
<li><code>--&gt;</code> 无箭头的虚线</li>
<li><code>-&gt;&gt;</code> 有箭头的实线</li>
<li><code>--&gt;&gt;</code> 有箭头虚线</li>
<li><code>-x</code> 有十字叉的实线</li>
<li><code>--x</code> 有十字叉的虚线</li>
</ul>
</li>
<li>可以通过<code>ote right of [参与者]: 信息</code>的方式添加备注(多行信息请使用<code>&lt;br/&gt;</code>)</li>
<li>添加循环</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">loop Loop text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ol>
<li>添加判断使用如下语法<br>有选择的:</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">alt Describing text</span><br><span class="line">... statements ...</span><br><span class="line">else</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>确定的:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">opt Describing text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>示例:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span></span><br><span class="line"><span class="code">    alt is sick</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Not so good :(</span></span><br><span class="line"><span class="code">    else is well</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    opt Extra response</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Thanks for asking</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/P9Inwj2MA4HF5EV.png" alt="img"></p>
<h2 id="3、甘特图"><a href="#3、甘特图" class="headerlink" title="3、甘特图"></a>3、<strong>甘特图</strong></h2><p>示例:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line"><span class="code">        dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">        title Adding GANTT diagram functionality to mermaid</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        section A section</span></span><br><span class="line"><span class="code">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span></span><br><span class="line"><span class="code">        Active task               :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="code">        Future task               :         des3, after des2, 5d</span></span><br><span class="line"><span class="code">        Future task2               :         des4, after des3, 5d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        section Critical tasks</span></span><br><span class="line"><span class="code">        Completed task in the critical line :crit, done, 2014-01-06,24h</span></span><br><span class="line"><span class="code">        Implement parser and jison          :crit, done, after des1, 2d</span></span><br><span class="line"><span class="code">        Create tests for parser             :crit, active, 3d</span></span><br><span class="line"><span class="code">        Future task in critical line        :crit, 5d</span></span><br><span class="line"><span class="code">        Create tests for renderer           :2d</span></span><br><span class="line"><span class="code">        Add to mermaid                      :1d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        section Documentation</span></span><br><span class="line"><span class="code">        Describe gantt syntax               :active, a1, after des1, 3d</span></span><br><span class="line"><span class="code">        Add gantt diagram to demo page      :after a1  , 20h</span></span><br><span class="line"><span class="code">        Add another diagram to demo page    :doc1, after a1  , 48h</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        section Last section</span></span><br><span class="line"><span class="code">        Describe gantt syntax               :after doc1, 3d</span></span><br><span class="line"><span class="code">        Add gantt diagram to demo page      : 20h</span></span><br><span class="line"><span class="code">        Add another diagram to demo page    : 48h</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/rmTgSXWj4G8DZHb.png" alt="img"></p>
<ol>
<li>使用关键词<code>gantt</code>声明甘特图</li>
<li>使用关键词<code>title</code>声明标题</li>
<li>使用关键词<code>section</code>声明板块</li>
<li>板块后是任务的名称，任务类型，开始时间，持续时间等</li>
</ol>
<p>时间参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">示例</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">YYYY</td>
<td align="left">2014</td>
<td align="left">4 digit year</td>
</tr>
<tr>
<td align="left">YY</td>
<td align="left">14</td>
<td align="left">2 digit year</td>
</tr>
<tr>
<td align="left">Q</td>
<td align="left">1..4</td>
<td align="left">Quarter of year. Sets month to first month in quarter.</td>
</tr>
<tr>
<td align="left">M MM</td>
<td align="left">1..12</td>
<td align="left">Month number</td>
</tr>
<tr>
<td align="left">MMM MMMM</td>
<td align="left">January..Dec</td>
<td align="left">Month name in locale set by moment.locale()</td>
</tr>
<tr>
<td align="left">D DD</td>
<td align="left">1..31</td>
<td align="left">Day of month</td>
</tr>
<tr>
<td align="left">Do</td>
<td align="left">1st..31st</td>
<td align="left">Day of month with ordinal</td>
</tr>
<tr>
<td align="left">DDD DDDD</td>
<td align="left">1..365</td>
<td align="left">Day of year</td>
</tr>
<tr>
<td align="left">X</td>
<td align="left">1410715640.579</td>
<td align="left">Unix timestamp</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">1410715640579</td>
<td align="left">Unix ms timestamp</td>
</tr>
<tr>
<td align="left">H HH</td>
<td align="left">0..23</td>
<td align="left">24 hour time</td>
</tr>
<tr>
<td align="left">h hh</td>
<td align="left">1..12</td>
<td align="left">12 hour time used with a A.</td>
</tr>
<tr>
<td align="left">a A</td>
<td align="left">am pm</td>
<td align="left">Post or ante meridiem</td>
</tr>
<tr>
<td align="left">m mm</td>
<td align="left">0..59</td>
<td align="left">Minutes</td>
</tr>
<tr>
<td align="left">s ss</td>
<td align="left">0..59</td>
<td align="left">Seconds</td>
</tr>
<tr>
<td align="left">S</td>
<td align="left">0..9</td>
<td align="left">Tenths of a second</td>
</tr>
<tr>
<td align="left">SS</td>
<td align="left">0..99</td>
<td align="left">Hundreds of a second</td>
</tr>
<tr>
<td align="left">SSS</td>
<td align="left">0..999</td>
<td align="left">Thousandths of a second</td>
</tr>
<tr>
<td align="left">Z ZZ</td>
<td align="left">+12:00</td>
<td align="left">Offset from UTC as +-HH:mm, +-HHmm, or Z</td>
</tr>
</tbody></table>
<h2 id="4、类图"><a href="#4、类图" class="headerlink" title="4、类图"></a>4、类图</h2><p>同样先来一个示例</p>
<p><img src="https://i.loli.net/2021/01/30/husAHdVri4LMexI.jpg" alt="img"></p>
<p>类图是用来描述类属性、方法以及类指向问题的工具，通过类图可以直观的了解类有哪些属性、哪些方法，遵循怎样的关系（继承、组合……）。类图由三部分构成，顶部区域是类的名称、中间区域是类的属性、底部区域是类的方法。</p>
<h3 id="4-1、类定义"><a href="#4-1、类定义" class="headerlink" title="4.1、类定义"></a>4.1、<em>类定义</em></h3><p>定义一个类有三种方法，隐式定义、使用<code>:</code>定义、使用<code>&#123;&#125;</code>定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%% 隐式定义</span><br><span class="line">classDiagram</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">    Vehicle &lt;|-- Car</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%% 使用 : 定义</span><br><span class="line">classDiagram</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BankAccount</span></span><br><span class="line">    BankAccount : +String owner</span><br><span class="line">    BankAccount : +BigDecimal balance</span><br><span class="line">    BankAccount : +deposit(amount)</span><br><span class="line">    BankAccount : +withdrawal(amount)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%% 使用&#123;&#125;定义</span><br><span class="line">classDiagram</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BankAccount</span>&#123;</span><br><span class="line">  		+String owner</span><br><span class="line">  		+BigDecimal balance</span><br><span class="line">  		+deposit(amount) <span class="built_in">bool</span></span><br><span class="line">  		+withdrawl(amount)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/8L2VXCxlDK75dZc.jpg" alt="img"></p>
<h3 id="4-2、方法"><a href="#4-2、方法" class="headerlink" title="4.2、方法*"></a>4.2、方法*</h3><p>类的属性和方法通过判断<code>()</code>是否存在加以区分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BankAccount</span>&#123;</span><br><span class="line">  		+String owner	%% 属性</span><br><span class="line">  		+BigDecimal balance</span><br><span class="line">  		+deposit(amount) <span class="built_in">bool</span>	%% 方法 <span class="built_in">bool</span>返回类型</span><br><span class="line">  		+withdrawl(amount)	%% 方法 参数为amount</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/xJkDvOWdgu86lij.jpg" alt="img"></p>
<h3 id="4-3、类间关系"><a href="#4-3、类间关系" class="headerlink" title="4.3、类间关系"></a>4.3、<em>类间关系</em></h3><p>类间关系有继承、实现、组合、依赖等，在类图中以连接形式的不同加以区分。</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%5Bb%5D+%7B%7Cc%7Cc%7C%7D++%5Chline+%E7%AC%A6%E5%8F%B7+&+%E9%87%8A%E4%B9%89%5C++%5Chline+..%3E+&+%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB+++%5C++%5Chline+--%7C%3E++&+%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB++%5C++%5Chline+..%7C%3E+++&+%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB+%5C++%5Chline+--%3E++&+%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB++++%5C++%5Chline+--o++&+%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB++++%5C++%5Chline+--*++&+%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB+++%5C+%5Chline+%5Cend%7Barray%7D++%5C++" alt="[公式]"></p>
<p><img src="https://i.loli.net/2021/01/30/aQnIFAPucyfXrhD.jpg" alt="img"></p>
<h3 id="4-4、类注释"><a href="#4-4、类注释" class="headerlink" title="4.4、类注释"></a>4.4、<em>类注释</em></h3><p>类注释使用<code>&lt;&lt;&gt;&gt;</code>定义，注释放在尖括号中间，用于指示类的性质，有如下四种性质</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Barray%7D%5Bb%5D+%7B%7Cc%7Cc%7C%7D++%5Chline+%E8%AF%AD%E6%B3%95+&+%E9%87%8A%E4%B9%89%5C++%5Chline+%3C%3Cinterface%3E%3E+&+%E6%8E%A5%E5%8F%A3%E7%B1%BB+++%5C++%5Chline+%3C%3Cabstract%3E%3E++&+%E6%8A%BD%E8%B1%A1%E7%B1%BB++%5C++%5Chline+%3C%3CService%3E%3E+++&+%E4%BB%A3%E8%A1%A8%E6%9C%8D%E5%8A%A1%E7%AD%89%E7%BA%A7+%5C++%5Chline+%3C%3Cenumeration%3E%3E++&+%E6%9E%9A%E4%B8%BE+++%5C+%5Chline+%5Cend%7Barray%7D++%5C+" alt="[公式]"></p>
<p>类注释的定义方法有两种，单独定义或者与类定义一起放在嵌套结构<code>&#123;&#125;</code>中</p>
<p><strong>单独定义</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line">	&lt;&lt;interface&gt;&gt; shape</span><br></pre></td></tr></table></figure>

<p><strong>嵌套定义</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">		&lt;&lt;interface&gt;&gt;</span><br><span class="line">		noOfVertices</span><br><span class="line">		draw()</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">		&lt;&lt;enumeration&gt;&gt;</span><br><span class="line">		RED</span><br><span class="line">		BLUE</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/30/Eoz36MphAQ29Org.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>mermaid</tag>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoDB</title>
    <url>/2022/09/23/mongoDB/</url>
    <content><![CDATA[<h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><h2 id="1、插入"><a href="#1、插入" class="headerlink" title="1、插入"></a>1、插入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&quot;collection&quot;</span>).<span class="title function_">insert</span>()</span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">insert</span>(&#123;</span><br><span class="line"><span class="attr">title</span>:<span class="string">&#x27;mongodb&#x27;</span>,</span><br><span class="line"><span class="attr">desc</span>:<span class="string">&#x27;插入信息&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&quot;collection&quot;</span>).<span class="title function_">insertMany</span>([&#123;</span><br><span class="line"> 	.......                                     </span><br><span class="line"> &#125;]))</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;abc&#x27;</span>&#125;)</span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;abc&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">-- 投影查询，只显示部分字段</span><br><span class="line">-- 第二个参数中 <span class="number">1</span>代表查询该字段，<span class="number">0</span>代表不查询该字段</span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;abc&#x27;</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">_id</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="3、try-catch"><a href="#3、try-catch" class="headerlink" title="3、try-catch"></a>3、try-catch</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	db.<span class="title function_">getCollection</span>(<span class="string">&quot;collection&quot;</span>).<span class="title function_">insertMany</span>([&#123;&#125;]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">	<span class="title function_">print</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4、更新"><a href="#4、更新" class="headerlink" title="4、更新"></a>4、更新</h2><blockquote>
<p>覆盖的修改</p>
</blockquote>
<blockquote>
<p>局部的修改</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multi 修改多条 $inc 列值计算</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">update</span>(&#123;<span class="attr">_id</span>:<span class="title class_">ObjectId</span>(<span class="string">&quot;60967aeaf54b0000920026c2&quot;</span>)&#125;,&#123;<span class="string">&quot;$set&quot;</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;wss&#x27;</span>&#125;&#125;,&#123;<span class="attr">multi</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="5、删除"><a href="#5、删除" class="headerlink" title="5、删除"></a>5、删除</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">remove</span>(&#123;<span class="attr">_id</span>:<span class="title class_">ObjectId</span>(<span class="string">&quot;60967aeaf54b0000920026c2&quot;</span>)&#125;)</span><br><span class="line"><span class="comment">// 删除所有</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">remove</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="6、统计查询"><a href="#6、统计查询" class="headerlink" title="6、统计查询"></a>6、统计查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询总数</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">count</span>()</span><br><span class="line"><span class="comment">// 待条件查询</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">count</span>(&#123;<span class="attr">title</span>:<span class="string">&#x27;mongodb&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="7、分页查询"><a href="#7、分页查询" class="headerlink" title="7、分页查询"></a>7、分页查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// limit 每页数量 skip 起算位置</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>().<span class="title function_">limit</span>(<span class="number">2</span>).<span class="title function_">skip</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h2 id="8、排序查询"><a href="#8、排序查询" class="headerlink" title="8、排序查询"></a>8、排序查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 为升序 -1 为降序</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">a</span>:-<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>当sort()、skip()、limit() 放在一起时<code>先执行 sort() 再执行 skip() 最后执行 limit()</code></p>
<h2 id="9、正则的复杂条件查询"><a href="#9、正则的复杂条件查询" class="headerlink" title="9、正则的复杂条件查询"></a>9、正则的复杂条件查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询 title字段中包含 mo 的记录</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">title</span>:<span class="regexp">/mo/</span>&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="10、比较查询"><a href="#10、比较查询" class="headerlink" title="10、比较查询"></a>10、比较查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.集合名称.<span class="title function_">find</span>(&#123;<span class="string">&quot;field&quot;</span>:&#123;<span class="attr">$gt</span>:value&#125;&#125;) <span class="comment">// 大于</span></span><br><span class="line">db.集合名称.<span class="title function_">find</span>(&#123;<span class="string">&quot;field&quot;</span>:&#123;<span class="attr">$lt</span>:value&#125;&#125;) <span class="comment">// 小于</span></span><br><span class="line">db.集合名称.<span class="title function_">find</span>(&#123;<span class="string">&quot;field&quot;</span>:&#123;<span class="attr">$gte</span>:value&#125;&#125;) <span class="comment">// 大于等于</span></span><br><span class="line">db.集合名称.<span class="title function_">find</span>(&#123;<span class="string">&quot;field&quot;</span>:&#123;<span class="attr">$lte</span>:value&#125;&#125;) <span class="comment">// 小于等于</span></span><br><span class="line">db.集合名称.<span class="title function_">find</span>(&#123;<span class="string">&quot;field&quot;</span>:&#123;<span class="attr">$ne</span>:value&#125;&#125;) <span class="comment">// 不等于</span></span><br><span class="line"></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">likeNum</span>:&#123;<span class="attr">$gt</span>:<span class="title class_">NumberInt</span>(<span class="number">700</span>)&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="11、包含查询"><a href="#11、包含查询" class="headerlink" title="11、包含查询"></a>11、包含查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包含</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">title</span>:&#123;<span class="attr">$in</span>:[<span class="string">&quot;mongodb&quot;</span>]&#125;&#125;)</span><br><span class="line"><span class="comment">// 不包含</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(&#123;<span class="attr">title</span>:&#123;<span class="attr">$nin</span>:[<span class="string">&quot;mongodb&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="12、条件连接查询"><a href="#12、条件连接查询" class="headerlink" title="12、条件连接查询"></a>12、条件连接查询</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">$and</span>:[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br><span class="line"><span class="attr">$or</span>:[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="13、索引"><a href="#13、索引" class="headerlink" title="13、索引"></a>13、索引</h2><h3 id="13-1、单字段索引"><a href="#13-1、单字段索引" class="headerlink" title="13.1、单字段索引"></a>13.1、单字段索引</h3><p>Mongodb支持在文档的单个字段上创建用户定义的升序&#x2F;降序索引，称为单字段索引</p>
<p>对于单个字段索引和排序操作，索引键的排序顺序（即升序和降序）并不重要，因为MongoDB可以在任何方向上遍历索引。</p>
<h3 id="13-2、复合索引"><a href="#13-2、复合索引" class="headerlink" title="13.2、复合索引"></a>13.2、复合索引</h3><p>MongoDB还支持多个字段的用户定义索引。</p>
<p>复合索引中列出的字段顺序具有重要的意义。例如，如果复合索引由{userid:1,score:-1}组成，则索引首先按userid正序排序，然后在每个userid的值内，再按score倒序排序。</p>
<h3 id="13-3、其它索引"><a href="#13-3、其它索引" class="headerlink" title="13.3、其它索引"></a>13.3、其它索引</h3><p>地理空间索引、文本索引、哈希索引</p>
<h3 id="13-4、索引的查看"><a href="#13-4、索引的查看" class="headerlink" title="13.4、索引的查看"></a>13.4、索引的查看</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数据库索引</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">getIndexes</span>()</span><br></pre></td></tr></table></figure>



<h3 id="13-5、索引的创建"><a href="#13-5、索引的创建" class="headerlink" title="13.5、索引的创建"></a>13.5、索引的创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// keys &#123;索引字段:索引类型&#125;  options:&#123;name:&quot;&quot;,unique:Boolean,background:Boollean&#125; name 索引名称 unique 是否为唯一索引 background 后台创建索引 默认为false</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">createIndex</span>(keys,options)</span><br></pre></td></tr></table></figure>



<h3 id="13-6、删除索引"><a href="#13-6、删除索引" class="headerlink" title="13.6、删除索引"></a>13.6、删除索引</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">dropIndex</span>(index)</span><br></pre></td></tr></table></figure>



<h3 id="13-7、索引的使用"><a href="#13-7、索引的使用" class="headerlink" title="13.7、索引的使用"></a>13.7、索引的使用</h3><h4 id="13-7-1、执行计划"><a href="#13-7-1、执行计划" class="headerlink" title="13.7.1、执行计划"></a>13.7.1、执行计划</h4><p>用来分析查询性能，如查询耗费的时间、是否基于索引查询、建立的索引是否有效、效果如何。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(query,options).<span class="title function_">explain</span>(options)</span><br></pre></td></tr></table></figure>



<h4 id="13-7-2、覆盖查询"><a href="#13-7-2、覆盖查询" class="headerlink" title="13.7.2、覆盖查询"></a>13.7.2、覆盖查询</h4><p>当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。</p>
<h2 id="14、高级聚合查询"><a href="#14、高级聚合查询" class="headerlink" title="14、高级聚合查询"></a>14、高级聚合查询</h2><table>
<thead>
<tr>
<th>SQL 操作&#x2F;函数</th>
<th>mongodb聚合操作</th>
</tr>
</thead>
<tbody><tr>
<td>where</td>
<td>$match</td>
</tr>
<tr>
<td>group by</td>
<td>$group</td>
</tr>
<tr>
<td>having</td>
<td>$match</td>
</tr>
<tr>
<td>select</td>
<td>$project</td>
</tr>
<tr>
<td>order by</td>
<td>$sort</td>
</tr>
<tr>
<td>limit</td>
<td>$limit</td>
</tr>
<tr>
<td>sum()</td>
<td>$sum</td>
</tr>
<tr>
<td>count()</td>
<td>$sum</td>
</tr>
<tr>
<td>join</td>
<td>$lookup （v3.2 新增）</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  cust_id<span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ord_date<span class="punctuation">:</span> ISODate(<span class="string">&quot;2012-11-02T17:04:11.102Z&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">  status<span class="punctuation">:</span> &#x27;A&#x27;<span class="punctuation">,</span></span><br><span class="line">  price<span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">  items<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span> sku<span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> qty<span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="punctuation">&#123;</span> sku<span class="punctuation">:</span> <span class="string">&quot;yyy&quot;</span><span class="punctuation">,</span> qty<span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>1. 统计orders表所有记录</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT COUNT(*) AS count   FROM orders</span></span><br></pre></td></tr></table></figure>



<p><strong>2.对orders表计算所有price求和</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql;</span></span><br><span class="line"><span class="comment">// SELECT SUM(price) AS total  FROM orders</span></span><br></pre></td></tr></table></figure>



<p><strong>3.对每一个唯一的cust_id, 计算price总和</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">     <span class="comment">// _id：分组的字段</span></span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       SUM(price) AS total</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id</span></span><br></pre></td></tr></table></figure>



<p><strong>4.对每一个唯一对cust_id和ord_date分组，计算price总和，不包括日期的时间部分</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">cust_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">           <span class="attr">ord_date</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$ord_date&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql：</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       ord_date,</span></span><br><span class="line"><span class="comment">//       SUM(price) AS total</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id,</span></span><br><span class="line"><span class="comment">//        ord_date</span></span><br></pre></td></tr></table></figure>



<p><strong>5.对于有多个记录的cust_id，返回cust_id和对应的数量</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">        <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">count</span>: &#123; <span class="attr">$gt</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       count(*)</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id</span></span><br><span class="line"><span class="comment">// HAVING count(*) &gt; 1</span></span><br></pre></td></tr></table></figure>



<p><strong>6.对每个唯一的cust_id和ord_date分组，计算价格总和，并只返回price总和大于250的记录，且排除日期的时间部分</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">cust_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">           <span class="attr">ord_date</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$ord_date&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">total</span>: &#123; <span class="attr">$gt</span>: <span class="number">250</span> &#125; &#125; &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       ord_date,</span></span><br><span class="line"><span class="comment">//       SUM(price) AS total</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id,</span></span><br><span class="line"><span class="comment">//         ord_date</span></span><br><span class="line"><span class="comment">// HAVING total &gt; 250</span></span><br></pre></td></tr></table></figure>



<p><strong>7.对每个唯一的cust_id且status&#x3D;A，计算price总和</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">status</span>: <span class="string">&#x27;A&#x27;</span> &#125; &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       SUM(price) as total</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// WHERE status = &#x27;A&#x27;</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id</span></span><br></pre></td></tr></table></figure>



<p><strong>8.对每个唯一的cust_id且status&#x3D;A，计算price总和并且只返回price总和大于250的记录</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">status</span>: <span class="string">&#x27;A&#x27;</span> &#125; &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$price&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">total</span>: &#123; <span class="attr">$gt</span>: <span class="number">250</span> &#125; &#125; &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       SUM(price) as total</span></span><br><span class="line"><span class="comment">// FROM orders</span></span><br><span class="line"><span class="comment">// WHERE status = &#x27;A&#x27;</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id</span></span><br><span class="line"><span class="comment">// HAVING total &gt; 250</span></span><br></pre></td></tr></table></figure>



<p><strong>9.对于每个唯一的cust_id，将与orders相关联的相应订单项order_lineitem的qty字段进行总计</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$unwind</span>: <span class="string">&quot;$items&quot;</span> &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">        <span class="attr">qty</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$items.qty&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT cust_id,</span></span><br><span class="line"><span class="comment">//       SUM(li.qty) as qty</span></span><br><span class="line"><span class="comment">// FROM orders o,</span></span><br><span class="line"><span class="comment">//     order_lineitem li</span></span><br><span class="line"><span class="comment">// WHERE li.order_id = o.id</span></span><br><span class="line"><span class="comment">// GROUP BY cust_id</span></span><br></pre></td></tr></table></figure>



<p><strong>10.统计不同cust_id和ord_date分组的数量，排除日期的时间部分</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">orders</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">cust_id</span>: <span class="string">&quot;$cust_id&quot;</span>,</span><br><span class="line">           <span class="attr">ord_date</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$ord_date&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$ord_date&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似mysql:</span></span><br><span class="line"><span class="comment">// SELECT COUNT(*)</span></span><br><span class="line"><span class="comment">// FROM (SELECT cust_id, ord_date</span></span><br><span class="line"><span class="comment">//      FROM orders</span></span><br><span class="line"><span class="comment">//      GROUP BY cust_id, ord_date)</span></span><br><span class="line"><span class="comment">//      as DerivedTable</span></span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询表中文档数量</span></span><br><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&quot;comment&quot;</span>).<span class="title function_">aggregate</span>([</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">$group</span>:&#123;</span><br><span class="line">		<span class="attr">_id</span>:<span class="literal">null</span>,</span><br><span class="line">		<span class="attr">count</span>:&#123;<span class="attr">$sum</span>:<span class="number">1</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//对每个唯一的userid的点赞数进行叠加</span></span><br><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&quot;comment&quot;</span>).<span class="title function_">aggregate</span>([</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">$group</span>:&#123;</span><br><span class="line">		<span class="attr">_id</span>:<span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">		<span class="attr">likenumtotal</span>:&#123;<span class="attr">$sum</span>:<span class="string">&quot;$likenum&quot;</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据createdatatime和userid分组 时间被拆分出年月日</span></span><br><span class="line">db.<span class="property">comment</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">userid</span>: <span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">           <span class="attr">createdatetime</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$createdatetime&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$likenum&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回大于一的userid相同的数量</span></span><br><span class="line">db.<span class="property">comment</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">        <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">count</span>: &#123; <span class="attr">$gt</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间和userid分组，且likenum数量大于250</span></span><br><span class="line">db.<span class="property">comment</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">userid</span>: <span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">           <span class="attr">createdatetime</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$createdatetime&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$likenum&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">	 &#123;</span><br><span class="line">			 <span class="attr">$match</span>:&#123;</span><br><span class="line">					<span class="attr">total</span>:&#123;<span class="attr">$gt</span>:<span class="number">250</span>&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">] )</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户id分组	且nickname = hqz</span></span><br><span class="line">db.<span class="property">comment</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">nickname</span>: <span class="string">&#x27;hqz&#x27;</span> &#125; &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">        <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$likenum&quot;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br><span class="line"><span class="comment">//统计分组之后的数量</span></span><br><span class="line">db.<span class="property">comment</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">           <span class="attr">userid</span>: <span class="string">&quot;$userid&quot;</span>,</span><br><span class="line">           <span class="attr">createdatetime</span>: &#123;</span><br><span class="line">               <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">&quot;$createdatetime&quot;</span> &#125;,</span><br><span class="line">               <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">&quot;$createdatetime&quot;</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">	 &#123;</span><br><span class="line">			 <span class="attr">$group</span>:&#123;</span><br><span class="line">					<span class="attr">_id</span>:<span class="literal">null</span>,</span><br><span class="line">					<span class="attr">count</span>:&#123;<span class="attr">$sum</span>:<span class="number">1</span>&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">] )</span><br></pre></td></tr></table></figure>





<p>pipeline有很多stage，但这里我只记录我经常用到的几个，如果后续用到再补充。stage详见<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/">官网</a>。</p>
<p>接下来介绍这几个常用的stage:</p>
<p>$count , $group,  $match, $project, $unwind, $limit, $skip, $sort, $sortByCount, $lookup, $out, $addFields</p>
<h3 id="14-1、aggregate常用pipeline-stage介绍"><a href="#14-1、aggregate常用pipeline-stage介绍" class="headerlink" title="14.1、aggregate常用pipeline stage介绍"></a>14.1、aggregate常用pipeline stage介绍</h3><h3 id="14-2、-count"><a href="#14-2、-count" class="headerlink" title="14.2、$count"></a>14.2、$count</h3><p>释义：</p>
<p>返回包含输入到stage的文档的计数，理解为返回与表或视图的find()查询匹配的文档的计数。</p>
<p>db.collection.count()方法不执行find()操作，而是计数并返回与查询匹配的结果数。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$count</span>: &lt;string&gt; &#125;</span><br></pre></td></tr></table></figure>

<p>$count阶段相当于下面$group+$project的序列：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="literal">null</span>, <span class="attr">myCount</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125; &#125; &#125;, <span class="comment">// 这里myCount自定义，相当于mysql的select count(*) as myCount</span></span><br><span class="line">   &#123; <span class="attr">$project</span>: &#123; <span class="attr">_id</span>: <span class="number">0</span> &#125; &#125;  <span class="comment">// 返回不显示_id字段</span></span><br><span class="line">] )</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">88</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">92</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">97</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">71</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">79</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">&quot;subject&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;History&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">83</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>执行：</p>
<p>1）$match 阶段排除score小于等于80的文档，将大于80的文档传到下个阶段</p>
<p>2）$count阶段返回聚合管道中剩余文档的计数，并将该值分配给名为passing_scores的字段。</p>
<h3 id="14-3、-group"><a href="#14-3、-group" class="headerlink" title="14.3、$group"></a>14.3、$group</h3><p>释义：</p>
<p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。</p>
<p>输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ... &#125; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>_id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。</li>
<li>剩余的计算字段是可选的，并使用<accumulator>运算符进行计算。</accumulator></li>
<li>_id和<accumulator>表达式可以接受任何有效的<a href="https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#aggregation-expressions">表达式</a>。</accumulator></li>
</ul>
<h3 id="14-4、accumulator操作符"><a href="#14-4、accumulator操作符" class="headerlink" title="14.4、accumulator操作符"></a>14.4、accumulator操作符</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>类比sql</th>
</tr>
</thead>
<tbody><tr>
<td>$avg</td>
<td>计算均值</td>
<td>avg</td>
</tr>
<tr>
<td>$first</td>
<td>返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。</td>
<td>limit 0,1</td>
</tr>
<tr>
<td>$last</td>
<td>返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。</td>
<td>-</td>
</tr>
<tr>
<td>$max</td>
<td>根据分组，获取集合中所有文档对应值得最大值。</td>
<td>max</td>
</tr>
<tr>
<td>$min</td>
<td>根据分组，获取集合中所有文档对应值得最小值。</td>
<td>min</td>
</tr>
<tr>
<td>$push</td>
<td>将指定的表达式的值添加到一个数组中。</td>
<td>-</td>
</tr>
<tr>
<td>$addToSet</td>
<td>将表达式的值添加到一个集合中（无重复值，无序）。</td>
<td>-</td>
</tr>
<tr>
<td>$sum</td>
<td>计算总和</td>
<td>sum</td>
</tr>
<tr>
<td>$stdDevPop</td>
<td>返回输入值的总体标准偏差（population standard deviation）</td>
<td>-</td>
</tr>
<tr>
<td>$stdDevSamp</td>
<td>返回输入值的样本标准偏差（the sample standard deviation）</td>
<td>-</td>
</tr>
</tbody></table>
<p>$group阶段的内存限制为100M。默认情况下，如果stage超过此限制，$group将产生错误。但是，要允许处理大型数据集，请将allowDiskUse选项设置为true以启用$group操作以写入临时文件。</p>
<p>友情备注：</p>
<ul>
<li>“$addToSet”:expr，如果当前数组中不包含expr，那就将它添加到数组中。</li>
<li>“$push”:expr，不管expr是什么只，都将它添加到数组中。返回包含所有值的数组。</li>
</ul>
<p>在版本2.6中进行了更改：对于$group阶段，MongoDB引入了100M内存的限制以及allowDiskUse选项来处理大数据集的操作。</p>
<p>举例：</p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-01T08:00:00Z&quot;</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jkl&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-01T09:00:00Z&quot;</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-15T09:00:00Z&quot;</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-04-04T11:21:39.736Z&quot;</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-04-04T21:23:13.331Z&quot;</span>) <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>以下汇总操作使用$group阶段按月份，日期和年份对文档进行分组，并计算total price和average quantity，并计算每个组的文档数量：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;month&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;day&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;year&quot;</span> <span class="punctuation">:</span> <span class="number">2014</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalPrice&quot;</span> <span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;averageQuantity&quot;</span> <span class="punctuation">:</span> <span class="number">15.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">2.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;month&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;day&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;year&quot;</span> <span class="punctuation">:</span> <span class="number">2014</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalPrice&quot;</span> <span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;averageQuantity&quot;</span> <span class="punctuation">:</span> <span class="number">10.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;month&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;day&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;year&quot;</span> <span class="punctuation">:</span> <span class="number">2014</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalPrice&quot;</span> <span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;averageQuantity&quot;</span> <span class="punctuation">:</span> <span class="number">1.5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">2.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>group null , 以下聚合操作将指定组_id为null，计算集合中所有文档的总价格和平均数量以及计数。</p>
</li>
<li><p>查询distinct values 以下汇总操作使用$group阶段按item对文档进行分组以检索不同的项目值。</p>
</li>
<li><p>数据转换</p>
</li>
</ol>
<p>1）将集合中的数据按price分组转换成item数组</p>
<p>返回的数据id值是group中指定的字段，items可以自定义，是分组后的列表。</p>
<p>2）下面聚合操作实用系统变量$$ROOT按item对文档进行分组，生成的文档不得超过BSON文档大小限制。</p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;books&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-15T09:00:00.000Z&quot;</span>)</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-04-04T11:21:39.736Z&quot;</span>)</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jkl&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;books&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jkl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-01T09:00:00.000Z&quot;</span>)</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;books&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-03-01T08:00:00.000Z&quot;</span>)</span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quantity&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span> <span class="punctuation">:</span> ISODate(<span class="string">&quot;2014-04-04T21:23:13.331Z&quot;</span>)</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="14-5、-match"><a href="#14-5、-match" class="headerlink" title="14.5、$match"></a>14.5、$match</h3><p>释义：</p>
<p>过滤文档，仅将符合指定条件的文档传递到下一个管道阶段。<br>$match接受一个指定查询条件的文档。查询语法与读操作查询语法相同。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$match</span>: &#123; &lt;query&gt; &#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-6、管道优化："><a href="#14-6、管道优化：" class="headerlink" title="14.6、管道优化："></a>14.6、管道优化：</h3><p>$match用于对文档进行筛选，之后可以在得到的文档子集上做聚合，$match可以使用除了地理空间之外的所有常规查询操作符，<strong>在实际应用中尽可能将$match放在管道的前面位置</strong>。这样有两个好处：一是可以快速将不需要的文档过滤掉，以<strong>减少管道的工作量</strong>；二是如果再投射和分组之前执行$match，<strong>查询可以使用索引</strong>。</p>
<p>限制：</p>
<ul>
<li>不能在$ match查询中使用$作为聚合管道的一部分。</li>
<li>要在$match阶段使用$\text，$match阶段必须是管道的第一阶段。</li>
<li>视图不支持文本搜索。</li>
</ul>
<p>举例：</p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;512bc95fe835e68f199c8686&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dave&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">100</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;512bc962e835e68f199c8687&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dave&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">521</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55f5a192d4bede9ac365b257&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ahn&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55f5a192d4bede9ac365b258&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;li&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">5000</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55f5a1d3d4bede9ac365b259&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;annT&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">50</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55f5a1d3d4bede9ac365b25a&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;li&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">94</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">999</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55f5a1d3d4bede9ac365b25b&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ty&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">95</span><span class="punctuation">,</span> <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>1.使用 $match做简单的匹配查询</p>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;512bc95fe835e68f199c8686&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dave&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;512bc962e835e68f199c8687&quot;</span>)<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dave&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;views&quot;</span> <span class="punctuation">:</span> <span class="number">521</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>使用$match管道选择要处理的文档，然后将结果输出到$group管道以计算文档的计数：</li>
</ol>
<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">5.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-7、-unwind"><a href="#14-7、-unwind" class="headerlink" title="14.7、$unwind"></a>14.7、$unwind</h3><p>释义：</p>
<p>从输入文档解构数组字段以输出每个元素的文档。简单说就是 可以将数组拆分为单独的文档。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$unwind</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">field</span> <span class="attr">path</span>&gt;</span> &#125;</span></span><br></pre></td></tr></table></figure>

<p>要指定字段路径，在字段名称前加上$符并用引号括起来。</p>
<p>v3.2+支持如下语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">$unwind</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: &lt;field path&gt;,</span><br><span class="line">      includeArrayIndex: &lt;string&gt;,  // 可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。</span><br><span class="line">      preserveNullAndEmptyArrays: &lt;boolean&gt; // 可选，default :false，若为true,如果路径为空，缺少或为空数组，则$unwind输出文档</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果为输入文档中不存在的字段指定路径，或者该字段为空数组，则$unwind默认会忽略输入文档，并且不会输出该输入文档的文档。</p>
<p>版本3.2中的新功能：要输出数组字段丢失的文档，null或空数组，请使用选项preserveNullAndEmptyArrays。</p>
<p>举例：</p>
<ol>
<li>示例数据1：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC1&quot;</span><span class="punctuation">,</span> sizes<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;S&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;L&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>以下聚合使用$unwind为sizes数组中的每个元素输出一个文档：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">aggregate</span>(</span><br><span class="line"> [ &#123; $unwind : <span class="string">&quot;$sizes&quot;</span> &#125; ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;S&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;L&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>每个文档与输入文档相同，除了sizes字段的值是原始sizes数组的值。</p>
<ol start="2">
<li>再如下示例数据：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;S&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;L&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;EFG&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IJK&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LMN&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;XYZ&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>1）以下$unwind操作使用includeArrayIndex选项来输出数组元素的数组索引。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$unwind</span>: &#123; <span class="attr">path</span>: <span class="string">&quot;$sizes&quot;</span>, <span class="attr">includeArrayIndex</span>: <span class="string">&quot;arrayIndex&quot;</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;S&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;arrayIndex&quot;</span> <span class="punctuation">:</span> NumberLong(<span class="number">0</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;arrayIndex&quot;</span> <span class="punctuation">:</span> NumberLong(<span class="number">1</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;L&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;arrayIndex&quot;</span> <span class="punctuation">:</span> NumberLong(<span class="number">2</span>) <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IJK&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;arrayIndex&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>2）以下$unwind操作使用preserveNullAndEmptyArrays选项在输出中包含缺少size字段，null或空数组的文档。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">inventory</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123; <span class="attr">$unwind</span>: &#123; <span class="attr">path</span>: <span class="string">&quot;$sizes&quot;</span>, <span class="attr">preserveNullAndEmptyArrays</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line">] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;S&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ABC&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;L&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;EFG&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IJK&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LMN&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;item&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;XYZ&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="14-8、-project"><a href="#14-8、-project" class="headerlink" title="14.8、$project"></a>14.8、$project</h3><p>释义：</p>
<p>$project可以从文档中选择想要的字段，和不想要的字段（指定的字段可以是来自输入文档或新计算字段的现有字段</p>
<p>），也可以通过管道表达式进行一些复杂的操作，例如数学操作，日期操作，字符串操作，逻辑操作。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$project</span>: &#123; <span class="language-xml">&lt;specification(s)&gt; &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<p>$project 管道符的作用是选择字段（指定字段，添加字段，不显示字段,_id：0，排除字段等），重命名字段，派生字段。</p>
<p>specifications有以下形式：</p>
<p><field>: &lt;1 or true&gt;  是否包含该字段，field:1&#x2F;0，表示选择&#x2F;不选择 field</field></p>
<p>_id: &lt;0 or false&gt;    是否指定_id字段</p>
<p><field>: <expression> 添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。</expression></field></p>
<p><field>:&lt;0 or false&gt;  v3.4新增功能，指定排除字段</field></p>
<ul>
<li>默认情况下，_id字段包含在输出文档中。要在输出文档中包含输入文档中的任何其他字段，必须明确指定$project中的包含。 如果指定包含文档中不存在的字段，$project将忽略该字段包含，并且不会将该字段添加到文档中。</li>
<li>默认情况下，_id字段包含在输出文档中。要从输出文档中排除_id字段，必须明确指定$project中的_id字段为0。</li>
<li>v3.4版新增功能-如果指定排除一个或多个字段，则所有其他字段将在输出文档中返回。 如果指定排除_id以外的字段，则不能使用任何其他$project规范表单：即，如果排除字段，则不能指定包含字段，重置现有字段的值或添加新字段。此限制不适用于使用REMOVE变量条件排除字段。</li>
<li>v3.6版本中的新功能- 从MongoDB 3.6开始，可以在聚合表达式中使用变量REMOVE来有条件地禁止一个字段。</li>
<li>要添加新字段或重置现有字段的值，请指定字段名称并将其值设置为某个表达式。</li>
<li>要将字段值直接设置为数字或布尔文本，而不是将字段设置为解析为文字的表达式，请使用$literal操作符。否则，$project会将数字或布尔文字视为包含或排除该字段的标志。</li>
<li>通过指定新字段并将其值设置为现有字段的字段路径，可以有效地重命名字段。</li>
<li>从MongoDB 3.2开始，$project阶段支持使用方括号[]直接创建新的数组字段。如果数组规范包含文档中不存在的字段，则该操作会将空值替换为该字段的值。</li>
<li>在版本3.4中更改-如果$project 是一个空文档，MongoDB 3.4和更高版本会产生一个错误。</li>
<li>投影或添加重置嵌入文档中的字段时，可以使用点符号。如：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;contact.address.country&quot;</span>: &lt;1 or 0 or expression&gt;</span><br><span class="line">// 或</span><br><span class="line">contact: &#123; address: &#123; country: &lt;1 or 0 or expression&gt; &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  isbn<span class="punctuation">:</span> <span class="string">&quot;0001122223334&quot;</span><span class="punctuation">,</span></span><br><span class="line">  author<span class="punctuation">:</span> <span class="punctuation">&#123;</span> last<span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span> first<span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  copies<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  lastModified<span class="punctuation">:</span> <span class="string">&quot;2016-07-28&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>以下$project阶段的输出文档中只包含_id，title和author字段：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">aggregate</span>( [ &#123; $project : &#123; title : <span class="number">1</span> , author : <span class="number">1</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>, <span class="string">&quot;title&quot;</span> : <span class="string">&quot;abc123&quot;</span>, <span class="string">&quot;author&quot;</span> : &#123; <span class="string">&quot;last&quot;</span> : <span class="string">&quot;zzz&quot;</span>, <span class="string">&quot;first&quot;</span> : <span class="string">&quot;aaa&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>_id字段默认包含在内。要从$ project阶段的输出文档中排除_id字段，请在project文档中将_id字段设置为0来指定排除_id字段。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">aggregate</span>( [ &#123; $project : &#123; <span class="attr">_id</span>: <span class="number">0</span>, title : <span class="number">1</span> , author : <span class="number">1</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;last&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;first&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>3.以下$ project阶段从输出中排除lastModified字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">getCollection</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">aggregate</span>( [ &#123; $project : &#123; <span class="string">&quot;lastModified&quot;</span>: <span class="number">0</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>4.<strong>从嵌套文档中排除字段</strong>， 在$ project阶段从输出中排除了author.first和lastModified字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">test</span>.<span class="title function_">aggregate</span>( [ &#123; $project : &#123; <span class="string">&quot;author.first&quot;</span> : <span class="number">0</span>, <span class="string">&quot;lastModified&quot;</span> : <span class="number">0</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>或者可以将排除规范嵌套在文档中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">test</span>.<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$project</span>: &#123; <span class="string">&quot;author&quot;</span>: &#123; <span class="string">&quot;first&quot;</span>: <span class="number">0</span>&#125;, <span class="string">&quot;lastModified&quot;</span> : <span class="number">0</span> &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;isbn&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0001122223334&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;last&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;copies&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>3.6版本中的新功能。从MongoDB 3.6开始，可以在聚合表达式中使用变量REMOVE来有条件地禁止一个字段。</p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  isbn<span class="punctuation">:</span> <span class="string">&quot;0001122223334&quot;</span><span class="punctuation">,</span></span><br><span class="line">  author<span class="punctuation">:</span> <span class="punctuation">&#123;</span> last<span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span> first<span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  copies<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  lastModified<span class="punctuation">:</span> <span class="string">&quot;2016-07-28&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;Baked Goods&quot;</span><span class="punctuation">,</span></span><br><span class="line">  isbn<span class="punctuation">:</span> <span class="string">&quot;9999999999999&quot;</span><span class="punctuation">,</span></span><br><span class="line">  author<span class="punctuation">:</span> <span class="punctuation">&#123;</span> last<span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> first<span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> middle<span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  copies<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  lastModified<span class="punctuation">:</span> <span class="string">&quot;2017-07-21&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;Ice Cream Cakes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  isbn<span class="punctuation">:</span> <span class="string">&quot;8888888888888&quot;</span><span class="punctuation">,</span></span><br><span class="line">  author<span class="punctuation">:</span> <span class="punctuation">&#123;</span> last<span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> first<span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> middle<span class="punctuation">:</span> <span class="string">&quot;mmm&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  copies<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  lastModified<span class="punctuation">:</span> <span class="string">&quot;2017-07-22&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>下面的$project阶段使用REMOVE变量来排除author.middle字段，前提是它等于””：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">aggregate</span>( [</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">$project</span>: &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">&quot;author.first&quot;</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">&quot;author.last&quot;</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="string">&quot;author.middle&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">$cond</span>: &#123;</span><br><span class="line">               <span class="attr">if</span>: &#123; <span class="attr">$eq</span>: [ <span class="string">&quot;&quot;</span>, <span class="string">&quot;$author.middle&quot;</span> ] &#125;,</span><br><span class="line">               <span class="attr">then</span>: <span class="string">&quot;$$REMOVE&quot;</span>,</span><br><span class="line">               <span class="attr">else</span>: <span class="string">&quot;$author.middle&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">] )</span><br></pre></td></tr></table></figure>



<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;last&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;first&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Baked Goods&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;last&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;first&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ice Cream Cakes&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;last&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;first&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;middle&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;mmm&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>包含来自嵌入文档的指定字段</strong>（结果只返回包含嵌套文档的字段，当然也包括_id）</p>
<p>示例文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> _id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> user<span class="punctuation">:</span> <span class="string">&quot;1234&quot;</span><span class="punctuation">,</span> stop<span class="punctuation">:</span> <span class="punctuation">&#123;</span> title<span class="punctuation">:</span> <span class="string">&quot;book1&quot;</span><span class="punctuation">,</span> author<span class="punctuation">:</span> <span class="string">&quot;xyz&quot;</span><span class="punctuation">,</span> page<span class="punctuation">:</span> <span class="number">32</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> _id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> user<span class="punctuation">:</span> <span class="string">&quot;7890&quot;</span><span class="punctuation">,</span> stop<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span> title<span class="punctuation">:</span> <span class="string">&quot;book2&quot;</span><span class="punctuation">,</span> author<span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> page<span class="punctuation">:</span> <span class="number">5</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> title<span class="punctuation">:</span> <span class="string">&quot;book3&quot;</span><span class="punctuation">,</span> author<span class="punctuation">:</span> <span class="string">&quot;ijk&quot;</span><span class="punctuation">,</span> page<span class="punctuation">:</span> <span class="number">100</span> <span class="punctuation">&#125;</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>只返回stop字段中的title字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">bookmarks</span>.<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$project</span>: &#123; <span class="string">&quot;stop.title&quot;</span>: <span class="number">1</span> &#125; &#125; ] )</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">db.<span class="property">bookmarks</span>.<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$project</span>: &#123; <span class="attr">stop</span>: &#123; <span class="attr">title</span>: <span class="number">1</span> &#125; &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;stop&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book1&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;stop&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book2&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;book3&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>包含计算字段</strong></p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  isbn<span class="punctuation">:</span> <span class="string">&quot;0001122223334&quot;</span><span class="punctuation">,</span></span><br><span class="line">  author<span class="punctuation">:</span> <span class="punctuation">&#123;</span> last<span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span> first<span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  copies<span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>返回字段新增了isbn, lastname和copiesold</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">db.books.aggregate(</span><br><span class="line">   <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">         $project<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            title<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            isbn<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               prefix<span class="punctuation">:</span> <span class="punctuation">&#123;</span> $substr<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;$isbn&quot;</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               group<span class="punctuation">:</span> <span class="punctuation">&#123;</span> $substr<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;$isbn&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               publisher<span class="punctuation">:</span> <span class="punctuation">&#123;</span> $substr<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;$isbn&quot;</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               title<span class="punctuation">:</span> <span class="punctuation">&#123;</span> $substr<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;$isbn&quot;</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               checkDigit<span class="punctuation">:</span> <span class="punctuation">&#123;</span> $substr<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;$isbn&quot;</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            lastName<span class="punctuation">:</span> <span class="string">&quot;$author.last&quot;</span><span class="punctuation">,</span></span><br><span class="line">            copiesSold<span class="punctuation">:</span> <span class="string">&quot;$copies&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面执行的返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc123&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;isbn&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;publisher&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2222&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;333&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;checkDigit&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;lastName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;copiesSold&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>投影出新数组字段</strong></p>
<p>示例数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55ad167f320c6be244eb3b95&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;x&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;y&quot;</span> <span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>下面的聚合操作将返回新的数组字段myArray:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$project</span>: &#123; <span class="attr">myArray</span>: [ <span class="string">&quot;$x&quot;</span>, <span class="string">&quot;$y&quot;</span> ] &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55ad167f320c6be244eb3b95&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;myArray&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果返回的数组包含了不存在的字段，则会返回null:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">aggregate</span>( [ &#123; <span class="attr">$project</span>: &#123; <span class="attr">myArray</span>: [ <span class="string">&quot;$x&quot;</span>, <span class="string">&quot;$y&quot;</span>, <span class="string">&quot;$someField&quot;</span> ] &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> ObjectId(<span class="string">&quot;55ad167f320c6be244eb3b95&quot;</span>)<span class="punctuation">,</span> <span class="attr">&quot;myArray&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-9、-limit"><a href="#14-9、-limit" class="headerlink" title="14.9、$limit"></a>14.9、$limit</h3><p>限制传递到管道中下一阶段的文档数</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$limit</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">positive</span> <span class="attr">integer</span>&gt;</span> &#125;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">article</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">    &#123; $limit : <span class="number">5</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>此操作仅返回管道传递给它的前5个文档。 $limit对其传递的文档内容没有影响。</p>
<p>注意：</p>
<p>当$sort在管道中的$limit之前立即出现时，$sort操作只会在过程中维持前n个结果，其中n是指定的限制，而MongoDB只需要将n个项存储在内存中。当allowDiskUse为true并且n个项目超过聚合内存限制时，此优化仍然适用。</p>
<h3 id="14-10、-skip"><a href="#14-10、-skip" class="headerlink" title="14.10、$skip"></a>14.10、$skip</h3><p>跳过进入stage的指定数量的文档，并将其余文档传递到管道中的下一个阶段</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$skip</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">positive</span> <span class="attr">integer</span>&gt;</span> &#125;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">article</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">    &#123; $skip : <span class="number">5</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>此操作将跳过管道传递给它的前5个文档。 $skip对沿着管道传递的文档的内容没有影响。</p>
<h3 id="14-11、-sort"><a href="#14-11、-sort" class="headerlink" title="14.11、$sort"></a>14.11、$sort</h3><p>对所有输入文档进行排序，并按排序顺序将它们返回到管道。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$sort</span>: &#123; &lt;field1&gt;: &lt;sort order&gt;, &lt;field2&gt;: &lt;sort order&gt; ... &#125; &#125;</span><br></pre></td></tr></table></figure>


<p>$sort指定要排序的字段和相应的排序顺序的文档。 <sort order>可以具有以下值之一：</sort></p>
<ul>
<li>1指定升序。</li>
<li>-1指定降序。</li>
<li>{$meta：“textScore”}按照降序排列计算出的textScore元数据。</li>
</ul>
<p>示例：</p>
<p>要对字段进行排序，请将排序顺序设置为1或-1，以分别指定升序或降序排序，如下例所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="property">users</span>.<span class="title function_">aggregate</span>(</span><br><span class="line">   [</span><br><span class="line">     &#123; $sort : &#123; age : -<span class="number">1</span>, <span class="attr">posts</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>比较不同BSON类型的值时，MongoDB使用以下比较顺序，从最低到最高：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"> 1 MinKey (internal type)</span><br><span class="line"> 2 Null</span><br><span class="line"> 3 Numbers (ints, longs, doubles, decimals)</span><br><span class="line"> 4 Symbol, String</span><br><span class="line"> 5 Object</span><br><span class="line"> 6 Array</span><br><span class="line"> 7 BinData</span><br><span class="line"> 8 ObjectId</span><br><span class="line"> 9 Boolean</span><br><span class="line">10 Date</span><br><span class="line">11 Timestamp</span><br><span class="line">12 Regular Expression</span><br><span class="line">13 MaxKey (internal type)</span><br></pre></td></tr></table></figure>



<h3 id="14-12、-sortByCount"><a href="#14-12、-sortByCount" class="headerlink" title="14.12、$sortByCount"></a>14.12、$sortByCount</h3><p>v3.4新增。根据指定表达式的值对传入文档分组，然后计算每个不同组中文档的数量。每个输出文档都包含两个字段：包含不同分组值的_id字段和包含属于该分组或类别的文档数的计数字段，文件按降序排列。</p>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$sortByCount</span>:  &lt;expression&gt; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 基础</title>
    <url>/2022/09/23/mysql-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="MySql学习"><a href="#MySql学习" class="headerlink" title="MySql学习"></a>MySql学习</h1><blockquote>
<ol>
<li>数据库指令</li>
<li>mysql 数据库函数</li>
<li>事务</li>
<li>索引</li>
<li>权限管理和备份</li>
<li>mysql 备份</li>
<li>数据库设计</li>
<li>sql 语句性能优化</li>
</ol>
</blockquote>
<span id="more"></span>

<h2 id="1、数据库指令"><a href="#1、数据库指令" class="headerlink" title="1、数据库指令"></a>1、数据库指令</h2><h3 id="1-1、TRUNCATE-命令"><a href="#1-1、TRUNCATE-命令" class="headerlink" title="1.1、TRUNCATE 命令"></a>1.1、TRUNCATE 命令</h3><ol>
<li>作用：完全清空一个数据库表，表的结构和索引约束不会变</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 清空student表</span><br><span class="line">TRUNCATE &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><font color="orange">delete </font>和 <font color="orange">TRUNCATE</font> 的区别<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同点：<ul>
<li><font color="orange">TRUNCATE</font> 重新设置自增列，计数器会归零</li>
<li><font color="orange">TRUNCATE </font>不会影响事务</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="1-2、select"><a href="#1-2、select" class="headerlink" title="1.2、select"></a>1.2、select</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">all</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">[<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2] <span class="comment">-- 联合查询</span></span><br><span class="line">[<span class="keyword">WHERE</span> ...] <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>] <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">[<span class="keyword">HAVING</span>] <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">[LIMIT ] <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-1、查询别名"><a href="#1-2-1、查询别名" class="headerlink" title="1.2.1、查询别名"></a>1.2.1、查询别名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;StudentNo&#x27;</span> <span class="keyword">as</span> 学号,<span class="string">&#x27;StudentName&#x27;</span> <span class="keyword">as</span> 学生姓名 <span class="keyword">from</span> student <span class="keyword">as</span> s</span><br><span class="line"><span class="comment">-- 函数 CONCAT(a,b) 连接两个字符串</span></span><br><span class="line"><span class="keyword">select</span> CONCAT(<span class="string">&#x27;姓名&#x27;</span>,StudentName) <span class="keyword">as</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2、去重-distinct"><a href="#1-2-2、去重-distinct" class="headerlink" title="1.2.2、去重 distinct"></a>1.2.2、去重 <font color="orange">distinct</font></h4><p>作用：去除 SELECT 查询出来的结果中重复的数据，重复的数据只显示一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DISTANCT <span class="string">&#x27;StudentNo&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 去除重复数据</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-3、数据库的列"><a href="#1-2-3、数据库的列" class="headerlink" title="1.2.3、数据库的列"></a>1.2.3、数据库的列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION() <span class="comment">-- 查询mysql版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果 <span class="comment">-- 计算结果（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员考试成绩 +1 分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;StudentNo&#x27;</span>,<span class="string">&#x27;StudentResult&#x27;</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>

<p><font color="red">数据库中的表达式：文本值，列，Null，函数，计算表达式，系统变量….</font></p>
<p>select <font color="orange">表达式</font> from 表</p>
<h4 id="1-2-4、where-条件子句"><a href="#1-2-4、where-条件子句" class="headerlink" title="1.2.4、where 条件子句"></a>1.2.4、where 条件子句</h4><p>作用：检索数据中 <font color="orange">符合条件</font> 的值</p>
<p>搜索的条件由一个或者多个表达式组成！结果为 布尔值</p>
<ul>
<li><p>逻辑运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>结果描述</th>
</tr>
</thead>
<tbody><tr>
<td>and  &amp;&amp;</td>
<td>a and b   a &amp;&amp; b</td>
<td>逻辑与</td>
</tr>
<tr>
<td>or  ||</td>
<td>a or b   a || b</td>
<td>逻辑或</td>
</tr>
<tr>
<td>not  !</td>
<td>not a   ! a</td>
<td>逻辑非</td>
</tr>
</tbody></table>
<p><font color="red">尽量使用英文字母</font></p>
</li>
<li><p>模糊查询：比较运算符</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>is null</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>is not null</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>between</td>
<td>a between b and c</td>
<td>若 a 在 b 和 c 之间，则结果为真</td>
</tr>
<tr>
<td><code>like</code></td>
<td>a like b</td>
<td>如果a 匹配到 b， 则结果为真</td>
</tr>
<tr>
<td>in</td>
<td>a in (a1,a2,a3….)</td>
<td>假设a在a1，或者a2… 其中的某一个值中，结果为真</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- like 结合 %（代表0到任意个字符） _（一个字符）</span></span><br><span class="line"><span class="keyword">SELECT</span> figure_name <span class="keyword">as</span> 历史人物名 <span class="keyword">FROM</span> history_figure </span><br><span class="line"><span class="keyword">WHERE</span> figure_name <span class="keyword">LIKE</span> <span class="string">&#x27;周%&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询年龄等于 50，60，70的历史人物 in() 里面是一个具体的值</span></span><br><span class="line"><span class="keyword">SELECT</span> figure_name,age <span class="keyword">FROM</span> history_figure</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">in</span> (<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>)</span><br></pre></td></tr></table></figure>



<h4 id="1-2-5、联表查询"><a href="#1-2-5、联表查询" class="headerlink" title="1.2.5、联表查询"></a>1.2.5、联表查询</h4><ul>
<li><p>left join、right join、inner join</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/t3ajOBY4UdqerPy.jpg" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- join（连接的表） on（判断的条件） 连接查询</span></span><br><span class="line"><span class="comment">-- where 等值查询</span></span><br><span class="line"><span class="comment">-- 交集 找到两张表的交叉点</span></span><br><span class="line"><span class="keyword">SELECT</span> figure_name,age,sort <span class="keyword">FROM</span> history_figure <span class="keyword">as</span> hf</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> figure_location <span class="keyword">as</span> fl <span class="keyword">ON</span> hf.id <span class="operator">=</span> fl.figure_id</span><br><span class="line"><span class="comment">-- left join 展示左表所有的数据，右表符合 on 条件的数据，右表不符合的则为空显示</span></span><br><span class="line"><span class="comment">-- inner join 显示两表的信息</span></span><br><span class="line"><span class="comment">-- 左右join 以哪张表为基准</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Inner join</td>
<td>如果表中至少有一个匹配，则返回行</td>
</tr>
<tr>
<td>left join</td>
<td>返回左表中所有的值、即使右表中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>返回右表中所有的值、即使左表中没有匹配</td>
</tr>
</tbody></table>
</li>
<li><p>自连接</p>
<p><font color="orange">自己的表和自己的表连接，核心：一张表拆为两张一摸一样的表</font></p>
<p>父类</p>
<table>
<thead>
<tr>
<th>pid（一级id）</th>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>1</td>
<td>5</td>
<td>美术设计</td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>ps技术</td>
</tr>
</tbody></table>
<p> 操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
<tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>ps技术</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql 自连接解决分级问题，递归</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`name` <span class="keyword">as</span> 父菜单,b.`name` <span class="keyword">as</span> 子菜单 <span class="keyword">FROM</span> acl_permission <span class="keyword">as</span> a,acl_permission <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="operator">=</span> b.pid <span class="keyword">AND</span> a.`is_deleted` <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>先分析要查询哪些字段，再连接表，注意别名，inner join</p>
</li>
</ul>
<h4 id="1-2-6、分页-limit-和排序-order-by"><a href="#1-2-6、分页-limit-和排序-order-by" class="headerlink" title="1.2.6、分页 limit 和排序 order by"></a>1.2.6、分页 limit 和排序 order by</h4><ul>
<li><p>排序 升序 asc 降序 desc</p>
</li>
<li><p>limit 当前页,页面的大小 limit (current_page - 1)*size,size</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span></span><br><span class="line">limit <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-2-7、子查询"><a href="#1-2-7、子查询" class="headerlink" title="1.2.7、子查询"></a>1.2.7、子查询</h4><p>本质：<font color="orange">where语句中嵌套一个子查询语句</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询（由里及外）</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;StudentNo&#x27;</span>,<span class="string">&#x27;SubjectNo&#x27;</span>,<span class="string">&#x27;StudentResult&#x27;</span> <span class="keyword">From</span> <span class="string">&#x27;result&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> SubjectNo <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> <span class="string">&#x27;subject&#x27;</span></span><br><span class="line">    <span class="keyword">WHERE</span> SUbjectName <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 嵌套查询</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo,StudentName <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> StudentNo <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> StudentResult <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> SubjectNo <span class="operator">=</span> (</span><br><span class="line">    	<span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> subject <span class="keyword">WHERE</span> SubjectName <span class="operator">=</span> <span class="string">&#x27;高等数据-2&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>





<h2 id="2、mysql-数据库函数"><a href="#2、mysql-数据库函数" class="headerlink" title="2、mysql 数据库函数"></a>2、mysql 数据库函数</h2><h3 id="2-1、常用函数"><a href="#2-1、常用函数" class="headerlink" title="2.1、常用函数"></a>2.1、常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 常用函数 --</span></span><br><span class="line"><span class="comment">--数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>) <span class="comment">--绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>) <span class="comment">--向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>) <span class="comment">--向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND（） <span class="comment">-- 返回 0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN（） <span class="comment">-- 判断一个数的符号 0-0 复数返回-1，正数返回1</span></span><br><span class="line">MD5() <span class="comment">-- MD5加密</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;即使最小的帆也能远航&#x27;</span>) <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;谁&#x27;</span>)  <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程HelloWorld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>) <span class="comment">-- 查询，从某个位置开始替换某个长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;UUUU&#x27;</span>) <span class="comment">-- 转小写</span></span><br><span class="line"><span class="keyword">SELECT</span> UPER(<span class="string">&#x27;uuuu&#x27;</span>) <span class="comment">-- 转大写</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hqz&#x27;</span>,<span class="string">&#x27;h&#x27;</span>) <span class="comment">-- 返回第一次出现的子串索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;hqz&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,h) <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hqz&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) <span class="comment">-- 返回指定的子字符串（源字符串）</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;hqz&#x27;</span>) <span class="comment">-- 反转</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="comment">-- 获取当前日期 2021-03-29</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE()</span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="comment">-- 获取当前时间 2021-03-29 22:09:00</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()) <span class="comment">-- 获取当前年</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>() <span class="comment">-- 获取当前登录的用户</span></span><br><span class="line"><span class="keyword">SELECT</span> USR()</span><br><span class="line"><span class="keyword">SELECT</span> VERSION() <span class="comment">-- 获取当前sql 的版本</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2、聚合函数"><a href="#2-2、聚合函数" class="headerlink" title="2.2、聚合函数"></a>2.2、聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><font color="orange">COUNT()</font></td>
<td>计数</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">count</span>(字段) <span class="comment">-- 会忽略所有null值</span></span><br><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="comment">-- 不会忽略null值 本质：计算行数</span></span><br><span class="line"><span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="comment">-- 不会忽略null值</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3、分组和排序-HAVING"><a href="#2-3、分组和排序-HAVING" class="headerlink" title="2.3、分组和排序 HAVING"></a>2.3、分组和排序 HAVING</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT any_value(SubjectName),AVG(StudentResult) as 平均分,MAX(StudentResult) as 最高分,MIN(StudentResult) as 最低分</span><br><span class="line">FROM RESULT r</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.`SubjectNo` = sub.`SubhectNO`</span><br><span class="line">GROUP BY r.SubjectNo -- 通过什么字段分组</span><br><span class="line">HAVING 平均分 &gt; 80</span><br></pre></td></tr></table></figure>

<h2 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h2><p><font color="orange">要么都成功，要么都失败</font></p>
<p>把一组sql放在一个批次中去执行</p>
<h3 id="3-1、事务原则"><a href="#3-1、事务原则" class="headerlink" title="3.1、事务原则"></a>3.1、事务原则</h3><ul>
<li><p>ACID原则，原子性、一致性、隔离性、持久性 </p>
</li>
<li><p><strong>原子性</strong>：<font color="orange">要么一起成功，要么一起失败</font></p>
</li>
<li><p><strong>一致性</strong>：事务前后的数据完整性要保持一致</p>
</li>
<li><p><strong>隔离性</strong>：针对多个用户同时操作，排除其它事务对本次事务的影响</p>
</li>
<li><p><strong>持久性</strong>：事务结束后的数据不随外界原因丢失，<font color="orange">事务一旦提交则不可逆</font>被持久化到数据库中</p>
</li>
<li><p>隔离导致的一些问题</p>
<ul>
<li><strong>脏读</strong>：指一个事务读取了另外一个事务未提交的数据</li>
<li><strong>不可重复读</strong>：在一个事务内读取表中的某一行数据，多次读取结果不同</li>
<li><strong>虚读（幻读）</strong>：是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（一般是行影响，多了一行）</li>
</ul>
</li>
<li><p>&#96;&#96;&#96;mysql<br>– 事务<br>– MySQL 是默认开启事务自动提交的<br>SET autocommit &#x3D; 0 –关闭事务自动提交<br>SET autocommit &#x3D; 1 – 开启事务自动提交（默认）</p>
<p>– 手动处理事务<br>SET autocommit &#x3D; 0 – 关闭自动提交</p>
<p>– 事务开启<br>START TRANSACTION – 标记一个事务的开始，从这个之后的sql都在同一个事务内<br>– 执行sql<br>INSERT xx<br>INSERT xx</p>
<p>– 提交：持久化（成功）<br>COMMIT<br>– 回滚：回到事务开始之前（失败）<br>ROLLBACK</p>
<p>– 事务结束<br>SET autocommit &#x3D; 1 – 开启自动提交</p>
<p>– 了解<br>SAVEPOINT 保存点名 – 设置一个事务的保存点<br>ROLLBACK TO SAVEPOINT 保存点名 – 回滚到保存点<br>RELEASE SAVEPOINT 保存点名 – 撤销保存点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4、索引</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">索引（index）是帮助Mysql高效获取数据的数据结构，索引是一种数据结构</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.1、索引的分类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **主键索引（PRIMARY KEY）**</span><br><span class="line"></span><br><span class="line">  - 唯一的标识，主键不可重复，只能有一个列作为主键</span><br><span class="line"></span><br><span class="line">- **唯一索引（UNIQUE KEY）**</span><br><span class="line"></span><br><span class="line">  - 避免重复的列出现，唯一索引可以重复，多个列都可以标识为唯一索引</span><br><span class="line"></span><br><span class="line">- **常规索引（KEY/INDEX）**</span><br><span class="line"></span><br><span class="line">  - 默认的 index、key关键字来设置</span><br><span class="line"></span><br><span class="line">- **全文索引（FullText）**</span><br><span class="line"></span><br><span class="line">  - 在特定的数据库引擎下才有，&lt;font color=&#x27;orange&#x27;&gt;MylSAM&lt;/font&gt;</span><br><span class="line">  - 快速定位数据</span><br><span class="line"></span><br><span class="line">- ```mysql</span><br><span class="line">  -- 索引的使用</span><br><span class="line">  -- 1、在创建表的时候给字段增加索引</span><br><span class="line">  -- 2、创建完毕后，增加索引</span><br><span class="line">  </span><br><span class="line">  -- 显示所有的所有信息</span><br><span class="line">  SHOW INDEX FROM student</span><br><span class="line">  </span><br><span class="line">  -- 增加一个全文索引</span><br><span class="line">  ALTER TABLE school.student ADD FULLTEXT INDEX `studentName`(`studentName`);</span><br><span class="line">  </span><br><span class="line">  -- EXPLAIN 分析sql执行的状况</span><br><span class="line">  EXPLAIN SELECT * FROM student; -- 非全文索引</span><br><span class="line">  </span><br><span class="line">  EXPLAIN SELECT * FROM student WHERE MATCH(studentName) AGAINST(&#x27;刘&#x27;);</span><br><span class="line">  </span><br><span class="line">  -- id_表名_字段名</span><br><span class="line">  -- CREATE INDEX 索引名 on 表（字段）</span><br><span class="line">  CREATE INDEX id_app_user_name ON app_user(`name`);</span><br></pre></td></tr></table></figure>

<p><font color="orange">索引在小数据量的时候用处不大，但是在大数据的时候，区别十分明显</font></p>
</li>
</ul>
<h3 id="4-2、索引原则"><a href="#4-2、索引原则" class="headerlink" title="4.2、索引原则"></a>4.2、索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在常用来查询的字段上</li>
</ul>
<p><strong>索引的数据结构</strong></p>
<p><code>Hash </code>类型的索引</p>
<p><code>Btree</code>：InnoDB 的默认数据结构</p>
<h2 id="5、权限管理和备份"><a href="#5、权限管理和备份" class="headerlink" title="5、权限管理和备份"></a>5、权限管理和备份</h2><p><strong>用户管理</strong></p>
<p>mysql.user 表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户 CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span><br><span class="line">CREATE USER HQZ IDENTIFIED BY &#x27;123456&#x27;</span><br><span class="line"></span><br><span class="line">-- 修改密码（修改当前用户密码）</span><br><span class="line">SET PASSWORD = PASSWORD(&#x27;123456&#x27;)</span><br><span class="line"></span><br><span class="line">-- 修改密码（修改指定用户密码）</span><br><span class="line">SET PASSWORD FOR HQZ = PASSWORD(&#x27;111111&#x27;)</span><br><span class="line"></span><br><span class="line">-- 重命名 RENAME USER 原名 TO 新名</span><br><span class="line">RENAME USER hqz TO HQZ2</span><br><span class="line"></span><br><span class="line">-- 用户授权 ALL PRIVILEGES 全部的权限 ， 库 表</span><br><span class="line">-- ALL PRIVILEGES 除了不能给别人授权，其它都能干</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO hqz</span><br><span class="line"></span><br><span class="line">-- 查询权限</span><br><span class="line">SHOW GRANTS FOR hqz -- 查看指定用户的权限</span><br><span class="line">SHOW GRANTS FOR root@localhost -- GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION</span><br><span class="line"></span><br><span class="line">-- 撤销权限 REVOKE 哪些权限 ， 在哪个库撤销，给谁撤销</span><br><span class="line">REVOKE ALL PRIVILEGES ON *.* FROM hqz</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">drop user hqz</span><br></pre></td></tr></table></figure>



<h2 id="6、Mysql备份"><a href="#6、Mysql备份" class="headerlink" title="6、Mysql备份"></a>6、Mysql备份</h2><p><code>MySQL数据库备份的方式</code>：</p>
<ul>
<li><p>直接拷贝物理文件</p>
</li>
<li><p>在可视化数据库管理工具中手动导出</p>
</li>
<li><p>使用命令行导出—— mysqldump 命令行使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -psqlserver gp history_figure &gt; E:/desktop/a.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 导入 sql 文件</span><br><span class="line">-- 登录的情况下</span><br><span class="line">source E:/desktop/a.sql</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7、数据库设计"><a href="#7、数据库设计" class="headerlink" title="7、数据库设计"></a>7、数据库设计</h2><p><font color="red">当数据库比较复杂的时候需要设计</font></p>
<p><code>糟糕的数据库设计</code>：</p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除都会麻烦、异常【屏蔽使用物理外键】</li>
</ul>
<p><code>良好的数据库设计</code>：</p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便开发系统</li>
</ul>
<p><code>数据库设计</code>：</p>
<ul>
<li>分析需求：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图 E-R 图</li>
</ul>
<p><code>设计数据库步骤</code>：（个人博客）</p>
<ul>
<li>收集信息，分析需求<ul>
<li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li>
<li>分类表（文章分类，谁创建的）</li>
<li>文章表（文章的信息）</li>
<li>评论表</li>
<li>友链表（友链信息）</li>
<li>自定义表（系统信息，某个关键字，或者一些主字段）key：value</li>
<li>说说表（发表心情 .. id ..content ..create_time）</li>
</ul>
</li>
<li>标识实体（把需求落地到每个字段）</li>
<li>标识实体之间的关系<ul>
<li>写博客：user –&gt; blog</li>
<li>创建分类：user –&gt; category</li>
<li>关注：user –&gt; user</li>
<li>友链：links</li>
<li>评论：user –user –blog</li>
</ul>
</li>
</ul>
<h3 id="7-1、三大范式"><a href="#7-1、三大范式" class="headerlink" title="7.1、三大范式"></a>7.1、三大范式</h3><p><code>为什么需要数据规范化？</code></p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><code>第一范式（1NF）</code></p>
<p>​	原子性、要求数据库表的每一列都是不可分割的原子数据项</p>
<p><code>第二范式（2NF）</code></p>
<p>​	前提：满足第一方式</p>
<p>​	每张表只描述一件事情、消除依赖的传递性</p>
<p><code>第三范式（3NF）</code></p>
<p>​	前提：满足第一方式和第二范式</p>
<p>​	第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关</p>
<p><strong>规范性 和 性能的问题</strong></p>
<p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑商业化的需求和目标，（成本，用户体验）数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当的考虑一下规范性</li>
<li>故意给某些表增加一些冗余字段。（从多表查询中变为单表查询）</li>
<li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li>
</ul>
<h2 id="8、SQL-语句性能优化"><a href="#8、SQL-语句性能优化" class="headerlink" title="8、SQL 语句性能优化"></a>8、SQL 语句性能优化</h2><ol>
<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 <code>where </code>及 <code>order by</code> 涉及的列上<code>建立索引</code>。</p>
</li>
<li><p>应尽量避免在 <code>where </code>子句中对字段进行 <code>null </code>值判断，创建表时NULL是默认值，但大多数时候应该使用NOT NULL，或者使用一个特殊的值，<strong>如0，-1作为默 认值。</strong></p>
</li>
<li><p>应尽量避免在 <code>where </code>子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符， MySQL只有对以下操作符才使用索引：<font color="orange">&lt;，&lt;&#x3D;，&#x3D;，&gt;，&gt;&#x3D;，BETWEEN，IN，以及某些时候的LIKE。</font></p>
</li>
<li><p>应尽量避免在 <code>where </code>子句中使用 <code>or</code> 来连接条件， 否则将导致引擎放弃使用索引而进行全表扫描， 可以 使用 <code>UNION </code>合并查询：<code>select id from t where num=10 union all select id from t where num=20</code></p>
</li>
<li><p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描，对于连续的数值，能用 <code>between </code>就不要用 <code>in</code> 了：<code>Select id from t where num between 1 and 3</code></p>
</li>
<li><p>下面的查询也将导致全表扫描：<code>select id from t where name like &#39;%abc%’ </code>或者 <code>select id from t where name like ‘%abc’</code> 若要提高效率，可以考虑全文检索。而 <code>select id from t where name like ‘abc%’</code> 才用到索引</p>
</li>
<li><p>如果在 <code>where </code>子句中使用<code>参数</code>，也会导致全表扫描。</p>
</li>
<li><p>应尽量避免在 <code>where </code>子句中对字段进行<code>表达式操作</code>，应尽量避免在<code>where</code>子句中对<code>字段</code>进行<font color="orange">函数操作</font></p>
</li>
<li><p>很多时候用 <code>exists </code> 代替 <code>in</code> 是一个好的选择：<code>select num from a where num in(select num from b)</code> 用下面的语句替换：<font color="orange">select num from a where exists(select 1 from b where num&#x3D;a.num)</font></p>
</li>
<li><p><code>索引</code> 固然可以提高相应的 <code>select </code>的效率，但同时也降低了 <code>insert </code>及 <code>update </code>的效率，因为 <code>insert </code>或 <code>update </code>时有可能会<font color="red">重建索引</font>，所以怎样建索引需要慎重考虑，视具体情况而定。<font color="orange">一个表的索引数最好不要超过6个</font>，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
</li>
<li><p>应尽可能的避免更新 <code>clustered </code> 索引数据列， 因为 <font color="orange">clustered 索引数据列的顺序就是表记录的物理存储顺序</font>，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 <code>clustered </code>索引数据列，那么需要考虑是否应将该索引建为 <code>clustered </code>索引。</p>
</li>
<li><p>尽量使用<code>数字型字段</code>，若<font color="orange">只含数值信息的字段尽量不要设计为字符型</font>，这会降低查询和连接的性能，并会增加存储开销。</p>
</li>
<li><p>尽可能的使用 <code>varchar/nvarchar</code> 代替 <code>char/nchar</code> ， 因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
</li>
<li><p>最好不要使用返回所有字段，<code>select * from t</code> ，用具体的字段列表代替  “*”，<font color="yellow">不要返回用不到的任何字段</font>。</p>
</li>
<li><p><font color="cornflowerblue">尽量避免向客户端返回大数据量</font>，若数据量过大，应该考虑相应需求是否合理。</p>
</li>
<li><p>使用表的别名( <code>Alias </code>)：当在SQL语句中连接多个表时,请<font color="yellow">使用表的别名并把别名前缀于每个 Column 上</font>.这样一来,就可以减少解析的时间并减少那些由 <code>Column </code>歧义引起的语法错误。</p>
</li>
<li><p>使用 <font color="orange">“ 临时表 ”</font> 暂存中间结果，简化SQL语句的重要方法就是采用<code>临时表</code>暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在<code>tempdb</code> 中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中 <code>“共享锁”</code> 阻塞 <code>“更新锁”</code>，减少了阻塞，提高了并发性能。</p>
</li>
<li><p>一些 SQL 查询语句应加上 <code>nolock</code>，读、写是会相互阻塞的，为了提高并发性能，对于一些查询，可以加上 <code>nolock</code>，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。使用 <code>nolock</code> 有3条原则。查询的结果用于 <font color="orange">“插、删、改” </font>的不能加 <code>nolock </code>，查询的表属于频繁发生页分裂的，慎用 <code>nolock </code>！使用临时表一样可以保存 “数据前影”，起到类似 <code>Oracle</code> 的 <code>undo</code> 表空间的功能，能采用临时表提高并发性能的，不要用 <code>nolock</code> 。</p>
</li>
<li><p>常见的简化规则如下：不要有超过 <font color="orange">5</font> 个以上的<code>表连接（JOIN）</code>，考虑使用<code>临时表</code>或<code>表变量</code>存放中间结果。<font color="yellow">少用子查询</font>，视图嵌套不要过深,一般视图嵌套不要超过2个为宜。</p>
</li>
<li><p>将<font color="cornflowerblue">需要查询的结果预先计算好放在表中</font>，查询的时候再Select。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。</p>
</li>
<li><p>用 <code>OR </code>的字句可以分解成多个查询，并且通过 <code>UNION </code>连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用 <font color="orange">UNION all</font> 执行的效率更高.多个 <code>OR</code> 的字句没有用到索引，改写成 <code>UNION </code>的形式再试图与索引匹配。一个关键的问题是否用到索引。</p>
</li>
<li><p>在 <code>IN </code>后面值的列表中，<font color="yellow">将出现最频繁的值放在最前面，出现得最少的放在最后面</font>，减少判断的次数。</p>
</li>
<li><p><font color="cornflowerblue">尽量将数据的处理工作放在服务器上</font>，减少网络的开销，如使用存储过程。存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据库中的SQL语句，是控制流语言的集合，速度当然快。反复执行的动态SQL,可以使用临时存储过程，该过程（临时表）被放在Tempdb中。</p>
</li>
<li><p>当服务器的内存够多时，<font color="orange">配制线程数量 &#x3D; 最大连接数+5</font>，这样能发挥最大的效率；否则使用 <code>配制线程数量&lt;最大连接数</code>，启用 <code>SQL SERVER</code> 的线程池来解决,如果还是数量 &#x3D; 最大连接数+5，严重的损害服务器的性能。</p>
</li>
<li><p>查询的关联同写的顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> personMemberID <span class="operator">=</span> b.referenceid <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ （A <span class="operator">=</span> B ,B <span class="operator">=</span> ‘号码’）</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> a.personMemberID <span class="operator">=</span> b.referenceid <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ <span class="keyword">and</span> b.referenceid <span class="operator">=</span> ‘JCNPRH39681’ （A <span class="operator">=</span> B ,B <span class="operator">=</span> ‘号码’， A <span class="operator">=</span> ‘号码’）</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> b.referenceid <span class="operator">=</span> ‘JCNPRH39681’ <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ （B <span class="operator">=</span> ‘号码’， A <span class="operator">=</span> ‘号码’）</span><br></pre></td></tr></table></figure>
</li>
<li><p>尽量使用 <code>exists </code>代替 <code>select count(1)</code> 来判断是否存在记录，<code>count </code>函数只有在统计表中所有行数时使用，而且 <code>count(1)</code> 比 <code>count(*)</code> 更有效率。</p>
</li>
<li><p>尽量使用 <code>“&gt;=”</code>，不要使用<code> “&gt;”</code>。</p>
</li>
<li><p>索引的使用规范：索引的创建要与应用结合考虑，建议大的 <code>OLTP </code>表不要超过 <font color="orange">6</font> 个索引；尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过 <code>index </code> <code>index_name</code> 来强制指定索引；避免对大表查询时进行 <code>table scan</code>，必要时考虑新建索引；在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；要注意索引的维护，周期性重建索引，重新编译存储过程。</p>
</li>
<li><p>下列SQL条件语句中的列都建有恰当的索引，但执行速度却非常慢：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="built_in">substrINg</span>(card_no,<span class="number">1</span>,<span class="number">4</span>)<span class="operator">=</span>’<span class="number">5378</span>’ (<span class="number">13</span>秒)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> amount<span class="operator">/</span><span class="number">30</span><span class="operator">&lt;</span> <span class="number">1000</span> （<span class="number">11</span>秒）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="keyword">convert</span>(<span class="type">char</span>(<span class="number">10</span>),<span class="type">date</span>,<span class="number">112</span>)<span class="operator">=</span>’<span class="number">19991201</span>’ （<span class="number">10</span>秒）</span><br><span class="line"></span><br><span class="line"># 分析：</span><br><span class="line"># <span class="keyword">WHERE</span>子句中对列的任何操作结果都是在<span class="keyword">SQL</span>运行时逐列计算得到的，因此它不得不进行表搜索，而没有使用该列上面的索引；如果这些结果在查询编译时就能得到，那么就可以被<span class="keyword">SQL</span>优化器优化，使用索引，避免表搜索，因此将<span class="keyword">SQL</span>重写成下面这样：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> card_no <span class="keyword">like</span> ‘<span class="number">5378</span><span class="operator">%</span>’ （<span class="operator">&lt;</span> <span class="number">1</span>秒）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> amount<span class="operator">&lt;</span> <span class="number">1000</span><span class="operator">*</span><span class="number">30</span> （<span class="operator">&lt;</span> <span class="number">1</span>秒）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="type">date</span><span class="operator">=</span> ‘<span class="number">1999</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">01</span>’ （<span class="operator">&lt;</span> <span class="number">1</span>秒）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>当有一批处理的插入或更新时，用<font color="orange">批量插入或批量更新</font>，绝不会一条条记录的去更新!</p>
</li>
<li><p>在所有的存储过程中，能够用 <code>SQL</code> 语句的，绝不会用<strong>循环</strong>去实现!</p>
<p>(例如：列出上个月的每一天，用 <code>connect by</code> 去递归查询一下，绝不会去用循环从上个月第一天到最后一天)</p>
</li>
<li><p>选择最有效率的表名顺序(只在基于规则的优化器中有效)：</p>
<p><code>oracle </code>的解析器按照从<font color="orange">右到左</font>的顺序处理 <code>FROM </code>子句中的表名，<code>FROM </code>子句中写在最后的表(基础表 <code>driving table</code>)将被最先处理，在 <code>FROM </code>子句中包含多个表的情况下,你必须<font color="yellow">选择记录条数最少的表作为基础表</font>。如果有3个以上的表连接查询, 那就需要选择<font color="yellow">交叉表(intersection table)</font>作为基础表, 交叉表是指那个被其他表所引用的表.</p>
</li>
<li><p>提高 <code>GROUP BY</code> 语句的效率, 可以通过将不需要的记录在 <code>GROUP BY </code>之前过滤掉.下面两个查询返回相同结果，但第二个明显就快了许多.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 低效:</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> JOB , <span class="built_in">AVG</span>(SAL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> JOB <span class="operator">=</span>’PRESIDENT’</span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span> JOB <span class="operator">=</span>’MANAGER’</span><br><span class="line"></span><br><span class="line"># 高效:</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> JOB , <span class="built_in">AVG</span>(SAL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> JOB <span class="operator">=</span>’PRESIDENT’</span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span> JOB <span class="operator">=</span>’MANAGER’</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>sql</code> 语句用大写，因为 <code>oracle </code>总是先解析 <code>sql </code>语句，把小写的字母转换成大写的再执行。</p>
</li>
<li><p>别名的使用，别名是大型数据库的应用技巧，就是<font color="orange">表名、列名在查询中以一个字母为别名，查询速度要比建连接表快1.5倍。</font></p>
</li>
<li><p>避免<font color="yellow">死锁</font>，在你的 <font color="orange">存储过程和触发器中访问同一个表时总是以相同的顺序</font>;事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量;<font color="yellow">永远不要在事务中等待用户输入</font>。</p>
</li>
<li><p>避免使用临时表，除非却有需要，否则应<font color="cornflowerblue">尽量避免使用临时表</font>，相反，可以使用<code>表变量</code>代替;大多数时候(99%)，表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在 <code>TempDb</code> 数据库中，因此临时表上的操作需要<code>跨数据库通信</code>，速度自然慢。</p>
</li>
<li><p>最好不要使用触发器，触发一个触发器，执行一个触发器事件本身就是一个耗费资源的过程;如果能够使用<code>约束</code>实现的，尽量不要使用触发器;不要为不同的触发事件<code>(Insert，Update和Delete) </code>使用相同的触发器;不要在触发器中使用<font color="orange">事务型代码</font>。</p>
</li>
<li><p>索引创建规则：</p>
<ul>
<li>表的<code>主键</code>、<code>外键</code>必须有索引；</li>
<li>数据量超过<code>300万</code>的表应该有索引；</li>
<li>经常与其他表进行连接的表，在<code>连接字段</code>上应该建立索引；</li>
<li>经常出现在 <code>Where </code>子句中的字段，特别是大表的字段，应该建立索引；</li>
<li>索引应该建在<code>选择性高</code>的字段上；</li>
<li>索引应该建在<code>小字段</code>上，对于大的文本字段甚至超长字段，不要建索引；</li>
<li>复合索引的建立需要进行<code>仔细分析</code>，尽量考虑用<code>单字段索引</code>代替；</li>
<li>正确选择复合索引中的<code>主列字段</code>，一般是<code>选择性较好的字段</code>；</li>
<li>复合索引的几个字段是否经常同时以 <code>AND </code>方式出现在 <code>Where </code>子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；</li>
<li>如果复合索引中包含的字段经常单独出现在 <code>Where </code>子句中，则分解为多个单字段索引；</li>
<li>如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段；</li>
<li>如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；</li>
<li><font color="orange">频繁进行数据操作的表，不要建立太多的索引</font>；</li>
<li><code>删除无用的索引</code>，避免对执行计划造成负面影响；</li>
<li>表上建立的每个索引都会增加<code>存储开销</code>，索引对于<font color="orange">插入、删除、更新操作也会增加处理上的开销</font>。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。</li>
<li><font color="orange">尽量不要对数据库中某个含有大量重复的值的字段建立索引</font>。</li>
</ul>
</li>
<li><p>mysql查询优化总结：使用<code>慢查询日志</code>去发现<code>慢查询</code>，使用<code>执行计划</code>去判断查询是否正常运行，总是去测试你的查询看看是否他们运行在最佳状态下。久而久之性能总会变化，避免在整个表上使用 <code>count(*)</code> ,它可能<code>锁</code>住整张表，使查询保持一致以便后续相似的查询可以使用查询缓存，在适当的情形下使用 <code>GROUP BY</code> 而不是<code> DISTINCT</code>，在 <code>WHERE</code>, <code>GROUP BY</code> 和 <code>ORDER BY</code> 子句中使用有索引的列，保持索引简单,不在多个索引中包含同一个列，有时候 <code>MySQL </code>会使用错误的索引,对于这种情况使用 <code>USE INDEX</code>，检查使用 <code>SQL_MODE=STRICT </code>的问题，对于记录数小于5的索引字段，在 <code>UNION</code> 的时候使用 <code>LIMIT</code> 不是是用 <code>OR</code>。</p>
<p>为了 避免在更新前 <code>SELECT</code>，使用 <code>INSERT ON DUPLICATE KEY</code> 或者 <code>INSERT IGNORE</code> ,不要用 <code>UPDATE </code>去实现，不要使用 <code>MAX</code>,使用索引字段和 <code>ORDER BY </code>子句，<code>LIMIT M，N</code>实际上可以减缓查询在某些情况下，有节制地使用，在 <code>WHERE </code>子句中使用 <code>UNION </code>代替子查询，在重新启动的 <code>MySQL</code>，记得来温暖你的数据库，以确保您的数据在内存和查询速度快，考虑持久连接，而不是多个连接，以减少开销，基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询，当负载增加您的服务器上，使用<code>SHOW PROCESSLIST</code> 查看慢的和有问题的查询，在开发环境中产生的镜像数据中 测试的所有可疑的查询。</p>
</li>
<li><p><code>MySQL </code>备份过程:</p>
<p>从二级复制服务器上进行备份。在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致。彻底停止<code>MySQL</code>，从数据库文件进行备份。</p>
<p>如果使用 <code>MySQL dump</code> 进行备份，请同时备份二进制日志文件 – 确保复制没有中断。不要信任 <code>LVM</code> 快照，这很可能产生数据不一致，将来会给你带来麻烦。为了更容易进行单表恢复，以表为单位导出数据 – 如果数据是与其他表隔离的。</p>
<p>当使用 <code>mysqldump </code>时请使用 <code>–opt</code>。在备份之前检查和优化表。为了更快的进行导入，在导入时临时禁用外键约束。</p>
<p>为了更快的进行导入，在导入时临时禁用唯一性检测。在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长。</p>
<p>通过自动调度脚本监控复制实例的错误和延迟。定期执行备份。</p>
</li>
<li><p>查询缓冲<font color="orange">并不自动处理空格</font>，因此，在写SQL语句时，应<font color="orange">尽量减少空格的使用</font>，尤其是在SQL首和尾的空格(因为，查询缓冲并不自动截取首尾空格)。</p>
</li>
<li><p><code>member </code>用 <code>mid </code>做标准进行分表方便查询么？一般的业务需求中基本上都是以 <code>username</code> 为查询依据，正常应当是 <code>username</code> 做 <code>hash</code> 取模来分表吧。分表的话 <code>mysql </code>的<code>partition</code> 功能就是干这个的，对代码是透明的；在代码层面去实现貌似是不合理的。</p>
</li>
<li><p>我们应该为数据库里的每张表都设置一个 <code>ID</code> 做为其主键，而且最好的是一个 <code>INT </code>型的（推荐使用 <code>UNSIGNED</code> ），并设置上自动增加的<code> AUTO_INCREMENT</code> 标志。</p>
</li>
<li><p>在所有的存储过程和触发器的开始处设置 <code>SET NOCOUNT ON</code> ，在结束时设置 <code>SET NOCOUNT OFF</code> 。无需在执行存储过程和触发器的每个语句后向客户端发送 <code>DONE_IN_PROC</code> 消息。</p>
</li>
<li><p><code>MySQL </code>查询可以<font color="orange">启用高速查询缓存</font>。这是提高数据库性能的有效 <code>Mysql </code>优化方法之一。当同一个查询被执行多次时，从缓存中提取数据和直接从数据库中返回数据快很多。</p>
</li>
<li><p><code>EXPLAIN SELECT</code> 查询用来跟踪查看效果</p>
<p>使用 <code>EXPLAIN </code>关键字可以让你知道 <code>MySQL </code>是如何处理你的 <code>SQL </code>语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。<code>EXPLAIN </code>的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的……等等，等等。</p>
</li>
<li><p>当只要一行数据时使用 <code>LIMIT 1</code></p>
</li>
<li><p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去 <code>fetch </code>游标，或是你也许会去检查返回的记录数。在这种情况下，加上 <code>LIMIT 1</code> 可以增加性能。这样一样，<code>MySQL</code> 数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p>
</li>
<li><p>选择表合适存储引擎：</p>
<p><code>myisam</code>: 应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。</p>
<p><code>Innodb</code>：事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（<code>Innodb</code>有效地降低删除和更新导致的锁定）。对于支持事务的<code>InnoDB</code>类型的表来说，影响速度的主要原因是 <code>AUTOCOMMIT </code>默认设置是打开的，而且程序没有显式调用 <code>BEGIN </code>开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行 <code>sql </code>前调用 <code>begin</code>，多条 <code>sql</code> 形成一个事务（即使 <code>autocommit</code> 打开也可以），将大大提高性能。</p>
</li>
<li><p>优化表的数据类型,选择合适的数据类型：</p>
<p>原则：更小通常更好，简单就好，<font color="orange">所有字段都得有默认值,尽量避免null</font>。</p>
<p>例如：数据库表设计时候更小的占磁盘空间<font color="orange">尽可能使用更小的整数类型</font>.( <code>mediumint</code> 就比 <code>int</code> 更合适)</p>
<p>比如时间字段：<code>datetime</code> 和 <code>timestamp</code>, <code>datetime</code>占用8个字节，而 <code>timestamp</code> 占用4个字节，只用了一半，而 <code>timestamp</code> 表示的范围是1970—2037适合做<font color="yellow">更新时间</font></p>
<p><code>MySQL</code> 可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。</p>
<p>因此，在创建表的时候，为了获得更好的性能，我们可以将<code>表中字段的宽度设得尽可能小</code>。例如，</p>
<p>在定义邮政编码这个字段时，如果将其设置为<code> CHAR(255)</code> ,显然给数据库增加了不必要的空间，</p>
<p>甚至使用 <code>VARCHAR </code>这种类型也是多余的，因为 <code>CHAR(6)</code> 就可以很好的完成任务了。同样的，如果可以的话，</p>
<p>我们应该使用 <code>MEDIUMINT</code> 而不是 <code>BIGIN</code> 来定义整型字段。</p>
<p>应该尽量把字段设置为 <code>NOT NULL</code>，这样在将来执行查询的时候，数据库不用去比较 <code>NULL </code>值。</p>
<p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为 <code>ENUM </code>类型。因为在 <code>MySQL</code> 中，<code>ENUM</code> 类型被当作<code>数值型数据</code>来处理，</p>
<p>而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p>
</li>
<li><p>字符串数据类型：<code>char</code>，<code>varchar</code>，<code>text</code>选择区别</p>
</li>
<li><p>任何对<font color="orange">列</font>的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要<font color="orange">尽可能将操作移至等号右边</font>。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 高级</title>
    <url>/2022/09/23/mysql-%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<p>  <font style="color:#10661E;font-size:50px">MySQL高级</font></p>
<h1 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h1><blockquote>
<p>A：原子性，由 undo log 日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</p>
<p>C：一致性，由其它三大特征保证，程序代码要保证业务上的一致性</p>
<p>I：隔离性，由 MVCC 来保证</p>
<p>D：持久性，由内存 + redo log 来保证，mysql 修改数据，同时在内存和 redo log 记录这次操作，宕机的时候可以从 redo log 恢复</p>
</blockquote>
<span id="more"></span>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">InnoDB redo log 写盘，InnoDB 事务进入 prepare 状态。</span><br><span class="line">如果前面 prepare 成功，binlog 写盘，再继续将事务日志持久化到 binlog，如果持久化成功，那么 InnoDB 事务则进入 commit 状态（在 redo log 里面写一个 commit 记录）</span><br></pre></td></tr></table></figure>



<p>redo log 的刷盘会在系统空闲时进行。</p>
<h1 id="mysql-的结构介绍"><a href="#mysql-的结构介绍" class="headerlink" title="mysql 的结构介绍"></a>mysql 的结构介绍</h1><ol>
<li>mysql 内核</li>
<li>sql 优化工程师</li>
<li>mysql 服务器的优化</li>
<li>各种参数常量设定</li>
<li>查询语句优化</li>
<li>主从复制</li>
<li>软硬件升级</li>
<li>容灾备份</li>
<li>sql 编程</li>
</ol>
<h2 id="1、mysql-文件目录"><a href="#1、mysql-文件目录" class="headerlink" title="1、mysql 文件目录"></a>1、mysql 文件目录</h2><table>
<thead>
<tr>
<th>路径</th>
<th>解释</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</td>
<td>mysql 数据库文件的存放路径</td>
<td>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;atguigu.cloud.pid</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;share&#x2F;mysql</td>
<td>配置文件目录</td>
<td>mysql.server 命令及配置文件</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;bin</td>
<td>相关命令目录</td>
<td>mysqladmin mysqldump 等命令</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;init.d&#x2F;mysql</td>
<td>启停相关脚本</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows 上为 my.ini 文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符编码</span></span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">character_set_server=utf8</span><br><span class="line">character_set_client=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引缓冲大小</span></span><br><span class="line">sort_buffer_size =</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3、日志文件"><a href="#3、日志文件" class="headerlink" title="3、日志文件"></a>3、日志文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主从复制</span></span><br><span class="line">log-bin=[path]</span><br><span class="line">log-err=[path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等</span></span><br><span class="line">log-error=[path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询日志，默认关闭，记录查询的 sql 语句，如果开启会降低 mysql 的整体性能，因为记录日志也是需要消耗系统资源的</span></span><br><span class="line"><span class="built_in">log</span>=</span><br></pre></td></tr></table></figure>



<h2 id="4、数据文件"><a href="#4、数据文件" class="headerlink" title="4、数据文件"></a>4、数据文件</h2><ul>
<li>frm 文件：存放表结构</li>
<li>myd 文件：存放表数据</li>
<li>myi 文件：存放表索引</li>
</ul>
<h1 id="mysql-架构"><a href="#mysql-架构" class="headerlink" title="mysql 架构"></a>mysql 架构</h1><p>MySQL 可以在多种不同场景中应用并发挥良好作用，主要体现在<code>存储引擎的架构</code>上，<code>插件式的存储引擎架构</code>将<font color="orange">查询处理</font>和<font color="orange">其它的系统任务</font>以及<font color="orange">数据的存储提取</font><code>相分离</code>，这种架构可以<font color="yellow">根据业务的需求和实际需要</font><code>选择合适的存储引擎</code>。</p>
<p><img src="https://i.loli.net/2021/10/26/dcQIJUusMONipeh.png" alt="MySQL 架构"></p>
<h2 id="5、连接层"><a href="#5、连接层" class="headerlink" title="5、连接层"></a>5、连接层</h2><p>最上层是一些客户端和连接服务，包含本地 sock 通信和大多数基于客户端&#x2F;服务端工具实现的类似于 <code>tcp/ip</code> 的通信。主要完成一些类似于<code>连接处理</code>、<code>授权认证</code>及相关的<code>安全方案</code>。在该层上引入了<code>线程池</code>的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于 <code>SSL</code> 的安全链接。服务器也会安全接入的每个客户端验证它所具有的操作权限。</p>
<h2 id="6、服务层"><a href="#6、服务层" class="headerlink" title="6、服务层"></a>6、服务层</h2><p>第二层架构主要完成大多数的核心服务功能，如 <code>SQL 接口</code>，并完成<code>缓存的查询</code>，<code>SQL 的分析和优化</code>及<code>部分内置函数的执行</code>。所有<code>跨存储引擎</code>的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的<code>内部解析树</code>，并对其完成相应的<font color="yellow">优化</font>，如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是 select 语句，服务器还会<code>查询内部的缓存</code>。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>
<h2 id="7、引擎层"><a href="#7、引擎层" class="headerlink" title="7、引擎层"></a>7、引擎层</h2><p>存储引擎层，存储引擎真正的负责了 MySQL 中<code>数据的存储和提取</code>，服务器通过<code>API</code>与<code>存储引擎</code>进行<font color="yellow">通信</font>。不同的存储引擎具有的功能不同，这样我们<font color="yellow">可以根据自己的实际需要进行选取</font>。</p>
<h2 id="8、存储层"><a href="#8、存储层" class="headerlink" title="8、存储层"></a>8、存储层</h2><p>数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互</p>
<h2 id="9、MyISAM-和-InnoDB-引擎对比"><a href="#9、MyISAM-和-InnoDB-引擎对比" class="headerlink" title="9、MyISAM 和 InnoDB 引擎对比"></a>9、MyISAM 和 InnoDB 引擎对比</h2><table>
<thead>
<tr>
<th>对比项</th>
<th>MyISAM</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td>主外键</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>事务</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>行表锁</td>
<td>表锁，即只操作一条记录也会锁住整个表，不适合高并发的操作<br><font color="red">适合读的操作</font></td>
<td>行锁，操作时只锁某一行，不对其它行有影响<br><font color="red">适合高并发操作</font></td>
</tr>
<tr>
<td>缓存</td>
<td>只缓存索引，不缓存真实数据</td>
<td>不仅缓存索引，还要缓存真实数据，对内存要求较高，而且内存<br>大小对性能有决定性的影响</td>
</tr>
<tr>
<td>表空间</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>关注点</td>
<td>性能</td>
<td>事务</td>
</tr>
<tr>
<td>默认安装</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody></table>
<h1 id="索引优化分析"><a href="#索引优化分析" class="headerlink" title="索引优化分析"></a>索引优化分析</h1><h2 id="10、sql-执行慢的原因"><a href="#10、sql-执行慢的原因" class="headerlink" title="10、sql 执行慢的原因"></a>10、sql 执行慢的原因</h2><h3 id="10-1、单值索引"><a href="#10-1、单值索引" class="headerlink" title="10.1、单值索引"></a>10.1、单值索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> email <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 user 表中的 name 字段上建立索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> <span class="keyword">user</span>(name);</span><br></pre></td></tr></table></figure>



<h3 id="10-2、复合索引"><a href="#10-2、复合索引" class="headerlink" title="10.2、复合索引"></a>10.2、复合索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在 user 表中的 name 和 email 字段上建立索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_nameEmail <span class="keyword">on</span> <span class="keyword">user</span>(name,email);</span><br></pre></td></tr></table></figure>



<h3 id="10-3、关联查询太多-join"><a href="#10-3、关联查询太多-join" class="headerlink" title="10.3、关联查询太多 join"></a>10.3、关联查询太多 join</h3><h3 id="10-4、服务器调优及各个参数的设置（缓冲、线程数）"><a href="#10-4、服务器调优及各个参数的设置（缓冲、线程数）" class="headerlink" title="10.4、服务器调优及各个参数的设置（缓冲、线程数）"></a>10.4、服务器调优及各个参数的设置（缓冲、线程数）</h3><h2 id="11、常见的通用的-join-查询"><a href="#11、常见的通用的-join-查询" class="headerlink" title="11、常见的通用的 join 查询"></a>11、常见的通用的 join 查询</h2><h3 id="11-1、SQL-执行顺序"><a href="#11-1、SQL-执行顺序" class="headerlink" title="11.1、SQL 执行顺序"></a>11.1、SQL 执行顺序</h3><h4 id="11-1-1、手写"><a href="#11-1-1、手写" class="headerlink" title="11.1.1、手写"></a>11.1.1、手写</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">	<span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	<span class="operator">&lt;</span>left_table<span class="operator">&gt;</span> <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span> <span class="keyword">On</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="11-1-2、机读"><a href="#11-1-2、机读" class="headerlink" title="11.1.2、机读"></a>11.1.2、机读</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">On</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="11-2、7-中-join"><a href="#11-2、7-中-join" class="headerlink" title="11.2、7 中 join"></a>11.2、7 中 join</h3><img src="https://i.loli.net/2021/11/03/VcAqBDeKNPpbofk.jpg" alt="sqljoin_clear" style="zoom: 33%;">



<h4 id="11-2-1、INNER-JOIN-内连接"><a href="#11-2-1、INNER-JOIN-内连接" class="headerlink" title="11.2.1、INNER JOIN 内连接"></a>11.2.1、INNER JOIN 内连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A、B 表的共有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">TABLE</span> B B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-2、LEFT-JOIN-左连接"><a href="#11-2-2、LEFT-JOIN-左连接" class="headerlink" title="11.2.2、LEFT JOIN 左连接"></a>11.2.2、LEFT JOIN 左连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A 表的独有 加 A、B 表的共有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-3、RIGHT-JOIN-右连接"><a href="#11-2-3、RIGHT-JOIN-右连接" class="headerlink" title="11.2.3、RIGHT JOIN 右连接"></a>11.2.3、RIGHT JOIN 右连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- B 表的独有 加 A、B 表的共有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-4、左外部连接"><a href="#11-2-4、左外部连接" class="headerlink" title="11.2.4、左外部连接"></a>11.2.4、左外部连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A 表的独有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key <span class="keyword">WHERE</span> B.key <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-5、右外部连接"><a href="#11-2-5、右外部连接" class="headerlink" title="11.2.5、右外部连接"></a>11.2.5、右外部连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- B 表的独有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key <span class="keyword">WHERE</span> A.key <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-6、全连接"><a href="#11-2-6、全连接" class="headerlink" title="11.2.6、全连接"></a>11.2.6、全连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A、B 的合并</span></span><br><span class="line"><span class="comment">-- MySQL 中无法体现</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">TABLE</span> B B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br><span class="line"><span class="comment">-- 使用 union</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br><span class="line"><span class="keyword">union</span> <span class="comment">-- 自带去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-7、全外部连接"><a href="#11-2-7、全外部连接" class="headerlink" title="11.2.7、全外部连接"></a>11.2.7、全外部连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A 的独有 + B 的独有</span></span><br><span class="line"><span class="comment">-- MySQL 中无法体现</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">TABLE</span> B B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key <span class="keyword">WHERE</span> A.Key I <span class="keyword">NULL</span> <span class="keyword">OR</span> B.Key <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key <span class="keyword">WHERE</span> B.key <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">FROM</span> TableA A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> TableB B <span class="keyword">ON</span> A.Key <span class="operator">=</span> B.Key <span class="keyword">WHERE</span> A.key <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="12、概述"><a href="#12、概述" class="headerlink" title="12、概述"></a>12、概述</h2><blockquote>
<p>索引（Index）：是帮助 MySQL 高效获取数据的数据结构。索引的目的在于提高查询效率，可以类比字典。</p>
<p>索引是一种数据结构。可以理解为 排好序的快速查找数据结构。</p>
<p>索引会影响 where 查询的条件 和 order by 的排序。</p>
<p>数据本身之外，数据库还维护着一个满足<strong>特定查找算法</strong>的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现<strong>高级查找算法</strong>，这种数据结构就是索引（B树）</p>
</blockquote>
<p>一般索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式<strong>存储在磁盘上</strong>。</p>
<h2 id="13、优势"><a href="#13、优势" class="headerlink" title="13、优势"></a>13、优势</h2><ol>
<li>类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的 IO 成本</li>
<li>通过索引列对数据进行了<font color="yellow">排序</font>，降低数据排序的成本，降低了 CPU 的消耗</li>
</ol>
<h2 id="14、劣势"><a href="#14、劣势" class="headerlink" title="14、劣势"></a>14、劣势</h2><ol>
<li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的</li>
<li>虽然索引大大提高了查询速度，同时却<font color="orange">会降低更新表的速度</font>，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li>
</ol>
<h2 id="15、mysql-索引分类"><a href="#15、mysql-索引分类" class="headerlink" title="15、mysql 索引分类"></a>15、mysql 索引分类</h2><p><font color="red">一张表的索引最好不要超过 5 个<br></font></p>
<h3 id="15-1、单值索引"><a href="#15-1、单值索引" class="headerlink" title="15.1、单值索引"></a>15.1、单值索引</h3><p><strong>即一个索引只包含单个列，一个表可以有多个单列</strong></p>
<h3 id="15-2、唯一索引"><a href="#15-2、唯一索引" class="headerlink" title="15.2、唯一索引"></a>15.2、唯一索引</h3><p>索引列的值必须唯一，但允许有空值</p>
<h3 id="15-3、复合索引"><a href="#15-3、复合索引" class="headerlink" title="15.3、复合索引"></a>15.3、复合索引</h3><p>即一个索引包含多个列，<font color="orange">复合索引一般优于单值索引</font></p>
<h3 id="15-4、基本语法"><a href="#15-4、基本语法" class="headerlink" title="15.4、基本语法"></a>15.4、基本语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] INDEX indexName <span class="keyword">ON</span> myTable(columnName(length));</span><br><span class="line"><span class="keyword">ALTER</span> myTable <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>] INDEX [indexName] <span class="keyword">ON</span> (columnName(length));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX [indexName] <span class="keyword">ON</span> myTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> myTable;</span><br></pre></td></tr></table></figure>





<h2 id="16、mysql-索引结构"><a href="#16、mysql-索引结构" class="headerlink" title="16、mysql 索引结构"></a>16、mysql 索引结构</h2><h3 id="16-1、BTree-索引"><a href="#16-1、BTree-索引" class="headerlink" title="16.1、BTree 索引"></a>16.1、<font color="red">BTree 索引</font></h3><img src="https://i.loli.net/2021/11/02/rLwKxduJzcM5oPC.jpg" style="width:80%" alt="b树索引原理">



<p><font color="red">真实数据存在于叶子节点</font>，即 2、4、8、10、14、17、28、29、40、63、75、79</p>
<p><font color="red">非叶子节点不存储真实的数据，只存储指引搜索方向的数据项</font>，如16、34 并不真实存在于数据表中。</p>
<h3 id="16-2、Hash-索引"><a href="#16-2、Hash-索引" class="headerlink" title="16.2、Hash 索引"></a>16.2、Hash 索引</h3><h3 id="16-3、full-text-全文索引"><a href="#16-3、full-text-全文索引" class="headerlink" title="16.3、full-text 全文索引"></a>16.3、full-text 全文索引</h3><h3 id="16-4、R-Tree-索引"><a href="#16-4、R-Tree-索引" class="headerlink" title="16.4、R-Tree 索引"></a>16.4、R-Tree 索引</h3><h2 id="17、哪些情况需要创建索引"><a href="#17、哪些情况需要创建索引" class="headerlink" title="17、哪些情况需要创建索引"></a>17、哪些情况需要创建索引</h2><ol>
<li><p>逐渐自动建立唯一索引</p>
</li>
<li><p>频繁作为查询条件的字段应该创建索引</p>
</li>
<li><p>查询中与其他表关联的字段，外键关系建立索引</p>
</li>
<li><p>频繁更新的字段不适合创建索引，<font color="orange">因为每次更新不单单是更新了记录，还会更新索引</font></p>
</li>
<li><p>where 条件里用不到的字段不创建索引</p>
</li>
<li><p>单键&#x2F;组合索引的选择问题（在高并发下倾向创建组合索引）</p>
</li>
<li><p>查询中<code>排序</code>的字段，排序字段若通过索引去访问将大大提高排序速度</p>
</li>
</ol>
<h2 id="18、哪些情况不需要创建索引"><a href="#18、哪些情况不需要创建索引" class="headerlink" title="18、哪些情况不需要创建索引"></a>18、哪些情况不需要创建索引</h2><ol>
<li><p>表的记录太少（三百万左右性能开始下降）</p>
</li>
<li><p>经常增删改的表</p>
</li>
<li><p>数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引（如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">表中不重复的数据/表中总数据 = 索引的选择性，这个值越接近于 1，这个索引的效率就高</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h1><h2 id="19、MySql-Query-Optimizer"><a href="#19、MySql-Query-Optimizer" class="headerlink" title="19、MySql Query Optimizer"></a>19、MySql Query Optimizer</h2><p>MySQL 中专门负责优化 <code>SELECT</code> 语句的<font color="orange">优化器模块</font>，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 <code>Query </code>提供他认为最优的执行计划。</p>
<h2 id="20、MySQL-常见瓶颈"><a href="#20、MySQL-常见瓶颈" class="headerlink" title="20、MySQL 常见瓶颈"></a>20、MySQL 常见瓶颈</h2><ol>
<li>CPU：CPU 在饱和的时候一般发生在数据装入内存或从磁盘上读取数据的时候</li>
<li>IO：磁盘 I&#x2F;O 瓶颈发生在装入数据远大于内存容量的时候</li>
<li>服务器硬件的性能瓶颈：top，free，iostat 和 vmstat 来查看系统的性能状态</li>
</ol>
<h2 id="21、Explain"><a href="#21、Explain" class="headerlink" title="21、Explain"></a>21、Explain</h2><p><font style="color:;font-size:30px">能干嘛：</font></p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<p><font style="color:;font-size:30px">怎么用：</font></p>
<p>Explain + SQL 语句</p>
<p>执行计划包含的信息：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>extra</th>
</tr>
</thead>
<tbody><tr>
<td>select 查询的序列号，包含一组数字，<br>表示查询中执行 select 子句或操作表的顺序</td>
<td>SIMPLE：简单的 select 查询，查询中不包含子查询或者 UNION：<br>PRIMARY：最外层查询<br>SUBQUERY：子查询<br>DERIVED：在 FROM 列表中包含的子查询被标记为 DERIVED（衍生）MySQL会递归这些子查询，把结果放在临时表中<br>UNION：若第二个 SELECT 出现在 UNION 之后，则被标记为 UNION；若 UNION 包含在 FROM 子句的子查询中，外层 SELECT 将被标记为：DERIVED<br>UNION RESULT：从 UNION 表获取结果的 SELECT</td>
<td></td>
<td>最好到最差依次是：system&gt;const&gt;eq_ref<br>&gt;ref&gt;range&gt;index&gt;all<br></td>
<td>显示可能应用在这张表中的索引，一个或多个。</td>
<td>实际使用的索引，如果为null，则没有使用索引</td>
<td>表示索引中使用的字节数，可通过该列计算查询中使用的索引长度。在不损失精确性的情况下，长度越短越好</td>
<td>显示索引哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</td>
<td>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</td>
<td>包含不适合在其它列中显示但十分重要的额外信息</td>
</tr>
<tr>
<td>三种情况：1、id 相同，执行顺序由上至下<br>2、如果是子查询，id 的序号会递增，<br><code>id 值越大优先级越高，越先被执行</code>。<br>3、id 如果相同，可以认为是一组，从上往下顺序<br>执行，在所有组中，id 值越大，优先级越高，<br>越先执行</td>
<td>查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询</td>
<td></td>
<td>一般保证查询在range级别或ref级别</td>
<td>查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</td>
<td>查询中若使用了覆盖索引，则索引只出现在key列表中</td>
<td>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="22、索引优化"><a href="#22、索引优化" class="headerlink" title="22、索引优化"></a>22、索引优化</h2><h3 id="22-1、单表"><a href="#22-1、单表" class="headerlink" title="22.1、单表"></a>22.1、单表</h3><ul>
<li>范围会导致索引失效，组合索引中的字段不要涉及到范围</li>
</ul>
<h3 id="22-2、两表"><a href="#22-2、两表" class="headerlink" title="22.2、两表"></a>22.2、两表</h3><ul>
<li>LEFT JOIN 建立右表索引，LEFT JOIN 条件用于确定如何从右表搜索行，左边一定都有，           所以右边是关键点，一定要建立索引。（右连接类似）</li>
</ul>
<h3 id="22-3、三表"><a href="#22-3、三表" class="headerlink" title="22.3、三表"></a>22.3、三表</h3><ul>
<li>索引最好设置在需要经常查询的字段中</li>
<li>尽可能减少 join 语句中的 NestedLoop 的循环总次数：“永远用小结果集驱动大的结果集”</li>
<li>优先优化 Nested Loop 的内层循环</li>
<li>保证 Join 语句中被驱动表上 join 条件字段已经被索引</li>
<li>当无法保证被驱动表的 join 条件字段被索引且内存资源充足的前提下， 不要太吝惜 joinbuffer 的使用</li>
</ul>
<h3 id="22-4、索引失效"><a href="#22-4、索引失效" class="headerlink" title="22.4、索引失效"></a>22.4、索引失效</h3><ol>
<li>全值匹配我最爱</li>
<li>最佳左前缀法则：如果索引了多列，要遵守最佳左前缀法则，指的是查询从索引的<code>最左前列开始（开头大哥不能死）</code>并且<code>不跳过索引中的列（中间兄弟不能断）</code></li>
<li>不在索引列上做任何的操作（计算、函数、（自动 or 手动）类型转换），会导致索引失效而转向全表扫描</li>
<li>存储引擎不能使用索引中范围条件右边的列</li>
<li>尽量使用覆盖索引（只访问索引的查询（<code>索引列和查询列一致</code>）），减少 select *</li>
<li>mysql 在使用不等于（！&#x3D; 或者 &lt;&gt;）的时候无法使用索引会导致全表扫描</li>
<li>is null , is not null 也无法使用索引</li>
<li>like 以通配符开头（‘%abc…）MySQL 索引失效会变成全表扫描的操作（用<font color="orange">覆盖索引</font>避免全表扫描）</li>
<li><code>字符串不加单引号</code>索引失效</li>
<li>少用 or，用它连接时会索引失效</li>
</ol>
<h3 id="22-5、一般性建议"><a href="#22-5、一般性建议" class="headerlink" title="22.5、一般性建议"></a>22.5、一般性建议</h3><ol>
<li>对于单键索引，尽量选择针对当前 <code>query </code>过滤性更好的索引</li>
<li>在选择组合索引的时候，当前 <code>query </code>中过滤性最好的字段在索引字段顺序中， 位置越靠前越好</li>
<li>在选择组合索引的时候，尽量选择可以能够包含当前 <code>query </code>中的 <code>where </code>字句中更多字段的索引</li>
<li>尽可能通过分析统计信息和调整 <code>query </code>的写法来达到选择合适索引的目的</li>
</ol>
<h1 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h1><h2 id="23、一般操作"><a href="#23、一般操作" class="headerlink" title="23、一般操作"></a>23、一般操作</h2><ol>
<li>慢查询的开启并捕获</li>
<li>explain + 慢 sql 分析</li>
<li>show profile 查询 sql 在 mysql 服务器里面的执行细节和生命周期情况</li>
<li>sql 数据库服务器的参数调优</li>
</ol>
<h2 id="24、优化策略"><a href="#24、优化策略" class="headerlink" title="24、优化策略"></a>24、优化策略</h2><ol>
<li><font color="orange">永远小表驱动大表</font></li>
<li>exists or in 的使用，看子查询与主查询谁的数据量更小</li>
<li>order by 关键字优化<ul>
<li>尽量使用 index 方式排序，避免使用 filesort 方式排序<ul>
<li><code>order by</code> 语句使用<font color="orange">索引最左前列</font></li>
<li>使用 <code>where </code>子句与 <code>order by</code> 子句条件列组合满足<font color="orange">索引最左前列</font></li>
</ul>
</li>
<li>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</li>
<li>如果不在索引列上，filesort 有两种算法：mysql 就要启动双路排序和单路排序<ul>
<li>双路排序：取一批数据，要对磁盘进行两次扫描</li>
<li>单路排序：从磁盘中查询需要的所有列，按照 order by 列在 buffer 对它们进行排序，然后扫描顺序后的列表进行输出</li>
</ul>
</li>
<li>尽量不要用 <code>select *</code></li>
<li>增大 sort_buffer_size 的值</li>
<li>增大 max_length_for_sort_data 的值</li>
</ul>
</li>
<li>group by 关键字优化<ul>
<li>基本与 group by 一致</li>
</ul>
</li>
</ol>
<h1 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h1><p>mysql 的慢查询是 mysql 提供的一种日志记录，它用来记录在 mysql 中响应时间超过阈值的语句，具体指运行时间超过 long_query_time 值的 sql，则会被记录到慢查询日志中</p>
<p>如果不是调休需要，一般不建议启动该参数，会带来一定的性能影响</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 设置开启慢查询 或者 修改 my.conf 配置文件</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 查询日否开启慢查询</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h1 id="MySql-锁机制"><a href="#MySql-锁机制" class="headerlink" title="MySql 锁机制"></a>MySql 锁机制</h1><p>锁是计算机协调多个进程或线程并发访问某一资源的机制，在数据库中，除传统的计算资源（如 CPU、RAM、I&#x2F;O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<h2 id="25、锁的分类"><a href="#25、锁的分类" class="headerlink" title="25、锁的分类"></a>25、锁的分类</h2><ol>
<li><p>从对数据的操作类型分：</p>
<ul>
<li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li>
<li>写锁（排它锁）：当前写操作没有完成前，它会阻断其它写锁和读锁</li>
<li><font color="red">读锁会阻塞写，但是不会阻塞读。而写锁则会把读和写都阻塞</font></li>
</ul>
</li>
<li><p>从对数据的操作粒度分：</p>
<ul>
<li><p>表锁（偏读）</p>
</li>
<li><p>行锁（偏写）</p>
<ul>
<li><p>支持事务</p>
<ul>
<li>更新丢失：最后的更新覆盖了其它事务所做的更新</li>
<li>脏读：事务 A 读取到了 事务 B 已修改但尚未提交的数据</li>
<li>不可重复读：事务 A 读取到了事务 B 已提交过的修改数据</li>
<li>幻读：事务 A 读取到了 事务 B 新增的数据</li>
</ul>
</li>
<li><p>无索引行锁升级为表锁（<font color="orange">varchar 类型要加 单引号</font>）                                                                                                                                                                                                                                                                                            </p>
</li>
<li><p>间隙锁</p>
<ul>
<li>当用范围条件而不是相等条件检索数据，并请求共享或排他锁时，<font color="orange">InnoDB 会给符合条件的已有数据记录的索引项加锁</font>；对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）”</li>
<li>危害<ul>
<li>query 执行过程中通过范围查找的话，会锁定整个范围内所有的索引键值，即使这个键值并不存在</li>
<li>当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大危害</li>
</ul>
</li>
</ul>
</li>
<li><p>锁定某一行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx ... <span class="keyword">for</span> <span class="keyword">update</span> 锁定某一行后，其它的操作会被阻塞，知道锁定行的会话提交 <span class="keyword">commit</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>优化建议</p>
<ul>
<li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能较少检索条件，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能低级别事务隔离</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="26、复制原理"><a href="#26、复制原理" class="headerlink" title="26、复制原理"></a>26、复制原理</h2><img src="https://img2018.cnblogs.com/blog/1461409/201811/1461409-20181119181300094-111601832.png" style="width:60%">



<p>MySQL 复制过程分成三步：</p>
<ol>
<li>master 将改变记录到二进制日志（binary log），这些记录过程叫做二进制日志事件，binary log events</li>
<li>slave 将 master 的 binary log events 拷贝到它的中继日志（relay log）</li>
<li>slave 重做中继日志中的事件，将改变应用到自己的数据库中，MySQL 复制是异步的且串行化的</li>
</ol>
<h2 id="27、复制的基本原则"><a href="#27、复制的基本原则" class="headerlink" title="27、复制的基本原则"></a>27、复制的基本原则</h2><ol>
<li>每个 slave 只有一个 master</li>
<li>每个 slave 只能有一个唯一的服务器 ID</li>
<li>每个 master 可以有多个 salve</li>
</ol>
<h2 id="28、最大问题"><a href="#28、最大问题" class="headerlink" title="28、最大问题"></a>28、最大问题</h2><p>网络延时</p>
<h2 id="29、常见配置"><a href="#29、常见配置" class="headerlink" title="29、常见配置"></a>29、常见配置</h2><ol>
<li><p>mysql 版本一致且后台以服务运行</p>
</li>
<li><p>主从都配置在【mysqlId】结点下，都是小写</p>
</li>
<li><p>修改配置文件</p>
<ol>
<li><p>主机</p>
<ul>
<li><p>主服务器唯一 ID</p>
</li>
<li><p>启用二进制日志</p>
</li>
<li><p>【可选】启用错误日志</p>
</li>
<li><p>【可选】根目录</p>
</li>
<li><p>【可选】临时目录</p>
</li>
<li><p>【可选】数据目录</p>
</li>
<li><p>read-only &#x3D; 0</p>
</li>
<li><p>【可选】设置不要复制的数据库</p>
</li>
<li><p>【可选】设置需要复制的数据库</p>
</li>
</ul>
</li>
<li><p>从机</p>
<ul>
<li>从服务器唯一 ID</li>
<li>启用二进制文件</li>
</ul>
</li>
</ol>
</li>
<li><p>主机 and 从机 重启 mysql 服务</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>高级</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2022/09/23/nginx/</url>
    <content><![CDATA[<h1 id="Nginx-的使用"><a href="#Nginx-的使用" class="headerlink" title="Nginx 的使用"></a>Nginx 的使用</h1><p>Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器</p>
<p>核心：反向代理、负载均衡、动静分离</p>
<span id="more"></span>

<blockquote>
<p>加权策略</p>
</blockquote>
<ol>
<li>轮询：将请求轮着发给每一台服务器</li>
<li>加权轮询：在轮询的基础上加上权重值</li>
</ol>
<blockquote>
<p>Nginx常用命令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx #启动</span><br><span class="line">./nginx -s stop # 停止</span><br><span class="line">./nginx -s quit #安全退出</span><br><span class="line">./nginx -s reload # 重新加载配置文件</span><br><span class="line">ps aux|grep nginx # 查看nginx进程</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局配置</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">	upstream hqzqaq&#123;</span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">负载均衡配置</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">服务器资源</span></span><br><span class="line">		server 127.0.0.1:8080 weight=1;</span><br><span class="line">		server 127.0.0.1:8081 weight=1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 反向代理</span><br><span class="line">        location /&#123;</span><br><span class="line">        	root	html;</span><br><span class="line">        	index	index.html index.htm;</span><br><span class="line">        	proxy_pass http://hqzqaq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="1、1-反向代理"><a href="#1、1-反向代理" class="headerlink" title="1、1. 反向代理"></a>1、1. 反向代理</h2><blockquote>
<p>打开浏览器，在地址栏输入地址  <a href="http://www.123.com,跳转到/">www.123.com，跳转到</a> linux 系统 tomcat 主页面中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	80;</span><br><span class="line">	server_name	服务器地址</span><br><span class="line">	location / &#123; # /表示路径中包含 /</span><br><span class="line">		root	html;</span><br><span class="line">		proxy_pass http://127.0.0.1:8080; # 访问服务器的80端口时，将请求转发到本地的8080端口</span><br><span class="line">		index	index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务器中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	9001;</span><br><span class="line">	server_name	服务器地址;</span><br><span class="line">	location ~ /edu/&#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8080;</span><br><span class="line">	&#125;</span><br><span class="line">	location ~ /vod/&#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8081;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、2-负载均衡"><a href="#2、2-负载均衡" class="headerlink" title="2、2. 负载均衡"></a>2、2. 负载均衡</h2><blockquote>
<p>浏览器地址栏输入地址 <a href="http://192.168.17.129/edu/a.html">http://192.168.17.129/edu/a.html</a> 负载均衡效果，将请求平均到 8080 和 8081 端口中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">	ip_hash;</span><br><span class="line">	server 服务器地址:8080 weight=1;</span><br><span class="line">	server 服务器地址:8180 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://myserver;</span><br><span class="line">		proxy_connect_timeout 10;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3、3-动静分离"><a href="#3、3-动静分离" class="headerlink" title="3、3. 动静分离"></a>3、3. 动静分离</h2><p>将动态请求和静态请求分开，可以理解为 nginx 处理静态页面， tomcat 处理动态页面。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name 服务器地址;</span><br><span class="line">	location /www/ &#123;</span><br><span class="line">		root 静态资源路径;</span><br><span class="line">		index index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">	location /image/ &#123;</span><br><span class="line">		root 静态资源路径;</span><br><span class="line">		autoindex on;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>服务器</tag>
        <tag>负载均衡</tag>
        <tag>反向代理</tag>
        <tag>动静分离</tag>
      </tags>
  </entry>
  <entry>
    <title>smart-doc集成torna</title>
    <url>/2022/09/23/smart-doc%E9%9B%86%E6%88%90torna/</url>
    <content><![CDATA[<p><font style="color:#009688;font-size:25px">smart-doc 与 新版 torna 集成</font></p>
<blockquote>
<p>1.torna 介绍</p>
<p>2.smart-doc 介绍</p>
<p>3.准备工作</p>
<p>4.构建项目</p>
<p>5.smart-doc 与 springboot 结合</p>
<p>6.总结</p>
<p>需要有 docker 及 docker-compose 环境</p>
</blockquote>
<span id="more"></span>

<h1 id="使用-docker-compose-搭建-torna-环境"><a href="#使用-docker-compose-搭建-torna-环境" class="headerlink" title="使用 docker-compose 搭建 torna 环境"></a>使用 docker-compose 搭建 torna 环境</h1><h2 id="1、torna-介绍"><a href="#1、torna-介绍" class="headerlink" title="1、torna 介绍"></a>1、torna 介绍</h2><p>项目地址：</p>
<p><code>https://gitee.com/durcframework/torna</code></p>
<p>torna 是一个企业接口文档解决方案，目标是让文档管理变得更加方便、快捷。Torna采用团队协作的方式管理和维护项目API文档，将不同形式的文档纳入进来，形成一个统一的维护方式。Torna弥补了传统文档生成工具（如swagger）的不如之处，在保持原有功能的前提下丰富并增强了一些实用的功能。</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/arc2.png" style="width:40%;height:50%">



<h2 id="2、smart-doc-介绍"><a href="#2、smart-doc-介绍" class="headerlink" title="2、smart-doc 介绍"></a>2、smart-doc 介绍</h2><p><code>smart-doc</code> 是一个彻底无侵入的 <code>java Rest Api</code> 文档生成工具。让用户的代码保持整洁一直是 <code>smart-doc</code> 的核心理念。使用过 <code>swagger </code>的人就知道，为了生成文档，一个接口上要写上许许多多的注解，不仅繁杂，而且侵入式程度很高，对 <code>swagger </code>有很强的依赖，而 <code>smart-doc </code>则是要简洁许多，不需要写注解，不想用了，去掉依赖即可，非常方便。</p>
<h2 id="3、准备工作"><a href="#3、准备工作" class="headerlink" title="3、准备工作"></a>3、准备工作</h2><h3 id="3-1、准备环境"><a href="#3-1、准备环境" class="headerlink" title="3.1、准备环境"></a>3.1、准备环境</h3><p>准备一台 linux 虚拟机，安装 docker 环境以及 docker-compose，也使用 windows 电脑上的 wsl 环境，去 docker 的官网安装 win 版 docker，本文使用的环境为 win 版docker。</p>
<h3 id="3-2、拉取项目"><a href="#3-2、拉取项目" class="headerlink" title="3.2、拉取项目"></a>3.2、拉取项目</h3><p><font color="orange">项目地址：</font></p>
<p><code>https://gitee.com/durcframework/torna/tree/master/torna-docker-compose</code></p>
<p><font color="orange">git地址：</font></p>
<p><code>https://gitee.com/durcframework/torna.git</code></p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218100022849.png" style="width:65%">



<p>使用 git 拉取项目之后的文件目录如下：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218100158506.png" style="width:60%">



<h3 id="3-3、配置文件内容介绍"><a href="#3-3、配置文件内容介绍" class="headerlink" title="3.3、配置文件内容介绍"></a>3.3、配置文件内容介绍</h3><blockquote>
<p>docker-compose.yml</p>
</blockquote>
<p>总共是编排了两个容器，一个是 <code>mysql</code>，一个是 <code>torna </code>，与源文件相比，我开放了 <code>3306 </code>端口，并且设置了 <code>mysql </code>的数据目录挂载。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span> <span class="comment">#开放外部连接端口，若是本机也安装了 mysql，注意端口冲突问题</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span> <span class="comment"># 可以自定义密码，但是不要忘了修改 application.properties 中的数据库连接</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_HOST:</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./my.cnf:/etc/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span> <span class="comment"># 设置 mysql 数据外部挂载目录</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">torna-net</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">torna:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tanghc2020/torna:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">torna</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7700</span><span class="string">:7700</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># 建立连接</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./application.properties:/torna/config/application.properties</span> <span class="comment"># 挂载项目的配置文件</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=-server</span> <span class="string">-Xmx512m</span> <span class="string">-Xms512m</span> <span class="string">-Djava.awt.headless=true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">torna-net</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">torna-net:</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Dockerfile</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mysql:<span class="number">5.7</span></span><br><span class="line"><span class="comment">#定义会被容器自动执行的目录</span></span><br><span class="line"><span class="keyword">ENV</span> AUTO_RUN_DIR /docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d</span></span><br><span class="line"><span class="comment">#定义初始化sql文件</span></span><br><span class="line"><span class="keyword">ENV</span> INIT_SQL mysql.sql</span><br><span class="line"><span class="comment">#把要执行的sql文件放到/docker-entrypoint-initdb.d/目录下，容器会自动执行这个sql</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$INIT_SQL</span> <span class="variable">$AUTO_RUN_DIR</span></span></span><br><span class="line"><span class="comment">#给执行文件增加可执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> a+x <span class="variable">$AUTO_RUN_DIR</span>/<span class="variable">$INIT_SQL</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>application.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目的端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">7700</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库连接信息，因为 torna 使用 links 命令连接了 mysql 容器，所以可以使用 mysql 容器名代替 ip 地址</span></span><br><span class="line"><span class="attr">mysql.host</span>=<span class="string">mysql:3306</span></span><br><span class="line"><span class="attr">mysql.schema</span>=<span class="string">torna</span></span><br><span class="line"><span class="attr">mysql.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">mysql.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>my.cnf</p>
</blockquote>
<p><code>mysql </code>的一些常规配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="comment">#character-set-server=utf8</span></span><br><span class="line">character-set-client-handshake=FALSE</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line">[client]</span><br><span class="line"><span class="comment">#utf8mb4字符集可以存储emoji表情字符</span></span><br><span class="line"><span class="comment">#default-character-set=utf8</span></span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment">#default-character-set=utf8</span></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>



<blockquote>
<p>mysql.sql</p>
</blockquote>
<p><code>torna </code>项目的建库建表 <code>sql</code>，这里不做赘述。</p>
<h2 id="4、构建项目"><a href="#4、构建项目" class="headerlink" title="4、构建项目"></a>4、构建项目</h2><h3 id="4-1、拉取所需镜像"><a href="#4-1、拉取所需镜像" class="headerlink" title="4.1、拉取所需镜像"></a>4.1、拉取所需镜像</h3><blockquote>
<p>mysql</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>



<blockquote>
<p>torna</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取最新的 torna</span></span><br><span class="line">docker pull tanghc2020/torna</span><br></pre></td></tr></table></figure>



<h3 id="4-2、编排容器"><a href="#4-2、编排容器" class="headerlink" title="4.2、编排容器"></a>4.2、编排容器</h3><p> 在 docker-compose.yml 文件的路径下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编排容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看编排容器运行情况</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure>



<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218102444263.png" style>



<p>可以看到两个项目都已成功运行。</p>
<h3 id="4-3、可能遇到的问题"><a href="#4-3、可能遇到的问题" class="headerlink" title="4.3、可能遇到的问题"></a>4.3、可能遇到的问题</h3><p>若是有容器一直处于 <code>restart </code>的状态或是访问 <code>torna </code>页面失败，则可以使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f mysql </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">docker logs -f torna</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看具体的问题</span></span><br></pre></td></tr></table></figure>



<p>我遇到的问题是，<code>docker-compose up -d</code> 命令编排之后，<code>mysql </code>容器并未自动执行 <code>mysql.sql</code> 建表 <code>sql</code>，导致 <code>torna </code>启动失败，错误为 <code>mysql</code> 中没有找到 <code>torna </code>数据库。</p>
<p>我随即使用数据库连接工具连接 <code>mysql</code>，手动建立 <code>torna </code>数据库，并执行 <code>mysql.sql </code>文件。再使用 <code>docker restart torna</code> 重启 <code>torna </code>容器。</p>
<h3 id="4-4、访问-torna"><a href="#4-4、访问-torna" class="headerlink" title="4.4、访问 torna"></a>4.4、访问 torna</h3><p>部署在本机的话，在浏览器输入：<code>127.0.0.1:7700</code> ，即可访问项目，初始账户为： <code>admin@torna.cn</code> 密码为：<code>123456</code></p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218102558851.png" style="width:60%">





<p>登录之后：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218102819476.png" style="width:65%">



<p>创建空间之后，再创建项目，在项目中新建模块</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218104052481.png" alt="image-20220218104052481"></p>
<p>点击新建模块，再点击 <code>OpenAPI</code>，<font color="orange">token </font>是推送接口文档的关键</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218104335837.png" style="width:60%">



<h2 id="5、smart-doc-与-springboot-结合"><a href="#5、smart-doc-与-springboot-结合" class="headerlink" title="5、smart-doc 与 springboot 结合"></a>5、smart-doc 与 springboot 结合</h2><h3 id="5-1、maven-引入依赖"><a href="#5-1、maven-引入依赖" class="headerlink" title="5.1、maven 引入依赖"></a>5.1、maven 引入依赖</h3><p><font color="orange">仔细阅读每个配置项的注释，然后根据自己项目情况去配置</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.shalousun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smart-doc-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>[最新版本]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定生成文档的使用的配置文件,配置文件放在自己的项目中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configFile</span>&gt;</span>./src/main/resources/smart-doc.json<span class="tag">&lt;/<span class="name">configFile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定项目名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">projectName</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">projectName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式为：groupId:artifactId;参考如下--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--也可以支持正则式如：com.alibaba:.* --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.alibaba:fastjson<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--includes配置用于配置加载外部依赖源码,配置后插件会按照配置项加载外部源代码而不是自动加载所有，因此使用时需要注意--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式为：groupId:artifactId;参考如下--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--也可以支持正则式如：com.alibaba:.* --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.alibaba:fastjson<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果不需要在执行编译时启动smart-doc，则将phase注释掉--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--smart-doc提供了html、openapi、markdown等goal，可按需配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>html<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2、smart-doc-json"><a href="#5-2、smart-doc-json" class="headerlink" title="5.2、smart-doc.json"></a>5.2、smart-doc.json</h3><p>在 resource 目录下新建 smart-doc.json 文件，具体的配置请访问：<a href="https://smart-doc-group.github.io/#/zh-cn/diy/config">https://smart-doc-group.github.io/#/zh-cn/diy/config</a></p>
<p>我的配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serverUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:3333/workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allInOne&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main/resources/static/doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coverOld&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDebugPage&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xt256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packageFilters&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.product6.controller.*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;08a91f662cae459a91238fafaa6e371c&quot;</span><span class="punctuation">,</span> <span class="comment">// 注意 appToken 为 OpenAPI 中的 token</span></span><br><span class="line">  <span class="attr">&quot;openUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:7700/api&quot;</span><span class="punctuation">,</span> <span class="comment">// openUrl 为 OpenAPI 中的请求路径</span></span><br><span class="line">  <span class="attr">&quot;md5EncryptedHtmlName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debugEnvName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试环境&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debugEnvUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tornaDebug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inlineEnum&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skipTransientField&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errorCodeDictionaries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enumClassName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.product6.result.CommonCode&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codeField&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;descField&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3、执行推送"><a href="#5-3、执行推送" class="headerlink" title="5.3、执行推送"></a>5.3、执行推送</h3><p>使用 <code>smart-doc</code> 插件进行推送</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218110503181.png" style="width:30%">





<p>推送完成之后，可以在 torna 上对应的模块看到推送的接口</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218111010251.png" style="width:70%">



<h3 id="5-4、可能遇到的问题"><a href="#5-4、可能遇到的问题" class="headerlink" title="5.4、可能遇到的问题"></a>5.4、可能遇到的问题</h3><p>推送中遇到 <code>Data too long for column &#39;example&#39; at row 1 ....</code>，定位到是 mysql 中 doc_param 表中 example 字段长度太短，原来为 varchar(1024)，我将其修改为 text 类型</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220218111451227.png" style="width:80%">



<h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><ol>
<li><p>依赖于网上的教程，不注意去看官网</p>
<p>网上的教程有一定时效性，像是 <code>torna </code>新版本只需要 <code>appToken </code>认证即可，旧的版本则需要 <code>appKey</code>,<code>appToken</code>,<code>secret </code>三个值，依据网上的教程，我死活找不到 开放用户的选项，也就无法获取 <code>appKey</code>,&#96;&#96;appToken<code>,</code>secret&#96; 这三个值，最后求助于官方群，也感谢作者的耐心解答。</p>
<p><font color="orange">一般官网上的教程都是最新的，优先去查阅官网。</font></p>
</li>
<li><p>mvn 打包的问题</p>
<p>使用的项目是一个 maven 多模块的项目，当打包一个模块总是出现 <code>找不到符号 </code> 这个问题，我将其依赖项执行了 <code>install </code>命令，再次打包依旧是这个问题，不管我怎么清缓存，或者是去本地仓库删除依赖，又或者是更新 maven 的版本，这个问题始终存在，最终在网上找到了一个帖子，执行了 <code>mvn idea:idea</code>,莫名奇妙的编译完成了，只能用神奇来说明</p>
<p><font color="orange">新版的 maven 感觉编译速度有所加快。</font></p>
</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>smart-doc</tag>
        <tag>torna</tag>
        <tag>非侵入式接口文档</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud alibaba</title>
    <url>/2022/09/23/spring-cloud-alibaba/</url>
    <content><![CDATA[<h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="1、1-微服务介绍"><a href="#1、1-微服务介绍" class="headerlink" title="1、1. 微服务介绍"></a>1、1. 微服务介绍</h2><h3 id="1-1、1-1-系统架构演变"><a href="#1-1、1-1-系统架构演变" class="headerlink" title="1.1、1.1 系统架构演变"></a>1.1、1.1 系统架构演变</h3><ul>
<li>单体应用架构：起初当网站流量小，将所有功能都写在一个应用里面，对整个应用进行部署，以减少部署节点和成本。对于这个架构简化增删查改的工作量的数据访问框架（ORM）是关键<span id="more"></span>
<ul>
<li>优点：<ul>
<li>架构图简单易懂</li>
<li>对于小项目开发、维护简单</li>
<li>部署一个单点tomcat上后期维护方便</li>
</ul>
</li>
<li>缺点：<ul>
<li>对于大型项目来说维护困难</li>
<li>模块之间紧密耦合。单点容错率低</li>
<li>无法争对某一个模块进行水平扩展或优化</li>
</ul>
</li>
</ul>
</li>
<li>垂直应用架构：当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆分成互不相干的几个应用，以提升效率，此时，用于加速前端页面开发的web框架（MVC）是关键<ul>
<li>优点：<ul>
<li>模块化，可以进行水平扩展和优化</li>
<li>提高单点的容错率</li>
</ul>
</li>
<li>缺点：<ul>
<li>系统之间无法调用</li>
<li>会有部分重复代码</li>
</ul>
</li>
</ul>
</li>
<li>分布式架构：当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式框架（RPC）是关键。<ul>
<li>优点：<ul>
<li>抽取公共代码为服务层，增强代码复用性</li>
</ul>
</li>
<li>缺点：<ul>
<li>调用关系复杂，维护困难</li>
</ul>
</li>
</ul>
</li>
<li>SOA架构：当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心（SOA）是关键<ul>
<li>优点：<ul>
<li>使用服务治理中心帮我们维护复杂的调用关系</li>
</ul>
</li>
<li>缺点：<ul>
<li>服务有依赖性，可能会因为一个服务的问题，导致多个系统不可用（拆分的不够彻底）</li>
</ul>
</li>
</ul>
</li>
<li>微服务架构<ul>
<li>优点：<ul>
<li>服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展</li>
<li>微服务之间采用Restful等轻量级http协议相互调用</li>
</ul>
</li>
<li>缺点：<ul>
<li>分布式系统开发的技术成本高（容错、分布式事务等）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2、1-2-微服务架构的常用概念"><a href="#1-2、1-2-微服务架构的常用概念" class="headerlink" title="1.2、1.2 微服务架构的常用概念"></a>1.2、1.2 微服务架构的常用概念</h3><h4 id="1-2-1、1-2-1-服务治理"><a href="#1-2-1、1-2-1-服务治理" class="headerlink" title="1.2.1、1.2.1 服务治理"></a>1.2.1、1.2.1 服务治理</h4><p>服务的自动化管理、其核心是服务的自动注册与发现</p>
<pre><code>    - 服务注册
    - 服务发现
    - 服务剔除
</code></pre>
<h4 id="1-2-2、1-2-2-服务调用"><a href="#1-2-2、1-2-2-服务调用" class="headerlink" title="1.2.2、1.2.2 服务调用"></a>1.2.2、1.2.2 服务调用</h4><p>主流的远程调用技术有基于HTTP的RESTful接口以及基于TCP的RPC协议。</p>
<table>
<thead>
<tr>
<th align="left">比较项</th>
<th>RESTful</th>
<th>RPC</th>
</tr>
</thead>
<tbody><tr>
<td align="left">通信协议</td>
<td>HTTP</td>
<td>一般使用TCP</td>
</tr>
<tr>
<td align="left">性能</td>
<td>略低</td>
<td>较高</td>
</tr>
<tr>
<td align="left">灵活度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td align="left">应用</td>
<td>微服务架构</td>
<td>SOA架构</td>
</tr>
</tbody></table>
<h4 id="1-2-3、1-2-3-服务网关"><a href="#1-2-3、1-2-3-服务网关" class="headerlink" title="1.2.3、1.2.3 服务网关"></a>1.2.3、1.2.3 服务网关</h4><p>将所有API调用统一接入到API网关层，由网关层统一接入和输出。基本功能有：<code>统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力</code>。</p>
<h4 id="1-2-4、1-2-4-服务容错"><a href="#1-2-4、1-2-4-服务容错" class="headerlink" title="1.2.4、1.2.4 服务容错"></a>1.2.4、1.2.4 服务容错</h4><p>核心思想：</p>
<pre><code>- 不被外界环境影响
- 不被上游请求压垮
- 不被下游响应拖垮
</code></pre>
<h4 id="1-2-5、1-2-5-链路追踪"><a href="#1-2-5、1-2-5-链路追踪" class="headerlink" title="1.2.5、1.2.5 链路追踪"></a>1.2.5、1.2.5 链路追踪</h4><p>对一次请求涉及的多个服务链路进行日志追踪，性能监控。</p>
<p><font color="red">springboot、springcloud alibaba版本要对应</font></p>
<h3 id="1-3、1-3-微服务项目构建"><a href="#1-3、1-3-微服务项目构建" class="headerlink" title="1.3、1.3 微服务项目构建"></a>1.3、1.3 微服务项目构建</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 服务注册中心 =======&gt; Nacos</span><br><span class="line"><span class="bullet">2.</span> 服务间通信负载均衡 =======&gt; HttpRest a.RestTemplate + Ribbon(Netfix) b. Openfeign(Spring)</span><br><span class="line"><span class="bullet">3.</span> 服务流控和服务降级 =======&gt; Sentinel</span><br><span class="line"><span class="bullet">4.</span> 服务网关组件 ========&gt; Gateway(Spring)</span><br><span class="line"><span class="bullet">5.</span> 统一配置中心组件 =======&gt; Nacos</span><br></pre></td></tr></table></figure>



<h3 id="1-4、1-4-springcloud-alibaba-环境搭建"><a href="#1-4、1-4-springcloud-alibaba-环境搭建" class="headerlink" title="1.4、1.4 springcloud alibaba 环境搭建"></a>1.4、1.4 springcloud alibaba 环境搭建</h3><ol>
<li><p>创建全局父项目</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 维护 springcloud 依赖			Hoxton SR6</span><br><span class="line"><span class="bullet">-</span> 维护 alibaba 依赖				2.2.1.RELEASE</span><br><span class="line"><span class="bullet">-</span> 继承 springboot 父项目 2.2.5.RELEASE</span><br></pre></td></tr></table></figure>
</li>
<li><p>父项目中依赖维护</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR6<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.alibaba-version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">spring.cloud.alibaba-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    继承 springboot 父项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    维护依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    维护 springcloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- pom 记录其它组件的版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    维护 springcloud alibaba--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2、2-Nacos-Discovery-–-服务治理"><a href="#2、2-Nacos-Discovery-–-服务治理" class="headerlink" title="2、2. Nacos Discovery – 服务治理"></a>2、2. Nacos Discovery – 服务治理</h2><p>替换 springcloud 中 <font color="orange">consul </font>、<font color="orange">eureka </font>和 <font color="orange">config </font>组件</p>
<h3 id="2-1、2-1-服务治理"><a href="#2-1、2-1-服务治理" class="headerlink" title="2.1、2.1 服务治理"></a>2.1、2.1 服务治理</h3><p>实现各个微服务的自动化注册与发现。</p>
<blockquote>
<p>服务注册</p>
</blockquote>
<p>在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以<code>心跳</code>的方式去检测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。</p>
<blockquote>
<p>服务发现</p>
</blockquote>
<p>服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问。</p>
<blockquote>
<p>注册中心</p>
</blockquote>
<p>在微服务架构中起到了协调者的作用</p>
<ol>
<li>服务发现<ul>
<li>服务注册：保存服务提供者和服务调用者的信息</li>
<li>服务订阅：服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息</li>
</ul>
</li>
<li>服务配置<ul>
<li>配置订阅：服务提供者和服务调用者订阅微服务相关的配置</li>
<li>配置下发：主动将配置推送给服务提供者和服务调用者</li>
</ul>
</li>
<li>服务健康检测<ul>
<li>检测服务提供者的健康情况，如果发现异常，执行服务剔除</li>
</ul>
</li>
</ol>
<h3 id="2-2、2-2-nacos-实战"><a href="#2-2、2-2-nacos-实战" class="headerlink" title="2.2、2.2 nacos 实战"></a>2.2、2.2 nacos 实战</h3><blockquote>
<p>下载、启动</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">startup.cmd <span class="literal">-m</span> standalone	<span class="comment">#单体模式启动</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务注册</p>
</blockquote>
<ol>
<li><p>添加nacos依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>在主类上添加<code>@EnableDiscoveryClient</code>注解</p>
</li>
<li><p>在application.yml中添加nacos服务的地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">discovery:</span></span><br><span class="line">				<span class="string">server-addr:127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<p>在nacos管理界面可以看到服务即代表注册成功</p>
<p>注入  DiscoveryClient 对象</p>
</li>
</ol>
<h3 id="2-3、2-3-实现服务调用的负载均衡"><a href="#2-3、2-3-实现服务调用的负载均衡" class="headerlink" title="2.3、2.3 实现服务调用的负载均衡"></a>2.3、2.3 实现服务调用的负载均衡</h3><p>​	负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器、组件）上进行执行。</p>
<p>​	根据负载均衡发生位置的不同，一般分为 <font color="orange">服务端负载均衡</font> 和 <font color="orange">客户端负载均衡</font></p>
<p>​	服务端负载均衡：发生在服务提供者一方，比如常见的 <font color="orange">nginx</font> 负载均衡</p>
<p>​	客户端负载均衡：发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求</p>
<h3 id="2-4、2-4-基于-Ribbon-实现负载均衡"><a href="#2-4、2-4-基于-Ribbon-实现负载均衡" class="headerlink" title="2.4、2.4 基于 Ribbon 实现负载均衡"></a>2.4、2.4 基于 Ribbon 实现负载均衡</h3><p>Ribbon 提供 DiscoverClient：服务发现的客户端 LoadBalanceClient：负载均衡的客户端 @LoadBalance</p>
<ul>
<li><p>在 RestTemplate 的生成方法上添加 @LoadBalanced 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改服务调用的方法</p>
<p>使用微服务名代替地址</p>
</li>
<li><p>负载均衡策略</p>
<ol>
<li>RoundRobinRule：轮询方式轮询选择 server</li>
<li>RandomRule：随机选择一个 server</li>
<li>BestAvailableRule：选择一个最小的并发请求的 server</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line"><span class="attr">service-product:</span>	<span class="comment"># 调用的提供者的名称</span></span><br><span class="line">	<span class="attr">ribbon:</span></span><br><span class="line">		<span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-5、2-5-基于-Fegin-实现服务调用"><a href="#2-5、2-5-基于-Fegin-实现服务调用" class="headerlink" title="2.5、2.5 基于 Fegin 实现服务调用"></a>2.5、<font color="orange">2.5 基于 Fegin 实现服务调用</font></h3><p>​	Fegin 是 Spring Cloud提供的一个声明式的伪 Http 客户端，它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。</p>
<p>​	在 Nacos 下使用 Fegin 默认就实现了负载均衡的效果。</p>
<ol>
<li><p>加入 Fegin 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;--fegin组件--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主类上添加 @EnableFeignClients 注解开启 Fegin</p>
</li>
<li><p>创建一个 service，并使用 Fegin 实现微服务调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;service-product&quot;)</span><span class="comment">//声明调用的提供者的name</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="comment">//指定调用提供者的哪个方法</span></span><br><span class="line">    <span class="comment">//@FeignClient + @GetMapping 就是一个完整的请求 http://service-product/product/&#123;pid&#125;</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/product/&#123;pid&#125;&quot;)</span> <span class="comment">//指定请求的 URI 部分</span></span><br><span class="line">    Product <span class="title function_">finfByPid</span><span class="params">(<span class="meta">@pathVariable(&quot;pid&quot;)</span> Integer pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-6、2-6-统一配置中心"><a href="#2-6、2-6-统一配置中心" class="headerlink" title="2.6、2.6 统一配置中心"></a>2.6、2.6 统一配置中心</h3><pre><code>1. 管理配置文件的方式是在自己所在的服务器上形成一个版本库，不需要再创建远程版本库
2. nacos 作为统一配置中心管理配置文件时，同样也存在版本控制
</code></pre>
<blockquote>
<p>步骤</p>
</blockquote>
<ul>
<li><p>在 nacos 中新建配置文件，<font color="orange">注意配置文件的命名</font></p>
</li>
<li><p>在微服务中引入 nacos-config 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos-config-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件配置拉取 nacos 中的哪个配置文件，配置文件命名为 <font color="orange">bootstrap.properties</font></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 config server 地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">47.99.77.213:8848</span></span><br><span class="line"><span class="comment"># 配置从哪个组获取配置</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="comment"># 配置 拉取组里的哪个文件</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.name</span>=<span class="string">configclient-prod</span></span><br><span class="line"><span class="comment"># 配置 拉取组里的那个文件的后缀名</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.file-extension</span>=<span class="string">properties</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>细节</p>
<ul>
<li>dataId：代表完整配置文件名称</li>
<li>完整配置文件名称 &#x3D; prefix（前缀）+ 环境（env）+ file -extension（后缀）</li>
<li>dataId &#x3D; spring.cloud.nacos.config.name + spring.cloud.nacos.config.file-extension</li>
<li>dataId &#x3D; spring.cloud.nacos.config.prefix + spring.profiles.active +  spring.cloud.nacos.config.file-extension</li>
</ul>
</li>
</ul>
<h3 id="2-7、2-7-nacos-持久化"><a href="#2-7、2-7-nacos-持久化" class="headerlink" title="2.7、2.7 nacos 持久化"></a>2.7、2.7 nacos 持久化</h3><p>持久化：管理的配置信息持久化</p>
<p><code>注意：</code>默认 nacos 存在配置信息持久化，默认的持久化方式为内嵌数据库 debery</p>
<p>​	官方推荐使用 <strong>mysql</strong> 数据库</p>
<h3 id="2-8、2-8-nacos-server-集群搭建"><a href="#2-8、2-8-nacos-server-集群搭建" class="headerlink" title="2.8、2.8 nacos server 集群搭建"></a>2.8、2.8 nacos server 集群搭建</h3><blockquote>
<p>前置条件</p>
</blockquote>
<ol>
<li>需要一个负载均衡组件（SLB），将请求转发。</li>
</ol>
<p>![nacos server集群](E:\desktop\typora-notes\图\nacos server集群.png)</p>
<ol start="2">
<li><font color="orange">需要配置 mysql 持久化</font></li>
</ol>
<blockquote>
<p>集群的搭建</p>
</blockquote>
<ul>
<li>准备3个 nacos 节点，并连接 mysql 数据库。</li>
<li>初始化 mysql 数据库</li>
<li>修改 nacos conf 目录中 cluster.conf 文件中添加所有集群节点，<font color="green">写入节点的地址</font></li>
<li>修改 nacos 各自的端口号</li>
</ul>
<h3 id="2-9、2-9-nacos-高可用"><a href="#2-9、2-9-nacos-高可用" class="headerlink" title="2.9、2.9 nacos 高可用"></a>2.9、2.9 nacos 高可用</h3><p>安装 nginx 配置 nginx.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream nacos-server&#123; # 负载均衡的节点</span><br><span class="line">	server ip:端口;</span><br><span class="line">	server ip:端口;</span><br><span class="line">	server ip:端口;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">	proxy_pass http://nacos-servers/; # 对应上面的 u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、3-entinel-–-服务容错"><a href="#3、3-entinel-–-服务容错" class="headerlink" title="3、3. entinel – 服务容错"></a>3、3. entinel – 服务容错</h2><p>​	替换 springcloud 中的 Hystrix 组件</p>
<p>​	高并发带来的问题：不能保证每个服务 100% 可以，单个服务出现问题，若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。</p>
<h3 id="3-1、3-1-服务雪崩效应"><a href="#3-1、3-1-服务雪崩效应" class="headerlink" title="3.1、3.1 服务雪崩效应"></a>3.1、3.1 服务雪崩效应</h3><p>​	由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果</p>
<p>​	雪崩效应发生的原因多种多样：不合理的容量设计、高并发下某一个方法响应变慢、某台机器资源耗尽。</p>
<h3 id="3-2、3-2-服务容错思路"><a href="#3-2、3-2-服务容错思路" class="headerlink" title="3.2、3.2 服务容错思路"></a>3.2、3.2 服务容错思路</h3><ul>
<li>隔离：将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。线程池隔离、信号量隔离</li>
<li>超时：在上游服务调用下游服务时，设置一个最大响应时间，如果超过这个时间，下游未做出反应，就断开请求，释放掉线程。</li>
<li>限流：限制系统的输入和输出流量已达到保护系统的目的。</li>
<li>熔断：当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。<ul>
<li>熔断关闭状态（ Closed ）：服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制。</li>
<li>熔断开启状态 （ Open ）：后续对该服务&#x3D;&#x3D;&#x3D;&#x3D;口的调用不再经过网络，直接执行本地的 fallback 方法</li>
<li>半熔断状态（Half-Open）：尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。</li>
</ul>
</li>
<li>降级：为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。</li>
</ul>
<p>容错组件：Hystrix、Resilience4J、Sentinel</p>
<h3 id="3-3、3-3-Sentinel"><a href="#3-3、3-3-Sentinel" class="headerlink" title="3.3、3.3 Sentinel"></a>3.3、3.3 Sentinel</h3><p>Sentine 分为两个部分：</p>
<ul>
<li>核心库（java客户端）不依赖任何框架&#x2F;库，能够运行于所有 java 运行时环境，同时对 Dubbo&#x2F;Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<blockquote>
<p>微服务集成 Sentinel</p>
</blockquote>
<ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行控制台</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Dserver</span>.port=<span class="number">8080</span> <span class="literal">-Dcsp</span>.sentinel.dashboard.server=localhost:<span class="number">8080</span> <span class="literal">-Dproject</span>.name=sentinel<span class="literal">-dashboard</span> <span class="literal">-jar</span> sentinel<span class="literal">-dashboard-1</span>.<span class="number">7.0</span>.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">	<span class="attr">transport:</span></span><br><span class="line">		<span class="attr">port:</span> <span class="number">9999</span> <span class="comment">#跟控制台交流的端口，随意指定一个未使用的端口即可</span></span><br><span class="line">		<span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#指定控制台服务的地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器访问 8080端口</p>
</li>
</ol>
<blockquote>
<p>基本概念</p>
</blockquote>
<ul>
<li><p>资源</p>
<p><font color="orange">Sentinel 要保护的东西</font></p>
<p>资源是 Sentinel 的关键概念，它可以是 Java 应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码。</p>
</li>
<li><p>规则</p>
<p><font color="orange">规则就是用来定义如何保护资源的</font></p>
<p>主要包括：流量控制规则、熔断降级规则以及系统保护规则</p>
<ul>
<li>流量控制：根据需要把随机的请求调整成合适的形状</li>
<li>熔断降级：当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。<ul>
<li>通过并发线程数进行控制</li>
<li>通过响应时间对资源进行降级</li>
</ul>
</li>
<li>系统负载保护：当系统负载较高的时候，如果还持续让请求进入可能会导致系统崩溃，无法响应。在 集群环境下，会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</li>
</ul>
</li>
</ul>
<p><font color="cornflowerblue">在 Sentinel 的资源上配置各种各样的规则，来实现各种容错的功能</font></p>
<h3 id="3-4、3-4-Sentinel-规则"><a href="#3-4、3-4-Sentinel-规则" class="headerlink" title="3.4、3.4 Sentinel 规则"></a>3.4、3.4 Sentinel 规则</h3><blockquote>
<p>流控规则：监控 QPS 或并发线程数</p>
</blockquote>
<p>资源名：唯一名称</p>
<p>针对来源：指定对哪个微服务进行限流，默认 default，意思是不区分来源，全部限制</p>
<p>流控模式：</p>
<ul>
<li><p>直接：接口达到限流条件时，开启限流</p>
</li>
<li><p>关联：当关联的资源达到限流条件时，开启限流（适合于应用的让步）</p>
</li>
<li><p>链路：当某个接口过来的资源达到限流条件时，开启限流 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在方法上定义资源</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;message&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>针对来源是针对上级微服务，而链路监控是针对上级接口</code>，也就是说它的粒度更细</p>
</li>
</ul>
<p>流控效果：当服务被流控，以什么样的效果去处理</p>
<ul>
<li>快速失败：直接失败，抛出异常，不做任何额外的处理</li>
<li>Warm Up：从开始阈值到最大 QPS 阈值会有一个缓冲阶段，一开始的阈值是最大 QPS 阈值的 1&#x2F;3 ，然后慢慢增长，直到最大阈值，适用于将突然增大的流量转换为缓步增长的场景。</li>
<li>排队等待：让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待；它还会让设置一个超时时间，当请求超过超时时间还会处理，则会被丢弃。</li>
</ul>
<blockquote>
<p>降级规则</p>
</blockquote>
<p>设置当满足什么条件时,对服务进行降级</p>
<ul>
<li>平均响应时间:当资源的平均响应时间超过阈值(以ms为单位)之后,资源进入<code>准降级</code>状态.如果接下来1s内持续进入5个请求,它们的RT都持续超过这个阈值,那么在接下的<code>时间窗口</code>(以s为单位,维持时间)之内,就会对这个方法进行服务降级.</li>
<li>异常比例:当资源的每秒异常总数占通过量的比值超过阈值之后,资源进入降级状态,即在接下来的时间窗口(以s为单位)之内,对这个方法的调用都会自动的返回.异常比率的阈值范围时[0.0,1.0].</li>
</ul>
<blockquote>
<p>热点规则</p>
</blockquote>
<p>热点参数流控规则是一种更细粒度的流控规则,它允许将规则具体到参数上,</p>
<p>代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/order/message3&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;message3&quot;)</span><span class="comment">//必须添加此注解,否则热点规则不生效</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">message3</span><span class="params">(String name,Integer age)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>授权规则</p>
</blockquote>
<p>根据调用来源来判断该次请求是否允许放行</p>
<ul>
<li>若配置白名单,则只有请求来源位于白名单内时才可通过</li>
<li>若配置黑名单,则请求来源位于黑名单时不通过,其余的请求通过</li>
</ul>
<p>来源判断: 实现接口 RequestOriginParser</p>
<blockquote>
<p>系统规则（外界环境）</p>
</blockquote>
<p>从应用级别的入口流量进行控制,从单台机器的总体Load、RT、入口QPS、CPU使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量（进入应用的流量）生效。</p>
<ul>
<li>Load（仅对 Linux&#x2F;Unix-like 机器生效）：<code>当系统load1超过阈值，且系统当前的并发线程数超过系统容量时</code>，才会触发系统保护。系统容量由系统的<code>maxQps * minRt</code>计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>.</li>
<li>RT：当单台机器上所有入口流量的<code>平均RT</code>达到阈值即触发系统保护，单位是毫秒。</li>
<li>线程数：当单台机器上所有入口流量的<code>并发线程数</code>达到阈值即触发系统保护。</li>
<li>入口QPS：当单台机器上所有入口流量的QPS达到阈值即触发系统保护。</li>
<li>CPU使用率：当单台机器上所有入口流量的CPU使用率达到阈值即触发系统保护。</li>
</ul>
<h3 id="3-5、3-5-自定义异常返回"><a href="#3-5、3-5-自定义异常返回" class="headerlink" title="3.5、3.5 自定义异常返回"></a>3.5、3.5 自定义异常返回</h3><p>实现 UrlBlockHandler 类</p>
<p>从 BlockException 判断异常类型</p>
<h3 id="3-6、3-6-SentinelResource"><a href="#3-6、3-6-SentinelResource" class="headerlink" title="3.6、3.6 @SentinelResource"></a>3.6、3.6 @SentinelResource</h3><p>可以指定出现异常时的处理策略。用于定义资源，并提供可选的异常处理和 fallback 配置项。</p>
<p>blockHandler 定义当资源内部发生了 BlockException 应该进入的方法（捕获的时 Sentinel 定义的异常）</p>
<p>fallback 定义当资源内部发生了 Throwable 应该进入的方法</p>
<h3 id="3-7、3-7规则持久化"><a href="#3-7、3-7规则持久化" class="headerlink" title="3.7、3.7规则持久化"></a>3.7、3.7规则持久化</h3><p>本地文件数据源会定时轮询文件的变更，读取规则。在应用本地直接修改文件来更新规则，也可以通 Sentinel 控制台推送规则。</p>
<p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件。</p>
<p>实现 InitFunc 类</p>
<h3 id="3-8、3-8-Feign-整合-Sentinel"><a href="#3-8、3-8-Feign-整合-Sentinel" class="headerlink" title="3.8、3.8 Feign 整合 Sentinel"></a>3.8、3.8 Feign 整合 Sentinel</h3><ol>
<li><p>引入 sentinel 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中开启 Feign 对 Sentinel的支持</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">sentinel:</span></span><br><span class="line">		<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建容错类，实现 ProductService 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容错类要求必须实现被容错的接口，并为每个方法实现容错方案。</span></span><br><span class="line"><span class="meta">@component</span></span><br><span class="line"><span class="meta">@slfj4</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(Integer pid)</span>&#123;</span><br><span class="line">         <span class="comment">//容错逻辑 </span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        product.setPid(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>为被容器的接口指定容错类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//value用于指定调用nacos下哪个微服务</span></span><br><span class="line"><span class="comment">//fallback用于指定容错类</span></span><br><span class="line"><span class="meta">@FeignClient(value=&quot;service-product&quot;,</span></span><br><span class="line"><span class="meta">             fallback=ProductServiceFallback.class,//二者选其一</span></span><br><span class="line"><span class="meta">             fallbackFactory = ProductServiceFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product/&#123;pid&#125;&quot;)</span><span class="comment">//指定请求的URI部分</span></span><br><span class="line">    product <span class="title function_">findByPid</span><span class="params">(<span class="meta">@pathVariable</span> Integer pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从容器类中获取具体的错误，<code>将容错类改写</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@slfj4</span></span><br><span class="line"><span class="comment">//这是容错类，它要求我们要是实现一个FallbackFactory&lt;要为哪个接口产生容错类&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ProductService&gt;&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductService <span class="title function_">create</span><span class="params">(Throwable throwable)</span>&#123;<span class="comment">//throwable 在 fegin 调用过程中产生的异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">productService</span>()&#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">    				<span class="keyword">public</span> Product <span class="title function_">findByPid</span><span class="params">(Integer pid)</span>&#123;</span><br><span class="line">             		<span class="comment">//容错逻辑 </span></span><br><span class="line">           		 	<span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">            		product.setPid(-<span class="number">1</span>);</span><br><span class="line">            		<span class="keyword">return</span> product;</span><br><span class="line">    				&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4、4-Gateway-服务网关"><a href="#4、4-Gateway-服务网关" class="headerlink" title="4、4. Gateway 服务网关"></a>4、4. Gateway 服务网关</h2><blockquote>
<p>API 网关</p>
</blockquote>
<p>系统的<font color="orange">统一入口</font>，它封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等。</p>
<h3 id="4-1、4-1-Spring-Cloud-Gateway"><a href="#4-1、4-1-Spring-Cloud-Gateway" class="headerlink" title="4.1、4.1 Spring Cloud Gateway"></a>4.1、4.1 Spring Cloud Gateway</h3><p>旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p>
<p>不仅提供了统一的路由方式，并且基于 <strong>Filter</strong> 链的方式提供了网关的基本功能，例如：安全，监控和限流。</p>
<p><strong>优点</strong></p>
<ul>
<li>性能强劲</li>
<li>功能强大：转发、监控、限流</li>
<li>设计优雅，容易扩展</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</li>
<li>不能将其部署在tomcat、jetty等Servlet容器里，只能打成jar包 执行</li>
<li>需要springboot 2.0及以上版本才支持</li>
</ul>
<h3 id="4-2、4-2-使用"><a href="#4-2、4-2-使用" class="headerlink" title="4.2、4.2 使用"></a>4.2、4.2 使用</h3><ol>
<li><p>新建一个微服务，引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--gateway网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建主类</p>
</li>
<li><p>添加配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">gateway:</span></span><br><span class="line">			<span class="attr">routes:</span> <span class="comment">#路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务，转发过程中还可以做一些手脚]</span></span><br><span class="line">			 <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span> <span class="comment">#当前路由的标识，要求唯一</span></span><br><span class="line">				<span class="attr">uri:</span> <span class="string">http://localhost:8081</span> <span class="comment">#请求要转发到的地址</span></span><br><span class="line">				<span class="attr">order:</span> <span class="number">1</span> <span class="comment"># 路由的优先级，数字越小级别越高</span></span><br><span class="line">				<span class="attr">predicates:</span> <span class="comment">#断言（就是路由转发要满足的条件）</span></span><br><span class="line">				 	<span class="bullet">-</span> <span class="string">path=/product-serv/**</span> <span class="comment">#当请求路径满足path指定的规则时，才进行路由转发</span></span><br><span class="line">				 	<span class="bullet">-</span> <span class="string">Method=get</span> <span class="comment"># 当请求路径满足 Path 指定的规则时，此路由信息才会进行正常的转发</span></span><br><span class="line">				<span class="attr">filters:</span> <span class="comment"># 过滤器，请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">					<span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment"># 转发之前去掉一层路径</span></span><br><span class="line"><span class="string">localhost:7000/product-serv/product/1</span> <span class="string">转发之后</span> <span class="string">localhost:8081/product/1</span>		</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>与nacos结合</p>
</blockquote>
<ol>
<li>添加依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在主类上添加注解 <strong>@EnableDiscoveryClient</strong></p>
</li>
<li><p>在配置文件上补充</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">discovery:</span></span><br><span class="line">				<span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">		<span class="attr">gateway:</span></span><br><span class="line">			<span class="attr">discovery:</span></span><br><span class="line">				<span class="attr">locator:</span></span><br><span class="line">					<span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 让gateway可以发现nacos中的微服务</span></span><br><span class="line">					<span class="comment"># 上面 uri 可改写为 nacos 中的服务名称</span></span><br><span class="line">					<span class="attr">uri:</span> <span class="string">lb://service-product</span> <span class="comment"># lb指的是从nacos中按照名称获取微服务并遵循负载均衡策略    </span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-3、4-3-Gateway核心架构"><a href="#4-3、4-3-Gateway核心架构" class="headerlink" title="4.3、4.3 Gateway核心架构"></a>4.3、4.3 Gateway核心架构</h3><p>路由（Route）是gateway中最基本的组件之一，表示一个具体的路由信息载体。</p>
<ul>
<li><strong>id</strong>，路由标识符。</li>
<li><strong>uri</strong>，路由指向的目的地uri，即客户端请求最终被转发到的微服务。</li>
<li><strong>order</strong>，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。</li>
<li><strong>predicate</strong>，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li>
<li><strong>filter</strong>，过滤器用于修改请求和响应信息。</li>
</ul>
<p><code>执行过程</code></p>
<p><img src="/.io//desktop\typora-notes\imgs\springgateway执行过程.png" alt="springgateway执行过程"></p>
<blockquote>
<p>断言</p>
</blockquote>
<p>Predicate（断言，谓词）用于进行条件判断，只有断言都返回真，才会真正的执行路由。</p>
<p>就是说在 <strong>什么条件下</strong> 才能进行路由转发</p>
<ul>
<li><p>内置路由断言工厂</p>
<ul>
<li>基于 Datetime 类型的断言工厂</li>
<li>基于远程地址的断言工厂</li>
<li>基于 Cookie 的断言工厂</li>
<li>基于 Header 的断言工厂</li>
<li>基于 Host 的断言工厂</li>
<li>基于 Method 请求方法的断言工厂</li>
<li>基于 Path 请求路径的断言</li>
<li>基于 Query 请求参数的断言工厂</li>
<li>基于路由权重的断言工厂</li>
</ul>
</li>
<li><p>自定义路由工厂</p>
<ol>
<li><p>在配置文件中添加一个 Age 的断言配置</p>
</li>
<li><p>自定义一个断言工厂，实现断言方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承 AbstractRoutePredicateFactory&lt;AgeRoutePredicateFactory.Config&gt;</span></span><br><span class="line"><span class="comment">//构造方法中调用父类的构造方法</span></span><br><span class="line"><span class="comment">//shortcutFieldOrder方法 读取配置文件中的参数值 给他赋值到配置类中的属性上</span></span><br><span class="line"><span class="comment">//apply方法 断言逻辑</span></span><br><span class="line"><span class="comment">//Config 配置类，用于接收配置文件中的对应参数</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<blockquote>
<p>过滤器</p>
</blockquote>
<ol>
<li><p>作用:过滤器就是在请求的传递过程中,对请求和响应做一些手脚</p>
</li>
<li><p>生命周期:Pre Post</p>
</li>
<li><p>分类:局部过滤器 和 全局过滤器</p>
<p>在 Gateway中,Filter的生命周期只有两个: <strong>Pre</strong> 和 <strong>Post</strong></p>
<ul>
<li>Pre:在请求被路由之前调用,可以实现身份验证,在集群中选择请求的微服务,记录调试信息</li>
<li>POST:在路由到微服务之后执行,</li>
</ul>
</li>
</ol>
<h2 id="5、RocketMQ-事件驱动"><a href="#5、RocketMQ-事件驱动" class="headerlink" title="5、RocketMQ 事件驱动"></a>5、RocketMQ 事件驱动</h2><p>替换 springcloud 中的 bus 组件，实现消息总线</p>
<h2 id="6、Message-Bus-消息总线（异步处理）"><a href="#6、Message-Bus-消息总线（异步处理）" class="headerlink" title="6、Message Bus 消息总线（异步处理）"></a>6、Message Bus 消息总线（异步处理）</h2><h2 id="7、Seata"><a href="#7、Seata" class="headerlink" title="7、Seata"></a>7、Seata</h2><p>实现 Distributed Transaction 分布式事务</p>
<h2 id="8、Dubbo-RPC"><a href="#8、Dubbo-RPC" class="headerlink" title="8、Dubbo RPC"></a>8、Dubbo RPC</h2><p>集成 Dubbo 实现服务间通信，替换原始项目中 RestTemplate Openfeign。缺点是 都必须使用 java 语言。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>spring security</title>
    <url>/2022/09/23/spring-security/</url>
    <content><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="1、配置-Spring-Security"><a href="#1、配置-Spring-Security" class="headerlink" title="1、配置 Spring Security"></a>1、配置 Spring Security</h2><blockquote>
<p>WebSecurityConfigurerAdapter 中的 configure(HttpSecurity)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">    .authorizeRequests()</span><br><span class="line">    .anyRequest().anthenticated() <span class="comment">// 任何请求都会进行认证</span></span><br><span class="line">    .and()</span><br><span class="line">    .formLogin() <span class="comment">// 启用内建的登录界面</span></span><br><span class="line">    .and()</span><br><span class="line">    .httpBasic(); <span class="comment">// 使用 HTTP Basic Auth 认证</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、CSRF-攻击"><a href="#2、CSRF-攻击" class="headerlink" title="2、CSRF 攻击"></a>2、CSRF 攻击</h2><p>前提条件：用户已经登录正常站点</p>
<p>csrf 攻击对无状态的无效</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/csrf%E6%94%BB%E5%87%BB.png" style="width:80%">



<blockquote>
<p>防止收到 CSRF 攻击的方式</p>
</blockquote>
<ol>
<li>CSRF Token</li>
<li>在响应中设置 Cookie 的 SameSite 属性</li>
</ol>
<h2 id="3、Remember-me-功能"><a href="#3、Remember-me-功能" class="headerlink" title="3、Remember-me 功能"></a>3、Remember-me 功能</h2><p>为解决 session 过期后用户的直接访问问题</p>
<p>Spring Security 提供开箱即用的配置 rememberMe</p>
<p>原理：使用 Cookie 存储用户名，过期时间，以及一个 Hash</p>
<p>Hash：md5(用户名+过期时间+密码+key)</p>
<h2 id="4、密码"><a href="#4、密码" class="headerlink" title="4、密码"></a>4、密码</h2><h3 id="4-1、密码简史"><a href="#4-1、密码简史" class="headerlink" title="4.1、密码简史"></a>4.1、密码简史</h3><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220428184126898.png" style="width:80%">



<h3 id="4-2、Spring-Security-对密码哈希的算法支持"><a href="#4-2、Spring-Security-对密码哈希的算法支持" class="headerlink" title="4.2、Spring Security 对密码哈希的算法支持"></a>4.2、Spring Security 对密码哈希的算法支持</h3><h3 id="4-3、密码的验证规则"><a href="#4-3、密码的验证规则" class="headerlink" title="4.3、密码的验证规则"></a>4.3、密码的验证规则</h3><ol>
<li>密码的验证比较复杂，使用 Passay 框架进行验证</li>
<li>封装验证逻辑在注解中，有效的剥离验证逻辑和业务逻辑</li>
<li>对于两个以上属性的复合验证，可以写一个应用于类的注解</li>
</ol>
<h2 id="5、Spring-Security-的架构"><a href="#5、Spring-Security-的架构" class="headerlink" title="5、Spring Security 的架构"></a>5、Spring Security 的架构</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/SpringSecurity%E6%9E%B6%E6%9E%84.png" alt="SpringSecurity架构"></p>
<h3 id="5-1、核心组件"><a href="#5-1、核心组件" class="headerlink" title="5.1、核心组件"></a>5.1、核心组件</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220501163802584.png" alt="核心组件"></p>
<blockquote>
<p>SecurityContext</p>
</blockquote>
<ul>
<li>用来存储当前认证的用户的详细信息</li>
</ul>
<blockquote>
<p>SecurityContextHolder</p>
</blockquote>
<ul>
<li>是一个工具类，它提供了对安全上下文的访问，默认情况下，它使用一个 ThreadLocal 对象来存储安全上下文，是线程安全的</li>
</ul>
<blockquote>
<p>Authentication</p>
</blockquote>
<ul>
<li>存储了当前用户（与应用程序交互的主体）的详细信息</li>
<li>Principal 可以理解为用户的信息（比较简单的情况下，有可能是用户名）</li>
<li>Credentials 可以理解为密码</li>
<li>Authorities 可以理解为权限</li>
</ul>
<h3 id="5-2、认证"><a href="#5-2、认证" class="headerlink" title="5.2、认证"></a>5.2、认证</h3><blockquote>
<p>UserDetails 和 UserDetailsService</p>
</blockquote>
<p>通常的场景下用户是具备一系列属性约束的，这就是 UserDetails</p>
<p>从数据存储中根据用户名找到用户，是由 UserDetailsService 定义的</p>
<p>这两个对象不负责认证工作，只是提供数据。所以一般我们都通过拓展它们来实现自定义的数据库结构</p>
<h3 id="5-3、数据库的表结构和定制化"><a href="#5-3、数据库的表结构和定制化" class="headerlink" title="5.3、数据库的表结构和定制化"></a>5.3、数据库的表结构和定制化</h3><p>最基础的表只需要两个：用户表和角色表</p>
<p>最简单的自定义可以直接设置查询语句</p>
<p>系统内建了 JdbcUserDetailsManager，可以通过构造不同的 SQL 进行深度的定制化</p>
<p>实现自己的 UserDestails 和 UserDetailsService</p>
<h2 id="6、Spring-Security-认证过程解析"><a href="#6、Spring-Security-认证过程解析" class="headerlink" title="6、Spring Security 认证过程解析"></a>6、Spring Security 认证过程解析</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220604215340316.png" alt="springsecurity认证过程"></p>
<h2 id="7、JWT概念"><a href="#7、JWT概念" class="headerlink" title="7、JWT概念"></a>7、JWT概念</h2><p>JWT 是 Jsoon Web Token 的缩写，基于 RFC 7519 标准定义，可以安全传输的小巧和自包含的 JSON 对象</p>
<p>使用数字签名的，所以是可信任的和安全的</p>
<p>使用 HMAC 算法进行加密或者 RSA 的公钥私钥对来进行签名</p>
<h3 id="7-1、JWT-工作流程"><a href="#7-1、JWT-工作流程" class="headerlink" title="7.1、JWT 工作流程"></a>7.1、JWT 工作流程</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220604221133201.png" alt="JWT 工作流程"></p>
<h3 id="7-2、访问令牌和刷新令牌"><a href="#7-2、访问令牌和刷新令牌" class="headerlink" title="7.2、访问令牌和刷新令牌"></a>7.2、访问令牌和刷新令牌</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220604223918111.png" alt="访问令牌和刷新令牌"></p>
<h3 id="7-3、多因子验证"><a href="#7-3、多因子验证" class="headerlink" title="7.3、多因子验证"></a>7.3、多因子验证</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220605213101687.png" alt="多因子验证"></p>
<h3 id="7-4、基于时间的一次性密码"><a href="#7-4、基于时间的一次性密码" class="headerlink" title="7.4、基于时间的一次性密码"></a>7.4、基于时间的一次性密码</h3><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220605213333841.png" alt="基于时间的一次性密码"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring security</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot2</title>
    <url>/2022/09/23/springboot2/</url>
    <content><![CDATA[<h1 id="springboot2"><a href="#springboot2" class="headerlink" title="springboot2"></a>springboot2</h1><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote>
<ol>
<li><p>见到很多 spring-boot-starter-* ； * 就表示某种场景</p>
</li>
<li><p>只要引入 starter ，这个场景的所有常规需要的依赖都会自动注入</p>
</li>
</ol>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 所有场景最底层的依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

</blockquote>
<span id="more"></span>

<ul>
<li>自动配置 tomcat</li>
<li>mvc</li>
<li>web常见的功能</li>
<li>默认的包结构</li>
<li>各种配置拥有默认值<ul>
<li>默认配置最终都是映射到 MultipartProperties</li>
<li>配置文件的值最终会绑定到每个类上，这个类会在容器中创建对象</li>
</ul>
</li>
<li>按需加载所有配置项</li>
</ul>
<h1 id="web-开发"><a href="#web-开发" class="headerlink" title="web 开发"></a>web 开发</h1><h2 id="1、容器功能"><a href="#1、容器功能" class="headerlink" title="1、容器功能"></a>1、容器功能</h2><h3 id="1-1、组件添加"><a href="#1-1、组件添加" class="headerlink" title="1.1、组件添加"></a>1.1、组件添加</h3><ol>
<li><code>@Configuration</code><ul>
<li>基本使用 类上添加 <code>@Configuration</code> 表示该类为配置类，方法上加上 <code>@Bean</code> 将返回对象注入容器，方法名为 Bean 的名字</li>
<li><code>Full</code> 模式 和 <code>Lite</code> 模式<ul>
<li>配置类组件之间无依赖关系用 <code>lite</code> 模式加速容器启动过程，减少判断</li>
<li>配置类组件之间有依赖关系，方法会被调用得到之前的单实例组件，用 <code>Full</code> 模式</li>
</ul>
</li>
<li><code>@Import(&#123;Class.class&#125;) </code>在容器中创建出这个类型的组件，默认组件的名字是全类名</li>
<li><code>@Condition</code> 条件装配：满足 Conditional 指定的条件，则进行组件注入</li>
</ul>
</li>
</ol>
<h2 id="2、原生配置文件引入"><a href="#2、原生配置文件引入" class="headerlink" title="2、原生配置文件引入"></a>2、原生配置文件引入</h2><ol>
<li>@ImportResource(“”) 导入 spring 配置文件</li>
</ol>
<h2 id="3、配置绑定"><a href="#3、配置绑定" class="headerlink" title="3、配置绑定"></a>3、配置绑定</h2><ol>
<li>@ConfigurationProperties(prefix&#x3D;””)，prefix 中值要小写</li>
<li>配置类上添加 @EnableConfigurationProperties</li>
</ol>
<h2 id="4、自动配置管理"><a href="#4、自动配置管理" class="headerlink" title="4、自动配置管理"></a>4、自动配置管理</h2><ul>
<li><p>@SpringBootConfiguration，代表当前是一个配置类</p>
</li>
<li><p>@ComponentScan，指定扫描哪些 spring 注解</p>
</li>
<li><p><code>@EnableAutoConfiguration</code></p>
<ul>
<li>&#96;&#96;&#96;java<br>@Target({ElementType.TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>@Inherited<br>@AutoConfigurationPackage<br>@Import({AutoConfigurationImportSelector.class})<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `@AutoConfigurationPackage` 指定了默认的包规则</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  @Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">  @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">  @Documented</span><br><span class="line">  @Inherited</span><br><span class="line">  @Import(&#123;Registrar.class&#125;) // 给容器中导入组件</span><br><span class="line">  // 利用 Registrar 给 spring 容器注册一系列组件</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>@Import(AutoConfigurationImportSelector.class)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、 利用 getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) 给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、 调用 List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> 获取所有需要导入到容器中的组件</span><br><span class="line"><span class="number">3</span>、 利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> 得到所有的组件</span><br><span class="line"><span class="number">4</span>、 从 META-INF/spring.factories 位置来加载一个文件</span><br><span class="line">    默认扫描当前系统里面所有 META-INF/spring.factories 位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.2</span>.RELEASE.jar 包里面也有 META-INF/spring.factories</span><br><span class="line">    文件里面写死了 springboot 一启动就要给容器中加载的所有配置类</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、按需开启配置项"><a href="#5、按需开启配置项" class="headerlink" title="5、按需开启配置项"></a>5、按需开启配置项</h2><p>按照条件装配规则，按需装配</p>
<ul>
<li>springboot 先加载所有的自动配置类 xxxAutoConfiguration</li>
<li>每个自动配置类按条件生效，默认都会绑定配置文件指定的值，从 xxxProperties 里面拿，而 xxxProperties 和配置文件进行了绑定</li>
<li>生效的配置类就会给容器中装配很多组件</li>
<li>只要容器中有这些组件，相当于启用了这些功能</li>
<li>定制化配置<ol>
<li>直接用 @Bean 替换底层的组件</li>
<li>修改配置文件</li>
</ol>
</li>
<li>自定义器 xxxCustomizer</li>
</ul>
<p>xxxAutoConfiguration -&gt; 组件 -&gt; xxxProperties 获取值 -&gt; application.properties</p>
<h2 id="6、简单功能分析"><a href="#6、简单功能分析" class="headerlink" title="6、简单功能分析"></a>6、简单功能分析</h2><h3 id="6-1、静态资源访问"><a href="#6-1、静态资源访问" class="headerlink" title="6.1、静态资源访问"></a>6.1、静态资源访问</h3><h4 id="6-1-1、静态资源目录"><a href="#6-1-1、静态资源目录" class="headerlink" title="6.1.1、静态资源目录"></a>6.1.1、静态资源目录</h4><p>类路径下：&#x2F;static（or &#x2F;public or &#x2F;resources or &#x2F;META-INF&#x2F;resources）</p>
<p>访问：当前项目根路径&#x2F; + 静态资源名</p>
<p>原理：静态映射&#x2F;**</p>
<p>请求进来，先去找 controller 看能不能处理，不能处理的所有请求又都交给静态资源处理器。静态资源处理也没找到就是 404</p>
<h4 id="6-1-2、访问前缀"><a href="#6-1-2、访问前缀" class="headerlink" title="6.1.2、访问前缀"></a>6.1.2、访问前缀</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方便拦截器拦截</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">   <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="comment">#指定静态资源目录</span></span><br><span class="line">   <span class="attr">static-location:</span> [<span class="string">classpath:/index</span>]</span><br></pre></td></tr></table></figure>

<h3 id="6-2、请求参数处理"><a href="#6-2、请求参数处理" class="headerlink" title="6.2、请求参数处理"></a>6.2、请求参数处理</h3><h4 id="6-2-1、请求映射"><a href="#6-2-1、请求映射" class="headerlink" title="6.2.1、请求映射"></a>6.2.1、请求映射</h4><p>@xxxMapping</p>
<p>RequestMappingHandlerMapping：保存了所有 @RequestMapping 和 handler 的映射规则</p>
<p>可以自定义 HandlerMapping 放入容器中</p>
<h4 id="6-2-2、普通参数与基本注解"><a href="#6-2-2、普通参数与基本注解" class="headerlink" title="6.2.2、普通参数与基本注解"></a>6.2.2、普通参数与基本注解</h4><ol>
<li><p>注解：</p>
<p>@PathVariable、@RequestHeader、@RequestAttribute、@ModelAttribute（矩阵变量 ）、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>
</li>
<li><p>Servlet API：</p>
<p>WebRequest、ServletRequest、MultipartRequest、HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p>
</li>
<li><p>复杂参数</p>
<p>Map、Errors&#x2F;BindingResult、Model（map、model 里面的数据会被放在 request 的请求域中即： request.setAttribute（）</p>
<p>）、RedirectAttributes（重定向携带参数）、ServletResponse（response）、SessionStatus、UriComponentBuilder、ServletUriComponentsBuilder</p>
</li>
<li><p>自定义对象参数</p>
<p>可以自动类型转换与格式化，可以级联封装</p>
</li>
</ol>
<p>处理过程（DispatcherServlet）：</p>
<ul>
<li>HandlerMapping 中找到能处理请求的 Handler（Controller.method）</li>
<li>为当前 Handler 找一个适配器 HandlerAdapter</li>
<li>参数解析器，InvocableHandlerMethod</li>
<li>返回值解析器</li>
</ul>
<h3 id="6-3、内容协商"><a href="#6-3、内容协商" class="headerlink" title="6.3、内容协商"></a>6.3、内容协商</h3><p>根据客户端接收能力不同，返回不同媒体类型的数据（调整请求头中 <code>Accept </code>属性）。</p>
<ol>
<li>判断当前响应头中是否已经有确定的媒体类型，MediaType</li>
<li>获取客户端（postman、浏览器）支持接受的内容类型。（获取客户端 Accept 请求头字段）<ul>
<li>ContentNegotiationManager 内容协商管理器，默认使用基于请求头的策略</li>
<li>HeaderContentNegotiationStrategy 确定客户端可以接收的内容类型</li>
</ul>
</li>
<li>遍历循环所有支持当前系统的 MessageConverter，看谁支持操作这个对象</li>
<li>找到支持操作这个对象的 converter，把 converter 支持的媒体类型统计出来</li>
<li>进行内容协商的最佳匹配媒体类型</li>
<li>用支持将对象转为最佳匹配媒体的类型的 converter，调用它进行转化</li>
</ol>
<blockquote>
<p>开启浏览器参数方式内容协商功能</p>
<ul>
<li>为了方便内容协商，开启基于请求参数的内容协商功能（spring.favor-parameter&#x3D;true）</li>
<li>（参数添加 format&#x3D;json&#x2F;xml）</li>
</ul>
</blockquote>
<p>自定义 MessageConverter，WebMavConfigurer 类中重写 extendMessageConverters 方法</p>
<p><font color="orange">有可能添加的自定义功能会覆盖默认的很多功能，导致一些默认功能失效</font></p>
<h3 id="6-4、拦截器"><a href="#6-4、拦截器" class="headerlink" title="6.4、拦截器"></a>6.4、拦截器</h3><p>新建类实现 <code>HandlerInterceptor</code> 接口，再新建类实现 <code>WebMvcConfigurer </code>接口，在 <code>addInterceptors </code>方法中将拦截器添加到容器中，并配置拦截哪些路径和放行哪些路径。</p>
<blockquote>
<p>流程</p>
</blockquote>
<ol>
<li>根据当前请求，找到 <code>HandlerExecutionChain</code>（可以处理请求的 <code>handler </code>以及 handler 的所有拦截器）</li>
<li>先来顺序执行所有拦截器的 <code>preHandle </code>方法<ul>
<li>如果当前拦截器 <code>preHandle </code>返回为 true，则执行下一个拦截器的 <code>preHandle</code></li>
<li>如果当前拦截器返回为 <code>false</code>，则去<font color="red">倒序</font>执行所有已经执行了的拦截器的 <code>afterCompletion</code></li>
</ul>
</li>
<li>如果任何一个拦截器返回 false，直接跳出不执行目标方法</li>
<li>所有拦截器都返回 true，执行目标方法</li>
<li>倒序执行所有拦截器的 <code>postHandle</code> 方法</li>
<li>前面步骤有任何异常都会直接执行 <code>afterCompletion</code></li>
<li>页面成功渲染之后，也会倒序触发 <code>afterCompletion</code></li>
</ol>
<h3 id="6-5、文件上传"><a href="#6-5、文件上传" class="headerlink" title="6.5、文件上传"></a>6.5、文件上传</h3><p>文件上传自动配置类：MultipartAutoConfiguration - MultipartProperties</p>
<ul>
<li>自动配置好了 StandardServletMultipartResolver（文件上传解析器）</li>
<li>原理：<ol>
<li>请求进来使用文件上传解析器判断（isMultipart）并封装（resolveMultipart，返回 MultipartHttpServeletRequest）文件上传请求</li>
<li>参数解析器来解析请求中的文件内容封装成 MultipartFile</li>
<li>将请求头中的文件信息封装为一个map MultiValueMap&lt;String，MultipartFile&gt;</li>
</ol>
</li>
</ul>
<h3 id="6-6、异常处理"><a href="#6-6、异常处理" class="headerlink" title="6.6、异常处理"></a>6.6、异常处理</h3><h4 id="6-6-1、错误处理"><a href="#6-6-1、错误处理" class="headerlink" title="6.6.1、错误处理"></a>6.6.1、错误处理</h4><ul>
<li>默认情况下，Springboot 提供 &#x2F;error 处理所有错误的映射</li>
<li>对于机器客户端，它将生成 JSON 响应，其中包含错误，Http 状态和异常消息的详细信息，对于浏览器客户端，响应一个错误视图，以 HTML 格式呈现相同的数据</li>
<li>要对其进行自定义，添加 View 解析为 error</li>
<li>要完全替换默认行为，可以实现 ErrorController 并注册该类型的 Bean 定义，或添加 ErrorAttributes 类型的组件以使用现有机制但替换其内容</li>
<li>error&#x2F; 下的 4xx，5xx 页面会被自动解析</li>
</ul>
<h4 id="6-6-2、定制错误处理逻辑"><a href="#6-6-2、定制错误处理逻辑" class="headerlink" title="6.6.2、定制错误处理逻辑"></a>6.6.2、定制错误处理逻辑</h4><ul>
<li>自定义错误页<ul>
<li>error&#x2F;404.html error&#x2F;5xx.html</li>
</ul>
</li>
<li>@ControllerAdvice + @ExceptionHandler 处理异常</li>
<li>ErrorViewResolver 实现自定义处理异常</li>
<li>实现 HandlerExceptionResolver 处理异常</li>
</ul>
<h3 id="6-7、web-原生组件注入"><a href="#6-7、web-原生组件注入" class="headerlink" title="6.7、web 原生组件注入"></a>6.7、web 原生组件注入</h3><p>集成 servlet、filter、listener</p>
<ul>
<li>主类添加 @ServletComponentScan 注解扫描包</li>
<li>新建类添加 @WebServlet 注解</li>
</ul>
<h3 id="6-8、嵌入式-servlet-容器"><a href="#6-8、嵌入式-servlet-容器" class="headerlink" title="6.8、嵌入式 servlet 容器"></a>6.8、嵌入式 servlet 容器</h3><ol>
<li>切换嵌入式 Servlet 容器<ul>
<li>默认支持的 webServer<ul>
<li>tomcat，jetty，undertow</li>
<li>ServletWebServerApplicationContext 容器启动寻找 ServletWebServerFactory 并引导创建服务器</li>
</ul>
</li>
<li>切换服务器</li>
</ul>
</li>
<li>定制 servlet 容器<ul>
<li>实现 WebServerFactoryCustomizer<ConfigurableServletWebServerFactory></ConfigurableServletWebServerFactory></li>
<li>修改配置文件 server.xxx</li>
<li>直接定义 ConfigurableServletWebServerFactory</li>
</ul>
</li>
</ol>
<h1 id="JUnit5-单元测试"><a href="#JUnit5-单元测试" class="headerlink" title="JUnit5 单元测试"></a>JUnit5 单元测试</h1><p>JUnit5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</p>
<ul>
<li>JUnit Platform：是在 JVM 上启动测试框架的基础，不仅支持 Junit 自制的测试引擎，其它测试引擎也都可以接入</li>
<li>JUnit Jupiter：提供了 JUnit5 的心的编程模型，是 JUnit5 新特性的核心，内部包含一个测试引擎，用于在 Junit Platform 上运行</li>
<li>JUnit Vintage：提供了兼容 JUnit4.x Junit 3.x 的测试引擎</li>
</ul>
<h2 id="7、常用注解"><a href="#7、常用注解" class="headerlink" title="7、常用注解"></a>7、常用注解</h2><ul>
<li>@Test：表示方法是测试方法，它的职责非常单一，不能声明任何属性，拓展的测试将会由 Jupiter 提供额外的测试</li>
<li>@ParameterizedTest：表示方法是参数化测试</li>
<li>@RepeatedTest：表示方法可重复执行</li>
<li>@DisplayName：为测试类或者测试方法设置展示名称</li>
<li>@BeforeEach：表示在每个单元测试之前执行</li>
<li>@AfterEach：表示在每个单元测试之后执行</li>
<li>@BeforeAll：表示在所有单元测试之前执行</li>
<li>@AfterAll：表示在所有单元测试之后执行</li>
<li>@Tag：表示单元测试类别</li>
<li>@Disabled：表示测试类或测试方法不执行</li>
<li>@Timeout：表示测试方法运行如果超过了指定时间将会返回错误</li>
<li>@ExtendWith：为测试类或测试方法提供扩展类引用</li>
</ul>
<h2 id="8、单元测试"><a href="#8、单元测试" class="headerlink" title="8、单元测试"></a>8、单元测试</h2><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。</p>
<ul>
<li>检查业务逻辑返回的数据是否合理</li>
<li>所有的测试运行结束以后，会有一个详细的测试报告</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为 true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为 false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为 null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为 null</td>
</tr>
</tbody></table>
<h2 id="9、前置条件"><a href="#9、前置条件" class="headerlink" title="9、前置条件"></a>9、前置条件</h2><p>前置条件（assumptions【假设】）类似于断言，不同之处在于不满足的断言会使得测试方法失效，而不满足前置条件只会使得测试方法的执行终止，前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要了。</p>
<h2 id="10、参数化测试"><a href="#10、参数化测试" class="headerlink" title="10、参数化测试"></a>10、参数化测试</h2><p>不同的参数多次进行单元测试，可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就要新增一个单元测试</p>
<p>@ValueSource：为参数化测试指定入参来源，支持八大基础类型以及 String 类型，Class 类型</p>
<p>@NullSource：表示为参数化测试提供一个 null 的入参</p>
<p>@EnumSource：表示为参数化测试提供一个枚举入参</p>
<p>@CsvFileSource：表示读取指定 CSV 文件内容作为参数化测试入参</p>
<p>@MethodSource：表示读取指定方法的返回值作为参数化测试入参</p>
<h1 id="生产指标监控"><a href="#生产指标监控" class="headerlink" title="生产指标监控"></a>生产指标监控</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">   <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">   <span class="attr">web:</span></span><br><span class="line">     <span class="attr">exposure:</span></span><br><span class="line">       <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 以 web f</span></span><br></pre></td></tr></table></figure>



<h1 id="stater-启动原理"><a href="#stater-启动原理" class="headerlink" title="stater 启动原理"></a>stater 启动原理</h1><ul>
<li><p>stater - pom 引入 autoconfigure 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">A(starter) --&gt;B(autoconfigure)</span><br><span class="line"></span><br><span class="line">B --&gt; C(spring-boot-starter)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>autoconfigure 包中配置使用 META-INF&#x2F;spring.factories 中 EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</p>
</li>
<li><p>编写自动配置类 xxxAutoConfiguration -&gt; xxxProperties</p>
<ul>
<li>@Configuration</li>
<li>@Conditional</li>
<li>@EnableConfigurationProperties</li>
<li>@Bean</li>
<li>………</li>
</ul>
</li>
</ul>
<p>引入 starter — xxxAutoConfiguration — 容器中放入组件 — 绑定 xxxProperties — 配置项</p>
<h1 id="springboot-启动过程原理"><a href="#springboot-启动过程原理" class="headerlink" title="springboot 启动过程原理"></a>springboot 启动过程原理</h1><ul>
<li>创建 SpringApplication<ul>
<li>保存一些信息</li>
<li>判断当前应用的类型，ClassUtils，Servlet</li>
<li>bootstrappers：初始启动引导器（List<Bootstrapper>）：去 spring.factories 文件中找<br>org.springframework.boot.Bootstrapper</Bootstrapper></li>
<li>找 ApplicationContextInitializer，去 spring.factories 找 ApplicationContextInitializer</li>
<li>找 ApplicationListener，应用监听器，去 spring.factories 找 ApplicationListener</li>
</ul>
</li>
<li>运行 SpringApplication<ul>
<li>StopWatch</li>
<li>记录应用启动时间</li>
<li>记录引导上下文（Context 环境）createBootstrapContext()</li>
<li>让当前应用进入 headless 模式</li>
<li>获取所有 RunListener（运行监听器）</li>
<li>遍历 SpringApplicationRunListener 调用 starting 方法</li>
<li>保存命令行参数 ApplicationArguments</li>
<li>准备环境 prepareEnvironment() </li>
<li>创建 IOC 容器（createApplicationContext()）</li>
<li>准备 ApplicationContext IOC 容器的基本信息</li>
<li>刷新 IOC 容器 refreshContext</li>
<li>所有监听器调用 listeners.started(context) 通知所有的监听器 started</li>
<li>调用所有的 runners callRunners()</li>
<li>调用所有监听器的 running 方法 listeners.running(context) 通知所有的监听器 running</li>
<li>running 如果有问题，继续通知 failed，调用所有 Listener 的 failed，通知所有的监听器 running</li>
</ul>
</li>
</ul>
<h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><h1 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h1><h1 id="缓存技术"><a href="#缓存技术" class="headerlink" title="缓存技术"></a>缓存技术</h1><h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1><h1 id="分布式入门"><a href="#分布式入门" class="headerlink" title="分布式入门"></a>分布式入门</h1><h1 id="响应式编程基础"><a href="#响应式编程基础" class="headerlink" title="响应式编程基础"></a>响应式编程基础</h1><h1 id="webflux开发web应用"><a href="#webflux开发web应用" class="headerlink" title="webflux开发web应用"></a>webflux开发web应用</h1><h2 id="11、同步-servlet"><a href="#11、同步-servlet" class="headerlink" title="11、同步 servlet"></a>11、同步 servlet</h2><p>一个请求进来，服务器启用一个 servlet 线程来进行处理，业务代码执行时，整个线程处于阻塞状态</p>
<h2 id="12、异步-servlet"><a href="#12、异步-servlet" class="headerlink" title="12、异步 servlet"></a>12、异步 servlet</h2><p>一个请求进来，业务代码交给线程池处理，servlet 线程可以去处理下一个请求，从而达到高的并发量 </p>
<h1 id="响应式访问持久化层"><a href="#响应式访问持久化层" class="headerlink" title="响应式访问持久化层"></a>响应式访问持久化层</h1><h1 id="响应式安全开发"><a href="#响应式安全开发" class="headerlink" title="响应式安全开发"></a>响应式安全开发</h1><h1 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>typora入门</title>
    <url>/2022/09/23/typora%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="typora入门"><a href="#typora入门" class="headerlink" title="typora入门"></a>typora入门</h1><h2 id="1、代码块"><a href="#1、代码块" class="headerlink" title="1、代码块"></a>1、代码块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```+语言类型 创建代码块</span><br><span class="line">例如：```java 创建java代码块、```javascript 创建js代码块</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h2><p>#+加空格 一级标题、以此类推 到六级为止</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br></pre></td></tr></table></figure>



<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 3、二级标题</span></span><br></pre></td></tr></table></figure>

<h2 id="4、二级标题"><a href="#4、二级标题" class="headerlink" title="4、二级标题"></a>4、二级标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### 4.1、三级标题</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2、三级标题"><a href="#4-2、三级标题" class="headerlink" title="4.2、三级标题"></a>4.2、三级标题</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#### 4.2.1、四级标题</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-2、四级标题"><a href="#4-2-2、四级标题" class="headerlink" title="4.2.2、四级标题"></a>4.2.2、四级标题</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">##### 4.2.2.1、五级标题</span></span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-2、五级标题"><a href="#4-2-2-2、五级标题" class="headerlink" title="4.2.2.2、五级标题"></a>4.2.2.2、五级标题</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">###### 4.2.2.2.1、六级标题</span></span><br></pre></td></tr></table></figure>

<h6 id="4-2-2-2-2、六级标题"><a href="#4-2-2-2-2、六级标题" class="headerlink" title="4.2.2.2.2、六级标题"></a>4.2.2.2.2、六级标题</h6><h3 id="4-3、字体"><a href="#4-3、字体" class="headerlink" title="4.3、字体"></a>4.3、字体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加粗</span></span><br><span class="line">**加粗内容**</span><br><span class="line"><span class="comment">// 代码高亮显示</span></span><br><span class="line">==高亮内容==</span><br><span class="line"><span class="comment">// 删除线</span></span><br><span class="line">~~删除文字~~</span><br><span class="line"><span class="comment">// 斜体</span></span><br><span class="line">*斜体文字*</span><br></pre></td></tr></table></figure>



<ul>
<li><p>加粗</p>
<p><strong>加粗内容</strong></p>
</li>
<li><p>代码高亮显示</p>
<p>&#x3D;&#x3D;高亮内容&#x3D;&#x3D;</p>
</li>
<li><p>删除线</p>
<p><del>删除文字</del></p>
</li>
<li><p>斜体</p>
<p><em>斜体文字</em></p>
</li>
</ul>
<h2 id="5、引用"><a href="#5、引用" class="headerlink" title="5、引用"></a>5、引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">&gt;作者：hqz</span><br><span class="line">&gt;&gt;作者：hqz</span><br><span class="line">&gt;&gt;&gt;作者：hqz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作者：hqz</p>
<blockquote>
<p>作者：hqz</p>
</blockquote>
<blockquote>
<blockquote>
<p>作者：hqz</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="6、分割线"><a href="#6、分割线" class="headerlink" title="6、分割线"></a>6、分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<h2 id="x2F-x2F-分割线"><a href="#x2F-x2F-分割线" class="headerlink" title="&#x2F;&#x2F;分割线"></a>&#x2F;&#x2F;分割线</h2><hr>
<p>&#x2F;&#x2F;分割线2</p>
<hr>
<h2 id="7、图片插入"><a href="#7、图片插入" class="headerlink" title="7、图片插入"></a>7、图片插入</h2><hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在线图片</span></span><br><span class="line">![图片名](图片路径)</span><br><span class="line"><span class="comment">//本地图片</span></span><br></pre></td></tr></table></figure>

<p><img src="http://ch.whu.edu.cn/style/web/images/public/earth.png" alt="你好"></p>
<h2 id="8、超链接"><a href="#8、超链接" class="headerlink" title="8、超链接"></a>8、超链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[超链接名字](超链接路径)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/">b站</a></p>
<h2 id="9、列表"><a href="#9、列表" class="headerlink" title="9、列表"></a>9、列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录一</span><br><span class="line">- 目录二</span><br><span class="line">- 目录三</span><br><span class="line"></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line"><span class="number">1</span>+.+空格+名称</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;无序列表</p>
<ul>
<li>目录一</li>
<li>目录二</li>
<li>目录三</li>
</ul>
<ol>
<li>你好</li>
<li>你好</li>
<li>你好</li>
<li>你好</li>
</ol>
<h2 id="10、表格"><a href="#10、表格" class="headerlink" title="10、表格"></a>10、表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">右键-插入表格</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>数学二</th>
<th>GIS原理</th>
<th>英语一</th>
<th>政治</th>
<th>总分</th>
</tr>
</thead>
<tbody><tr>
<td>110</td>
<td>110</td>
<td>60</td>
<td>70</td>
<td>350</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="11、查看源码"><a href="#11、查看源码" class="headerlink" title="11、查看源码"></a>11、查看源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看源码快捷键</span></span><br><span class="line">ctrl + /</span><br><span class="line">ctrl + shift + <span class="number">1</span> 打开文件大纲</span><br></pre></td></tr></table></figure>



<h2 id="12、常用的快捷键"><a href="#12、常用的快捷键" class="headerlink" title="12、常用的快捷键"></a>12、常用的快捷键</h2><h3 id="12-1、常用快捷键"><a href="#12-1、常用快捷键" class="headerlink" title="12.1、常用快捷键"></a>12.1、常用快捷键</h3><ul>
<li>加粗： <code>Ctrl + B</code></li>
<li>撤销： <code>Ctrl + Z</code></li>
<li>字体倾斜 ：<code>Ctrl+I</code></li>
<li>下划线：<code>Ctrl+U</code></li>
<li>多级标题： <code>Ctrl + 1~6</code></li>
<li>有序列表：<code>Ctrl + Shift + [</code></li>
<li>无序列表：<code>Ctrl + Shift + ]</code></li>
<li>降级快捷键 ：<code>Tab</code></li>
<li>升级快捷键：<code>Shift + Tab</code></li>
<li>插入链接： <code>Ctrl + K</code></li>
<li>插入公式： <code>Ctrl + Shift + M</code></li>
<li>行内代码： <code>Ctrl + Shift + K</code></li>
<li>插入图片： <code>Ctrl + Shift + I</code></li>
<li>返回Typora顶部：<code>Ctrl+Home</code></li>
<li>返回Typora底部 ：<code>Ctrl+End</code></li>
<li>创建表格 ：<code>Ctrl+T</code></li>
<li>选中某句话 ：<code>Ctrl+L</code></li>
<li>选中某个单词 ：<code>Ctrl+D</code></li>
<li>选中相同格式的文字 ：<code>Ctrl+E</code></li>
<li>搜索: <code>Ctrl+F</code></li>
<li>搜索并替换 ：<code>Ctrl+H</code></li>
<li>删除线 ：<code>Alt+Shift+5</code></li>
<li>引用 ：<code>Ctrl+Shift+Q</code></li>
<li>生成目录：<code>[TOC]+Enter</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：一些实体符号需要在实体符号之前加” \ ”才能够显示</span><br></pre></td></tr></table></figure>



<h3 id="12-2、菜单"><a href="#12-2、菜单" class="headerlink" title="12.2、菜单"></a>12.2、菜单</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入[TOC]即可产生菜单，菜单会自动更新</span><br></pre></td></tr></table></figure>



<h3 id="12-3、区域元素"><a href="#12-3、区域元素" class="headerlink" title="12.3、区域元素"></a>12.3、区域元素</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">YAML FONT Matters</span><br></pre></td></tr></table></figure>

<p>在文章的最上方输入—，按换行键产生，然后在里面输入内容即可。</p>
<h3 id="12-4、段落"><a href="#12-4、段落" class="headerlink" title="12.4、段落"></a>12.4、段落</h3><p>按换行键[Enter]建立新的一行,按<code>Shift</code>+<code>Enter</code>可以创建一个比段落间距更小的行间距。可在行尾插入打断线，禁止向后插入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">打断线&lt;br/&gt;后面的内容将自动换行</span><br></pre></td></tr></table></figure>



<h3 id="12-5、数学式"><a href="#12-5、数学式" class="headerlink" title="12.5、数学式"></a>12.5、数学式</h3><p>打开Typora选择数学模块</p>
<ul>
<li>点击“段落”—&gt;“公式块”</li>
<li>快捷键Ctrl+Shift+m</li>
<li><code>“$$”+回车</code></li>
</ul>
<p>以上三种方式都能打开数学公式的编辑栏。</p>
<p>示例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入$，然后按ESC键，之后输入Tex命令，可预览</span><br><span class="line">例如：</span><br><span class="line">$\lim_&#123;x\to\infty&#125;\exp(-x)=0$</span><br></pre></td></tr></table></figure>

<p>$$<br>\lim_{x\to\infty}\exp(-x)&#x3D;0<br>$$</p>
<p>下标使用~~括住内容。需要自己在偏好设置里面打开这项功能</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<p>H<del>2</del>O</p>
<p>上标</p>
<p>使用^括住内容。需要自己在偏好设置里面打开这项功能</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">y^2^=4</span><br></pre></td></tr></table></figure>

<p>y2&#x3D;4</p>
<h3 id="12-6、表情"><a href="#12-6、表情" class="headerlink" title="12.6、表情"></a>12.6、表情</h3><p>Typora语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">以:开始，然后输入表情的英文单词,以：结尾，将直接输入该表情.例如：</span><br><span class="line">:smile</span><br><span class="line">:cry</span><br><span class="line">:happy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>typora数学公式</title>
    <url>/2022/09/23/typora%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Typora-数学公式"><a href="#Typora-数学公式" class="headerlink" title="Typora 数学公式"></a>Typora 数学公式</h1><h2 id="1、常用符号的代码"><a href="#1、常用符号的代码" class="headerlink" title="1、常用符号的代码"></a>1、常用符号的代码</h2><ul>
<li>上下标，正负无穷</li>
<li>加减乘，分式，根号，省略号</li>
<li>三角函数</li>
<li>矢量，累加累乘，极限</li>
<li>希腊字母</li>
</ul>
<span id="more"></span>

<h3 id="1-1、1-上下标，正负无穷"><a href="#1-1、1-上下标，正负无穷" class="headerlink" title="1.1、1.上下标，正负无穷"></a>1.1、<strong>1.上下标，正负无穷</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-9e56df605e51b7aa0cf7a45d0b5bfde1_1440w.jpg" alt="img"></p>
<h3 id="1-2、2-加减乘，分式，根号，省略号"><a href="#1-2、2-加减乘，分式，根号，省略号" class="headerlink" title="1.2、2.加减乘，分式，根号，省略号"></a>1.2、<strong>2.加减乘，分式，根号，省略号</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-417aefe2addf8328b4865d037864ec4e_1440w.jpg" alt="img"></p>
<h3 id="1-3、3-三角函数"><a href="#1-3、3-三角函数" class="headerlink" title="1.3、3.三角函数"></a>1.3、<strong>3.三角函数</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-2527327da18ba3cd4d9cfa9483bcbe1f_1440w.jpg" alt="img"></p>
<h3 id="1-4、4-矢量，累加累乘，极限"><a href="#1-4、4-矢量，累加累乘，极限" class="headerlink" title="1.4、4.矢量，累加累乘，极限"></a>1.4、<strong>4.矢量，累加累乘，极限</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-701158788db26a5936516dc93d34b378_1440w.jpg" alt="img"></p>
<p>$$<br>\large<br>||x||<em>1 &#x3D; \sum\limits</em>{i &#x3D; 1}^n|x_i|<br>$$</p>
<h3 id="1-5、5-希腊字母"><a href="#1-5、5-希腊字母" class="headerlink" title="1.5、5.希腊字母"></a>1.5、<strong>5.希腊字母</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-ec3ad9e52d4b26648d73c64c43bc217e_1440w.jpg" alt="img"></p>
<h3 id="1-6、6-关系运算符"><a href="#1-6、6-关系运算符" class="headerlink" title="1.6、6.关系运算符"></a>1.6、<strong>6.关系运算符</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-9088cec7cffbc94c5daef26147278062_1440w.jpg" alt="img"></p>
<h3 id="1-7、7-偏导符号"><a href="#1-7、7-偏导符号" class="headerlink" title="1.7、7.偏导符号"></a>1.7、<strong>7.偏导符号</strong></h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\partial</span></span><br></pre></td></tr></table></figure>


<p>$$<br>\partial<br>$$</p>
<h3 id="1-8、8-正比符号"><a href="#1-8、8-正比符号" class="headerlink" title="1.8、8.正比符号"></a>1.8、<strong>8.正比符号</strong></h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\propto</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\propto<br>$$</p>
<h3 id="1-9、9-转为数学符号"><a href="#1-9、9-转为数学符号" class="headerlink" title="1.9、9.转为数学符号"></a>1.9、<strong>9.转为数学符号</strong></h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mathop</span>&#123;min&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-10、叉乘、除以"><a href="#1-10、叉乘、除以" class="headerlink" title="1.10、叉乘、除以**"></a>1.10、叉乘、除以**</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">a <span class="keyword">\cdot</span> b</span><br><span class="line">a <span class="keyword">\times</span> b</span><br><span class="line">a <span class="keyword">\div</span> b</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2、矩阵"><a href="#2、矩阵" class="headerlink" title="2、矩阵"></a>2、<strong>矩阵</strong></h2><h3 id="2-1、1-简单矩阵"><a href="#2-1、1-简单矩阵" class="headerlink" title="2.1、1.简单矩阵"></a>2.1、<strong>1.简单矩阵</strong></h3><p>使用<code>\begin&#123;matrix&#125;…\end&#123;matrix&#125;</code>生成， 每一行以<code>\\</code>结尾表示换行，元素间以<code>&amp;</code>间隔，式子的表示序号<code>\tag&#123;1&#125;</code>（右边的序号）。<br>$$<br>\begin{matrix}<br> 1 &amp; 2 &amp; 3 \<br> 4 &amp; 5 &amp; 6 \<br> 7 &amp; 8 &amp; 9<br>\end{matrix} \tag{1}<br>$$</p>
<h3 id="2-2、2-带左右括号的矩阵-大中小括号"><a href="#2-2、2-带左右括号的矩阵-大中小括号" class="headerlink" title="2.2、2.带左右括号的矩阵(大中小括号)"></a>2.2、<strong>2.带左右括号的矩阵(大中小括号)</strong></h3><p><strong>方法一</strong>：在<code>\begin&#123;&#125;</code>之前和<code>\end&#123;&#125;</code>之后添加左右括号的代码。</p>
<p>大括号：<br>$$<br>\left{<br>\begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right} \tag{2}<br>$$</p>
<p>中括号：<br>$$<br>\left[<br> \begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right] \tag{3}<br>$$</p>
<p>小括号：<br>$$<br>\left(<br>\begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right) \tag{4}<br>$$<br><strong>方法二</strong>：改变<code>\begin&#123;matrix&#125;</code>和<code>\end&#123;matrix&#125;</code>中<code>&#123;matrix&#125;</code></p>
<p>大括号：<br>$$<br>\begin{Bmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>\end{Bmatrix} \tag{6}<br>$$</p>
<p>中括号：<br>$$<br>\begin{bmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>\end{bmatrix} \tag{6}<br>$$</p>
<h3 id="2-3、3-包含希腊字母与省略号"><a href="#2-3、3-包含希腊字母与省略号" class="headerlink" title="2.3、3.包含希腊字母与省略号"></a>2.3、<strong>3.包含希腊字母与省略号</strong></h3><p>行省略号<code>\cdots</code>，列省略号<code>\vdots</code>，斜向省略号（左上至右下）<code>\ddots</code>。<br>$$<br>\left{<br> \begin{matrix}<br> 1      &amp; 2        &amp; \cdots &amp; 5        \<br> 6      &amp; 7        &amp; \cdots &amp; 10       \<br> \vdots &amp; \vdots   &amp; \ddots &amp; \vdots   \<br> \alpha &amp; \alpha+1 &amp; \cdots &amp; \alpha+4<br> \end{matrix}<br> \right}<br>$$</p>
<hr>
<h2 id="3、公式序号"><a href="#3、公式序号" class="headerlink" title="3、公式序号"></a>3、公式序号</h2><p>见“矩阵”小节，代码最后的一行即表示右端序号</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">\tag&#123;6&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、行列式"><a href="#4、行列式" class="headerlink" title="4、行列式"></a>4、行列式</h2><p>行列式相关语法与矩阵类似<br>$$<br>\begin{vmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{vmatrix}<br>\tag{7}<br>$$</p>
<hr>
<h2 id="5、表格"><a href="#5、表格" class="headerlink" title="5、表格"></a>5、表格</h2><h3 id="5-1、1-简易表格"><a href="#5-1、1-简易表格" class="headerlink" title="5.1、1.简易表格"></a>5.1、<strong>1.简易表格</strong></h3><p>$$<br>\begin{array}{|c|c|c|}<br>    \hline 2&amp;9&amp;4\<br>    \hline 7&amp;5&amp;3\<br>    \hline 6&amp;1&amp;8\<br>    \hline<br>\end{array}<br>$$</p>
<p><strong>开头结尾</strong>： <code>\begin&#123;array&#125;</code> ， <code>\end&#123;array&#125;</code></p>
<p><strong>定义式</strong>：例：<code>&#123;|c|c|c|&#125;</code>，其中<code>c</code> <code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐。</p>
<p><strong>分割线</strong>：①<strong>竖直分割线</strong>：在定义式中插入 <code>|</code>， （<code>||</code>表示两条竖直分割线）。</p>
<p>②<strong>水平分割线</strong>：在下一行输入前插入 <code>\hline</code>，以下图真值表为例。</p>
<p>其他：每行元素间均须要插入 <code>&amp;</code> ，每行元素以 <code>\\</code> 结尾。</p>
<h3 id="5-2、2-真值表"><a href="#5-2、2-真值表" class="headerlink" title="5.2、2..真值表"></a>5.2、<strong>2..真值表</strong></h3><p>$$<br>\begin{array}{cc|c}<br>           A&amp;B&amp;F\<br>    \hline 0&amp;0&amp;0\<br>           0&amp;1&amp;1\<br>           1&amp;0&amp;1\<br>           1&amp;1&amp;1\<br>\end{array}<br>$$</p>
<hr>
<h2 id="6、多行等式对齐"><a href="#6、多行等式对齐" class="headerlink" title="6、多行等式对齐"></a>6、<strong>多行等式对齐</strong></h2><p>$$<br>\begin{aligned}<br>a &amp;&#x3D; b + c \<br>  &amp;&#x3D; d + e + f<br>\end{aligned}<br>$$</p>
<h2 id="7、条件表达式"><a href="#7、条件表达式" class="headerlink" title="7、条件表达式**"></a>7、条件表达式**</h2><p>方程组：<br>$$<br>\begin{cases}<br>3x + 5y +  z \<br>7x - 2y + 4z \<br>-6x + 3y + 2z<br>\end{cases}<br>$$</p>
<p>同理，条件表达式：<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>n&#x2F;2,  &amp; \text{if }n\text{ is even} \<br>3n+1, &amp; \text{if }n\text{ is odd}<br>\end{cases}<br>$$</p>
<hr>
<h2 id="8、间隔-大小空格、紧贴"><a href="#8、间隔-大小空格、紧贴" class="headerlink" title="8、间隔 (大小空格、紧贴)"></a>8、<strong>间隔 (大小空格、紧贴)</strong></h2><p><strong>紧贴 + 无空格 + 小空格 + 中空格 + 大空格 + 真空格 + 双真空格</strong><br>$$<br>a!b + ab + a,b + a;b + a\ b + a\quad b + a\qquad b<br>$$<br>紧贴<code>\!</code></p>
<p>无空格 小空格<code>\,</code> 中空格<code>\;</code> 大空格<code>\</code></p>
<p>真空格<code>\quad</code> 双真空格<code>\qquad</code></p>
<hr>
<h2 id="9、公式字体大小调整"><a href="#9、公式字体大小调整" class="headerlink" title="9、公式字体大小调整"></a>9、公式字体大小调整</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\tiny</span></span><br><span class="line"><span class="keyword">\scriptsize</span></span><br><span class="line"><span class="keyword">\footnotesize</span>（理论上有这个的，但是发现typora无法识别该指令）</span><br><span class="line"><span class="keyword">\small</span></span><br><span class="line"><span class="keyword">\normalsize</span></span><br><span class="line"><span class="keyword">\large</span></span><br><span class="line"><span class="keyword">\Large</span></span><br><span class="line"><span class="keyword">\LARGE</span></span><br><span class="line"><span class="keyword">\huge</span></span><br><span class="line"><span class="keyword">\Huge</span></span><br></pre></td></tr></table></figure>

<h2 id="10、1-希腊字母"><a href="#10、1-希腊字母" class="headerlink" title="10、1. 希腊字母"></a>10、1. 希腊字母</h2><table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody><tr>
<td>α</td>
<td>\alpha</td>
<td>A</td>
<td>\Alpha</td>
</tr>
<tr>
<td>β</td>
<td>\beta</td>
<td>B</td>
<td>\Beta</td>
</tr>
<tr>
<td>γ</td>
<td>\gamma</td>
<td>Γ</td>
<td>\Gamma</td>
</tr>
<tr>
<td>δ</td>
<td>\delta</td>
<td>Δ</td>
<td>\Delta</td>
</tr>
<tr>
<td>ϵ</td>
<td>\epsilon</td>
<td>E</td>
<td>\Epsilon</td>
</tr>
<tr>
<td>ε</td>
<td>\varepsilon</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ζ</td>
<td>\zeta</td>
<td>Z</td>
<td>\Zeta</td>
</tr>
<tr>
<td>η</td>
<td>\eta</td>
<td>H</td>
<td>\Eta</td>
</tr>
<tr>
<td>θ</td>
<td>\theta</td>
<td>Θ</td>
<td>\Theta</td>
</tr>
<tr>
<td>ϑ</td>
<td>\vartheta</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ι</td>
<td>\iota</td>
<td>I</td>
<td>\Iota</td>
</tr>
<tr>
<td>κ</td>
<td>\kappa</td>
<td>K</td>
<td>\Kappa</td>
</tr>
<tr>
<td>λ</td>
<td>\lambda</td>
<td>Λ</td>
<td>\Lambda</td>
</tr>
<tr>
<td>μ</td>
<td>\mu</td>
<td>M</td>
<td>\Mu</td>
</tr>
<tr>
<td>ν</td>
<td>\nu</td>
<td>N</td>
<td>\Nu</td>
</tr>
<tr>
<td>ξ</td>
<td>\xi</td>
<td>Ξ</td>
<td>\Xi</td>
</tr>
<tr>
<td>ο</td>
<td>\omicron</td>
<td>O</td>
<td>\Omicron</td>
</tr>
<tr>
<td>π</td>
<td>\pi</td>
<td>Π</td>
<td>\Pi</td>
</tr>
<tr>
<td>ϖ</td>
<td>\varpi</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ρ</td>
<td>\rho</td>
<td>P</td>
<td>\Rho</td>
</tr>
<tr>
<td>ϱ</td>
<td>\varrho</td>
<td></td>
<td></td>
</tr>
<tr>
<td>σ</td>
<td>\sigma</td>
<td>Σ</td>
<td>\Sigma</td>
</tr>
<tr>
<td>ς</td>
<td>\varsigma</td>
<td></td>
<td></td>
</tr>
<tr>
<td>τ</td>
<td>\tau</td>
<td>T</td>
<td>\Tau</td>
</tr>
<tr>
<td>υ</td>
<td>\upsilon</td>
<td>Υ</td>
<td>\Upsilon</td>
</tr>
<tr>
<td>ϕ</td>
<td>\phi</td>
<td>Φ</td>
<td>\Phi</td>
</tr>
<tr>
<td>φ</td>
<td>\varphi</td>
<td></td>
<td></td>
</tr>
<tr>
<td>χ</td>
<td>\chi</td>
<td>X</td>
<td>\Chi</td>
</tr>
<tr>
<td>ψ</td>
<td>\psi</td>
<td>Ψ</td>
<td>\Psi</td>
</tr>
<tr>
<td>ω</td>
<td>\omega</td>
<td>Ω</td>
<td>\Omega</td>
</tr>
</tbody></table>
<p>var开头的只有小写希腊字母，没有大写。</p>
<h2 id="11、2-运算符符号"><a href="#11、2-运算符符号" class="headerlink" title="11、2. 运算符符号"></a>11、2. 运算符符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>实现</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>±</td>
<td>\pm</td>
<td>加减</td>
</tr>
<tr>
<td>∓</td>
<td>\mp</td>
<td>减加</td>
</tr>
<tr>
<td>×</td>
<td>\times</td>
<td>乘</td>
</tr>
<tr>
<td>÷</td>
<td>\div</td>
<td>除</td>
</tr>
<tr>
<td>⋅</td>
<td>\cdot</td>
<td>点</td>
</tr>
<tr>
<td>∗</td>
<td>\ast</td>
<td>星号</td>
</tr>
<tr>
<td>⋆</td>
<td>\star</td>
<td>五角星</td>
</tr>
<tr>
<td>†</td>
<td>\dagger</td>
<td>剑号</td>
</tr>
<tr>
<td>‡</td>
<td>\ddagger</td>
<td>双剑号</td>
</tr>
<tr>
<td>⨿</td>
<td>\amalg</td>
<td>amalg</td>
</tr>
<tr>
<td>∩</td>
<td>\cap</td>
<td>圆帽</td>
</tr>
<tr>
<td>∪</td>
<td>\cup</td>
<td>圆杯</td>
</tr>
<tr>
<td>⊎</td>
<td>\uplus</td>
<td>圆杯加号</td>
</tr>
<tr>
<td>⊓</td>
<td>\sqcap</td>
<td>方帽</td>
</tr>
<tr>
<td>⊔</td>
<td>\sqcup</td>
<td>方杯</td>
</tr>
<tr>
<td>∨</td>
<td>\vee</td>
<td>正V</td>
</tr>
<tr>
<td>∧</td>
<td>\wedge</td>
<td>倒V</td>
</tr>
<tr>
<td>∖</td>
<td>\setminus</td>
<td>集差</td>
</tr>
<tr>
<td>≀</td>
<td>\wr</td>
<td>环积</td>
</tr>
<tr>
<td>∘</td>
<td>\circ</td>
<td>圆圈</td>
</tr>
<tr>
<td>∙</td>
<td>\bullet</td>
<td>实心圆</td>
</tr>
<tr>
<td>⊘</td>
<td>\oslash</td>
<td>圆圈斜线</td>
</tr>
<tr>
<td>⊙</td>
<td>\odot</td>
<td>圆圈点</td>
</tr>
<tr>
<td>◯</td>
<td>\bigcirc</td>
<td>大圆圈</td>
</tr>
<tr>
<td>△</td>
<td>\bigtriangleup</td>
<td>大正三角形</td>
</tr>
<tr>
<td>▽</td>
<td>\bigtriangledown</td>
<td>大倒三角形</td>
</tr>
<tr>
<td>◃</td>
<td>\triangleleft</td>
<td>左三角形</td>
</tr>
<tr>
<td>▹</td>
<td>\triangleright</td>
<td>右三角形</td>
</tr>
<tr>
<td>⊕</td>
<td>\oplus</td>
<td>圆圈加号</td>
</tr>
<tr>
<td>⊖</td>
<td>\ominus</td>
<td>圆圈减号</td>
</tr>
<tr>
<td>⊗</td>
<td>\otimes</td>
<td>圆圈乘号</td>
</tr>
<tr>
<td>⊥</td>
<td>\bot</td>
<td>倒T</td>
</tr>
<tr>
<td>⊤</td>
<td>\top</td>
<td>正T</td>
</tr>
<tr>
<td>∑</td>
<td>\sum</td>
<td>求和</td>
</tr>
<tr>
<td>∏</td>
<td>\prod</td>
<td>乘积</td>
</tr>
<tr>
<td>∫</td>
<td>\int</td>
<td>积分</td>
</tr>
<tr>
<td>∮∮</td>
<td>\oint</td>
<td>围道积分</td>
</tr>
<tr>
<td>⨄</td>
<td>\biguplus</td>
<td>大圆杯加号</td>
</tr>
<tr>
<td>⨁</td>
<td>\bigoplus</td>
<td>大圆圈加号</td>
</tr>
<tr>
<td>⋁</td>
<td>\bigvee</td>
<td>大V</td>
</tr>
<tr>
<td>⋂</td>
<td>\bigcap</td>
<td>大圆帽</td>
</tr>
<tr>
<td>⨂</td>
<td>\bigotimes</td>
<td>大圆圈乘号</td>
</tr>
<tr>
<td>⋀</td>
<td>\bigwedge</td>
<td>大倒V</td>
</tr>
<tr>
<td>⋃</td>
<td>\bigcup</td>
<td>大圆杯</td>
</tr>
<tr>
<td>⨀</td>
<td>\bigodot</td>
<td>大圆圈点</td>
</tr>
<tr>
<td>⨆</td>
<td>\bigsqcup</td>
<td>大方杯</td>
</tr>
</tbody></table>
<h2 id="12、3-关系符号"><a href="#12、3-关系符号" class="headerlink" title="12、3. 关系符号"></a>12、3. 关系符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>实现</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>≤</td>
<td>\leq</td>
<td>小于等于</td>
</tr>
<tr>
<td>≥</td>
<td>\geq</td>
<td>大于等于</td>
</tr>
<tr>
<td>≪</td>
<td>\ll</td>
<td>远小于</td>
</tr>
<tr>
<td>≫</td>
<td>\gg</td>
<td>远大于</td>
</tr>
<tr>
<td>≠</td>
<td>\neq</td>
<td>不等于</td>
</tr>
<tr>
<td>≐</td>
<td>\doteq</td>
<td>点等于</td>
</tr>
<tr>
<td>∼</td>
<td>\sim</td>
<td>相似于</td>
</tr>
<tr>
<td>≃</td>
<td>\simeq</td>
<td>近似等于</td>
</tr>
<tr>
<td>≈</td>
<td>\approx</td>
<td>约等于</td>
</tr>
<tr>
<td>≍</td>
<td>\asymp</td>
<td>趋于</td>
</tr>
<tr>
<td>≅</td>
<td>\cong</td>
<td>全等于</td>
</tr>
<tr>
<td>≡</td>
<td>\equiv</td>
<td>恒等于</td>
</tr>
<tr>
<td>⊂</td>
<td>\subset</td>
<td>子集</td>
</tr>
<tr>
<td>⊃</td>
<td>\supset</td>
<td>超集</td>
</tr>
<tr>
<td>⊆</td>
<td>\subseteq</td>
<td>子集或等于</td>
</tr>
<tr>
<td>⊇</td>
<td>\supseteq</td>
<td>超集或等于</td>
</tr>
<tr>
<td>⊑</td>
<td>\sqsubseteq</td>
<td>方形子集或等于</td>
</tr>
<tr>
<td>⊒</td>
<td>\sqsupseteq</td>
<td>方形超集或等于</td>
</tr>
<tr>
<td>∈</td>
<td>\in</td>
<td>包含于</td>
</tr>
<tr>
<td>∋</td>
<td>\ni</td>
<td>包含</td>
</tr>
<tr>
<td>∉</td>
<td>\notin</td>
<td>不包含于</td>
</tr>
<tr>
<td>⊨</td>
<td>\models</td>
<td>Models</td>
</tr>
<tr>
<td>⊢</td>
<td>\vdash</td>
<td>竖线短横</td>
</tr>
<tr>
<td>⊣</td>
<td>\dashv</td>
<td>短横竖线</td>
</tr>
<tr>
<td>⊥</td>
<td>\perp</td>
<td>垂直</td>
</tr>
<tr>
<td>∣</td>
<td>\mid</td>
<td>中线</td>
</tr>
<tr>
<td>∥</td>
<td>\parallel</td>
<td>平行</td>
</tr>
<tr>
<td>∝</td>
<td>\propto</td>
<td>成比例</td>
</tr>
<tr>
<td>⋈</td>
<td>\bowtie</td>
<td>领结</td>
</tr>
<tr>
<td>≺</td>
<td>\prec</td>
<td>先于</td>
</tr>
<tr>
<td>⪯</td>
<td>\preceq</td>
<td>先于等于</td>
</tr>
<tr>
<td>≻</td>
<td>\succ</td>
<td>后于</td>
</tr>
<tr>
<td>⪰</td>
<td>\succeq</td>
<td>后于等于</td>
</tr>
<tr>
<td>≮</td>
<td>\nless</td>
<td>不小于</td>
</tr>
<tr>
<td>≯</td>
<td>\ngtr</td>
<td>不大于</td>
</tr>
<tr>
<td>⪇</td>
<td>\nleqslant</td>
<td>不小于等于</td>
</tr>
<tr>
<td>⪈</td>
<td>\ngeqslant</td>
<td>不大于等于</td>
</tr>
<tr>
<td>≢</td>
<td>\not\equiv</td>
<td>不恒等于</td>
</tr>
<tr>
<td>≉</td>
<td>\not\approx</td>
<td>不约等于</td>
</tr>
<tr>
<td>≇</td>
<td>\not\cong</td>
<td>不全等于</td>
</tr>
<tr>
<td>≁</td>
<td>\not\sim</td>
<td>不相似于</td>
</tr>
<tr>
<td>≄</td>
<td>\not\simeq</td>
<td>不近似等于</td>
</tr>
<tr>
<td>⊭</td>
<td>\not\models</td>
<td>Not Models</td>
</tr>
<tr>
<td>∌</td>
<td>\not\ni</td>
<td>不包含</td>
</tr>
<tr>
<td>⊁</td>
<td>\not\succ</td>
<td>不后于</td>
</tr>
<tr>
<td>⪰̸</td>
<td>\not\succeq</td>
<td>不后于等于</td>
</tr>
<tr>
<td>⊀</td>
<td>\not\prec</td>
<td>不先于</td>
</tr>
<tr>
<td>⪯̸</td>
<td>\not\preceq</td>
<td>不先于等于</td>
</tr>
<tr>
<td>∦</td>
<td>\not\parallel</td>
<td>不平行</td>
</tr>
<tr>
<td>⊄</td>
<td>\not\subset</td>
<td>非子集</td>
</tr>
<tr>
<td>⊅</td>
<td>\not\supset</td>
<td>非超集</td>
</tr>
<tr>
<td>⊈</td>
<td>\not\subseteq</td>
<td>非子集或等于</td>
</tr>
<tr>
<td>⊉</td>
<td>\not\supseteq</td>
<td>非超集或等于</td>
</tr>
</tbody></table>
<h2 id="13、4-箭头符号"><a href="#13、4-箭头符号" class="headerlink" title="13、4. 箭头符号"></a>13、4. 箭头符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>实现</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>←</td>
<td>\leftarrow</td>
<td>左箭头</td>
</tr>
<tr>
<td>⇐</td>
<td>\Leftarrow</td>
<td>左双线箭头</td>
</tr>
<tr>
<td>⟵</td>
<td>\longleftarrow</td>
<td>长左箭头</td>
</tr>
<tr>
<td>⟸</td>
<td>\Longleftarrow</td>
<td>长双线左箭头</td>
</tr>
<tr>
<td>→</td>
<td>\rightarrow</td>
<td>右箭头</td>
</tr>
<tr>
<td>⇒</td>
<td>\Rightarrow</td>
<td>右双线箭头</td>
</tr>
<tr>
<td>⟶</td>
<td>\longrightarrow</td>
<td>长右箭头</td>
</tr>
<tr>
<td>⟹</td>
<td>\Longrightarrow</td>
<td>长双线右箭头</td>
</tr>
<tr>
<td>↔</td>
<td>\leftrightarrow</td>
<td>左右双向箭头</td>
</tr>
<tr>
<td>⇔</td>
<td>\Leftrightarrow</td>
<td>左右双向双线箭头</td>
</tr>
<tr>
<td>⟷</td>
<td>\longleftrightarrow</td>
<td>长左右双向箭头</td>
</tr>
<tr>
<td>⟺</td>
<td>\Longleftrightarrow</td>
<td>长左右双向双线箭头</td>
</tr>
<tr>
<td>↩</td>
<td>\hookleftarrow</td>
<td>弯钩左箭头</td>
</tr>
<tr>
<td>↪</td>
<td>\hookrightarrow</td>
<td>弯钩右箭头</td>
</tr>
<tr>
<td>↽</td>
<td>\leftharpoondown</td>
<td>下半钩左箭头</td>
</tr>
<tr>
<td>⇁</td>
<td>\rightharpoondown</td>
<td>下半钩右箭头</td>
</tr>
<tr>
<td>↼</td>
<td>\leftharpoonup</td>
<td>上半钩左箭头</td>
</tr>
<tr>
<td>⇀</td>
<td>\rightharpoonup</td>
<td>上半钩右箭头</td>
</tr>
<tr>
<td>↑</td>
<td>\uparrow</td>
<td>上箭头</td>
</tr>
<tr>
<td>⇑</td>
<td>\Uparrow</td>
<td>上双线箭头</td>
</tr>
<tr>
<td>↓</td>
<td>\downarrow</td>
<td>下箭头</td>
</tr>
<tr>
<td>⇓</td>
<td>\Downarrow</td>
<td>下双线箭头</td>
</tr>
<tr>
<td>↕</td>
<td>\updownarrow</td>
<td>上下双向箭头</td>
</tr>
<tr>
<td>⇕</td>
<td>\Updownarrow</td>
<td>上下双向双线箭头</td>
</tr>
<tr>
<td>↙</td>
<td>\swarrow</td>
<td>左斜下箭头</td>
</tr>
<tr>
<td>↗</td>
<td>\nearrow</td>
<td>右斜上箭头</td>
</tr>
<tr>
<td>↖</td>
<td>\nwarrow</td>
<td>左斜上箭头</td>
</tr>
<tr>
<td>↘</td>
<td>\searrow</td>
<td>右斜下箭头</td>
</tr>
<tr>
<td>↦</td>
<td>\mapsto</td>
<td>映射箭头</td>
</tr>
<tr>
<td>⟼</td>
<td>\longmapsto</td>
<td>长映射箭头</td>
</tr>
</tbody></table>
<h2 id="14、5-括号符号"><a href="#14、5-括号符号" class="headerlink" title="14、5. 括号符号"></a>14、5. 括号符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>实现</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>{</td>
<td>\lbrace</td>
<td>左花括号</td>
</tr>
<tr>
<td>}</td>
<td>\rbrace</td>
<td>右花括号</td>
</tr>
<tr>
<td>[</td>
<td>\lbrack</td>
<td>左方括号</td>
</tr>
<tr>
<td>]</td>
<td>\rbrack</td>
<td>右方括号</td>
</tr>
<tr>
<td>⟨</td>
<td>\langle</td>
<td>左尖括号</td>
</tr>
<tr>
<td>⟩</td>
<td>\rangle</td>
<td>右尖括号</td>
</tr>
<tr>
<td>⌈</td>
<td>\lceil</td>
<td>左上半框括号</td>
</tr>
<tr>
<td>⌉</td>
<td>\rceil</td>
<td>右上半框括号</td>
</tr>
<tr>
<td>⌊</td>
<td>\lfloor</td>
<td>左下半框括号</td>
</tr>
<tr>
<td>⌋</td>
<td>\rfloor</td>
<td>右下半框括号</td>
</tr>
<tr>
<td>|</td>
<td>\vert</td>
<td>竖线</td>
</tr>
<tr>
<td>‖</td>
<td>\Vert</td>
<td>双竖线</td>
</tr>
<tr>
<td>∖</td>
<td>\backslash</td>
<td>反斜线</td>
</tr>
</tbody></table>
<h2 id="15、6-其他符号"><a href="#15、6-其他符号" class="headerlink" title="15、6. 其他符号"></a>15、6. 其他符号</h2><table>
<thead>
<tr>
<th>符号</th>
<th>实现</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>∞</td>
<td>\infty</td>
<td>无穷</td>
</tr>
<tr>
<td>∃</td>
<td>\exists</td>
<td>存在</td>
</tr>
<tr>
<td>∀</td>
<td>\forall</td>
<td>任取</td>
</tr>
<tr>
<td>¬</td>
<td>\neg</td>
<td>取反号</td>
</tr>
<tr>
<td>∇</td>
<td>\nabla</td>
<td>劈形</td>
</tr>
<tr>
<td>△</td>
<td>\triangle</td>
<td>三角形</td>
</tr>
<tr>
<td>∠</td>
<td>\angle</td>
<td>角</td>
</tr>
<tr>
<td>∂</td>
<td>\partial</td>
<td>偏导数</td>
</tr>
<tr>
<td>∅</td>
<td>\emptyset</td>
<td>空集</td>
</tr>
<tr>
<td>′</td>
<td>\prime</td>
<td>质数</td>
</tr>
<tr>
<td>:</td>
<td>\colon</td>
<td>冒号</td>
</tr>
<tr>
<td>ℜ</td>
<td>\Re</td>
<td>实部</td>
</tr>
<tr>
<td>ℑ</td>
<td>\Im</td>
<td>虚部</td>
</tr>
<tr>
<td>…</td>
<td>\ldots</td>
<td>下三连点</td>
</tr>
<tr>
<td>⋯</td>
<td>\cdots</td>
<td>中三连点</td>
</tr>
<tr>
<td>⋮</td>
<td>\vdots</td>
<td>竖三连点</td>
</tr>
<tr>
<td>⋱</td>
<td>\ddots</td>
<td>斜三连点</td>
</tr>
<tr>
<td>√</td>
<td>\surd</td>
<td>不尽根号</td>
</tr>
<tr>
<td>.</td>
<td>\ldotp</td>
<td>句点</td>
</tr>
<tr>
<td>→</td>
<td>\to</td>
<td>结论</td>
</tr>
<tr>
<td>←</td>
<td>\gets</td>
<td>条件</td>
</tr>
<tr>
<td>ℵ</td>
<td>\aleph</td>
<td>Aleph</td>
</tr>
<tr>
<td>ℏ</td>
<td>\hbar</td>
<td>普朗克常数</td>
</tr>
<tr>
<td>℘</td>
<td>\wp</td>
<td>手写体大写P</td>
</tr>
<tr>
<td>ℓ</td>
<td>\ell</td>
<td>手写体小写l</td>
</tr>
<tr>
<td>ı</td>
<td>\imath</td>
<td>数学小写无点i</td>
</tr>
<tr>
<td>ȷ</td>
<td>\jmath</td>
<td>数学小写无点j</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>数学公式</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode+LaTeX论文排版</title>
    <url>/2022/10/07/vscode-LaTeX%E8%AE%BA%E6%96%87%E6%8E%92%E7%89%88/</url>
    <content><![CDATA[<h1 id="vscode-LaTeX-论文排版"><a href="#vscode-LaTeX-论文排版" class="headerlink" title="vscode+LaTeX 论文排版"></a>vscode+LaTeX 论文排版</h1><h2 id="1、什么是-LaTeX"><a href="#1、什么是-LaTeX" class="headerlink" title="1、什么是 LaTeX"></a>1、什么是 LaTeX</h2><p>LaTeX 是一种“非所见即所得”的排版系统，即用户需要输入特定的代码，保存在 后缀为.tex 的文件中，通过编译得到所需的 pdf 文件如何理解“非所见即所得”呢？在 这里举个“所见即所得”的例子：Word。Word 的界面就是一张 A4 纸，输入的时候是什么样子，最后呈现出来就是什么样子。这给了我们极高的自由度，也非常容易上手， 但是有如下问题：</p>
<ol>
<li>对于对细节不敏感的用户，Word 的排版常常会在细节存在问题，比如两段话之间行间距不同、字体不同、标题样式不同等；</li>
<li>对于撰写论文的用户，Word 的标题、章节、图表、参考文献等无法自动标号，也很难在正文中引用；</li>
<li>对于有公式输入需求的用户，Word 自带的公式不稳定，而公式插件效果常常不好。</li>
</ol>
<p>相比之下，使用 LaTeX 进行排版，就像是在铺好的轨道上驾驶火车一样。使用 LaTeX 没有办法像 Word 一样非常自由，但是可以保证规范性，这使得 LaTeX 非常适合用于论文的排版。</p>
<span id="more"></span>

<h2 id="2、安装-LaTeX"><a href="#2、安装-LaTeX" class="headerlink" title="2、安装 LaTeX"></a>2、安装 LaTeX</h2><p>LaTeX 国内镜像源:</p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">清华大学开源软件镜像站</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</a></li>
<li><a href="https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/">中国科学技术大学镜像站</a><br><a href="https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/">https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/</a></li>
<li><a href="https://mirror-hk.koddos.net/CTAN/systems/texlive/Images/">香港大学镜像站</a><br><a href="https://mirror-hk.koddos.net/CTAN/systems/texlive/Images/">https://mirror-hk.koddos.net/CTAN/systems/texlive/Images/</a></li>
</ul>
<p>下载后得到的 texlive.iso 大约 4.3G 大小，使用解压软件将其解压在磁盘上，打开 解压后的文件，将文件中的 install-tl-windows.bat 使用管理员身份运行。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/LaTeX%E5%AE%89%E8%A3%85-1.png" alt="LaTeX 安装界面"></p>
<p>在这个界面可以修改安装路径；因为后续配置 vs code 编写环境，所以可以取消勾 选安装 TeXworks 前端的选项。</p>
<p>然后点击 Advanced，弹出如下界面：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/LaTex%E5%AE%89%E8%A3%85-2.png" alt="LaTeX 安装 Advanced 界面"></p>
<p>查看标红框的选项是否与设置的有误，然后点击 Customize 进入自定义安装界面， 可以取消勾选用不到的语言包已达到减少安装大小。自定义界面如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/LaTex%E5%AE%89%E8%A3%85-3.png" alt="LaTeX 安装 Customize 界面"></p>
<p>Languages 只需要勾选这三个就差不多了，然后点击确定安装，进入漫长的安装等 待环节。安装完成之后建议重启一下电脑，因为会需要注册环境变量。</p>
<h2 id="3、Sumatra-PDF-安装"><a href="#3、Sumatra-PDF-安装" class="headerlink" title="3、Sumatra PDF 安装"></a>3、Sumatra PDF 安装</h2><p>Sumatra PDF，又叫 Sumatra，是一款专为 Microsoft Windows 开发的开放源代 码 PDF 阅读器。该程序也可以打开开放 XML 纸张规范、DjVu、EPUB、XPS、CHM、 CB7、CBR、CBT、CBZ、MOBI 和 PRC 文件。这里安装的 Sumatra PDF 是作为 vs code 编译后 LaTeX 之后形成的 pdf 文件的外部预览器，以获取更好的预览体验。</p>
<p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer">Sumatra PDF 官网下载地址</a></p>
<p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer">https://www.sumatrapdfreader.org/download-free-pdf-viewer</a></p>
<h2 id="4、vscode-安装"><a href="#4、vscode-安装" class="headerlink" title="4、vscode 安装"></a>4、vscode 安装</h2><p>Visual Studio Code（简称 VS Code）是一款由微软开发且跨平台的免费源代码编 辑器。该软件支持语法高亮、代码自动补全（又称 IntelliSense（英语：IntelliSense））、 代码重构功能，并且内置了命令行工具和 Git 版本控制系统。用户可以更改主题和键盘快捷方式实现个性化设置，也可以通过内置的扩展程序商店安装扩展以拓展软件功能。</p>
<p>Visual Studio Code 被认为是最受开发者欢迎的开发环境之一。</p>
<p><a href="https://code.visualstudio.com/download">vscode官网地址</a></p>
<p><a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p>
<h3 id="4-1、1-插件安装"><a href="#4-1、1-插件安装" class="headerlink" title="4.1、1.插件安装"></a>4.1、1.插件安装</h3><p>vs code 的强大离不开优质的插件生态环境，其插件商店具有各种各样的插件，帮 助 vs code 可以编写几乎任何语言。</p>
<p>要在 vs code 中编写 LaTeX 首先需要安装插件：LaTeX Workshop 以获取 vs code 对 .tex 文件的支持。在插件商店下载安装插件：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/LaTeX%20Workshop.png" alt="LaTeX Workshop 插件"></p>
<p>在 vs code 中新建一个 .tex 文件，输入以下内容，可以看到代码已经被高亮显示了。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/LaTeX%E9%AB%98%E4%BA%AE.png" alt="LaTeX 代码高亮"></p>
<h3 id="4-2、2-插件配置"><a href="#4-2、2-插件配置" class="headerlink" title="4.2、2.插件配置"></a>4.2、2.插件配置</h3><p>使用 F1 或 ctrl + shift + p 的快捷键，在弹出的输入框中输入 settings，打开用户 设置的 json 文件：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/settings.png" alt="用户设置 settings json 文件"></p>
<p>在文件末尾添加以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> <span class="attr">&quot;ltex.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 启用插件</span></span><br><span class="line"><span class="attr">&quot;ltex.language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en-US&quot;</span><span class="punctuation">,</span><span class="comment">// 设置语言</span></span><br><span class="line"><span class="comment">// 设置是否自动编译 never</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//右键菜单</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//从使用的包中自动补全命令和环境</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//编译出错时设置是否弹出气泡设置</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.message.error.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 用于配置编译链</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; biber -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;biber&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 编译工具和命令</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-outdir=%OUTDIR%&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;biber&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;biber&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//文件清理。此属性必须是字符串数组</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;*.aux&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.bbl&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.blg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.ind&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.lof&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.lot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.toc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.acn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.acr&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.alg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.glg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.glo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.gls&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.ist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.fls&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//设置为onFaild 在构建失败后清除辅助文件</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFailed&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用上次的recipe编译组合</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 用于反向同步的内部查看器的键绑定。ctrl/cmd +点击(默认)或双击</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double-click&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//使用 SumatraPDF 预览编译好的PDF文件</span></span><br><span class="line"><span class="comment">// 设置VScode内部查看生成的pdf文件</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.viewer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用外部查看器时要执行的命令。此功能不受官方支持。</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.ref.viewer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用外部查看器时要执行的命令。此功能不受官方支持。</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.external.viewer.command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;H:\\SumatraPDF\\SumatraPDF.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用外部查看器时，latex−workshop.view.pdf.external.view.command的参数。</span></span><br><span class="line"><span class="comment">//%PDF%是用于生成PDF文件的绝对路径的占位符。</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.external.viewer.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;%PDF%&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 将synctex转发到外部查看器时要执行的命令。</span></span><br><span class="line"><span class="comment">// 主要要修改为自己的 SumatraPDF.exe 所在路径</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.external.synctex.command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;H:\\SumatraPDF\\SumatraPDF.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// %LINE%是行号，%PDF%是生成PDF文件的绝对路径的占位符，</span></span><br><span class="line"><span class="comment">// %TEX%是触发syncTeX的扩展名为.tex的LaTeX文件路径。</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.view.pdf.external.synctex.args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;-forward-search&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;%TEX%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;%LINE%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;-reuse-instance&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;-inverse-search&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;\&quot;D:\\vscode\\Microsoft VS Code\\Code.exe\&quot; \&quot;D:\\vscode\\Microsoft VS Code\\resources\\app\\out\\cli.js\&quot; --ms-enable-electron-run-as-node -r -g \&quot;%f:%l\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;%PDF%&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>具体配置也可以参考：<a href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/38178015">https://zhuanlan.zhihu.com/p/38178015</a></p>
<p>需要注意的是 <code>“latex-workshop.view.pdf.external.synctex.args”</code> 命令中 需要 添加 <code>–ms-enable-electron-run-as-node</code> 才能完成和 SumatraPDF 的反向搜索。</p>
<p>接着就可以使用 vs code 编写 LaTeX 代码，然后用 SumatraPDF 进行预览了。</p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>不得不说 LaTeX 的门槛还是挺高的，有各种<strong>宏包</strong>、各种<strong>配置</strong>让人摸不着头脑，还有 使用了一些宏包还需要<strong>多次编译</strong>，有个<strong>编译链</strong>的概念在，也是大大加大了上手的难度。 比之 markdown，LaTeX 无疑复杂了许多，也许选择了一个合适的模板，在模板上进行 论文写作会好很多吧（在接触了 word 写大文档之后，更倾向于 LaTeX 了，稍微碰一下格式就乱了，太烦了）。。。</p>
<p>文章参考与分享：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/38178015">使用VSCode编写LaTeX</a><br><a href="https://zhuanlan.zhihu.com/p/38178015">https://zhuanlan.zhihu.com/p/38178015</a></li>
<li><a href="https://cn.overleaf.com/">Overleaf, 在线LaTeX编辑器</a>，一个在线的 LaTex 编辑的网站，上面也存储很多模板。<br><a href="https://cn.overleaf.com/">https://cn.overleaf.com/</a></li>
<li><a href="https://github.com/scnu/scnuthesis">华南师范大学硕士&#x2F;博士学位论文格式要求的LaTeX模板</a><br><a href="https://github.com/scnu/scnuthesis">https://github.com/scnu/scnuthesis</a></li>
<li><a href="https://www.zhihu.com/question/62943097">如何从零开始，入门 LaTeX</a><br><a href="https://www.zhihu.com/question/62943097">https://www.zhihu.com/question/62943097</a></li>
</ul>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3</title>
    <url>/2022/09/23/vue3/</url>
    <content><![CDATA[<h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1><h2 id="1、主函数-main-ts"><a href="#1、主函数-main-ts" class="headerlink" title="1、主函数 main.ts"></a>1、主函数 main.ts</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序的主入口文件，ts文件</span></span><br><span class="line"><span class="comment">// 引入 createApp 函数，创建对应的应用，产生应用的实例对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App 组件（所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建 App 应用返回对应的实例对象，调用 mount 方法进行挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2、App-vue"><a href="#2、App-vue" class="headerlink" title="2、App.vue"></a>2、App.vue</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--  Vue2 中的 html 模板中必须有一对根标签，Vue3组件的模板中可以没有根标签--&gt;</span><br><span class="line">  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Welcome to Your Vue.js + TypeScript App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">// 这里可以使用 ts 的代码</span><br><span class="line">// defineComponent 函数，目的是定义一个组件，内部可以传入一个配置对象</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">// 引入一个子级组件</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 暴露出去一个定义好的组件</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  // 组件名</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  // 注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    // 注册一个子级组件</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3、Composition-API-常用部分"><a href="#3、Composition-API-常用部分" class="headerlink" title="3、Composition API(常用部分)"></a>3、Composition API(常用部分)</h2><h3 id="3-1、setup"><a href="#3-1、setup" class="headerlink" title="3.1、setup"></a>3.1、setup</h3><ul>
<li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li>
<li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li>
</ul>
<h3 id="3-2、ref"><a href="#3-2、ref" class="headerlink" title="3.2、ref"></a>3.2、ref</h3><ul>
<li>作用: 定义一个数据的响应式</li>
<li>语法: const xxx &#x3D; ref(initValue):<ul>
<li>创建一个包含响应式数据的引用(reference)对象</li>
<li>js中操作数据: xxx.value</li>
<li>模板中操作数据: 不需要.value</li>
</ul>
</li>
<li>一般用来定义一个<code>基本类型的响应式数据</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;hello,world&lt;/div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;number&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;add&quot;&gt;递增&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">// 这里可以使用 ts 的代码</span><br><span class="line">// defineComponent 函数，目的是定义一个组件，内部可以传入一个配置对象</span><br><span class="line">import &#123;defineComponent,ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 暴露出去一个定义好的组件</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  // 组件名</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // ref 是一个函数，作用：定义一个响应式数据，返回一个ref对象，对象中有一个 value 属性，</span><br><span class="line">    // 如果需要对数据进行操作，需要使用 ref 对象调用 value 属性的方式进行数据的操作</span><br><span class="line">    // 一般用来定义一个基本类型的响应式数据</span><br><span class="line">    const number = ref(0)</span><br><span class="line">    console.log(&#x27;hello,world&#x27;)</span><br><span class="line">    function add()&#123;</span><br><span class="line">      number.value++</span><br><span class="line">    &#125;</span><br><span class="line">    return&#123;</span><br><span class="line">      number,</span><br><span class="line">      add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-3、reactive"><a href="#3-3、reactive" class="headerlink" title="3.3、reactive"></a>3.3、reactive</h3><ul>
<li>作用: 定义多个数据的响应式</li>
<li>const proxy &#x3D; reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理对象</li>
<li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;姓名：&#123;&#123;user.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;年龄：&#123;&#123;user.age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;钱：&#123;&#123;user.assets.money&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div v-for=&quot;(item,index) in user.assets.fixedAssets&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;h2 &gt;不动产&#123;&#123;index&#125;&#125;：&#123;&#123; item &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;updateUser&quot;&gt;人物信息&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">// 这里可以使用 ts 的代码</span><br><span class="line">// defineComponent 函数，目的是定义一个组件，内部可以传入一个配置对象</span><br><span class="line">import &#123;defineComponent,ref,reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 暴露出去一个定义好的组件</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  // 组件名</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    const obj = &#123;</span><br><span class="line">      name:&#x27;hqz&#x27;,</span><br><span class="line">      age:22,</span><br><span class="line">      assets:&#123;</span><br><span class="line">        money:100,</span><br><span class="line">        fixedAssets:[&#x27;computer&#x27;,&#x27;car&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const user = reactive(obj)</span><br><span class="line"></span><br><span class="line">    function updateUser()&#123;</span><br><span class="line">      user.name += &#x27;++&#x27;</span><br><span class="line">      user.age += 1</span><br><span class="line">      user.assets.money += 900</span><br><span class="line">      user.assets.fixedAssets.push(&#x27;mouse&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return&#123;</span><br><span class="line">      user,</span><br><span class="line">      updateUser</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-4、Vue3响应式核心"><a href="#3-4、Vue3响应式核心" class="headerlink" title="3.4、Vue3响应式核心"></a>3.4、Vue3响应式核心</h3><ul>
<li>通过Proxy(代理): 拦截对data任意属性的任意(13种)操作, 包括属性值的读写, 属性的添加, 属性的删除等…</li>
<li>通过 Reflect(反射): 动态对被代理对象的相应属性进行特定的操作</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Proxy 与 Reflect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">12</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    proxyUser是代理对象, user是被代理对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    后面所有的操作都是通过代理对象来操作被代理对象内部属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;劫持get()&#x27;</span>, prop)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">set</span>(<span class="params">target, prop, val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;劫持set()&#x27;</span>, prop, val)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, val); <span class="comment">// (2)</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      deleteProperty (target, prop) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;劫持delete属性&#x27;</span>, prop)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyUser===user)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyUser.<span class="property">name</span>, proxyUser.<span class="property">age</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置属性值</span></span></span><br><span class="line"><span class="language-javascript">    proxyUser.<span class="property">name</span> = <span class="string">&#x27;bob&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    proxyUser.<span class="property">age</span> = <span class="number">13</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加属性</span></span></span><br><span class="line"><span class="language-javascript">    proxyUser.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 删除属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">delete</span> proxyUser.<span class="property">sex</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-5、setup-执行时机"><a href="#3-5、setup-执行时机" class="headerlink" title="3.5、setup 执行时机"></a>3.5、setup 执行时机</h3><ul>
<li>setup执行的时机<ul>
<li>在beforeCreate之前执行(一次), 此时组件对象还没有创建</li>
<li>this是undefined, 不能通过this来访问data&#x2F;computed&#x2F;methods &#x2F; props</li>
<li>其实所有的composition API相关回调函数中也都不可以</li>
</ul>
</li>
<li>setup的返回值<ul>
<li>一般都返回一个对象: 为模板提供数据, 也就是模板中可以直接使用此对象中的所有属性&#x2F;方法</li>
<li>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性</li>
<li>返回对象中的方法会与methods中的方法合并成功组件对象的方法</li>
<li>如果有重名, setup优先</li>
<li>注意:</li>
<li>一般不要混合使用: methods中可以访问setup提供的属性和方法, 但在setup方法中不能访问data和methods</li>
<li>setup不能是一个async函数: 因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性数据</li>
</ul>
</li>
<li>setup的参数<ul>
<li>setup(props, context) &#x2F; setup(props, {attrs, slots, emit})</li>
<li>props: 包含props配置声明且传入了的所有属性的对象</li>
<li>attrs: 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</li>
<li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li>
<li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li>
</ul>
</li>
</ul>
<h3 id="3-6、reactive与ref-细节"><a href="#3-6、reactive与ref-细节" class="headerlink" title="3.6、reactive与ref-细节"></a>3.6、reactive与ref-细节</h3><ul>
<li>是Vue3的 composition API中2个最重要的响应式API</li>
<li>ref用来处理基本类型数据, reactive用来处理对象(递归深度响应式)</li>
<li>如果用ref对象&#x2F;数组, 内部会自动将对象&#x2F;数组转换为reactive的代理对象</li>
<li>ref内部: 通过给value属性添加getter&#x2F;setter来实现对数据的劫持</li>
<li>reactive内部: 通过使用Proxy来实现对对象内部所有数据的劫持, 并通过Reflect操作对象内部数据</li>
<li>ref的数据操作: 在js中要.value, 在模板中不需要(内部解析模板时会自动添加.value)</li>
</ul>
<h3 id="3-7、计算属性与监视"><a href="#3-7、计算属性与监视" class="headerlink" title="3.7、计算属性与监视"></a>3.7、计算属性与监视</h3><ul>
<li>computed函数:<ul>
<li>与computed配置功能一致</li>
<li>只有getter(函数中传入一个回调函数)</li>
<li>有getter和setter(函数中传入一个对象，重写 set 和 get 方法)</li>
</ul>
</li>
<li>watch函数<ul>
<li>与watch配置功能一致</li>
<li>监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</li>
<li>默认初始时不执行回调, 但可以通过配置immediate为true, 来指定初始时立即执行第一次</li>
<li>通过配置deep为true, 来指定深度监视</li>
</ul>
</li>
<li>watchEffect函数<ul>
<li>不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</li>
<li>默认初始时就会执行第一次, 从而可以收集需要监视的数据</li>
<li>监视数据发生变化时回调</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  fistName: &lt;input v-model=&quot;user.firstName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  lastName: &lt;input v-model=&quot;user.lastName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName1: &lt;input v-model=&quot;fullName1&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName2: &lt;input v-model=&quot;fullName2&quot;&gt;&lt;br&gt;</span><br><span class="line">  fullName3: &lt;input v-model=&quot;fullName3&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref,</span><br><span class="line">  computed,</span><br><span class="line">  watch,</span><br><span class="line">  watchEffect</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      firstName: &#x27;A&#x27;,</span><br><span class="line">      lastName: &#x27;B&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 只有getter的计算属性</span><br><span class="line">    const fullName1 = computed(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;fullName1&#x27;)</span><br><span class="line">      return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 有getter与setter的计算属性</span><br><span class="line">    const fullName2 = computed(&#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        console.log(&#x27;fullName2 get&#x27;)</span><br><span class="line">        return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      set (value: string) &#123;</span><br><span class="line">        console.log(&#x27;fullName2 set&#x27;)</span><br><span class="line">        const names = value.split(&#x27;-&#x27;)</span><br><span class="line">        user.firstName = names[0]</span><br><span class="line">        user.lastName = names[1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const fullName3 = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watchEffect: 监视所有回调中使用的数据</span><br><span class="line">    */</span><br><span class="line">    /* </span><br><span class="line">    watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watchEffect&#x27;)</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;) </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    使用watch的2个特性:</span><br><span class="line">      深度监视</span><br><span class="line">      初始化立即执行</span><br><span class="line">    */</span><br><span class="line">    watch(user, () =&gt; &#123;</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      immediate: true,  // 是否初始化立即执行一次, 默认是false</span><br><span class="line">      deep: true, // 是否是深度监视, 默认是false</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch一个数据</span><br><span class="line">      默认在数据发生改变时执行回调</span><br><span class="line">    */</span><br><span class="line">    watch(fullName3, (value) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watch&#x27;)</span><br><span class="line">      const names = value.split(&#x27;-&#x27;)</span><br><span class="line">      user.firstName = names[0]</span><br><span class="line">      user.lastName = names[1]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch多个数据: </span><br><span class="line">      使用数组来指定</span><br><span class="line">      如果是ref对象, 直接指定</span><br><span class="line">      如果是reactive对象中的属性,  必须通过函数来指定</span><br><span class="line">    */</span><br><span class="line">    watch([() =&gt; user.firstName, () =&gt; user.lastName, fullName3], (values) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;监视多个数据&#x27;, values)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      user,</span><br><span class="line">      fullName1,</span><br><span class="line">      fullName2,</span><br><span class="line">      fullName3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-8、生命周期"><a href="#3-8、生命周期" class="headerlink" title="3.8、生命周期"></a>3.8、生命周期</h3><p><strong>与 2.x 版本生命周期相对应的组合式 API</strong></p>
<ul>
<li><del><code>beforeCreate</code></del> -&gt; 使用 <code>setup()</code></li>
<li><del><code>created</code></del> -&gt; 使用 <code>setup()</code></li>
<li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li>
<li><code>mounted</code> -&gt; <code>onMounted</code></li>
<li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li>
<li><code>updated</code> -&gt; <code>onUpdated</code></li>
<li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li>
<li><code>destroyed</code> -&gt; <code>onUnmounted</code></li>
<li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li>
</ul>
<p><strong>新增的钩子函数</strong></p>
<p>组合式 API 还提供了以下调试钩子函数：</p>
<ul>
<li>onRenderTracked</li>
<li>onRenderTriggered</li>
</ul>
<h3 id="3-9、自定义hook函数"><a href="#3-9、自定义hook函数" class="headerlink" title="3.9、自定义hook函数"></a>3.9、自定义hook函数</h3><ul>
<li><p>使用Vue3的组合API封装的可复用的功能函数</p>
</li>
<li><p>自定义hook的作用类似于vue2中的mixin技术</p>
</li>
<li><p>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</p>
</li>
<li><p>需求1: 收集用户鼠标点击的页面坐标</p>
<p>hooks&#x2F;useMousePosition.ts</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">收集用户鼠标点击的页面坐标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useMousePosition</span> () &#123;</span><br><span class="line">  <span class="comment">// 初始化坐标数据</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于收集点击事件坐标的函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updatePosition</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    x.<span class="property">value</span> = e.<span class="property">pageX</span></span><br><span class="line">    y.<span class="property">value</span> = e.<span class="property">pageY</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载后绑定点击监听</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卸载前解绑点击监听</span></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;x: &#123;&#123;x&#125;&#125;, y: &#123;&#123;y&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line">/* </span><br><span class="line">在组件中引入并使用自定义hook</span><br><span class="line">自定义hook的作用类似于vue2中的mixin技术</span><br><span class="line">自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</span><br><span class="line">*/</span><br><span class="line">import useMousePosition from &#x27;./hooks/useMousePosition&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const &#123;x, y&#125; = useMousePosition()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>利用TS泛型强化类型检查</p>
</li>
<li><p>需求2: 封装发ajax请求的hook函数</p>
<p>hooks&#x2F;useRequest.ts</p>
</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">使用axios发送异步ajax请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> useUrlLoader&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="comment">// 加上泛型</span></span><br><span class="line">  <span class="keyword">const</span> result = ref&lt;T | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> errorMsg = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  axios.<span class="title function_">get</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">      result.<span class="property">value</span> = response.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">      errorMsg.<span class="property">value</span> = e.<span class="property">message</span> || <span class="string">&#x27;未知错误&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    result,</span><br><span class="line">    errorMsg,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about&quot;&gt;</span><br><span class="line">  &lt;h2 v-if=&quot;loading&quot;&gt;LOADING...&lt;/h2&gt;</span><br><span class="line">  &lt;h2 v-else-if=&quot;errorMsg&quot;&gt;&#123;&#123;errorMsg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- &lt;ul v-else&gt;</span><br><span class="line">    &lt;li&gt;id: &#123;&#123;result.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;name: &#123;&#123;result.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;distance: &#123;&#123;result.distance&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul v-for=&quot;p in result&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &lt;li&gt;id: &#123;&#123;p.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;title: &#123;&#123;p.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;price: &#123;&#123;p.price&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- &lt;img v-if=&quot;result&quot; :src=&quot;result[0].url&quot; alt=&quot;&quot;&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  watch</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line">import useRequest from &#x27;./hooks/useRequest&#x27;</span><br><span class="line"></span><br><span class="line">// 地址数据接口</span><br><span class="line">interface AddressResult &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  distance: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 产品数据接口</span><br><span class="line">interface ProductResult &#123;</span><br><span class="line">  id: string;</span><br><span class="line">  title: string;</span><br><span class="line">  price: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    // const &#123;loading, result, errorMsg&#125; = useRequest&lt;AddressResult&gt;(&#x27;/data/address.json&#x27;)</span><br><span class="line">    const &#123;loading, result, errorMsg&#125; = useRequest&lt;ProductResult[]&gt;(&#x27;/data/products.json&#x27;)</span><br><span class="line"></span><br><span class="line">    watch(result, () =&gt; &#123;</span><br><span class="line">      if (result.value) &#123;</span><br><span class="line">        console.log(result.value.length) // 有提示</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      loading,</span><br><span class="line">      result, </span><br><span class="line">      errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-10、toRefs"><a href="#3-10、toRefs" class="headerlink" title="3.10、toRefs"></a>3.10、toRefs</h3><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</p>
<p>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</p>
<p>问题: reactive 对象取出的所有属性值都是非响应式的</p>
<p>解决: 利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;foo: &#123;&#123;foo&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;bar: &#123;&#123;bar&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">toRefs:</span><br><span class="line">  将响应式对象中所有属性包装为ref对象, 并返回包含这些ref对象的普通对象</span><br><span class="line">  应用: 当从合成函数返回响应式对象时，toRefs 非常有用，</span><br><span class="line">        这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      foo: &#x27;a&#x27;,</span><br><span class="line">      bar: &#x27;b&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const stateAsRefs = toRefs(state)</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      state.foo += &#x27;++&#x27;</span><br><span class="line">      state.bar += &#x27;++&#x27;</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">      </span><br><span class="line">    return &#123;</span><br><span class="line">      ...stateAsRefs,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-11、ref获取元素"><a href="#3-11、ref获取元素" class="headerlink" title="3.11、ref获取元素"></a>3.11、ref获取元素</h3><p>利用ref函数获取组件中的标签元素</p>
<p>功能需求: 让输入框自动获取焦点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot;&gt;---</span><br><span class="line">  &lt;input type=&quot;text&quot; ref=&quot;inputRef&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">ref获取元素: 利用ref函数获取组件中的标签元素</span><br><span class="line">功能需求: 让输入框自动获取焦点</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const inputRef = ref&lt;HTMLElement|null&gt;(null)</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      inputRef.value &amp;&amp; inputRef.value.focus()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      inputRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="4、-Composition-API-其它部分"><a href="#4、-Composition-API-其它部分" class="headerlink" title="4、 Composition API(其它部分)"></a>4、 Composition API(其它部分)</h2><h3 id="4-1、-shallowReactive-与-shallowRef"><a href="#4-1、-shallowReactive-与-shallowRef" class="headerlink" title="4.1、 shallowReactive 与 shallowRef"></a>4.1、 shallowReactive 与 shallowRef</h3><ul>
<li>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</li>
<li>shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</li>
<li>什么时候用浅响应式呢?<ul>
<li>一般情况下使用ref和reactive即可</li>
<li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive</li>
<li>如果有一个对象数据, 后面会产生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef</li>
</ul>
</li>
</ul>
<h3 id="4-2、-readonly-与-shallowReadonly"><a href="#4-2、-readonly-与-shallowReadonly" class="headerlink" title="4.2、 readonly 与 shallowReadonly"></a>4.2、 readonly 与 shallowReadonly</h3><ul>
<li>readonly:<ul>
<li>深度只读数据</li>
<li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li>
<li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li>
</ul>
</li>
<li>shallowReadonly<ul>
<li>浅只读数据</li>
<li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换</li>
</ul>
</li>
<li>应用场景:<ul>
<li>在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</li>
</ul>
</li>
</ul>
<h3 id="4-3、-toRaw-与-markRaw"><a href="#4-3、-toRaw-与-markRaw" class="headerlink" title="4.3、 toRaw 与 markRaw"></a>4.3、 toRaw 与 markRaw</h3><ul>
<li>toRaw<ul>
<li>返回由 <code>reactive</code> 或 <code>readonly</code> 方法转换成响应式代理的普通对象。</li>
<li>这是一个还原方法，可用于临时读取，访问不会被代理&#x2F;跟踪，写入时也不会触发界面更新。</li>
</ul>
</li>
<li>markRaw<ul>
<li>标记一个对象，使其永远不会转换为代理。返回对象本身</li>
<li>应用场景:<ul>
<li>有些值不应被设置为响应式的，例如复杂的第三方类实例或 Vue 组件对象。</li>
<li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-4、toRef"><a href="#4-4、toRef" class="headerlink" title="4.4、toRef"></a>4.4、toRef</h3><ul>
<li>为源响应式对象上的某个属性创建一个 ref对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li>
<li>区别ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li>
<li>应用: 当要将 某个prop 的 ref 传递给复合函数时，toRef 很有用</li>
</ul>
<h3 id="4-5、customRef"><a href="#4-5、customRef" class="headerlink" title="4.5、customRef"></a>4.5、customRef</h3><ul>
<li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li>
<li>需求: 使用 customRef 实现 debounce 的示例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input v-model=&quot;keyword&quot; placeholder=&quot;搜索关键字&quot;/&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;keyword&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  customRef</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const keyword = useDebouncedRef(&#x27;&#x27;, 500)</span><br><span class="line">    console.log(keyword)</span><br><span class="line">    return &#123;</span><br><span class="line">      keyword</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">实现函数防抖的自定义ref</span><br><span class="line">*/</span><br><span class="line">function useDebouncedRef&lt;T&gt;(value: T, delay = 200) &#123;</span><br><span class="line">  let timeout: number</span><br><span class="line">  // 自定义响应时间</span><br><span class="line">  return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // 告诉Vue追踪数据</span><br><span class="line">        track()</span><br><span class="line">        return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue: T) &#123;</span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">          value = newValue</span><br><span class="line">          // 告诉Vue去触发界面更新</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-6、provide-与-inject"><a href="#4-6、provide-与-inject" class="headerlink" title="4.6、provide 与 inject"></a>4.6、provide 与 inject</h3><ul>
<li>provide<code>和</code>inject<code>提供依赖注入，功能类似 2.x 的</code>provide&#x2F;inject</li>
<li>实现跨层级组件(祖孙)间通信</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;当前颜色: &#123;&#123;color&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;red&#x27;&quot;&gt;红&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;yellow&#x27;&quot;&gt;黄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;blue&#x27;&quot;&gt;蓝&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Son /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">- provide` 和 `inject` 提供依赖注入，功能类似 2.x 的 `provide/inject</span><br><span class="line">- 实现跨层级组件(祖孙)间通信</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ProvideInject&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    const color = ref(&#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">    provide(&#x27;color&#x27;, color)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;GrandSon /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import GrandSon from &#x27;./GrandSon.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandSon</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 :style=&quot;&#123;color&#125;&quot;&gt;孙子组件: &#123;&#123;color&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const color = inject(&#x27;color&#x27;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-7、响应式数据的判断"><a href="#4-7、响应式数据的判断" class="headerlink" title="4.7、响应式数据的判断"></a>4.7、响应式数据的判断</h3><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h2 id="5、其它新组件和api"><a href="#5、其它新组件和api" class="headerlink" title="5、其它新组件和api"></a>5、其它新组件和api</h2><h3 id="5-1、Fragment-片断"><a href="#5-1、Fragment-片断" class="headerlink" title="5.1、Fragment(片断)"></a>5.1、Fragment(片断)</h3><ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;aaaa&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;aaaa&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>Teleport 提供了一种干净的方法, 让组件的html在父组件界面外的特定标签(很可能是body)下插入显示</li>
</ul>
<p>ModalButton.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;modalOpen = true&quot;&gt;</span><br><span class="line">      Open full screen modal! (With teleport!)</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;modalOpen&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        I&#x27;m a teleported modal! </span><br><span class="line">        (My parent is &quot;body&quot;)</span><br><span class="line">        &lt;button @click=&quot;modalOpen = false&quot;&gt;</span><br><span class="line">          Close</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;modal-button&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const modalOpen = ref(false)</span><br><span class="line">    return &#123;</span><br><span class="line">      modalOpen</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.modal &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0; right: 0; bottom: 0; left: 0;</span><br><span class="line">  background-color: rgba(0,0,0,.5);</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.modal div &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  background-color: white;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;modal-button&gt;&lt;/modal-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import ModalButton from &#x27;./ModalButton.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    ModalButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="6、Suspense-不确定的"><a href="#6、Suspense-不确定的" class="headerlink" title="6、Suspense(不确定的)"></a>6、Suspense(不确定的)</h2><ul>
<li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">      &lt;AsyncComp/&gt;</span><br><span class="line">      &lt;!-- &lt;AsyncAddress/&gt; --&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:fallback&gt;</span><br><span class="line">      &lt;h1&gt;LOADING...&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">异步组件 + Suspense组件</span><br><span class="line">*/</span><br><span class="line">// import AsyncComp from &#x27;./AsyncComp.vue&#x27;</span><br><span class="line">import AsyncAddress from &#x27;./AsyncAddress.vue&#x27;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">const AsyncComp = defineAsyncComponent(() =&gt; import(&#x27;./AsyncComp.vue&#x27;))</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    AsyncComp,</span><br><span class="line">    AsyncAddress</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>AsyncComp.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;AsyncComp22&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AsyncComp&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //   setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(&#123;</span><br><span class="line">    //       msg: &#x27;abc&#x27;</span><br><span class="line">    //     &#125;)</span><br><span class="line">    //   &#125;, 2000)</span><br><span class="line">    // &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;abc&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>AsyncAddress.vue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;data&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    const result = await axios.get(&#x27;/data/address.json&#x27;)</span><br><span class="line">    return &#123;</span><br><span class="line">      data: result.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webGIS</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统 FastDFS</title>
    <url>/2022/09/23/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS/</url>
    <content><![CDATA[<p><font style="color:rgb(13,157,73);font-size:50px">分布式文件系统 FastDFS</font></p>
<blockquote>
<ol>
<li>分布式文件系统应用场景</li>
<li>FastDFS</li>
<li>FastDFS 单机环境搭建</li>
<li>与 springboot 结合</li>
</ol>
</blockquote>
<h1 id="分布式文件系统应用场景"><a href="#分布式文件系统应用场景" class="headerlink" title="分布式文件系统应用场景"></a>分布式文件系统应用场景</h1><span id="more"></span>

<p>互联网海量非结构化数据的存储需求</p>
<ul>
<li>电商网站：海量商品图片</li>
<li>视频网站：海量视频文件</li>
<li>网盘：海量文件</li>
<li>社交网站：海量图片</li>
</ul>
<h1 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS），它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合中小文件（建议范围：4kb &lt; file_size &lt; 500 MB）为载体的在线服务</p>
<p>FastDFS 是设计用来存储小文件的，过大的文件处理方案是拆分为小文件，可跟踪小文件的上传情况。</p>
<h2 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h2><p>充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，并使用 FastDFS 很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务</p>
<p>优点：</p>
<ul>
<li>文件不分块存储，文件和系统中的文件一一对应</li>
<li>对文件内容做 hash 处理，避免出现重复文件，节约磁盘空间</li>
<li>下载文件支持 HTTP 协议，可基于内置 Web Server 或外部 Web Server</li>
<li>支持在线扩容、动态添加卷</li>
<li>支持文件冗余备份和负载均衡</li>
<li>存储服务器上可以保存文件属性（meta-data）</li>
<li>V2.0 网络通信采用 libevent，支持大并发访问，整体性能更好</li>
</ul>
<p>缺点：</p>
<ul>
<li>直接按文件存储，可直接查看文件内容，缺乏文件安全性</li>
<li>数据同步无校验，存在静默 IO 问题，降低系统可用性</li>
<li>单线程数据同步，仅适合存储小文件（4kb - 500 mb之间)</li>
<li>备份数根据存储分卷（分组）决定，缺乏文件备份数设置灵活性</li>
<li>单个挂载点异常会导致整个存储节点下线</li>
<li>缺乏多机房容灾支持</li>
<li>静态的负载均衡机制</li>
</ul>
<h2 id="3、角色"><a href="#3、角色" class="headerlink" title="3、角色"></a>3、角色</h2><ul>
<li>Tracker Server：跟踪服务器，主要做调度工作，起到均衡的作用，负责管理所有的 storage server 和 group，每个 storage 在启动后会连接 Tracker，告知自己所有的 group 等信息，并保持周期性心跳</li>
<li>Storage Server：存储服务器，主要提供容量和备份服务，以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份</li>
<li>Client：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器</li>
</ul>
<h2 id="4、文件同步"><a href="#4、文件同步" class="headerlink" title="4、文件同步"></a>4、文件同步</h2><p>写文件时，客户端将文件写至 group 内一个 storage server 即认为写文件成功，storage server 写完文件后，会由后台线程将文件同步至同 group 内其它的 storage server</p>
<p>每个 storage 写文件后，同时会写一份 binlog，binlog 里不包含文件数据，只包含文件名等元信息，这份 binlog 用于后台同步，storage 会记录向 group 内其它 storage 同步的进度，以便重启后能接上次的进度继续同步，进度以时间戳的方式进行记录，所以最好能<font color="orange">保证集群内所有 server 的时钟保持同步</font></p>
<p>storage 的同步进度会作为元数据的一部分汇报到 tracker 上，tracker 在选择读 storage 的时候会以同步进度作为参考</p>
<h2 id="5、client"><a href="#5、client" class="headerlink" title="5、client"></a>5、client</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs</span><br><span class="line">tracker_server=fastdfs.com:22122 <span class="comment"># tracker 服务器ip 和 端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/local/soft/fox.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">fdfs_delete_file /etc/fdfs/client.conf group/M00/00/00/fox.jpg</span><br></pre></td></tr></table></figure>



<h2 id="6、下载过程"><a href="#6、下载过程" class="headerlink" title="6、下载过程"></a>6、下载过程</h2><p>跟上传一样，在下载时客户端可以选择任务 Tracker server</p>
<p>客户端带文件名信息请求 Tracker，Tracker 从文件名中解析出文件的 group、大小、创建时间等信息，然后选择一个 storage 用来服务处理请求，返回对应文件</p>
<h1 id="FastDFS-单机环境搭建"><a href="#FastDFS-单机环境搭建" class="headerlink" title="FastDFS 单机环境搭建"></a>FastDFS 单机环境搭建</h1><h2 id="7、编译环境"><a href="#7、编译环境" class="headerlink" title="7、编译环境"></a>7、编译环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure>



<h2 id="8、磁盘目录"><a href="#8、磁盘目录" class="headerlink" title="8、磁盘目录"></a>8、磁盘目录</h2><table>
<thead>
<tr>
<th>说明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>所有安装包</td>
<td>&#x2F;usr&#x2F;local&#x2F;soft</td>
</tr>
<tr>
<td>数据存储位置</td>
<td>&#x2F;data&#x2F;fastdfs&#x2F;</td>
</tr>
</tbody></table>
<h2 id="9、安装-libfastcommon"><a href="#9、安装-libfastcommon" class="headerlink" title="9、安装 libfastcommon"></a>9、安装 libfastcommon</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd libfastcommon/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>



<h2 id="10、安装-FastDFS"><a href="#10、安装-FastDFS" class="headerlink" title="10、安装 FastDFS"></a>10、安装 FastDFS</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="line">cd fastdfs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">./make.sh &amp;&amp; ./make.sh install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">供 nginx 访问使用</span></span><br><span class="line">cp /usr/local/soft/fastdfs/conf/http.conf /etc/fdfs/</span><br><span class="line">cp /usr/local/soft/fastdfs/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure>



<h2 id="11、安装-fastdfs-nginx-module"><a href="#11、安装-fastdfs-nginx-module" class="headerlink" title="11、安装 fastdfs-nginx-module"></a>11、安装 fastdfs-nginx-module</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1</span><br><span class="line">cp fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure>



<h2 id="12、安装-nginx"><a href="#12、安装-nginx" class="headerlink" title="12、安装 nginx"></a>12、安装 nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 fastdfs-nginx-module 模块</span></span><br><span class="line">./configure --add-module=/usr/local/soft/fastdfs-nginx-module/src/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>



<h2 id="13、单机部署"><a href="#13、单机部署" class="headerlink" title="13、单机部署"></a>13、单机部署</h2><p>服务器ip：192.168.174.102</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/hosts 添加一行</span></span><br><span class="line">192.168.174.102 fastdfs.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地 windows C:\Windows\System32\drivers\etc 修改hosts文件</span></span><br><span class="line">192.168.174.102 fastdfs.com</span><br></pre></td></tr></table></figure>



<h2 id="14、tracker-配置"><a href="#14、tracker-配置" class="headerlink" title="14、tracker 配置"></a>14、tracker 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs</span><br><span class="line"></span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要修改的内容如下：</span></span><br><span class="line">port=22122 # tracker 服务器端口（默认 22122，一般不修改）</span><br><span class="line">base_path=/data/fastdfs # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure>



<h2 id="15、storage-配置"><a href="#15、storage-配置" class="headerlink" title="15、storage 配置"></a>15、storage 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要修改的内容如下</span></span><br><span class="line">posrt=23000</span><br><span class="line">base_path=/data/fastdfs # 数据和日志文件存放目录</span><br><span class="line">store_path0=/data/fastdfs # 第一个存储目录</span><br><span class="line">tracker_server=fastdfs.com:22122</span><br><span class="line">http.server_port=8888</span><br></pre></td></tr></table></figure>





<h2 id="16、启动服务"><a href="#16、启动服务" class="headerlink" title="16、启动服务"></a>16、启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 tracker</span></span><br><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 storage</span></span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 storage</span></span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure>



<h2 id="17、client-测试"><a href="#17、client-测试" class="headerlink" title="17、client 测试"></a>17、client 测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要修改的内容如下</span></span><br><span class="line">base_path=/data/fastdfs</span><br><span class="line">tracker_server=fastdfs.com:22122 # tracker 服务器 ip 和端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存后测试，返回 ID 表示成功，如：group1/M00/00/00/wKiuZmHnvMaAWdC1AAQ6yuhOHcs218.jpg</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件</span></span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/local/soft/fox.jpg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件</span></span><br><span class="line">fdfs_delete_file /etc/fdfs/client.conf group/M00/00/00/fox.jpg</span><br></pre></td></tr></table></figure>



<h2 id="18、配置-nginx-访问"><a href="#18、配置-nginx-访问" class="headerlink" title="18、配置 nginx 访问"></a>18、配置 nginx 访问</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要修改的内容如下</span></span><br><span class="line">tracker_server=fasrdfs.com:22122 # tracker 服务器 ip 和端口</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/data/fastdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 nginx.config</span></span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下配置</span></span><br><span class="line">server&#123;</span><br><span class="line">  listen 8888; # 该端口为 storage.conf 中的 http.server_port 相同</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location ~/group[0-9]/&#123;</span><br><span class="line">   ngx_fastdfs_module;</span><br><span class="line">  &#125;</span><br><span class="line">  error_page 500 502 503 504 /50x.html;</span><br><span class="line">  location = /50x.html&#123;</span><br><span class="line">   root html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx # 启动nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload # 重启 nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop # 停止 n</span><br></pre></td></tr></table></figure>



<h2 id="19、访问效果"><a href="#19、访问效果" class="headerlink" title="19、访问效果"></a>19、访问效果</h2><p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220120093201193.png" alt="image-20220120093201193"></p>
<h1 id="与-springboot-结合"><a href="#与-springboot-结合" class="headerlink" title="与 springboot 结合"></a>与 springboot 结合</h1><h2 id="20、引入依赖"><a href="#20、引入依赖" class="headerlink" title="20、引入依赖"></a>20、引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="21、编写配置文件"><a href="#21、编写配置文件" class="headerlink" title="21、编写配置文件"></a>21、编写配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 分布式文件系统 FDFS 配置</span></span><br><span class="line"><span class="comment"># 读取时间</span></span><br><span class="line"><span class="attr">fdfs.so-timeout</span>=<span class="string">1500</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">fdfs.connect-timeout</span>=<span class="string">600</span></span><br><span class="line"><span class="comment"># 缩略图生成参数</span></span><br><span class="line"><span class="attr">fdfs.thumb-image.width</span>=<span class="string">150</span></span><br><span class="line"><span class="attr">fdfs.thumb-image.height</span>=<span class="string">150</span></span><br><span class="line"><span class="comment"># tracker 服务配置地址列表</span></span><br><span class="line"><span class="attr">fdfs.tracker-list</span>=<span class="string">192.168.174.102:22122</span></span><br><span class="line"><span class="comment"># 从池中借出的对象的最大数目（配置为 -1 表示不限制）</span></span><br><span class="line"><span class="attr">fdfs.pool.max-total</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 获取连接时的最大等待毫秒数（默认配置为 5s）</span></span><br><span class="line"><span class="attr">fdfs.pool.max-wait-millis</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 每个key的最大连接数</span></span><br><span class="line"><span class="attr">fdfs.pool.max-total-per-key</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"># 每个key对应的连接池最大空闲连接数</span></span><br><span class="line"><span class="attr">fdfs.pool.max-idle-per-key</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 每个key对应的连接池最小空闲连接数</span></span><br><span class="line"><span class="attr">fdfs.pool.min-idle-per-key</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">upload.base-url</span>=<span class="string">http://fastdfs.com:8888/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">100MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">150MB</span></span><br></pre></td></tr></table></figure>





<h2 id="22、controller"><a href="#22、controller" class="headerlink" title="22、controller"></a>22、controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FastFileStorageClient fastFileStorageClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;upload.base-url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span>  String basePath;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;uploadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> FileUtil.getSuffix(file.getOriginalFilename());</span><br><span class="line">    <span class="comment">// 上传文件并生成缩略图</span></span><br><span class="line">    <span class="type">StorePath</span> <span class="variable">storePath</span> <span class="operator">=</span> fastFileStorageClient.uploadImageAndCrtThumbImage(file.getInputStream(), file.getSize(), suffix, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> basePath + storePath.getFullPath();</span><br><span class="line">    log.info(path);</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
        <tag>分布式</tag>
        <tag>文件存储</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统 minio</title>
    <url>/2022/09/23/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-minio/</url>
    <content><![CDATA[<p><font style="color:#30dda0;font-size:50px">分布式文件存储系统 Minio</font></p>
<h1 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Minio 是一个基于 Apache License v2.0 开源协议的对象存储服务，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>
<p>Minio 是一个非常轻量的服务，可以很简单的和其它应用结合，类似 NodeJS，Redis 或者 MySQL</p>
<span id="more"></span>

<h2 id="2、Minio-优点"><a href="#2、Minio-优点" class="headerlink" title="2、Minio 优点"></a>2、Minio 优点</h2><ul>
<li>部署简单：一个 single 二进制文件即是一切，还可支持各种平台</li>
<li>minio 支持海量存储，可按 zone 扩展（原 zone 不受影响），支持单个对象最大 5TB</li>
<li>兼容 Amazon S3 接口，充分考虑开发人员的需求和体验</li>
<li>低冗余且磁盘损坏高容忍，标准且最高的数据冗余系数为2（即存储一个 1M 的数据对象，实际占用磁盘空间为 2M），但在任意 n&#x2F;2 块的 disk 损坏的情况下依然可以读出数据（n 为一个纠删码集合（Erasure Coding Set）中的 disk 数量）并且这种损坏恢复是基于单个对象的，而不是基于整个存储卷的</li>
<li>读写性能优异</li>
</ul>
<h2 id="3、基本概念"><a href="#3、基本概念" class="headerlink" title="3、基本概念"></a>3、基本概念</h2><ul>
<li><strong>Object</strong>：存储到 Minio 的基本对象，如文件、字节流、Anything …</li>
<li><strong>Bucket</strong>：用来存储 Object 的逻辑空间，每个 Bucket 之间的数据是相互隔离的，对于客户端而言，就相当于一个存放文件的顶层文件夹</li>
<li><strong>Drive</strong>：即存储数据的磁盘，在 Minio 启动时，以参数的方式传入，Minio 中所有的对象数据都会存储在 Drive 里</li>
<li><strong>Set</strong>：即一组 Drive 的集合，分布式部署根据集群规模自动划分一个或多个 Set，每个 Set 中的 Drive 分布在不同位置。<ul>
<li>一个对象存储在一个 Set 上</li>
<li>一个集群划分为多个 Set</li>
<li>一个 Set 包含的 Drive 数量是固定的，默认由系统根据集群规模自动计算得出</li>
<li>一个 Set 中的 Drive 尽可能分布在不同的节点上</li>
</ul>
</li>
</ul>
<h2 id="4、纠删码-EC（Erasure-Code）"><a href="#4、纠删码-EC（Erasure-Code）" class="headerlink" title="4、纠删码 EC（Erasure Code）"></a>4、纠删码 EC（Erasure Code）</h2><p>Minio 使用纠删码来保证高可靠性，使用 highwayhash 来处理数据损坏（Bit Rot Protection）</p>
<blockquote>
<p>纠删码：是一种恢复丢失和损坏数据的算法，Minio 采用 Reed-Solomon code 将对象拆分成 N&#x2F;2 数据和 N&#x2F;2 奇偶校验块。通过数学计算，把丢失的数据进行还原，可以将 n 份原始数据，增加 m 份数据，并通过 n + m 份中的任意 n 份数据，还原为原始数据，即如果有任意小于等于 m 份的数据失效，仍然能通过剩下的数据还原出来</p>
</blockquote>
<h2 id="5、存储形式"><a href="#5、存储形式" class="headerlink" title="5、存储形式"></a>5、存储形式</h2><p>文件对象上传到 Minio，会在对应的数据存储磁盘中，以 Bucket 名称为目录，文件名称为下一级目录，文件名下时 part.1 和 xl.meta，前者是编码数据块，后者是元数据文件</p>
<h2 id="6、docker-部署"><a href="#6、docker-部署" class="headerlink" title="6、docker 部署"></a>6、docker 部署</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单盘启动</span></span><br><span class="line">docker run -d \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9003:9003 \</span><br><span class="line">  --name minio\</span><br><span class="line">  -v /docker/minio/data:/data \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=minio&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minio&quot;</span> \</span><br><span class="line">  minio/minio server /data --console-address <span class="string">&quot;:9003&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 多盘启动</span></span><br><span class="line">docker run -d \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9003:9003 \</span><br><span class="line">  --name minio\</span><br><span class="line">  -v /docker/minio/data1:/data1 \</span><br><span class="line">  -v /docker/minio/data2:/data2 \</span><br><span class="line">  -v /docker/minio/data3:/data3 \</span><br><span class="line">  -v /docker/minio/data4:/data4 \</span><br><span class="line">  -v /docker/minio/data5:/data5 \</span><br><span class="line">  -v /docker/minio/data6:/data6 \</span><br><span class="line">  -v /docker/minio/data7:/data7 \</span><br><span class="line">  -v /docker/minio/data8:/data8 \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=minio&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minio&quot;</span> \</span><br><span class="line">  minio/minio server /data&#123;1...8&#125; --console-address <span class="string">&quot;:9003&quot;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>docker-compose file</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># minio</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="comment"># 容器名称，根据部署的版本修改</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">minio</span></span><br><span class="line">    <span class="comment"># 镜像，根据部署的版本修改</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--console-address</span> <span class="string">&quot;:9003&quot;</span></span><br><span class="line">    <span class="comment"># 目录映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/home/docker/minio/data:/data</span></span><br><span class="line">     <span class="comment"># 挂载位置（镜像和宿主机器之间时间保持一致）</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="comment"># 端口映射，需要跟配置文件中的一致，不推荐映射不一致</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9003:9003&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">minio</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">minio123</span></span><br><span class="line">    <span class="comment"># 重启类型</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="7、分布式集群"><a href="#7、分布式集群" class="headerlink" title="7、分布式集群"></a>7、分布式集群</h2><p>分布式 Minio 可以将多块硬盘（甚至在不同机器上）组成一个对象存储服务，由于硬盘分布在不同的节点上，分布式 Minio 避免了单点故障</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">minio server http://host&#123;1...n&#125;/export&#123;1...m&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8、分布式存储可靠性常用方法"><a href="#8、分布式存储可靠性常用方法" class="headerlink" title="8、分布式存储可靠性常用方法"></a>8、分布式存储可靠性常用方法</h2><p>分布式存储，关键的点在于数据的可靠性，即保证数据的完整、不丢失、不损坏。只有在可靠性实现的前提下，才有了追求一致性、高可用、高性能的基础。</p>
<h3 id="8-1、冗余"><a href="#8-1、冗余" class="headerlink" title="8.1、冗余"></a>8.1、冗余</h3><p>冗余法是最简单最直接的方法，即对存储的数据进行副本备份，当数据出现丢失、损坏，即可使用备份内容进行恢复，而副本备份的多少，决定了数据库可靠性的高低。这其中会有成本的考量，副本数据越多，数据越可靠，但需要的设备就越多，成本就越高。可靠性是允许丢失其中一份数据。</p>
<h3 id="8-2、校验"><a href="#8-2、校验" class="headerlink" title="8.2、校验"></a>8.2、校验</h3><p>校验法即通过校验码的数学计算的方式，对出现丢失、损坏的数据进行校验、还原。</p>
<ol>
<li>校验：通过对数据进行校验和计算，可以检查数据是否完整，有无损坏或更改，在数据传输和保存时经常用到，如 TCP 协议</li>
<li>恢复还原：通过对数据的校验码进行数据计算，还原丢失或损坏的数据，可以在保证数据可靠的前提下，降低冗余，如单机硬盘存储中的 RAID 技术，纠删码（Erasure Code）技术等</li>
</ol>
<h2 id="9、分布式-Minio-的优势"><a href="#9、分布式-Minio-的优势" class="headerlink" title="9、分布式 Minio 的优势"></a>9、分布式 Minio 的优势</h2><h3 id="9-1、数据保护"><a href="#9-1、数据保护" class="headerlink" title="9.1、数据保护"></a>9.1、数据保护</h3><ul>
<li>分布式 Minio 采用纠删码来防范多个节点宕机和位衰减 bit rot</li>
<li>分布式 Minio 至少需要 4 个硬盘，使用分布式 Minio 自动引入纠删码功能</li>
</ul>
<h3 id="9-2、高可用"><a href="#9-2、高可用" class="headerlink" title="9.2、高可用"></a>9.2、高可用</h3><ul>
<li>单机 Minio 服务存在单点故障，相反，如果是一个有 N 块硬盘的分布式 Minio，只要有 N&#x2F;2 硬盘在线，数据就是安全的，不过，至少需要有 N&#x2F;2 + 1 个硬盘来创建新的对象</li>
</ul>
<h3 id="9-3、一致性"><a href="#9-3、一致性" class="headerlink" title="9.3、一致性"></a>9.3、一致性</h3><ul>
<li>Minio 在分布式和单机模式下，所有读写操作都严格遵守 read-after-write 一致性模型</li>
</ul>
<h2 id="10、分布式-Minio"><a href="#10、分布式-Minio" class="headerlink" title="10、分布式 Minio"></a>10、分布式 Minio</h2><p>启动一个分布式 Minio 实例，只需要把硬盘位置作为参数传给 minio server 命令即可，然后需要在所有其它节点运行同样的命令。</p>
<ul>
<li>分布式 Minio 里所有的节点需要有<font color="orange">同样的 access 密钥和 secret 密钥</font>，这样这些节点才能建立联接，为了实现这个，需要在 minio server 命令之前，先将 access 密钥和 secret 密钥 export 为环境变量</li>
<li>分布式 Minio 使用的磁盘必须是干净的，里面没有数据</li>
<li>分布式 Minio 里的节点时间差不能超过 3 秒，可以使用 NTP 来保证时间一致</li>
</ul>
<p>8 个节点，每个节点一块盘，每个节点都需要运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MINIO_ROOT_USER=admin</span><br><span class="line">export MINIO_ROOT_PASSWORD=12345678</span><br><span class="line">minio server http://192.168.1.11/export1 http://192.168.1.12/export2 \</span><br><span class="line">			 http://192.168.1.13/export3 http://192.168.1.14/export4 \</span><br><span class="line">			 http://192.168.1.15/export5 http://192.168.1.16/export6 \</span><br><span class="line">			 http://192.168.1.17/export7 http://192.168.1.118/export8 \</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>minio</tag>
        <tag>文件存储系统</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 cancal 进行 mysql 与 es 的数据同步</title>
    <url>/2022/09/23/%E5%9F%BA%E4%BA%8E-cancal-%E8%BF%9B%E8%A1%8C-mysql-%E4%B8%8E-es-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p><font style="color:#2be9e9;font-size:30px">基于 cancal 进行 mysql 与 elasticsearch 的数据同步</font></p>
<blockquote>
<p>1、mysql 安装</p>
<p>2、建库、建表</p>
<p>3、elasticsearch 安装</p>
<p>4、canal-server 安装</p>
<p>5、联合测试</p>
</blockquote>
<span id="more"></span>

<h1 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 mysql 5.7.36</span></span><br><span class="line">docker pull 5.7.36</span><br><span class="line">docker run --name mysql5736 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.36</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将配置文件拷出，进行修改</span></span><br><span class="line">docker <span class="built_in">cp</span> docker <span class="built_in">cp</span> mysql5736:/etc/mysql/mysql.conf.d/mysqld.cnf /docker/mysql5736/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binlog setting</span></span><br><span class="line"><span class="comment"># 开启 logbin</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="comment"># binlog 日志格式</span></span><br><span class="line">binlog-format=ROW</span><br><span class="line"><span class="comment"># mysql 主从备份 serverId,canal 中不能与此相同</span></span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行配置文件的挂载</span></span><br><span class="line">docker run --name mysql5736 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -v /docker/mysql5736/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /docker/mysql5736/data:/var/lib/mysql -d mysql:5.7.36</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql5736 /bin/bash</span><br></pre></td></tr></table></figure>



<blockquote>
<p>mysql 容器中操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql: [Warning] World-writable config file &#x27;/etc/mysql/mysql.conf.d/mysqld.cnf&#x27; is ignored. 遇到这个问题 修改文件的权限  chmod 644 /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line"># 登录</span><br><span class="line">mysql -uroot -p</span><br><span class="line"># binlog日志文件</span><br><span class="line">show master status;</span><br><span class="line"># 重启日志</span><br><span class="line">reset master</span><br><span class="line"># 查看日志文件格式</span><br><span class="line">show variables like &#x27;binlog_format&#x27;;</span><br></pre></td></tr></table></figure>



<h1 id="建库、建表"><a href="#建库、建表" class="headerlink" title="建库、建表"></a>建库、建表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新建 dailyhub 数据库</span></span><br><span class="line"><span class="comment">-- 运行建表 sql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `m_collect`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_collect` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `collected` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `note` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `personal` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `FK6yx2mr7fgvv204y8jw5ubsn7h` (`user_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK6yx2mr7fgvv204y8jw5ubsn7h` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `m_user` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `m_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `m_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `lasted` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `open_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>





<h1 id="elasticsearch-安装"><a href="#elasticsearch-安装" class="headerlink" title="elasticsearch 安装"></a>elasticsearch 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.16.2</span><br><span class="line"></span><br><span class="line">docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; --name=&#x27;es7162&#x27; -d elasticsearch:7.16.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将配置文件拷出进行修改</span></span><br><span class="line">docker cp es7162:/usr/share/elasticsearch/config/elasticsearch.yml /docker/elasticsearch/config</span><br></pre></td></tr></table></figure>



<h2 id="1、yml-配置文件修改"><a href="#1、yml-配置文件修改" class="headerlink" title="1、yml 配置文件修改"></a>1、yml 配置文件修改</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">dailyhub-es</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="2、安装-ik-分词器"><a href="#2、安装-ik-分词器" class="headerlink" title="2、安装 ik 分词器"></a>2、安装 ik 分词器</h2><p>搜索 ik分词器，下载对应 elasticsearch 版本的 ik 分词器，解压置于本地目录中，便于下一步挂载 plugins 目录</p>
<h2 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除之前的镜像重新启动</span></span><br><span class="line">docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -v /docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins --name=&#x27;es7162&#x27; -d elasticsearch:7.16.2</span><br></pre></td></tr></table></figure>





<h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试地址 --&gt;</span></span><br><span class="line">http://localhost:9200/_mapping?pretty=true</span><br></pre></td></tr></table></figure>



<h1 id="安装-canal-server"><a href="#安装-canal-server" class="headerlink" title="安装 canal-server"></a>安装 canal-server</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull canal/canal-server:v1.1.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网络桥接 mysql</span></span><br><span class="line">docker run --name canal115 -p 11111:11111 --link mysql5736:mysql5736 -id canal/canal-server:v1.1.5</span><br><span class="line"></span><br><span class="line">docker cp  canal115:/home/admin/canal-server/conf/example/instance.properties /docker/canal/config</span><br></pre></td></tr></table></figure>



<h2 id="5、修改配置文件"><a href="#5、修改配置文件" class="headerlink" title="5、修改配置文件"></a>5、修改配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不和 mysql 中的 id 相同</span></span><br><span class="line"><span class="attr">canal.instance.mysql.slaveId</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># mysql5736 是 mysql 镜像的链接别名</span></span><br><span class="line"><span class="attr">canal.instance.master.address</span>=<span class="string">mysql5736:3306</span></span><br><span class="line"><span class="attr">canal.instance.dbUsername</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">canal.instance.dbPassword</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>



<h2 id="6、重新运行容器"><a href="#6、重新运行容器" class="headerlink" title="6、重新运行容器"></a>6、重新运行容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f canal115</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载配置文件</span></span><br><span class="line">docker run --name canal115 -p 11111:11111 -v /docker/canal/config/instance.properties:/home/admin/canal-server/conf/example/instance.properties --link mysql5736:mysql5736 -id canal/canal-server:v1.1.5</span><br><span class="line"></span><br><span class="line">docker exec -it canal115 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志是否连接成功</span></span><br><span class="line">tail -100f canal-server/logs/example/example.log</span><br></pre></td></tr></table></figure>





<h1 id="canal-adapter-安装"><a href="#canal-adapter-安装" class="headerlink" title="canal-adapter 安装"></a>canal-adapter 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像，非官方源</span></span><br><span class="line">docker pull slpcat/canal-adapter:v1.1.5</span><br><span class="line"></span><br><span class="line">docker run --name adapter115 -p 8081:8081 --link mysql5736:mysql5736 --link canal115:canal115 --link es7162:es7162 -d slpcat/canal-adapter:v1.1.5</span><br><span class="line"></span><br><span class="line">docker cp adapter115:/opt/canal-adapter/conf/application.yml /docker/canaladapter/config</span><br><span class="line"></span><br><span class="line">docker cp adapter115:/opt/canal-adapter/conf/es7/mytest_user.yml /docker/canaladapter/es7</span><br></pre></td></tr></table></figure>



<h2 id="7、修改配置"><a href="#7、修改配置" class="headerlink" title="7、修改配置"></a>7、修改配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span></span><br><span class="line"></span><br><span class="line"><span class="attr">canal.conf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">tcp</span> <span class="comment">#tcp kafka rocketMQ rabbitMQ</span></span><br><span class="line">  <span class="attr">flatMessage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zookeeperHosts:</span></span><br><span class="line">  <span class="attr">syncBatchSize:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">timeout:</span></span><br><span class="line">  <span class="attr">accessKey:</span></span><br><span class="line">  <span class="attr">secretKey:</span></span><br><span class="line">  <span class="attr">consumerProperties:</span></span><br><span class="line">    <span class="comment"># canal tcp consumer</span></span><br><span class="line">    <span class="attr">canal.tcp.server.host:</span> <span class="string">canal115:11111</span></span><br><span class="line">    <span class="attr">canal.tcp.zookeeper.hosts:</span></span><br><span class="line">    <span class="attr">canal.tcp.batch.size:</span> <span class="number">500</span></span><br><span class="line">    <span class="attr">canal.tcp.username:</span></span><br><span class="line">    <span class="attr">canal.tcp.password:</span></span><br><span class="line">  <span class="attr">srcDataSources:</span></span><br><span class="line">    <span class="attr">defaultDS:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql5736:3306/dailyhub?useUnicode=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">canalAdapters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">instance:</span> <span class="string">example</span> <span class="comment"># canal instance Name or mq topic name</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">groupId:</span> <span class="string">g1</span></span><br><span class="line">      <span class="attr">outerAdapters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es7</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">es7162:9200</span> <span class="comment"># 127.0.0.1:9200 for rest mode 127.0.0.1:9300 for transport mode</span></span><br><span class="line">        <span class="attr">properties:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">rest</span> <span class="comment">#transport or rest</span></span><br><span class="line">          <span class="comment"># security.auth: test:123456 #  only used for rest mode</span></span><br><span class="line">          <span class="attr">cluster.name:</span> <span class="string">dailyhub-es</span></span><br></pre></td></tr></table></figure>



<p>修改完之后，可重命名文件名</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSourceKey:</span> <span class="string">defaultDS</span></span><br><span class="line"><span class="attr">destination:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">groupId:</span> <span class="string">g1</span></span><br><span class="line"><span class="attr">esMapping:</span></span><br><span class="line">  <span class="attr">_index:</span> <span class="string">dailyhub_collect</span></span><br><span class="line">  <span class="attr">_id:</span> <span class="string">_id</span></span><br><span class="line"> <span class="attr">upsert:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  pk: id</span></span><br><span class="line">  <span class="attr">sql:</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">	c.id AS _id,</span></span><br><span class="line"><span class="string">	c.title AS title,</span></span><br><span class="line"><span class="string">	c.user_id AS userId,</span></span><br><span class="line"><span class="string">	c.note AS note,</span></span><br><span class="line"><span class="string">	c.url AS url,</span></span><br><span class="line"><span class="string">	c.created AS created,</span></span><br><span class="line"><span class="string">	c.collected AS collected,</span></span><br><span class="line"><span class="string">	c.personal AS personal,</span></span><br><span class="line"><span class="string">	u.username AS username,</span></span><br><span class="line"><span class="string">	u.avatar AS userAvatar</span></span><br><span class="line"><span class="string">FROM</span></span><br><span class="line"><span class="string">	m_collect c</span></span><br><span class="line"><span class="string">	LEFT JOIN m_user u ON c.user_id = u.id&quot;</span></span><br><span class="line"><span class="comment">#  objFields:</span></span><br><span class="line"><span class="comment">#    _labels: array:;</span></span><br><span class="line">  <span class="attr">etlCondition:</span> <span class="string">&quot;where a.c_time&gt;=&#123;&#125;&quot;</span></span><br><span class="line">  <span class="attr">commitBatch:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>



<h2 id="8、重新运行容器"><a href="#8、重新运行容器" class="headerlink" title="8、重新运行容器"></a>8、重新运行容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除原来的容器重新运行容器</span></span><br><span class="line">docker run --name adapter115 -p 8081:8081 --link mysql5736:mysql5736 --link canal115:canal115 --link es7162:es7162 -v /docker/canaladapter/config/application.yml:/opt/canal-adapter/conf/application.yml -v /docker/canaladapter/es7:/opt/canal-adapter/conf/es7 -d slpcat/canal-adapter:v1.1.5</span><br></pre></td></tr></table></figure>



<h1 id="联合测试"><a href="#联合测试" class="headerlink" title="联合测试"></a>联合测试</h1><h2 id="9、新建索引"><a href="#9、新建索引" class="headerlink" title="9、新建索引"></a>9、新建索引</h2><blockquote>
<p>使用 postman 发送请求到 es 新建索引</p>
<p>PUT <a href="http://192.168.31.21:9200/dailyhub_collect">http://192.168.31.21:9200/dailyhub_collect</a></p>
</blockquote>
<p>附带 json 数据如下（主要描述各字段类型）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;collected&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span><span class="string">&quot;date_optional_time||epoch_millis&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span><span class="string">&quot;date_optional_time||epoch_millis&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;personal&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userAvatar&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;long&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="10、同步数据测试"><a href="#10、同步数据测试" class="headerlink" title="10、同步数据测试"></a>10、同步数据测试</h2><blockquote>
<p>数据库对相应的表插入字段</p>
</blockquote>
<blockquote>
<p>查询 es 中的数据</p>
<p>GET <a href="http://192.168.31.21:9200/dailyhub_collect/_search">http://192.168.31.21:9200/dailyhub_collect/_search</a></p>
</blockquote>
<p>返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">617</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dailyhub_collect&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;笔记111&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是个笔记&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;111&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-30T21:49:17+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;collected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-30&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;personal&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hqz&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;userAvatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/typora-icon.png&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>本来是用 windows 上的 docker 进行操作的，自己电脑的虚拟机没装 centos，但是在装了 mysql 和 elasticsearch 之后，安装 canal-server 出现了问题，不管怎么启动，容器都是无提示退出，google 了一下，在 github 看到有这样的问题提交，遗憾的是，这个问题并没有人来解决，这真不知道是阿里的问题还是微软的问题了。很气，也没办法，只能在自己电脑上重新部署一套 linux 环境。</li>
<li>看网上视频时，作者修改配置文件是进入容器中去修改的，这样还是挺不好的，还是拷贝出配置文件再和容器挂载比较好，万一容器因为配置文件配的不对，无法启动，也无法进入容器去进行修改配置，就很麻烦。</li>
</ol>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
        <tag>cancal</tag>
        <tag>elasticsearch</tag>
        <tag>数据同步</tag>
      </tags>
  </entry>
  <entry>
    <title>基于FMM算法的地图匹配</title>
    <url>/2023/04/08/%E5%9F%BA%E4%BA%8EFMM%E7%AE%97%E6%B3%95%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="基于FMM算法的地图匹配"><a href="#基于FMM算法的地图匹配" class="headerlink" title="基于FMM算法的地图匹配"></a>基于FMM算法的地图匹配</h1><h2 id="1、FMM是什么？"><a href="#1、FMM是什么？" class="headerlink" title="1、FMM是什么？"></a>1、FMM是什么？</h2><p>FMM算法是一种将<strong>隐马尔可夫模型</strong>与<strong>预计算</strong>相结合的<strong>快速地图匹配（FMM）算法</strong>。通过预先计算指定上限的“起点-终点表”，以存储道路网络中特定长度内的所有最短路径对。通过预计算，使用<strong>哈希表搜索替代被称为MM性能瓶颈的重复路由的查询</strong>。此外，在FMM中识别并解决了几个退化情况和反向运动问题。对大量真实出租车出行轨迹的实验表明，FMM已实现了25000–45000点&#x2F;秒的相当大的单处理器MM速度，随输出模式而变化。对FMM中不同步骤的运行时间的研究表明，在采用预计算后，新的瓶颈位于候选搜索中，更具体地说，是GPS点到道路边缘折线的投影。通过施加抑制措施，也可以有效地减少结果中的反向移动。下图为FMM算法的执行流程：</p>
<span id="more"></span>

<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405222119043.png" alt="FMM算法流程"></p>
<h2 id="2、数据介绍"><a href="#2、数据介绍" class="headerlink" title="2、数据介绍"></a>2、数据介绍</h2><p>本文所获取的数据为深圳市2019年5月20日至26日7天的数据，其中23日的数据文件损坏。每一日的数据由288个以5分钟为时间切片组成的txt文件。文件中的字段值以逗号分隔，其值含义如下表所示：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
<th>字段命名</th>
</tr>
</thead>
<tbody><tr>
<td>20190519</td>
<td>日期，年月日</td>
<td>loc_date</td>
</tr>
<tr>
<td>235922</td>
<td>时间，时分秒</td>
<td>time</td>
</tr>
<tr>
<td>H</td>
<td>出租车颜色</td>
<td>vehicle_color</td>
</tr>
<tr>
<td>粤BDK6032</td>
<td>车牌号，也可以作为车辆的唯一ID</td>
<td>vehicle_num</td>
</tr>
<tr>
<td>113.931465</td>
<td>经度</td>
<td>lng</td>
</tr>
<tr>
<td>22.522152</td>
<td>纬度</td>
<td>lat</td>
</tr>
<tr>
<td>0.0</td>
<td>出租车的瞬时速度</td>
<td>speed</td>
</tr>
<tr>
<td>6</td>
<td>出租车的瞬时方向角</td>
<td>angle</td>
</tr>
<tr>
<td>0</td>
<td>出租车的载客状态，0为空载，1为重载</td>
<td>open_status</td>
</tr>
<tr>
<td>1</td>
<td>数据有效性</td>
<td>is_validate</td>
</tr>
</tbody></table>
<h2 id="3、数据处理"><a href="#3、数据处理" class="headerlink" title="3、数据处理"></a>3、数据处理</h2><p>不同的数据处理工具的适用性如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405220854715.png" alt="image-20230405220854715"></p>
<p>根据数据量的大小，使用python进行数据的处理，并利用数据处理相关的包如<strong>pandas、geopandas、transbigdata</strong>等。以一天的数据处理为例，为了方便数据的处理，首先需要将所有的小文件合并为一个大文件。使用<strong>pandas</strong>将读取的文件转为<strong>dataframe</strong>的格式，数据文件约为三千万行，之后利用<strong>transbigdata</strong>进行数据的可视化，其结果如下图所示：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405220137611.png" alt="数据可视化"></p>
<p>经可视化以及数据的探查，发现有些字段的值不符合要求，如日期不对、出租车的瞬时速度异常、经纬度超出研究范围等，需要将这些数据剔除。利用<strong>pandas、transbigdata</strong>等包的一些方法对原始数据中的异常数据进行剔除，得到的结果可视化如下图：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405221030612.png" alt="数据处理之后的可视化"></p>
<p>其中数据的分布基本都在研究区的范围之内，一些异常的数据值也被剔除，相比原始数据，其数据质量有了很大的提升。然后对其进行<strong>OD数据和轨迹点数据</strong>的获取，轨迹点数据约有一千万个点，轨迹点的数据在QGIS中的可视化如下图所示，将得到的轨迹点保存为.csv文件，为后续的地图匹配做准备。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405221155843.png" alt="轨迹点数据可视化"></p>
<h2 id="4、路网数据获取"><a href="#4、路网数据获取" class="headerlink" title="4、路网数据获取"></a>4、路网数据获取</h2><p>通过python的<strong>osmnx</strong>包下载深圳市的路网，<strong>osmnx</strong>是python拓展包，构建在geopandas，networkx和matplotlib之上，可从<strong>openstreetmap</strong>的下载地理数据资源，并进行建模，投影，可视化和分析等。通过osmnx下载的深圳市的路网地图如下图所示：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405221242632.png" alt="深圳市路网"></p>
<h2 id="5、基于FMM的路网匹配"><a href="#5、基于FMM的路网匹配" class="headerlink" title="5、基于FMM的路网匹配"></a>5、基于FMM的路网匹配</h2><p>将<strong>FMM算法封装为docker镜像</strong>，docker 是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙盒机制，相互之间不会有任何接口（类似于iphone的app）, 更重要的是容器性能开销极低，这意味着一台机器可以运行更多的容器。 在容器中首先通过UBODT的命令，先对路网进行预处理，获取5km以下的所有OD对的最短路径，以加速地图匹配的处理。然后，使用fmm的命令，加载预处理结果，对所有的轨迹点数据与深圳市的路网进行匹配，将其中一条地图匹配的轨迹数据以及相应轨迹点和深圳市的路网在QGIS中的可视化如下图所示。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230405221337196.png" alt="路网匹配结果"></p>
<p>从可视化的结果来看，其轨迹点与路网匹配的结果符合人认知的常理。一天的轨迹点数据的地图匹配结果中，地图匹配的成功率在96%以上，容器处理的速度为约1500个点每秒，且地图匹配的效果较好。</p>
<h2 id="6、总结与展望"><a href="#6、总结与展望" class="headerlink" title="6、总结与展望"></a>6、总结与展望</h2><p>本文首先对现有的地图匹配算法进行介绍比较，最终选用FMM算法对2019年5月20日至26日的深圳市出租车的GPS数据进行地图匹配。首先对出租车的GPS数据进行去重、异常数据剔除和研究区范围外数据剔除等数据处理操作提升数据质量，之后将数据处理之后的数据提取为轨迹点数据，然后使用docker的容器化技术将FMM算法封装为docker镜像，在容器中运行FMM算法，将轨迹点数据与深圳市路网进行地图匹配，其匹配的成功率在96%以上，且匹配的效果较好。现有的地图匹配算法发展较为成熟，后续可以使用其它不同的采样间隔出租车GPS数据，尤其是采样间隔更大的数据进行路网匹配，也可以使用其它类型的GPS数据，如共享单车GPS数据，公交车GPS数据等。</p>
<h2 id="7、参考"><a href="#7、参考" class="headerlink" title="7、参考"></a>7、参考</h2><ol>
<li>YANG C, GIDOFALVI G. Fast map matching, an algorithm integrating hidden Markov model with precomputation[J&#x2F;OL]. International Journal of Geographical Information Science, 2018, 32(3): 547-570. <a href="https://doi.org/10.1080/13658816.2017.1400548">https://doi.org/10.1080/13658816.2017.1400548</a>.</li>
<li>fmm官方文档：<a href="https://fmm-wiki.github.io/">Home - FMM (fmm-wiki.github.io)</a></li>
<li>fmm docker镜像：<a href="https://hub.docker.com/r/hqzqaq/fmm">hqzqaq&#x2F;fmm - Docker Image | Docker Hub</a></li>
<li>交通大数据处理工具包：transbigdata官方文档：<a href="https://transbigdata.readthedocs.io/zh_CN/latest/index.html">TransBigData 为交通时空大数据而生 — TransBigData 0.4.10 文档</a></li>
</ol>
]]></content>
      <categories>
        <category>academic</category>
      </categories>
      <tags>
        <tag>FMM</tag>
        <tag>地图匹配</tag>
        <tag>出租车轨迹</tag>
      </tags>
  </entry>
  <entry>
    <title>地理信息系统的科学和技术基础</title>
    <url>/2022/09/23/%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E5%92%8C%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="地理信息系统的科学和技术基础"><a href="#地理信息系统的科学和技术基础" class="headerlink" title="地理信息系统的科学和技术基础"></a>地理信息系统的科学和技术基础</h1><blockquote>
<p>地理信息系统的科学基础，包括地球系统科学、地球信息科学、地理信息科学、地球空间信息科学、地理信息系统。</p>
</blockquote>
<h2 id="1、地球系统科学-Earth-System-Science"><a href="#1、地球系统科学-Earth-System-Science" class="headerlink" title="1、地球系统科学(Earth System Science)"></a>1、<font color="orange">地球系统科学(Earth System Science)</font></h2><ul>
<li><code>地球系统</code>指由<code>大气圈</code>、<code>水圈</code>、<code>陆圈（岩石圈、地幔、地核）</code>和<code>生物圈（包括人类）</code>组成的有机整体。<strong>地球系统科学</strong>就是研究组成地球系统的这些子系统之间相互联系、相互作用中运转的机制，地球系统变化的规律和控制这些变化的机理，从而为全球环境变化预测建立科学基础，并为地球系统的科学管理提供依据。</li>
</ul>
<hr>
<span id="more"></span>

<h2 id="2、地球信息科学-geo-Informatics-或-Geo-Information-Science-简称GSci"><a href="#2、地球信息科学-geo-Informatics-或-Geo-Information-Science-简称GSci" class="headerlink" title="2、地球信息科学(geo-Informatics,或 Geo Information Science,简称GSci)"></a>2、<font color="orange">地球信息科学(geo-Informatics,或 Geo Information Science,简称GSci)</font></h2><ul>
<li>是地球系统科学的组成部分,是研究地球表层<code>信息流</code>的科学,或研究地球表层资源与环境、经济与社会的综合信息流的科学。就地球信息科学的技术特征而言,它是记录、测量、处理、分析和表达地球参考数据或地球空间数据学科领域的科学。</li>
</ul>
<hr>
<h2 id="3、地理信息科学-Geographic-Information-Science"><a href="#3、地理信息科学-Geographic-Information-Science" class="headerlink" title="3、地理信息科学(Geographic Information Science)"></a>3、<font color="orange">地理信息科学(Geographic Information Science)</font></h2><ul>
<li>是<code>信息时代的地理学</code>,是地理学信息革命和范式演变的结果。它是关于地理信息的本质特征与运动规律的一门科学,它研究的对象是<strong>地理信息</strong>,是地球信息科学的重要组成部分</li>
</ul>
<hr>
<h2 id="4、地球空间信息科学-Geo-Spatial-Information-Science，也称-Geomatics"><a href="#4、地球空间信息科学-Geo-Spatial-Information-Science，也称-Geomatics" class="headerlink" title="4、地球空间信息科学(Geo-Spatial Information Science，也称 Geomatics)"></a>4、<font color="orange">地球空间信息科学(Geo-Spatial Information Science，也称 Geomatics)</font></h2><ul>
<li>是以<code>全球定位系统(GPS)</code>、<code>地理信息系统(GIS)</code>、<code>遥感(RS)</code>为主要内容,并以计算机和通信技术为主要技术支撑,用于采集、量测、分析、存储、管理、显示、传播和应用与地球和空间分布有关数据的一门综合和集成的信息科学和技术。</li>
</ul>
<hr>
<h2 id="5、地理信息系统"><a href="#5、地理信息系统" class="headerlink" title="5、地理信息系统"></a>5、<font color="orange">地理信息系统</font></h2><ul>
<li>是一种<strong>决策支持系统</strong>，它具有信息系统的各种特点，是由计算机软硬件和不同方法组成的系统，该系统设计支持地理信息的采集、存储、管理、分析、建模和显示，为使用者提供综合分析结果辅助决策。</li>
</ul>
<hr>
<h1 id="地理信息系统的基础理论"><a href="#地理信息系统的基础理论" class="headerlink" title="地理信息系统的基础理论"></a>地理信息系统的基础理论</h1><blockquote>
<p>地理信息系统的基础理论，包括地理系统理论、地理信息理论、地理（地球）空间认知理论。</p>
</blockquote>
<h2 id="6、地理系统理论"><a href="#6、地理系统理论" class="headerlink" title="6、地理系统理论"></a>6、<font color="orange">地理系统理论</font></h2><ul>
<li><code>地理系统</code>,指某一个特定时间和特定空间的,由两个以上相互区别又相互联系、相互制约的地理要素或过程所组成的,并具有特定的功能和行为,与外界环境相互作用,并能自动调节和具有自组织功能的整体。有混沌理论、地理系统协同论、人与自然相互作用理论&#x2F;人地系统理论、地理系统的整体性与分异理论&#x2F;地带性规律、地理空间结构与空间功能&#x2F;区位理论、</li>
</ul>
<hr>
<h2 id="7、地理信息理论-geographic-Information-Theory"><a href="#7、地理信息理论-geographic-Information-Theory" class="headerlink" title="7、地理信息理论(geographic Information Theory)"></a>7、<font color="orange">地理信息理论(geographic Information Theory)</font></h2><ul>
<li>是地理科学理论与信息科学理论相结合的产物。主要研究地理信息熵、地理信息流、地理空间场、地理实体电磁波、地理信息关联等的理论。</li>
</ul>
<hr>
<h2 id="8、地理（地球）空间认知理论"><a href="#8、地理（地球）空间认知理论" class="headerlink" title="8、地理（地球）空间认知理论"></a>8、<font color="orange">地理（地球）空间认知理论</font></h2><ul>
<li>地理（地球）空间认知，是研究人们怎样认识自己赖以生存的环境，包括其中的诸事物、现象的相互位置、空间分布、依存关系，以及它们的变化规律。地理（地球）空间认知通常是通过描述地理环境的地图获图像来进行的。</li>
</ul>
<hr>
<h1 id="地理信息系统概述"><a href="#地理信息系统概述" class="headerlink" title="地理信息系统概述"></a>地理信息系统概述</h1><blockquote>
<p>地理信息系统概述，包括地理信息系统的基本概念、地理信息系统的构成、地理信息系统的功能、地理信息系统与相关学科的关系、地理信息系统发展简史。</p>
</blockquote>
<h2 id="9、地理信息系统补充"><a href="#9、地理信息系统补充" class="headerlink" title="9、地理信息系统补充"></a>9、地理信息系统补充</h2><p><font color="cornflowerblue">空间实体：</font>现实世界中<code>地理实体</code>的最小抽象单元，主要包括点线面三种类型。</p>
<p><font color="cornflowerblue">地理数据：</font>是指表征<code>地理圈或地理环境</code>固有要素或物质的数量、质量、分布特征、联系和规律的数字、文字、图像和图形等的总称。</p>
<p><font color="cornflowerblue">地理信息：</font>有关<code>地理实体</code>的<font color="yellow">性质、特征和运动状态</font>的表征和一切有用的知识，它是对地理数据的解释。在地理信息中，<font color="yellow">其位置是通过数据进行标识的</font>，这是地理信息区别与其他类型信息的最显著的标志。地理信息具有<font color="yellow">区域性</font>（通过经纬线等建立的地理坐标来实现空间位置的标识）、<font color="yellow">多维结构</font>（在二维空间的基础上实现多专题的第三维结构）、<font color="yellow">动态变化</font>（时序特征明显）的特性。</p>
<p><font color="cornflowerblue">组件式GIS：</font>是采用了面向对象技术和组件式软件的 GIS 系统，基本思想是把 GIS 各大功能模块划分为几个组件，每个组件完成不同的功能，各个组件之间以及 GIS 组件与其它非 GIS 组件之间都可以方便的通过可视化的软件开发工具集成起来，形成最终的 GIS 基础平台以及应用系统。</p>
<p><font color="cornflowerblue">时空系统：</font>传统的地理信息系统只考虑地物的空间特性，忽略了其<strong>时间特性</strong>。时空系统通常把 GIS 的时间维分成<strong>处理时间维</strong>（在 GIS 中处理发生的时间）和<strong>有效时间维</strong>（实际应用领域事件出现的时间），时空系统主要研究时空模型，时空数据的表示、存储、操作、查询和空间分析。现在比较流行的操作是在现有的数据模型的基础上引入<strong>时间属性</strong>。</p>
<p><font color="cornflowerblue">GIS 发展趋势与展望：</font>GIS 网络化、GIS 标准化、数据商业化、系统专门化、GIS 企业化、GIS 全球化、GIS 大众化</p>
<p><font color="cornflowerblue">地理信息系统的应用：</font>测绘与地图制图、资源调查与管理、城乡规划、灾害监测、环境保护、国防、宏观决策支持。</p>
<p><font color="cornflowerblue">GIS 互操作：</font>在异构环境下的两个或多个实体，尽管它们实现的语言、执行的环境和基于的模型不同，但仍然可以相互通信和协作以便完成某一特定的任务。</p>
<h5 id="9-0-0-1、时空-GIS：是一种四维（x、y、z、t）或（s、t）的信息系统，其中（x、y、z）或-s-表示空间系统，t-表示时间，这是一种具有时空复合分析功能和多维信息可视化的系统。"><a href="#9-0-0-1、时空-GIS：是一种四维（x、y、z、t）或（s、t）的信息系统，其中（x、y、z）或-s-表示空间系统，t-表示时间，这是一种具有时空复合分析功能和多维信息可视化的系统。" class="headerlink" title="9.0.0.1、时空 GIS：是一种四维（x、y、z、t）或（s、t）的信息系统，其中（x、y、z）或 s 表示空间系统，t 表示时间，这是一种具有时空复合分析功能和多维信息可视化的系统。"></a>9.0.0.1、<font color="cornflowerblue">时空 GIS：</font>是一种四维（x、y、z、t）或（s、t）的信息系统，其中（x、y、z）或 s 表示空间系统，t 表示时间，这是一种具有时空复合分析功能和多维信息可视化的系统。</h5><p><font color="cornflowerblue">数据建模：</font>把现实世界中的数据组织为有用且能反映真实信息的数据集的过程。</p>
<p><font color="cornflowerblue">空间数据模型：</font>是关于现实世界中空间实体及其相互间联系的概念，为描述空间数据组织和设计空间数据库模式提供了基本的方法。</p>
<p><font color="cornflowerblue">操作尺度：</font>对空间实体、现象的数据进行处理和操作时应采用的最佳尺度，不同操作尺度影响处理结果的可靠程度或准确度。</p>
<hr>
<h2 id="10、地理信息系统"><a href="#10、地理信息系统" class="headerlink" title="10、地理信息系统"></a>10、<font color="orange">地理信息系统</font></h2><ul>
<li>是一种<strong>决策支持系统</strong>，它具有信息系统的各种特点，是由计算机软硬件和不同方法组成的系统，该系统设计支持地理信息的采集、存储、管理、分析、建模和显示，为使用者提供综合分析结果辅助决策。</li>
</ul>
<p><font color="orange">特征：</font></p>
<ol>
<li>具有采集、管理、分析和输出多种地理信息的能力，具有空间性和动态性。</li>
<li>由<strong>计算机系统</strong>支持进行空间地理数据管理，并由计算机程序模拟常规的或专门的地理分析方法，作用于<font color="yellow">空间数据</font>，产生有用的信息，完成人类难以完成的任务。</li>
<li>计算机系统的支持是地理信息系统的重要特征，因而使得地理信息系统能快速、准确、综合地对复杂的地理系统进行<code>空间定位</code>和<code>过程动态分析</code>。</li>
</ol>
<hr>
<h2 id="11、地理信息系统的构成"><a href="#11、地理信息系统的构成" class="headerlink" title="11、地理信息系统的构成"></a>11、<font color="orange">地理信息系统的构成</font></h2><ul>
<li><code>计算机硬件系统</code>（输入&#x2F;输出设备、中央处理单元、存储器）、<code>计算机软件系统</code>（计算机系统软件、地理信息系统软件和其他支持软件、应用分析程序）、<code>系统开发、管理和使用人员</code>、<strong>空间数据</strong>。</li>
</ul>
<p><font color="cornflowerblue">空间数据：</font>是指以地球表面空间位置为参照的自然、社会和人文经济景观数据，可以是图形、图像、文字、表格和数字等。是GIS系统程序作用的对象。空间数据主要包括：某个已知坐标系中的位置、<font color="yellow">实体间的空间关系</font>、与几何位置无关的属性。</p>
<hr>
<h2 id="12、地理信息系统的功能"><a href="#12、地理信息系统的功能" class="headerlink" title="12、地理信息系统的功能"></a>12、<font color="orange">地理信息系统的功能</font></h2><ul>
<li>数据采集、监测与编辑、数据处理（数据的格式化、转换、概括）、数据存储与组织（栅格模型、矢量模型、栅格&#x2F;矢量混合模型）、<font color="yellow">空间查询与分析（核心功能，也是与其它计算机系统的根本区别。</font>空间检索、空间拓扑叠加分析、空间模型分析、图形与交互显示。</li>
</ul>
<hr>
<h2 id="13、地理信息系统与相关学科的关系"><a href="#13、地理信息系统与相关学科的关系" class="headerlink" title="13、地理信息系统与相关学科的关系"></a>13、<font color="orange">地理信息系统与相关学科的关系</font></h2><p><font color="cornflowerblue">地理学：</font>为地理信息系统提供了有关空间分析的基本观点与方法，成为地理信息系统的基础理论依托。而地理信息系统的发展也为地理问题的解决提供了全新的技术手段，并使地理学研究的数学传统得到了充分的发挥。</p>
<p><font color="cornflowerblue">地图学：</font>GIS是地图信息的一中的新的载体方式，计算机制图为地理信息系统的图形输出设计提供了技术支持，地图也是地理信息系统重要的数据来源之一。<font color="yellow">地图强调的是数据分析、符号化与显示，地理信息系统更注重信息分析</font>。</p>
<p><font color="cornflowerblue">计算机科学：</font></p>
<ol>
<li><p>数据库管理系统（DBMS）：是操作和管理数据库的软件系统，对<strong>空间地理数据</strong>而言，缺点为：</p>
<ul>
<li><strong>缺乏空间实体定义能力</strong></li>
<li><strong>缺乏空间关系查询能力</strong></li>
</ul>
</li>
<li><p>计算机图形学：是利用计算机处理图形信息以及借助图形信息进行人-机通讯处理的技术，是GIS算法设计的基础。缺点：</p>
<ul>
<li>不能完成数据的地理模型分析</li>
<li>不能完成许多具有地理意义的数据处理</li>
</ul>
</li>
<li><p>计算机辅助设计（CAD）：是通过计算机辅助设计人员进行设计，以提高设计的自动化程度，节省人力和时间。</p>
</li>
<li><p>计算机辅助制图（CAM）：采用计算机进行几何图形的编辑和绘制。</p>
<ul>
<li>CAD 不能建立地理坐标系和完成地理坐标转换</li>
<li>GIS 涉及的数据量大</li>
<li>CAD 和 CAM 不具备地理意义的空间查询和分析功能</li>
</ul>
</li>
</ol>
<p><font color="cornflowerblue">遥感：</font>是一种不通过直接接触目标物而获得其信息的一种新型探测技术，它通常是指获取和处理地球表面的信息。遥感是地理信息系统的主要<font color="yellow">数据源与更新手段</font>，地理信息系统的应用进一步支持遥感信息的综合开发与利用。</p>
<p><font color="cornflowerblue">管理科学：</font>一类是以管理为目的，在计算机硬件和软件支持下具有存储、处理、管理和分析数据能力的信息系统。处理的数据<font color="yellow">没有或者不包含空间特征</font>。另一类是具有空间分析功能的<font color="yellow">地理信息系统为支持</font>、以管理为目标的信息系统，它利用地理信息系统的各种功能实现对具有空间特征的要素进行处理和分析以达到管理区域系统的目的。</p>
<p><font color="cornflowerblue">地理信息科学：</font>地理信息科学与GIS相比，它更加侧重于将地理信息视作为一门科学而不仅仅是一个个技术的实现，主要研究在应用计算机技术对地理信息进行处理、存储、提取以及管理和分析过程中提出的一系列基本问题，地理信息科学在对于地理信息技术研究的同时还指出了支撑地理信息技术发展的基础理论研究的重要性。</p>
<hr>
<h2 id="14、地理信息系统发展简史"><a href="#14、地理信息系统发展简史" class="headerlink" title="14、地理信息系统发展简史"></a>14、<font color="orange">地理信息系统发展简史</font></h2><p><font color="cornflowerblue">国外：</font></p>
<ul>
<li>60年代开拓发展阶段，注重于空间数据的地学处理</li>
<li>70年代巩固阶段，注重空间地理信息的管理</li>
<li>80年代突破阶段，注重空间决策支持分析</li>
<li>90年代社会化阶段，GIS的用户时代</li>
<li>21世纪初为GIS的空间信息网格时代</li>
</ul>
<p><font color="cornflowerblue">国内：</font></p>
<ul>
<li>70年代准备阶段</li>
<li>80年代实验起步阶段</li>
<li>90年代发展阶段</li>
<li>96年以来产业化阶段</li>
</ul>
<hr>
<h1 id="地理信息系统的技术基础"><a href="#地理信息系统的技术基础" class="headerlink" title="地理信息系统的技术基础"></a>地理信息系统的技术基础</h1><blockquote>
<p>地理信息系统的技术基础，包括数据采集技术、计算机网络工程技术、现代通信技术、软件工程技术、信息安全技术、网络空间信息传输技术、虚拟现实与仿真技术。</p>
</blockquote>
<h2 id="15、数据采集技术"><a href="#15、数据采集技术" class="headerlink" title="15、数据采集技术"></a>15、<font color="orange">数据采集技术</font></h2><ul>
<li>包含遥感（RS）、全球定位系统（GPS）、三维激光扫描技术、数字测图技术。</li>
</ul>
<p><font color="cornflowerblue">遥感数据采集技术：</font></p>
<ul>
<li>卫星遥感，低分辨率 GMS、NOAA、FY-1，中分辨率 EOS MODIS，高分辨率 LANDSAT、TM&#x2F;ETM、SPOT HRV&#x2F;HRVIR</li>
<li>航空和低空遥感，LIDAR 系统，集三维激光扫描、全球定位系统（GPS）、惯性导航系统（INS）</li>
<li>地面遥感，地面车载遥感数据采集系统</li>
</ul>
<p><font color="cornflowerblue">数字测图技术：</font>现代地形图测绘技术，全站仪、三维激光扫描仪</p>
<p><font color="cornflowerblue">GPS技术采集GIS数据：</font>GPS 接收机采集点数据</p>
<hr>
<h2 id="16、计算机网络工程技术"><a href="#16、计算机网络工程技术" class="headerlink" title="16、计算机网络工程技术"></a>16、<font color="orange">计算机网络工程技术</font></h2><ul>
<li>GIS企业内部网、GIS 因特网</li>
</ul>
<hr>
<h2 id="17、现代通信技术"><a href="#17、现代通信技术" class="headerlink" title="17、现代通信技术"></a>17、<font color="orange">现代通信技术</font></h2><ul>
<li>光纤通信、卫星通信、数字微波通信</li>
</ul>
<hr>
<h2 id="18、软件工程技术"><a href="#18、软件工程技术" class="headerlink" title="18、软件工程技术"></a>18、<font color="orange">软件工程技术</font></h2><ul>
<li>是一门指导计算机软件开发和维护的工程学科，采用工程的概念、原理、技术和方法来开发和维护软件，把经过时间考验，证明正确的管理技术和当前最好的开发技术结合起来，就是软件工程。</li>
</ul>
<p><font color="cornflowerblue">GIS软件工程：</font>既是一项软件工程，又是一项特别关乎数据组织与管理的信息工程，双重工程活动交互的复杂工程。</p>
<p><font color="cornflowerblue">软件开发的基本模型：</font></p>
<ul>
<li>瀑布模型：将开发周期定义为：问题定义、可行性研究、需求分析、总体设计、详细设计、编码与单元测试、综合测试和软件维护。</li>
<li>演化模型：针对事先不能完整定义需求的软件开发。</li>
<li>螺旋模型：在瀑布模型和演化模型的基础上，加入风险分析。</li>
<li>喷泉模型：体现了软件开发过程所固有的迭代和无间隙特征。</li>
<li>组件对象模型：基于程序部件设计开发和部件集成的软件开发模型。</li>
</ul>
<p><font color="cornflowerblue">软件的开发方法：</font>生命周期方法、快速原型方法、面向对象方法和组件对象方法</p>
<hr>
<h2 id="19、信息安全技术"><a href="#19、信息安全技术" class="headerlink" title="19、信息安全技术"></a>19、<font color="orange">信息安全技术</font></h2><p><font color="cornflowerblue">公钥基础设施：</font>单钥密码算法、DES算法、公开密钥数字签名算法、数字签名与数字信封、数字证书</p>
<p><font color="cornflowerblue">防火墙技术：</font>包过滤防火墙、状态&#x2F;动态检测防火墙、应用程序代理防火墙、网络地址转换（NAT）、个人防火墙</p>
<p><font color="cornflowerblue">信息伪装技术：</font>叠像技术、数字水印、替声技术</p>
<p><font color="cornflowerblue">信息安全传输的保护方式：</font>认证传输方式、加密传输方式、混合传输方式</p>
<hr>
<h2 id="20、网络空间信息传输技术"><a href="#20、网络空间信息传输技术" class="headerlink" title="20、网络空间信息传输技术"></a>20、<font color="orange">网络空间信息传输技术</font></h2><p><font color="cornflowerblue">网络空间信息传输存在的问题：</font>空间信息的传输模式主要是客户&#x2F;服务器、浏览器&#x2F;服务器和客户&#x2F;浏览器&#x2F;服务器模式，信息传输的模式有点对点、一点对多点、多点对一点和多点对多点。</p>
<p>问题：</p>
<ol>
<li>大量结果数据的返回</li>
<li>大量用户的并发访问</li>
<li>网络传输的带宽问题</li>
<li>网络传输的流量问题</li>
<li>网络传输的速率问题</li>
<li>网络传输的接入问题</li>
<li>网络传输的信息安全问题</li>
</ol>
<p><font color="cornflowerblue">网络接入技术：</font>按地理上的跨度可分为局域网和广域网。按接入因特网的方式可分为：</p>
<ul>
<li>广域网连接</li>
<li>局域网连接</li>
<li>拨号连接</li>
<li>宽带连接</li>
<li>通过 ISP 的接入方式</li>
</ul>
<p><font color="cornflowerblue">网上信息的处理技术：</font>数据编码压缩、客户端缓存技术</p>
<hr>
<h2 id="21、虚拟现实与仿真技术"><a href="#21、虚拟现实与仿真技术" class="headerlink" title="21、虚拟现实与仿真技术"></a>21、<font color="orange">虚拟现实与仿真技术</font></h2><p><font color="cornflowerblue">虚拟现实技术：</font>是一种由计算机生成的高级人机交互系统，即构成一个以视觉感受为主，也包括听觉、触觉、嗅觉的可感知环境，使用者通过专门的设备可在这个环境中实现观察、触摸操作等有声临其境之感。</p>
<p><font color="cornflowerblue">地理信息系统的可视化：</font>以计算机科学、图形学、认知科学与地理信息系统为基础，以屏幕地图的形式，直观形象，多维动态地显示空间信息的方法与技术，GIS 可视化着重于技术层面上，数据模型（空间数据模型、时空数据模型）的设计、二维、三维图形的显示，实时动态处理。</p>
<p><font color="cornflowerblue">空间信息可视化：</font>是地理信息处理的窗口与处理结果的直观表达形式，因而是决策的直观依据，只有把空间数据库中的海量数据转换为直观的图形信息，地理信息处理的结果才能为规划管理与决策提供有力的支撑。</p>
<p>空间信息可视化的形式：</p>
<ul>
<li>地图（纸质地图、电子地图）</li>
<li>多媒体地学信息</li>
<li>三维仿真地图</li>
<li>虚拟现实</li>
</ul>
<hr>
<h1 id="地理空间数据组织与管理"><a href="#地理空间数据组织与管理" class="headerlink" title="地理空间数据组织与管理"></a>地理空间数据组织与管理</h1><blockquote>
<p>地理空间信息基础，包括地理空间信息的描述方法、矢量数据的属性描述、矢量数据的类型和空间关系、元数据、地图投影。</p>
</blockquote>
<p><font color="cornflowerblue">地理空间：</font>指物质、能量、信息的存在形式在形态、结构过程、功能关系上的分布方式、格局及其在时间上的延续。地理空间上至电离层，下至地幔莫霍面。</p>
<h2 id="22、大地水准面"><a href="#22、大地水准面" class="headerlink" title="22、大地水准面"></a>22、<font color="orange">大地水准面</font></h2><ul>
<li>静止的平均海水面穿过大陆和岛屿形成的一个与重力方向处处正交的闭合的曲面。</li>
</ul>
<p><font color="cornflowerblue">地球椭球体：</font>一个很接近于绕自转轴（短轴）旋转的椭球体。</p>
<p><font color="cornflowerblue">参考椭球体：</font>形状大小一定，且经过定位、定向的地球椭球体，是与<code>某个区域大地水准面</code>最为密合的椭球面。一个国家或地区参考椭球体的选择标准是：<strong>以能最好地拟合一个国家或地区的大地水准面为原则</strong>。</p>
<h2 id="23、地理坐标系"><a href="#23、地理坐标系" class="headerlink" title="23、地理坐标系"></a>23、<font color="orange">地理坐标系</font></h2><ul>
<li>是为确定地面点的位置而设置，主要是确定地面点与大地水准面之间的关系，包括地面点在大地水准面上的平面位置和地面点到大地水准面的高度。</li>
</ul>
<h2 id="24、投影坐标系"><a href="#24、投影坐标系" class="headerlink" title="24、投影坐标系"></a>24、<font color="orange">投影坐标系</font></h2><ul>
<li>平面坐标系，将椭球面上的点，通过投影的方法投影到平面上时，通常使用平面坐标系统。</li>
</ul>
<p><font color="cornflowerblue">高程基准面：</font>是地面点高程的统一起算面，所有水准测量测定的高程都以这个面为零起算面，也就是以高程基准面作为零高程面。</p>
<p><font color="cornflowerblue">高程：</font>地面点至平均海水面的垂直高度</p>
<p><font color="cornflowerblue">高差：</font>地面点之间的高程差</p>
<p><font color="cornflowerblue">黄海高程系：</font>以青岛港验潮站的长期观测资料推算出的黄海平均海平面作为中国的水准基面，即零高程面。中国水准原点建立在青岛港验潮站附近，用精密水准测量测定水准原点相对于黄海平均海面的高差即水准原点的高程作为全国高程控制网的起算高程。</p>
<p><font color="cornflowerblue">大地原点：</font>也叫大地基准点，是国家地理坐标经纬度的起算点和基准点，是人为界定的一个点，是利用高斯平面直角坐标的方法建立全国统一坐标系。</p>
<p><font color="cornflowerblue">大地坐标：</font>在地面上建立一系列相连接的三角形，量取一段精确的距离作为起算边，在这个边的两端点，采用天文观测的方法确定其点位，用精密测角仪器测定各三角形的角值，根据起算边的边长和点位，就可以推算出其它各点的坐标。</p>
<h2 id="25、大地基准面"><a href="#25、大地基准面" class="headerlink" title="25、大地基准面"></a>25、<font color="orange">大地基准面</font></h2><ul>
<li>设计用为最密合部分或全部大地水准面的数学模式，它由椭球体本身及椭球体和地表上一点视为原点间之关系来定义。</li>
</ul>
<p><font color="cornflowerblue">比例尺：</font>将客观世界按一定的数量关系缩小表示在地图上，是地图线性缩小程度的标志。</p>
<p><font color="cornflowerblue">地图符号：</font>表达地图内容的基本手段，它不仅能表示事物的空间位置、形状、质量和数量特征而且还可以表示各事物之间的相互联系及区域总体特征。</p>
<p><font color="cornflowerblue">大地坐标系：</font>是大地测量中以参考椭球面为基准面建立起来的坐标系，地面点的位置用大地精度、大地纬度和大地高度来表示，大地坐标系的确立包括选择一个椭球、对椭球进行定位和确定大地起算数据。一个形状、大小和定位都已确定的地球椭球叫参考椭球。参考椭球一旦确立，则标志大地坐标系已经建立。</p>
<h2 id="26、地图投影"><a href="#26、地图投影" class="headerlink" title="26、地图投影"></a>26、<font color="orange">地图投影</font></h2><ul>
<li>建立地球表面上的点与投影平面上点之间的一一对应关系。地图投影的基本问题就是利用一定的数学法则把地球表面上的经纬网表示到平面上。</li>
</ul>
<p><font color="cornflowerblue">地图投影的变形：</font></p>
<ul>
<li><p>变形的种类分：</p>
<ul>
<li>长度变形：地图上经纬线长度与地球仪上经纬线长度特定并不完全相同</li>
<li>面积变形：地图上经纬线网格面积与地球仪上经纬线网格面积的特定不同</li>
<li>角度变形：地图上两条所夹的角度不等于球面上相应的角度</li>
</ul>
</li>
<li><p>变形的性质分：</p>
<ul>
<li>等角投影：投影前后对应的微分面积保持图形相似，即角度变形为零</li>
<li>等积投影：投影前后对应的微分面积保持图形相等，即面积变形为零</li>
<li>等距投影：沿某一特定方向的距离，投影前后保持不变</li>
</ul>
</li>
<li><p>构成方法：</p>
<ul>
<li>几何投影</li>
<li>非几何投影</li>
<li>按照投影面积与地球相隔或相切分类</li>
</ul>
</li>
</ul>
<p><font color="cornflowerblue">地图投影的选择：</font>主要考虑：制图区域的范围、形状和地理位置，地图的用途、出版方式及其他特殊要求等，其中制图区域的范围、形状和地理位置是主要因素。中、小范围的投影选择，最好是使等变形线与制图区域的轮廓形状基本一致，以便减少图上变形。</p>
<h2 id="27、高斯-克吕格投影（等角横轴切椭圆柱投影）"><a href="#27、高斯-克吕格投影（等角横轴切椭圆柱投影）" class="headerlink" title="27、高斯-克吕格投影（等角横轴切椭圆柱投影）"></a>27、<font color="orange">高斯-克吕格投影（等角横轴切椭圆柱投影）</font></h2><ul>
<li>它是将一椭圆柱横切于地球椭球体上，该椭圆柱面与椭球体表面的切线为一经线，投影中将其称为中央经线，然后根据一定的约束条件即投影条件，将<font color="yellow">中央经线</font>两侧规定范围内的点投影到椭圆柱面上，从而得到点的高斯投影。长度和面积变形距离中央经线越远变形越大。<strong>在同一条经线上长度变形随纬度的降低而增大，在赤道处为最大，在同一条纬线上长度变形随经差的增加而增大，且增大速度较快。</strong></li>
</ul>
<p><font color="cornflowerblue">墨卡托投影：</font>等角正轴切圆柱投影，假想一个与地轴方向一致的圆柱切或割于地球，按等角条件将经纬网投影到圆柱面上，将圆柱面展开为平面后，即得本投影。</p>
<p><font color="cornflowerblue">兰伯特投影：</font>等角正轴割圆锥投影，设想用一个圆锥正割于球面两条标准纬线，应用等角条件将地球面投影到圆锥面上，然后沿圆锥一条母线剪开，展开即为兰伯特投影。兰伯特等角投影后，纬线为同心圆弧，经线为同心圆半径。双标准纬线相割其投影变形小而均匀。</p>
<h2 id="28、地理坐标系转换"><a href="#28、地理坐标系转换" class="headerlink" title="28、地理坐标系转换"></a>28、<font color="orange">地理坐标系转换</font></h2><ul>
<li><p>通常指两个坐标系统之间的转换，分为地理坐标之间的直接转换或经由大地坐标之间的间接转换。坐标转换的方法分为<font color="yellow">三参数和七参数</font>两种方法：</p>
<ul>
<li><p>三参数坐标转换：x、y、z，适用条件：仅当两个大地坐标系统之间存在坐标原点平移，并已知三个坐标的平移量（△x,△y,△z)</p>
</li>
<li><p><font color="yellow">七参数坐标转换</font>：两个大地坐标系之间不仅存在原点位移（△x,△y,△z），而且还存在坐标轴之间的旋转（转角元素分量r<del>x</del>、r<del>y</del>、r<del>z</del>)以及坐标尺度(s)的不同。</p>
</li>
</ul>
</li>
</ul>
<h2 id="29、矢量数据"><a href="#29、矢量数据" class="headerlink" title="29、矢量数据"></a>29、<font color="orange">矢量数据</font></h2><ul>
<li>是用（x，y）坐标对、坐标串和封闭的坐标串表示实体要素点、线、面的位置及其空间关系的一种数据格式。它适宜表达离散的空间实体要素。</li>
</ul>
<h2 id="30、栅格数据"><a href="#30、栅格数据" class="headerlink" title="30、栅格数据"></a>30、<font color="orange">栅格数据</font></h2><ul>
<li>用栅格来表示要素的空间变化。栅格由一系列的栅格坐标或像元所处栅格矩阵的行列号（I、J）定义其位置，每个像元独立编码，并载有属性（对应于该位置上空间实体要素的取值）。栅格单元的大小代表空间分辨率，表示表达的精度。</li>
</ul>
<h2 id="31、数字高程模型"><a href="#31、数字高程模型" class="headerlink" title="31、数字高程模型"></a>31、<font color="orange">数字高程模型</font></h2><ul>
<li>地形表面形态属性信息的数字表达，是带有空间位置特征和高程特征的数字描述，是GIS表示2.5维地形数据的重要格式。是由平面坐标和高程数据共同定义的地形表面模型。地形数据一般通过规则格网数字高程模型（DEM）或不规则三角网（TIN）来表示。</li>
</ul>
<h2 id="32、空间关系"><a href="#32、空间关系" class="headerlink" title="32、空间关系"></a>32、<font color="orange">空间关系</font></h2><ul>
<li>指地理实体之间存在的与空间特性有关的关系，如<code>度量关系、顺序关系和拓扑关系</code>。是刻画数据组织、查询、分析和推理的基础。</li>
</ul>
<h2 id="33、拓扑关系"><a href="#33、拓扑关系" class="headerlink" title="33、拓扑关系"></a>33、<font color="orange">拓扑关系</font></h2><ul>
<li>是GIS中重点描述的地理要素之间的空间关系。常见的拓扑关系有<strong>关联关系、邻接关系、连通关系和包含关系</strong>。根据拓扑关系不需要利用坐标或距离就可以确定一种地理实体相对于另一种地理实体的位置关系。</li>
</ul>
<p><font color="cornflowerblue">方位关系：</font>定义了地物对象之间的方位</p>
<p><font color="cornflowerblue">度量关系：</font>定义了对象之间的距离</p>
<h2 id="34、元数据"><a href="#34、元数据" class="headerlink" title="34、元数据"></a>34、<font color="orange">元数据</font></h2><ul>
<li>元数据是<code>描述数据</code>的<code>数据</code>，它描述空间数据集的<strong>内容、质量、表示方式、空间参考、管理方式</strong>以及数据集的其它特征，是<code>空间数据交换</code>的基础，也是<font color="orange">空间数据标准化</font>与<font color="orange">规范化</font>的保证，在一定程度上为空间数据的质量提供了保障。</li>
</ul>
<p><font color="cornflowerblue">元数据的主要作用：</font></p>
<ol>
<li>帮助数据生产单位有效地管理和维护空间数据、建立数据文档。</li>
<li>提供有关数据生产单位数据存储、数据分类、数据内容、数据质量、数据交换网络及数据销售等方面的信息。</li>
<li>帮助用户了解数据。</li>
<li>提供有用的信息，以便用户处理和转换有用的数据。</li>
</ol>
<p><font color="cornflowerblue">9交模型：</font>是一个由边界、内部、余的点集组成的<code>9交空间关系模型</code>，是一种描述<font color="orange">拓扑空间关系</font>的方法，它形式化的描述了<code>离散空间对象</code>的<font color="orange">拓扑关系</font>，基于9交模型，可以定义空间数据库的一致性原则，并应用于数据库更新、维护中。</p>
<h1 id="地理空间数据模型"><a href="#地理空间数据模型" class="headerlink" title="地理空间数据模型"></a>地理空间数据模型</h1><blockquote>
<p>地理空间数据模型，包括地理空间数据模型的概念、地理空间数据的基本特征和描述内容、空间数据的分类编码和数据分层、空间数据的空间索引、空间数据模型。</p>
</blockquote>
<p><font color="cornflowerblue">数据模型：</font>是描述数据库的概念集合，包括精确描述数据、数据关系、数据语义及完整性约束条件等概念。</p>
<p><font color="cornflowerblue">地理数据模型：</font>是人们在对地理空间的充分认识与完整的地理空间认知模型的基础上，并用计算机能够识别和处理的形式化语言来定义和描述现实世界地理实体、地理现象及其相互关系的逻辑模型。</p>
<h2 id="35、地理空间数据模型"><a href="#35、地理空间数据模型" class="headerlink" title="35、地理空间数据模型"></a>35、<font color="orange">地理空间数据模型</font></h2><ul>
<li>以概念的方式对客观世界进行抽象，是一组由相关关系联系在一起的实体集，包括几何数据模型和语义数据模型。是定义地理空间数据结构的基础。</li>
</ul>
<h2 id="36、地理空间数据结构"><a href="#36、地理空间数据结构" class="headerlink" title="36、地理空间数据结构"></a>36、<font color="orange">地理空间数据结构</font></h2><ul>
<li>强调地理空间数据模型在计算机中的编码、存储和表现方法的实现，是地理空间数据模型的具体实现。</li>
</ul>
<h2 id="37、空间数据"><a href="#37、空间数据" class="headerlink" title="37、空间数据"></a>37、空间数据</h2><ul>
<li>是指地球表面以空间位置为参照的自然、社会、和人文经济景观数据，可以是图形、图像、文字、表格和数字等。是 GIS 系统程序作用的对象。</li>
</ul>
<h2 id="38、空间数据的基本特征"><a href="#38、空间数据的基本特征" class="headerlink" title="38、空间数据的基本特征"></a>38、<font color="orange">空间数据的基本特征</font></h2><ul>
<li>空间位置特征：表示地理实体或现象在空间参照系中的位置，绝对位置由空间坐标定义，相对位置由空间关系定义。</li>
<li>空间属性特征：对所对应的空间实体或现象的说明信息。</li>
<li>时间特征：地理实体或现象随时间变化的特征。</li>
</ul>
<p><font color="cornflowerblue">空间数据的描述内容：</font></p>
<ol>
<li>编码：用于区别不同实体</li>
<li>位置：坐标值或空间关系</li>
<li>行为：地理实体具有的行为和功能</li>
<li>属性：非空间信息</li>
<li>说明：数据来源、数据质量等</li>
<li>关系：数据集合之间的关系</li>
</ol>
<p><font color="cornflowerblue">图层：</font>是描述某一地理区域的某一或多个属性特征的数据集。</p>
<h2 id="39、空间索引"><a href="#39、空间索引" class="headerlink" title="39、空间索引"></a>39、<font color="orange">空间索引</font></h2><ul>
<li>是指依据空间对象的<code>位置</code>和<code>形状</code>或空间对象之间的某种空间关系按<code>一定顺序排列</code>的一种<font color="orange">数据结构</font>，其中包含空间对象的概要信息。作为一种辅助性的数据结构，空间索引介于空间操作算法与空间对象之间，它通过筛选作用，<strong>排除大量与特定空间操作无关的空间对象，从而提高了空间操作的速度和效率。</strong></li>
</ul>
<p><font color="cornflowerblue">窗坐标索引机制：</font>基于记录对象空间范围的索引机制，即当记录每个空间对象的坐标时，同时记录其对象的最大、最小窗坐标。</p>
<p><font color="cornflowerblue">格网型空间索引：</font>将工作区按一定的规则划分为格网，并记录每个格网内所包含的空间对象。</p>
<p><font color="cornflowerblue">BSP树空间索引：</font>是一种二叉树，将空间逐级进行一分为二的划分。</p>
<p><font color="cornflowerblue">KDB树空间索引：</font>是BSP树向多维空间的扩展，可以向多维空间的点进行动态索引，删除和增加空间点对象也很方便。</p>
<p><font color="cornflowerblue">R树和R^+^树空间索引：</font>根据地物的最小外包矩形建立，可以直接对空间中占据一定范围的空间对象进行索引。</p>
<p><font color="cornflowerblue">CELL树：</font>采用凹多边形代替矩形作为划分区域的基本单元，子空间不允许重叠。</p>
<h2 id="40、空间数据模型"><a href="#40、空间数据模型" class="headerlink" title="40、空间数据模型"></a>40、<font color="orange">空间数据模型</font></h2><ol>
<li>层次模型：是一种树结构模型，把数据按自然的层次关系组织起来，以反映数据之间的隶属关系。</li>
<li>网络数据模型：将数据组织成<code>有向图结构</code>，图中节点代表数据记录，连线描述不同节点数据间的联系。</li>
<li>关系数据模型：数据的逻辑结构为满足一定条件的二维表，表具有固定的列数和任意的行数。关系模型可以简单、灵活地表示各种实体及其关系，其数据描述具有较强的一致性和独立性。</li>
</ol>
<h2 id="41、面向对象的地理数据模型"><a href="#41、面向对象的地理数据模型" class="headerlink" title="41、面向对象的地理数据模型"></a>41、<font color="orange">面向对象的地理数据模型</font></h2><ul>
<li>在更高的层次上综合利用和管理多种数据结构和数据模型，并用面向对象的方法进行统一的抽象。</li>
</ul>
<h2 id="42、矢量数据模型"><a href="#42、矢量数据模型" class="headerlink" title="42、矢量数据模型"></a>42、<font color="orange">矢量数据模型</font></h2><ul>
<li>点用坐标对表示，线用一串坐标表示，面是由线组成的闭合多边形。拓扑属性的存储十分重要，它描述了空间目标之间的空间关系，是进行空间操作和空间分析的关键。</li>
</ul>
<h2 id="43、栅格数据模型"><a href="#43、栅格数据模型" class="headerlink" title="43、栅格数据模型"></a>43、<font color="orange">栅格数据模型</font></h2><ul>
<li>空间被规则的划分为栅格，地理实体的位置和状态是用它们占据的栅格的行、列来定义的，每个栅格的大小代表了定义的空间分辨率。</li>
</ul>
<p><font color="cornflowerblue">三维矢量数据模型：</font>在三维空间中，地理实体分为点、线、面和体四种基本元素，由这四种元素构成复杂的三维目标。</p>
<p><font color="cornflowerblue">三维栅格数据模型：</font>将地理实体的三维空间分为细小的单元，称之为体元或体元素。若某体元包含在实体之内，则赋值为1，否则赋值为0。</p>
<h2 id="44、时空数据模型"><a href="#44、时空数据模型" class="headerlink" title="44、时空数据模型"></a>44、<font color="cornflowerblue">时空数据模型</font></h2><ul>
<li>能够同时处理时间纬度的 GIS 叫 <strong>TGIS</strong>，特点是语义更丰富，对现实世界的描述更准确，其物理实现的最大困难在于海量数据的组织与存取。主要的 TGIS 模型包括：<code>空间时间立方体模型</code>、<code>序列快照模型</code>、<code>基图修正模型</code>、<code>空间时间组合体模型</code>。</li>
</ul>
<h1 id="地理空间数据结构"><a href="#地理空间数据结构" class="headerlink" title="地理空间数据结构"></a>地理空间数据结构</h1><blockquote>
<p>地理空间数据结构，包括无拓扑矢量数据结构、拓扑数据结构、栅格数据结构、数字高程模型数据结构、四叉树和八叉树数据结构、其它数据结构。</p>
</blockquote>
<h2 id="45、无拓扑矢量数据结构"><a href="#45、无拓扑矢量数据结构" class="headerlink" title="45、无拓扑矢量数据结构"></a>45、<font color="orange">无拓扑矢量数据结构</font></h2><ul>
<li><p>只记录空间对象的位置坐标和属性数据，而不记录空间关系。</p>
<ul>
<li><p>多边形环路法：每个点线面目标分别记录其坐标。缺点：公共边被存储了两次。</p>
</li>
<li><p>点位字典法：一个文件记录点坐标对，其他一些文件记录点与线、点与面的关系。缺点：没有存储必需的拓扑关系。优点：数据结构简单，占用存储资源小，数据显示速度比拓扑数据结构快，数据维护更容易。</p>
</li>
</ul>
</li>
</ul>
<h2 id="46、拓扑数据结构"><a href="#46、拓扑数据结构" class="headerlink" title="46、拓扑数据结构"></a>46、<font color="orange">拓扑数据结构</font></h2><ul>
<li>记录空间对象的位置坐标和属性数据和空间关系，点是相互独立存储的，相互连接构成线，面由线构成，一个多边形可以由一个外环和零个或多个内环组成。</li>
</ul>
<h2 id="47、矢量数据结构"><a href="#47、矢量数据结构" class="headerlink" title="47、矢量数据结构"></a>47、<font color="orange">矢量数据结构</font></h2><ul>
<li>利用欧几里得几何学中点、线、面及其组合体来表示地理实体空间分布的一种数据组织方式，这种数据组织方式能最大的逼近地理实体的空间分布特征，数据精度高，数据存储的冗余度低，便于进行地理实体的网络分析，但对于多层空间数据的叠合分析比较困难。</li>
</ul>
<h2 id="48、栅格数据结构"><a href="#48、栅格数据结构" class="headerlink" title="48、栅格数据结构"></a>48、<font color="orange">栅格数据结构</font></h2><ul>
<li>基于栅格模型的数据结构简称位栅格数据结构，指将空间分割成有规则的网格并在各个网格上给出相应的属性值，来表示地理实体的一种数据组织方式。</li>
</ul>
<h2 id="49、矢量数据结构与栅格数据结构的优缺点"><a href="#49、矢量数据结构与栅格数据结构的优缺点" class="headerlink" title="49、矢量数据结构与栅格数据结构的优缺点"></a>49、<font color="orange">矢量数据结构与栅格数据结构的优缺点</font></h2><table>
<thead>
<tr>
<th>数据</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>矢量数据</td>
<td>1、便于面向对象<br>2、数据结构紧凑、冗余度低<br>3、有利于网络和检索分析<br>4、图形显示质量好，精度高</td>
<td>1、数据结构复杂<br>2、多边形叠加分析及邻域搜索比较困难<br>3、软硬件技术要求高，显示与绘图的成本较高</td>
</tr>
<tr>
<td>栅格数据</td>
<td>1、数据结构简单<br>2、便于空间分析与地表模拟<br>3、现势性较强<br>4、易于遥感结合及信息共享</td>
<td>1、数据量大<br>2、投影转换比较复杂<br>3、图形质量较低，图形输出不美观</td>
</tr>
</tbody></table>
<h2 id="50、DEM（数字高程模型）"><a href="#50、DEM（数字高程模型）" class="headerlink" title="50、DEM（数字高程模型）"></a>50、<font color="orange">DEM（数字高程模型）</font></h2><ul>
<li>是地面高程的数字表示，由一系列地面点的 x、y 位置及其相联系的高程 z 所组成，它以某一范围内的地形数据为基础，通过一定的数学变换，将某一地理范围内的地形地物以三维空间的形式表示在一个二维的画面上，以离散分布的平面点来模拟分布的地形。</li>
</ul>
<h3 id="50-1、规则格网模型"><a href="#50-1、规则格网模型" class="headerlink" title="50.1、规则格网模型"></a>50.1、<font color="orange">规则格网模型</font></h3><ul>
<li>规则网格将区域空间切分为规则的格网单元，每个格网单元对应一个数值，数学上可以表示为一个矩阵。可以很方便的计算等高线、坡度坡向、山坡阴影和自动提取流域地形。缺点：不能准确的表示地形的结构和细部，数据量过大，可以采用<code>哈夫曼编码无损压缩或离散余弦变换和小波变换的有损压缩</code>。</li>
</ul>
<h3 id="50-2、等高线模型"><a href="#50-2、等高线模型" class="headerlink" title="50.2、等高线模型"></a>50.2、<font color="orange">等高线模型</font></h3><ul>
<li>它表示高程，高程值的集合是已知的，每一条等高线对应一个已知的高程值。等高线通常被存储为一个有序的坐标点对序列，等高线外其他点的高程，通常<code>只使用外包的两条等高线的高程进行插值</code>。</li>
</ul>
<h3 id="50-3、TIN（不规则三角网模型）"><a href="#50-3、TIN（不规则三角网模型）" class="headerlink" title="50.3、TIN（不规则三角网模型）"></a>50.3、<font color="orange">TIN（不规则三角网模型）</font></h3><ul>
<li>根据区域<code>有限个点集</code>将区域划分为相连的<code>三角面网络</code>，区域中任意点落在三角面的顶点、边上或三角形内。如果点不在顶点上，该点的高程通常通过线性插值的方法得到（在边上用边的两个顶点的高程，在三角形内则用三个顶点的高程）。能随地形起伏变化的复杂性而改变采样点的密度和决定采样点的位置，<strong>减少了规则格网方法带来的数据冗余</strong>，同时在计算效率方面优于纯粹基于等高线的方法。缺点：数据结构较复杂，表达地形的面积较大时，效率不高。</li>
</ul>
<h3 id="50-4、Voronoi图（泰森多边形或Dirichlet图）"><a href="#50-4、Voronoi图（泰森多边形或Dirichlet图）" class="headerlink" title="50.4、Voronoi图（泰森多边形或Dirichlet图）"></a>50.4、<font color="orange">Voronoi图（泰森多边形或Dirichlet图）</font></h3><ul>
<li>它由一组连续多边形组成，多边形的边界是由连接两邻点直线的垂直平分线组成。各泰森多边形内的点离其中的离散点最近。</li>
</ul>
<h3 id="50-5、Delaunay三角形"><a href="#50-5、Delaunay三角形" class="headerlink" title="50.5、Delaunay三角形"></a>50.5、<font color="orange">Delaunay三角形</font></h3><ul>
<li>是由与相邻 Voronoi 多边形共享一条边的相关点连接而成的三角形，它的<font color="yellow">外接圆圆心是与三角形相关的Voronoi多边形的一个顶点</font>。</li>
</ul>
<h3 id="50-6、Delaunay三角网"><a href="#50-6、Delaunay三角网" class="headerlink" title="50.6、Delaunay三角网"></a>50.6、<font color="orange">Delaunay三角网</font></h3><ul>
<li>由Delaunay三角形组成的三角网，构网遵循<code>最大化最小角原则</code>，是地形拟合方面表现最出色的三角网，<strong>TIN 是三维的 Delaunay 三角网，TIN 的垂直投影就是 Delaunay 三角网</strong>，二者共有相同的拓扑结构。</li>
</ul>
<h2 id="51、DEM-的建立"><a href="#51、DEM-的建立" class="headerlink" title="51、DEM 的建立"></a>51、DEM 的建立</h2><ol>
<li>DEM 数据采集的方法<ul>
<li>地面测量</li>
<li>现有地图数字化</li>
<li>空间传感器</li>
<li>数字摄影测量方法</li>
</ul>
</li>
<li><font color="orange">数字摄影测量获取 DEM</font><ul>
<li>沿等高线采样：在地形复杂及陡峭地区，可采用沿等高线跟踪方式进行数据采集</li>
<li>规则格网采样：利用解析测图仪在立体模型中按规则矩形格网进行采样，直接构成规则格网 DEM</li>
<li>渐进采样：目的是使采样点分布合理，即平坦地区样点少，地形复杂区的样点较多</li>
<li>选择采样：为了准确反映地形，可根据地形特征进行选择采样</li>
<li>混合采样：在规则采样的基础上再进行沿特征线、点采样</li>
<li>自动化 DEM 数据采集：利用自动化测图系统进行全自动化的 DEM 数据采集</li>
</ul>
</li>
</ol>
<h2 id="52、DEM-模型之间的相互转换"><a href="#52、DEM-模型之间的相互转换" class="headerlink" title="52、DEM 模型之间的相互转换"></a>52、DEM 模型之间的相互转换</h2><ol>
<li>格网 DEM 转 TIN ：可以看作是<code>一种规则分布的采样点生成 TIN 的特例</code>，其目的是尽量减少 TIN 的顶点数目，同时尽可能多的保留地形信息。<ul>
<li>保留重要点法：通过比较计算格网点的重要性，保留重要的格网点</li>
<li>启发丢弃法：给定一个格网 DEM 和转换后 TIN 中节点的数量限制，寻求一个 TIN 与 规则格网 DEM 的最佳拟合。</li>
</ul>
</li>
<li>等高线转成格网 DEM ：使用<code>局部插值算法如距离倒数加权平均或克里金插值算法</code>，同时把等高线数据点减少到最少，增加标识山峰、山脊、谷底和坡度突变的数据点或采用针对等高线插值的专用方法</li>
<li>利用格网 DEM 提取等高线：将其中<code>每个点视为一个几何点，而不是一个矩形区域</code>，这样可以根据格网 DEM 中相邻四个点组成四边形进行等高线追踪</li>
<li>TIN 转成格网 DEM：可以看作<code>普通的不规则点生成格网 DEM 的过程</code></li>
</ol>
<h2 id="53、格网-DEM-应用"><a href="#53、格网-DEM-应用" class="headerlink" title="53、格网 DEM 应用"></a>53、格网 DEM 应用</h2><ol>
<li>地形曲面拟合：利用格网点高程拟合一个地形曲面，推求区域内任意点的高程</li>
<li>立体透视图：能更好的反映地形的立体形态，非常直观</li>
<li>通视分析：某一点为观察点，研究某一区域通视情况的地形分析</li>
<li>流域特征地貌提取与地形自动分割<ul>
<li>山脊线和山谷线的提取</li>
<li>提取汇流网络</li>
<li>提取分水网络</li>
</ul>
</li>
<li>DEM 计算地形属性<ul>
<li>坡度坡向</li>
<li>面积体积</li>
<li>表面积</li>
</ul>
</li>
</ol>
<h2 id="54、三角网-DEM-分析应用"><a href="#54、三角网-DEM-分析应用" class="headerlink" title="54、三角网 DEM 分析应用"></a>54、三角网 DEM 分析应用</h2><ol>
<li>三角网内插：在建立 TIN 后，可以有 TIN 解求该区域内任意一点的高程<ul>
<li>格网点的检索：点 p 在哪个三角形内，获取三角形的顶点</li>
<li>高程内插</li>
</ul>
</li>
<li>等高线追踪</li>
</ol>
<p><font color="cornflowerblue">八叉树：</font>是四叉树向三维空间扩展的结果，其分割和存储的方法于四叉树的原理相同。</p>
<p><font color="cornflowerblue">区域数据结构：</font>基于简单的线和面建立起来的，由区域层和区域组成。</p>
<p><font color="cornflowerblue">动态分段数据结构：</font>是图层与线性量测系统。</p>
<h1 id="地理空间数据库"><a href="#地理空间数据库" class="headerlink" title="地理空间数据库"></a>地理空间数据库</h1><blockquote>
<p>地理空间数据库，包括数据库的概念、数据库的系统结构、数据库管理系统的功能与组成、空间数据库管理系统的管理模式、地理数据库中的时间维。</p>
</blockquote>
<p><font color="cornflowerblue">数据库：</font>是为了一定的目的，在计算机系统中以特定的结构组织、存储和应用的相关联的数据集合。</p>
<h2 id="55、地理空间数据库"><a href="#55、地理空间数据库" class="headerlink" title="55、地理空间数据库"></a>55、<font color="orange">地理空间数据库</font></h2><ul>
<li>是某区域关于<strong>一定地理要素特征的数据集合</strong>，与一般数据库相比，具有以下特点：数据量特别大、具有地理空间数据和属性数据、数据结构复杂、数据应用面相当广、数据应用层次多。</li>
</ul>
<p><font color="cornflowerblue">数据库的系统结构：</font>由三个层次构成：物理级、概念级和用户级分别对应于存储模式、模式、子模式。</p>
<p><font color="cornflowerblue">数据库管理系统的功能与组成：</font>提供数据库定义功能、数据库管理功能、数据库维护功能、数据库通信功能等。</p>
<p><font color="cornflowerblue">空间数据库管理系统的管理模式：</font>空间数据库的设计实质就是将地理空间实体以一定的组织形式在数据库系统中加以表达的过程，也就是地理信息系统中空间实体数据的模型化问题。</p>
<ol>
<li>文件 - 关系型管理模式</li>
<li>扩展模式<ul>
<li>全关系型管理模式<ul>
<li>基于关系模型</li>
<li>将图形数据的变长部分处理成大二进制字段</li>
</ul>
</li>
<li>对象 - 关系型管理模式</li>
</ul>
</li>
<li>统一管理模式</li>
</ol>
<h2 id="56、GIS数据管理方法"><a href="#56、GIS数据管理方法" class="headerlink" title="56、GIS数据管理方法"></a>56、<font color="cornflowerblue">GIS数据管理方法</font></h2><ol>
<li>对不同的应用模型开发独立的数据管理服务，这是一种基于文件管理的处理方法。</li>
<li>在商业化的 DBMS 基础上开发附加系统。开发一个附加软件用于存储和管理空间数据和空间分析，使用 DBMS 管理属性数据。</li>
<li>使用现有的 DBMS，通常是以 DBMS 为核心，对系统的功能进行必要的补充，空间数据和属性数据在同一个 DBMS 管理之下。</li>
<li>重新设计一个具有空间数据和属性数据管理和分析功能的数据库系统。</li>
</ol>
<h2 id="57、时空数据库"><a href="#57、时空数据库" class="headerlink" title="57、时空数据库"></a>57、<font color="orange">时空数据库</font></h2><ul>
<li>是存储和管理随时间变化，其位置或范围也发生变化的时空对象的数据库系统，时空索引技术是时空数据库管理系统的关键技术之一。</li>
</ul>
<h2 id="58、面向对象数据库"><a href="#58、面向对象数据库" class="headerlink" title="58、面向对象数据库"></a>58、<font color="orange">面向对象数据库</font></h2><ul>
<li>无论怎样复杂的事例，都可以准确地由一个对象表示，这个对象是一个包含数据集和操作集的实体。</li>
</ul>
<h1 id="地理空间数据的获取与处理"><a href="#地理空间数据的获取与处理" class="headerlink" title="地理空间数据的获取与处理"></a>地理空间数据的获取与处理</h1><blockquote>
<p>地理空间数据获取，包括数据源的种类、数据采集的方法，遥感影像处理。</p>
</blockquote>
<h2 id="59、数据源的种类"><a href="#59、数据源的种类" class="headerlink" title="59、数据源的种类"></a>59、<font color="orange">数据源的种类</font></h2><ul>
<li>地图数据</li>
<li>遥感数据（影像数据）</li>
<li>文本资料</li>
<li>统计资料</li>
<li>实测数据</li>
<li>多媒体数据</li>
<li>已有系统的数据</li>
</ul>
<p><font color="cornflowerblue">数据采集的方法：</font>空间数据采集的任务是将现有的地图、外业观测结果、航空像片、遥感影像、文本资料等转换成 GIS 可以处理与接受的数字形式，通常要经过验证、修改、编辑等处理。</p>
<ol>
<li>图形数据的手扶跟踪数字化输入</li>
<li>空间数据的扫描仪输入</li>
</ol>
<h2 id="60、遥感影像处理"><a href="#60、遥感影像处理" class="headerlink" title="60、遥感影像处理"></a>60、<font color="orange">遥感影像处理</font></h2><ul>
<li>确定数据源所属卫星类型，确定坐标系后对影像数据做判断是否进行<code>辐射校正</code>去校正辐射畸变，方法有<font color="orange">直方图最小值去除法</font>、<font color="orange">回归分析法</font>，<code>几何校正</code>去校正像元大小与地面大小对应不准确的问题，方法有<font color="orange">最近邻法、双线性内插法、三次卷积内插法</font>。若需要突出某一部分信息，可进行<code>数字图像增强</code>，方法有<code>对比度变换、空间滤波、彩色变换、图像运算、多光谱变换</code>。缺少信息可考虑与其它遥感信息或非遥感信息进行<code>复合</code>。</li>
</ul>
<h2 id="61、遥感图像的分类"><a href="#61、遥感图像的分类" class="headerlink" title="61、遥感图像的分类"></a>61、<font color="orange">遥感图像的分类</font></h2><ol>
<li><p>监督分类：首先需要<code>从研究区域选取有代表性的训练场地作为样本</code>，根据已知训练区提供的样本，通过选择特征参数，建立判别函数，据此对样本像元进行分类，依据样本类别的特征来识别非样本像元的归属类别。</p>
<ul>
<li>最小距离分类法：以特征空间中的距离作为像素分类的依据，包括最小距离法和最近邻域分类法</li>
<li>多级切割分类法：通过设定在各轴上的一系列分割点，将多维特征空间划分成分别对应不同分类类别的互不重叠的特征子空间的分类方法。</li>
<li>特征曲线窗口法：以特征曲线为中心，取一个条带，构造一个窗口，凡是落在此窗口范围内的地物即被认为是一类，反之，则不属于该类。</li>
<li><font color="orange">最大似然比分类法：</font>求出每个像素对于各类别的归属概率，把该像素分到归属概率最大的类别中去的方法。</li>
</ul>
</li>
<li><p>非监督分类：<code>事先不知道类别特征，主要根据像元间相似度的大小进行归类合并的方法。</code></p>
<ul>
<li>分级集群法：采用“距离”评价每个像元在空间分布的相似程度，把它们的分布分割或者合并成不同的集群。</li>
<li>动态聚类法：在初始状态给出图像粗糙的分类，然后基于一定原则在类别间重新组合样本，直到分类比较合理为止（类似机器学习）。</li>
</ul>
<p><strong>当两个地物类型对应的光谱特征类差异很小时，非监督分类的效果不如监督分类的效果好。</strong></p>
</li>
<li><p>基于对象的分类</p>
</li>
<li><p>决策树分类</p>
</li>
</ol>
<h1 id="空间数据的编辑"><a href="#空间数据的编辑" class="headerlink" title="空间数据的编辑"></a>空间数据的编辑</h1><blockquote>
<p>空间数据的编辑，包括图形数据的编辑、图形数据的几何纠正、图幅的拼接、网络特征元素的编辑、文本数据的编辑。</p>
</blockquote>
<p><font color="cornflowerblue">图形数据编辑：</font></p>
<ol>
<li>结点的编辑</li>
<li>线（弧）的编辑</li>
<li>多边形编辑</li>
</ol>
<h2 id="62、坐标几何变换"><a href="#62、坐标几何变换" class="headerlink" title="62、坐标几何变换"></a>62、<font color="cornflowerblue">坐标几何变换</font></h2><ul>
<li>纠正坐标变形或把数字化扫描仪坐标、扫描影像坐标变换到投影坐标系，或两种不同的投影坐标系之间进行变换时，需要进行相应的坐标系统变换的过程。</li>
</ul>
<h2 id="63、图形数据的几何纠正"><a href="#63、图形数据的几何纠正" class="headerlink" title="63、图形数据的几何纠正"></a>63、<font color="cornflowerblue">图形数据的几何纠正</font></h2><ol>
<li>相似变换：主要解决两个坐标系统之间的变换，至少需要对应坐标系的两个对应控制点，计算四个变换参数。</li>
<li><font color="orange">仿射变换</font>：存在坐标在x，y 方向的比例因子不一致，至少需要对应坐标系的三个对应控制点，计算六个变换参数。</li>
<li>透视变换：图形存在透视变形，至少需要对应坐标系的五个对应控制点，计算十个变换参数。</li>
</ol>
<p><font color="cornflowerblue">图幅的拼接：</font>为了建立无缝图层，需要将分幅数字化的地图进行合并，使它在空间上是连续的。</p>
<p><font color="cornflowerblue">消除几何裂缝的方法：</font>对接合处不能很好吻合的图形，通过移动结点或结点粘合的方法使之在空间位置上取得一致。一般是以其中的一副地图作为参考，移动另一幅图上的目标。如果差距较大，各自移动一半。完成几何接边后，还要检查属性赋值是否一致。若不一致，则需要改正过来。最后根据软件提供的功能，实现图幅的合并。</p>
<p><font color="cornflowerblue">网络特征元素的编辑：</font></p>
<ol>
<li>简单边界的连接</li>
<li>复杂边界的连接</li>
<li>复杂的连接点</li>
<li>流向定义</li>
<li>网络其他属性定义</li>
</ol>
<h2 id="64、网络模型"><a href="#64、网络模型" class="headerlink" title="64、网络模型"></a>64、<font color="orange">网络模型</font></h2><ul>
<li>地物被抽象为链、节点等对象，同时要关注其间连通关系。最<code>基本的特征是需要多个要素之间的影响和交互</code>，具体现象之间距离或阻力的度量，节点数据间没有明确的从属关系，一个结点可与其他多个 结点建立联系。</li>
</ul>
<h1 id="空间数据的处理方法"><a href="#空间数据的处理方法" class="headerlink" title="空间数据的处理方法"></a>空间数据的处理方法</h1><blockquote>
<p>空间数据的处理方法，包括图形屏幕编辑的基本操作算法、空间数据的拓扑关系自动生成、空间数据的压缩编码方法、空间数据的格式转换、矢量数据和栅格数据的转换。</p>
</blockquote>
<h2 id="65、图形屏幕编辑的基本操作算法"><a href="#65、图形屏幕编辑的基本操作算法" class="headerlink" title="65、图形屏幕编辑的基本操作算法"></a>65、<font color="orange">图形屏幕编辑的基本操作算法</font></h2><ol>
<li>点的捕捉算法：光标点 S 设一捕捉半径 D，点 A 与 S 的距离 d 小于 D 则捕获成功。</li>
<li>线的捕捉算法：通过计算坐标点 S 到线的每个线段的距离 d<del>i</del>，若 min（d<del>1</del>,d<del>2</del>,…,d<del>n-1</del>) &lt; D 则认为光标 S 捕捉到了该条线，否则未捕捉到。</li>
<li>面的捕捉算法：判断光标点 S 是否在多边形内<ul>
<li><font color="orange">垂线法</font>：从光标点引垂线，计算与多边形的交点个数，若交点个数为奇数，则说明该点在多边形内，若交点个数为偶数，则该点在多边形外。</li>
<li>转角法</li>
</ul>
</li>
</ol>
<p><font color="cornflowerblue">地理编码：</font>是为识别点、线、面的位置和属性而设置的编码，它将全部实体按照预先拟定的分类系统，选择最适宜的量化方法，按实体的属性特征和集合坐标的数据结构记录在计算机的存储设备上</p>
<h2 id="66、空间数据编码"><a href="#66、空间数据编码" class="headerlink" title="66、空间数据编码"></a>66、<font color="cornflowerblue">空间数据编码</font></h2><ul>
<li>是将数据分类的结果用一种易于被计算机和人识别的符号系统表示出来的过程，编码的目的是用来提供空间数据的地理分类和特征描述，同时为了便于地理要素的输入、存储、管理以及系统之间数据交换和共享的需要。</li>
</ul>
<h2 id="67、扫描矢量化"><a href="#67、扫描矢量化" class="headerlink" title="67、扫描矢量化"></a>67、<font color="cornflowerblue">扫描矢量化</font></h2><ul>
<li>在扫描后处理中，需要进行栅格转矢量的运算，一般称为扫描矢量化过程，扫描数字化采用高精度扫描仪将图形、图像等扫描并形成栅格数据文件，再利用扫描矢量化软件对栅格数据文件进行处理，将它转换为矢量图形数据。</li>
</ul>
<h2 id="68、DIME文件"><a href="#68、DIME文件" class="headerlink" title="68、DIME文件"></a>68、<font color="orange">DIME文件</font></h2><ul>
<li>双重独立地图编码，是一种把几何量度信息（直角坐标）和拓扑逻辑信息结合起来的系统。</li>
</ul>
<h2 id="69、拓扑关系的建立"><a href="#69、拓扑关系的建立" class="headerlink" title="69、拓扑关系的建立"></a>69、<font color="orange">拓扑关系的建立</font></h2><ul>
<li><p>建立拓扑关系时，只需要关注实体之间的连接和相邻关系。使用 DIME 或者其他类似编码模型，需要描述一下实体之间的关系：</p>
<ul>
<li><p>多边形的组成弧段</p>
</li>
<li><p>弧段左右两侧的多边形，弧段两端的节点</p>
</li>
<li><p>节点相连的弧段</p>
<ol>
<li>多边形：记录 弧段1、弧段2、… 弧段n</li>
<li>弧段文件：记录 起点 -&gt; 终点 ，弧段左右多边形 </li>
<li>节点文件：节点 弧段1、弧段2、… 弧段n</li>
<li>弧段坐标文件：（x1，y1）、（x2，y2）…,（xn，yn）</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="70、空间数据的压缩编码方法"><a href="#70、空间数据的压缩编码方法" class="headerlink" title="70、空间数据的压缩编码方法"></a>70、<font color="orange">空间数据的压缩编码方法</font></h2><ol>
<li><p><font color="orange">矢量数据压缩：</font></p>
<ul>
<li><p><font color="orange">曲线离散化算法，道格拉斯—皮克算法（Douglas—Peucker）：</font></p>
<ol>
<li>在曲线首尾两点 A、B 之间连接一条直线段 AB，该直线称为曲线的弦。</li>
<li>得到曲线上离该直线段距离最大的点 C，并计算其与 AB 的距离 d。</li>
<li>比较该距离与预先给点阈值 ε 的大小，如果小于 ε，则将该直线段作为曲线的近似，该曲线段处理完毕。</li>
<li>如果距离大于阈值，则用 C 将曲线分为两段 AC 和 BC，并分别对两线段曲线进行 1 ~ 3 步处理。</li>
<li>当所有曲线都处理完毕之后，依次连接各个分割点形成的折线，即可作为该曲线的近似。</li>
</ol>
</li>
<li><p>垂距法：</p>
<p>按顺序取曲线上的三个点，计算中间点与其它两点连线的垂线距离 d 并与限差 D 比较，若 d &lt; D，则中间点去掉。若 d&gt;&#x3D; D则中间点保留，然后顺序取下三个点，继续处理直到这条线结束。</p>
</li>
<li><p>光栏法：</p>
<p>定义一个扇形区域，通过判断曲线上的点在扇形外还是扇形内，确定保留还是舍去。</p>
</li>
</ul>
</li>
<li><p><font color="orange">栅格数据的编码方法：</font></p>
<ol>
<li><font color="orange">直接栅格编码</font>：将栅格数据看作一个数据矩阵，逐行（逐列）逐个记录代码。有行（从左到右记录）、行主序（奇数行从左到右，偶数行从右到左）、Morron、Peano-Hilbert、对角线、螺旋。</li>
<li>链码：又称为弗里曼编码或边界链码，可以有效的压缩栅格数据，比较适合于存储图形数据，缺点：对边界进行合并和插入等修改编辑工作比较困难，对局部的修改将改变整体结构，效率较低，而且相邻边界被重复存储而产生数据冗余。</li>
<li><font color="orange">游程长度编码</font>：<code>记录重复出现的内容，是逐行或逐列将相邻同值的网格合并并记录合并后的网格的值及合并网格的长度</code>，其目的是压缩栅格数据量，消除数据间的冗余。压缩效率较高，且易于检索、叠加合并等操作，运算简单，适用于及其存储容量较小，数据需大量压缩，而又要避免复杂的编码解码运算增加处理和操作的时间的情况。</li>
<li>块码：是游程长度编码扩展到二维的情况，采用方形区域作为记录单元，每个记录单元包括相邻的若干栅格，栅格结构由初始位置（行、列号）和半径，再加上记录单位的代码组成。具有可变的分辨率，在合并、插入、检查延伸性、计算面积等操作有明显的优越性。</li>
<li><font color="orange">四叉树</font><ul>
<li>是最有效的栅格数据压缩编码的方法之一，四叉树将整个图像区逐步分解为一系列被单一类型区域内含的方形区域，最小的方形区域为一个栅格像元，分割的原则是，<code>将图像区域划分为四个大小相等的象限，每个象限又可以根据一定的规则判断是否继续等分为次一层的四个象限，其终止的依据是，不管是哪一层上的象限，只要划分到仅代表一种或符合既定要求的少数几种地物时，则不在继续划分，否则一直划分到单个栅格像元为止</code>。要求图像必须为 2^n^ × 2^n^ 的栅格阵列，n为极限分割数，n + 1 为四叉树的最大高度和最大层数，对于非标准尺寸的图像需首先通过增加背景的方法将图像扩充为 2^n^ × 2^n^ 的图像。四叉树编码具有可变的分辨率，并且有区域性质，压缩数据灵活。</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="71、空间数据的格式转"><a href="#71、空间数据的格式转" class="headerlink" title="71、空间数据的格式转"></a>71、<font color="cornflowerblue">空间数据的格式转</font></h2><ol>
<li>数据格式转换的内容<ul>
<li>空间定位信息，即几何信息，主要是实体的坐标</li>
<li>空间关系信息，几何实体之间的拓扑或几何关系数据</li>
<li>属性信息，几何实体的属性说明数据</li>
</ul>
</li>
<li>数据格式转换的方式<ul>
<li>通过外部数据交换文件进行</li>
<li>通过标准空间数据文件转换</li>
<li>通过标准的 API 函数进行转换</li>
</ul>
</li>
</ol>
<h2 id="72、矢量数据和栅格数据的转换"><a href="#72、矢量数据和栅格数据的转换" class="headerlink" title="72、矢量数据和栅格数据的转换"></a>72、<font color="orange">矢量数据和栅格数据的转换</font></h2><ol>
<li><p><font color="orange">矢 - 栅转换：</font></p>
<ul>
<li><p>线的栅格化：</p>
<ul>
<li><p>DDA 法（数字微分分析法）</p>
<p>基本依据是直线的微分方程，即 dy&#x2F;dx &#x3D; 常数，其本质是用数值方法解微分方程，通过同时对 x 和 y 各增加一个小增量来计算下一步的 x，y 值，即这是一种增量算法。</p>
</li>
<li><p>Bresenham 算法</p>
<p>根据直线的斜率，把直线分为 8 个卦限，根据由直线斜率构成的误差项的符号，就可确定下一列坐标的递增值。</p>
</li>
</ul>
</li>
<li><p>面的栅格化：</p>
<ul>
<li><p>内部点扩散法</p>
<p>由一个内部的种子点，向其 4 个方向的邻点扩散。判断新加入的点是否在多边形边界上，如果是，不作为种子点，否则当做新的种子点，直到区域填满，无种子点时为止。</p>
</li>
<li><p>复数积分算法</p>
<p>对全部的栅格阵列逐个栅格单元地判断该栅格归属的多边形编码，判别方法是由待判点对每个多边形的封闭边界计算复数积分。</p>
</li>
<li><p>射线算法和扫描算法</p>
<p>射线算法可逐点判断数据栅格点在某多边形之外或在多边形内，由待判点向图外某点引射线，判断该射线与某多边形所有边界相交的总次数。</p>
<p>扫描算法是射线算法的改进，将射线改为沿栅格阵列或行方向扫描线。</p>
</li>
<li><p><font color="orange">边界代数算法</font></p>
<p>是一种基于积分思想的矢量格式向栅格格式的转换算法，适合于记录拓扑关系的多边形矢量数据转换为栅格数据。</p>
<p>它不是逐点判断与边界的关系完成转换，而是<code>根据边界的拓扑信息，通过简单的加减代数运算，将边界位置信息动态地赋给各栅格点</code>，实现了矢量格式到栅格格式的高速转换，而不需要考虑边界与搜索轨迹之间的关系，各边界弧段只被搜索一次，避免了重复计算。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><font color="orange">栅 - 矢 转换：</font></p>
<p>是提取以相同的编号的栅格集合表示的多边形区域的边界和边界的拓扑关系，并表示由多个小直线段组成的矢量格式边界线的过程。</p>
<p>四个基本步骤：</p>
<ul>
<li>多边形边界提取</li>
<li>边界线追踪</li>
<li>拓扑关系生成</li>
<li>去除多余点及曲线圆滑</li>
</ul>
<p>双边界搜索算法：</p>
<p>​	通过边界提取，将左右多边形信息保存在边界点上，每条边界弧段由两个并行的边界链组成，分别记录该边界弧段的左右多边形	编号。</p>
<ul>
<li>边界点与结点提取</li>
<li>边界搜索与左右多边形信息记录</li>
<li>多余点去除</li>
</ul>
</li>
</ol>
<h1 id="地理空间数据的质量"><a href="#地理空间数据的质量" class="headerlink" title="地理空间数据的质量"></a>地理空间数据的质量</h1><blockquote>
<p>地理空间数据的质量，包括GIS数据质量的概念、GIS数据质量的研究方法、空间数据的不确定性。</p>
</blockquote>
<h2 id="73、GIS数据质量"><a href="#73、GIS数据质量" class="headerlink" title="73、GIS数据质量"></a>73、<font color="orange">GIS数据质量</font></h2><ul>
<li>是指 GIS 中空间数据（几何数据 和 属性数据）在表达空间位置、属性和时间特征时所能达到的<code>准确性、一致性、完整性</code>以及三者统一的程度。</li>
</ul>
<p><font color="cornflowerblue">正演问题：</font>当 GIS 录入数据的误差和各种操作中引入的误差已知时，计算 GIS 最终生成产品的误差大小的过程</p>
<p><font color="cornflowerblue">反演问题：</font>根据用户对 GIS 产品所提出的误差限值要求，确定 GIS 录入数据的质量</p>
<h2 id="74、GIS-数据质量的基本内容"><a href="#74、GIS-数据质量的基本内容" class="headerlink" title="74、GIS 数据质量的基本内容"></a>74、<font color="orange">GIS 数据质量的基本内容</font></h2><ol>
<li>准确度：用来定义地理实体位置、时间和属性的量测值与真值之间的接近程度。与误差的定义相反</li>
<li>精度：定义为空间数据表达的精确程度或精细程度。包括位置精度、时间精度和属性精度</li>
<li>逻辑一致性：指数据库中没有存在明显的矛盾</li>
<li>完备性：指数据库对所描述的客观世界对象的遗漏误差。</li>
<li>现势性：如数据的采集时间、数据的更新时间</li>
</ol>
<p><font color="cornflowerblue">空间数据的误差类型：</font></p>
<ol>
<li>源误差：指数据采集和录入中产生的误差</li>
<li>处理误差：GIS 对空间数据进行处理时产生的误差</li>
<li>误差传播：对有误差的数据，经过处理生成的 GIS 产品也存在着误差</li>
</ol>
<p><font color="cornflowerblue">GIS 数据质量问题的检查方法：</font></p>
<ol>
<li>直接评价法<ul>
<li>用计算机程序自动检测</li>
<li>随机抽样检测</li>
</ul>
</li>
<li>间接评价法：通过外部知识或信息进行推理来确定空间数据的质量的方法</li>
<li>非定量描述法：通过对数据质量的各组成部分的评价结果进行的综合分析来确定数据的总体质量的方法</li>
</ol>
<h2 id="75、研究-GIS-数据质量的常用方法"><a href="#75、研究-GIS-数据质量的常用方法" class="headerlink" title="75、研究 GIS 数据质量的常用方法"></a>75、<font color="orange">研究 GIS 数据质量的常用方法</font></h2><ol>
<li>敏感度分析法：人为地在输入数据中加上扰动值来检验输出结果对这些扰动值的敏感程度</li>
<li>尺度不变空间分析法：地理数据的分析结果应与所采用的空间坐标系统无关</li>
<li>Monte Carlo 实验仿真：根据经验对数据误差的种类和分布模式进行假设，然后利用计算机进行模拟实验，将所得结果与实际结果进行比较，找出与实际结果最接近的模型。</li>
<li><font color="orange">空间滤波</font>：<ul>
<li>高通滤波：从含有噪声的数据中分离出噪声信息</li>
<li>低通滤波：从含有噪声的数据中提取信号</li>
</ul>
</li>
</ol>
<h2 id="76、空间数据的不确定性"><a href="#76、空间数据的不确定性" class="headerlink" title="76、空间数据的不确定性"></a>76、<font color="orange">空间数据的不确定性</font></h2><ul>
<li>不确定性是指在空间、时间和属性方面，所表现的某些特性不能被数据收集者或使用者准确确定的特性。不确定性最本质的问题在于如何定义被检验的对象类和单个对象，即问题的定义。</li>
</ul>
<h2 id="77、空间数据质量问题的来源"><a href="#77、空间数据质量问题的来源" class="headerlink" title="77、空间数据质量问题的来源"></a>77、<font color="orange">空间数据质量问题的来源</font></h2><ul>
<li><p><code>空间现象自身存在的不稳定性</code></p>
<p>包括空间特征和过程在空间、专题和时间内容上的不确定性</p>
</li>
<li><p>空间现象的表达</p>
<p>数据采集中的测量方法和量测精度的选择等受到人类自身的认识和表达的影响</p>
</li>
<li><p>空间数据处理中的误差</p>
<p>投影转换、数据格式转换等操作中产生</p>
</li>
<li><p>空间数据使用中的误差</p>
<p>对数据的理解和缺少文档</p>
</li>
</ul>
<h2 id="78、空间数据质量控制"><a href="#78、空间数据质量控制" class="headerlink" title="78、空间数据质量控制"></a>78、<font color="orange">空间数据质量控制</font></h2><ol>
<li>传统的手工方法：将数字化数据与数据源进行比较</li>
<li><font color="orange">元数据方法</font>：元数据中记录了有关数据质量的信息</li>
<li>地理相关法：用空间数据的地理特征要素自身的相关性来分析数据的质量</li>
</ol>
<h1 id="空间分析基本原理和方法"><a href="#空间分析基本原理和方法" class="headerlink" title="空间分析基本原理和方法"></a>空间分析基本原理和方法</h1><blockquote>
<p>空间数据分析的计算模型，包括关于分析计算模型的一般知识、GIS的空间计算模型。</p>
</blockquote>
<p><font color="cornflowerblue">分析计算模型的一般知识：</font>模型将系统的各个要素，通过适当的筛选，用一定的表现规则所描述出来的简明映像，是对客观地理世界的某一客观事务的抽象和概括。</p>
<p><font color="cornflowerblue">GIS 空间计算模型：</font>是在 GIS 空间数据基础上建立起来的模型，是对现实世界科学体系问题域抽象的空间概念模型，和广义的模型概念既有区别，又相互联系。</p>
<h1 id="空间查询与统计方法"><a href="#空间查询与统计方法" class="headerlink" title="空间查询与统计方法"></a>空间查询与统计方法</h1><blockquote>
<p>空间查询与统计方法，包括GIS常用的空间统计分析模型、空间数据的查询、属性数据的查询统计。</p>
</blockquote>
<p><font color="cornflowerblue">GIS常用的空间统计分析模型：</font></p>
<ol>
<li><p>相关分析模型：用来分析研究各种地理要素数据之间相互关系的一种有效手段</p>
<ul>
<li>简单线性相关分析</li>
<li>多要素相关模型</li>
<li>复相关系数模型</li>
</ul>
</li>
<li><p>趋势面模型：研究某种现象的空间分布特征与变化规律，这种现象在空间都具有复杂的分布特征，常呈现为不规则的曲面                                                                                                                                                                                                           </p>
<p>趋势面分析，是用一个多项式对地理现象的空间分布特征进行分析，用该多显示</p>
</li>
<li><p>预测模型：常用于判断结果随原因的变化而变化的方向和程度，用于推断随时间发生变化的大小</p>
</li>
<li><p>聚类模型：根据多种地学要素对地理实体进行划分类别的方法</p>
</li>
</ol>
<p><font color="cornflowerblue">空间数据的查询：</font>查询属于数据库的范畴，一般定义为作用在库体上的函数，它返回满足条件的内容。查询是用户与数据库交流的途径。</p>
<p><font color="cornflowerblue">属性数据的查询统计：</font></p>
<ul>
<li>频数</li>
<li>平均数</li>
<li>数学期望</li>
<li>中数</li>
<li>众数</li>
<li>极差</li>
<li>离差、平均离差与离差平方和</li>
<li>方差与标准差</li>
<li>变差系数</li>
</ul>
<h1 id="空间分析方法"><a href="#空间分析方法" class="headerlink" title="空间分析方法"></a>空间分析方法</h1><blockquote>
<p>空间分析方法，包括栅格数据分析的基本模式、矢量数据分析的基本方法、网络分析应用、基于地形的空间分析。</p>
</blockquote>
<h2 id="79、栅格数据分析的基本模式"><a href="#79、栅格数据分析的基本模式" class="headerlink" title="79、栅格数据分析的基本模式"></a>79、<font color="cornflowerblue">栅格数据分析的基本模式</font></h2><ul>
<li>聚类分析：根据设定的条件，对原有数据系统进行有选择的信息提取而建立新的栅格数据系统的方法</li>
<li>聚合分析：根据空间分辨率和分类表，进行数据类型的合并或转换，以实现空间地狱的兼并</li>
<li>栅格数据的信息复合分析：<ul>
<li>视觉信息复合：将不同专题内容进行叠加显示</li>
<li>叠加分类：叠加产生新的数据图层</li>
</ul>
</li>
<li>栅格数据的追踪分析：对于特定的栅格数据系统，由一个或多个起点，按照一定的追踪线索进行追踪目标的空间分析方法。</li>
<li>栅格数据的窗口分析：在一个固定的分析窗口，对数据进行的极值、均值等计算。</li>
</ul>
<h2 id="80、矢量数据分析的基本方法"><a href="#80、矢量数据分析的基本方法" class="headerlink" title="80、矢量数据分析的基本方法"></a>80、矢量数据分析的基本方法</h2><ul>
<li>拓扑叠加分析：将同一地区两个不同图层的特征相叠加，不仅建立新的空间特征，而且能将输入的特征属性予以合并，易于进行多条件的查询检索、地图裁剪、地图更新和应用模型分析</li>
<li><font color="orange">缓冲区分析</font><ul>
<li><font color="orange">缓冲区</font>：指在点、线、面实体的周围，自动建立的一定宽度的多边形区域或带状区域，用以确定不同地理要素的空间接近度或临近性。</li>
<li><font color="cornflowerblue">缓冲区的建立</font>：点的缓冲区建立只需要给定半径绘圆，面的缓冲区只朝一个方向，线的缓冲区需在线的左右配置。建立线缓冲区就是生成缓冲区多边形，可以用角平分线法和凸角圆弧法解决双线问题</li>
<li>缓冲区查询：在不破坏原有空间对象的关系，只是用缓冲区的方法建立数据查询的范围，并检索得到落入缓冲区内的对象的过程</li>
<li><font color="orange">缓冲区分析</font>：利用建立的缓冲区作为一个输入图层，并与将要进行缓冲区分析的图层进行叠置分析得到所需的结果的过程</li>
</ul>
</li>
<li>数字地形分析：坡度、坡向、地表粗糙度、山谷线、山脊线、日照强度、库容量、表面积、立体图、剖面图和通视分析等</li>
<li>空间集合分析：对两个逻辑子集按给定的条件进行布尔逻辑运算</li>
<li>包含分析：判断某个地理要素、实体是否位于另一地理实体范围之内</li>
<li>多边形叠置分析：<ul>
<li>点与多边形的叠置：判断点是否在多边形内</li>
<li>线与多边形的叠置：判断线是否在多边形内</li>
<li>多边形与多边形的叠置：指不同图幅或不同图层多边形要素之间的叠置，分为合成叠置和统计叠置</li>
</ul>
</li>
</ul>
<h2 id="81、网络分析应用"><a href="#81、网络分析应用" class="headerlink" title="81、网络分析应用"></a>81、网络分析应用</h2><ul>
<li><p>路径分析：在最短路径选择中，两点之间的距离可以定义为实际的距离，也可定义为两点间的时间、运费、流量等。可定义使用这条边所需付出的代价。</p>
<ul>
<li><p><font color="orange">狄克斯特拉（Dijkstra）算法</font>：把图的一页顶点分为 S，T 两类，若起始点 u 到某顶点 x 的最短通路已求出，则将 x 归入 S，其余归入 T，开始时 S 中只有 u，随着程序运行，T 的元素逐个转入 S，直到目标顶点 v 转入后结束。取起始点到当前点和目标点与上一结点 + 上一结点到起始点的距离</p>
</li>
<li><p><font color="orange">最小生成树</font>：生成树是图的极小连通子图，设 T 为图 G 的一个生成树，在 G 的所有生成树中，权数最小的生成树称为 G 的最小生成树</p>
<p><font color="orange">克罗斯克尔（Kruskal、避圈法）算法</font>：设图 G 是由 m 个节点构成的连通赋权图</p>
<ol>
<li>先把图 G 中的各边按权数从小到大重新排列，并取权数最小的一条边为 T 中的边。</li>
<li>在剩下的边中，按顺序取下一条边。若该边与 T 中已有的边构成回路，则舍去该边，否则选进 T 中。</li>
<li>重复 步骤 2，直到有 m - 1 条边被选进 T 中，这 m - 1 条边就是 G 的最小生成树。</li>
</ol>
</li>
<li><p>最小费用最大流量</p>
<p>在一个地理网络中，怎样安排网上的流，使从发点到收点的流量最大或是运送流的费用或代价最小。</p>
</li>
<li><p>P 中心的定位与分配问题</p>
<p>在 m 个候选点中选择 p 个供应点为 n 个需求点服务，使得为这几个需求点服务的总距离（或时间或费用）为最少。</p>
</li>
</ul>
</li>
</ul>
<h2 id="82、基于地形的空间分析"><a href="#82、基于地形的空间分析" class="headerlink" title="82、基于地形的空间分析"></a>82、基于地形的空间分析</h2><ul>
<li>DEM 分析的内容：比例尺分析、地形参数分析和地形特征分析</li>
<li>地形分析的方法<ul>
<li>坡度和坡向<ul>
<li>坡度：地面特征区域高度变化比率的度量</li>
<li>坡向：斜坡方向的度量</li>
</ul>
</li>
<li>表面曲率计算：水文学应用中，曲率确定一个单元位置的表面是凸面或凹面</li>
<li>视域分析：是确定从观察点是否可看见给定目标的运算</li>
<li>垂直剖面算法：表示高度沿一条线上的变化</li>
<li>土方计算：即计算模型的空间体积，一般指地形表面与某一高程基准平面之间的空间体积</li>
</ul>
</li>
</ul>
<h2 id="83、空间分析"><a href="#83、空间分析" class="headerlink" title="83、空间分析"></a>83、<font color="orange">空间分析</font></h2><ol>
<li><p>空间查询与量算</p>
<ul>
<li>空间查询<ul>
<li>按属性信息的要求来查询定位空间位置</li>
<li>根据对象的空间位置查询有关属性信息</li>
</ul>
</li>
<li>空间量算<ul>
<li>几何量算</li>
<li>形状量算</li>
<li>质心量算</li>
<li>距离量算</li>
</ul>
</li>
</ul>
</li>
<li><p>空间变换：对原始图层及其属性进行一系列的逻辑或代数运算，以产生新的具有特殊意义的地理图层及其属性的过程</p>
<ul>
<li>单点变换：只考虑单个点的属性值进行运算</li>
<li>邻域变换：在计算新图层图元值时，不仅考虑原始图层上相应图元本身的值，而且还要考虑与该图元有邻域关联的其他图元值的影响</li>
<li>区域变换：计算新图层属性值时，要考虑整个区域的属性值</li>
</ul>
</li>
<li><p>再分类：对原始数据进行再次分类组织</p>
</li>
<li><p><font color="orange">缓冲区分析</font>：指根据分析对象的点、线、面实体自动建立它们周围一定距离的带状区域，用以识别这些实体或主体对邻近对象的辐射范围，以便为某项分析或决策提供依据</p>
<p>缓冲区计算的基本问题是双线问题，可由角平分线法和凸角圆弧法解决</p>
</li>
<li><p>叠加分析：有关主题层组成的数据层面，进行叠加产生一个新数据层面的操作，其结果综合了原来两层或多层要素所具有的属性</p>
<ul>
<li>视觉信息叠加</li>
<li>点与多边形叠加：多边形对点的包含关系</li>
<li>线与多边形的叠加：线是否落在多边形内</li>
<li>多边形叠加：两个或多个多边形图层进行叠加产生一个新多边形图层的操作，其结果将原来多边形要素分割成新要素，新要素综合了原来两层或多层的属性</li>
<li>栅格图层叠加<ul>
<li>基于常数对数据层面进行的代数运算</li>
<li>基于数学变换对数据层面进行的数学变换</li>
<li>多个数据层面的代数运算和逻辑运算</li>
</ul>
</li>
</ul>
</li>
<li><p>网络分析</p>
<ul>
<li>网络数据结构<ul>
<li>链</li>
<li>结点<ul>
<li>障碍</li>
<li>拐点</li>
<li>中心</li>
<li>站点</li>
</ul>
</li>
</ul>
</li>
<li>路径分析<ul>
<li>静态求最佳路径</li>
<li>N 条最佳路径分析</li>
<li>最短路径或最低耗费路径</li>
<li>动态最佳路径分析</li>
</ul>
</li>
<li>Dijkstra 算法</li>
<li>资源分配</li>
</ul>
</li>
<li><p><font color="orange">空间插值</font></p>
<ol>
<li><p><font color="orange">空间插值的概念和理论</font>：</p>
<p>离散的测量数据转换为连续的数据曲面，以便于其他空间现象的分布模式进行比较，它包括了空间内插和外推的两种算法。<code>空间内插算法</code>：一种通过已知点的数据推求同一区域其他未知点数据的计算方法。<code>空间外推算法</code>：通过已知区域的数据，推求其他区域数据的方法。</p>
<p><font color="orange">必须做空间插值的情况：</font></p>
<ol>
<li>现有离散曲面的分辨率、像元大小或方向与所要求的不符，需要重新插值</li>
<li>现有的连续曲面的数据模型与所需的数据模型不符，需要重新插值</li>
<li>现有的数据不能完全覆盖所要求的区域范围，需要插值</li>
</ol>
</li>
<li><p>空间插值的数据源</p>
<ol>
<li><p>摄影测量得到的正射航片或卫星影像</p>
</li>
<li><p>卫星或航天飞机的扫描影像</p>
</li>
<li><p>野外测量采样数据，采样点随机分布或有规律的线性分布</p>
</li>
<li><p>数字化的多边形图、等值线图</p>
<p>空间采样点分布：</p>
<ul>
<li>规则采样</li>
<li>随机采样</li>
<li>断面采样：河流、山坡剖面的测量</li>
<li>成层随机采样：规则采样与随机采样的结合</li>
<li>聚焦采样：用于分析不同尺度的空间变化</li>
<li>等值线分析：数字化等高线图插值数字高程模型</li>
</ul>
</li>
</ol>
</li>
<li><p><font color="orange">空间插值的方法</font></p>
<ul>
<li>整体插值方法：用研究区所有采样点的数据进行全区特征拟合，通常不直接用于空间插值，而是用来检测不同于总趋势的最大偏离部分，在去除了宏观地物特征后，可用剩余残差来进行局部插值</li>
<li>局部插值方法：用临近的数据点来估计未知点的值，能弥补整体插值方法造成的信息丢失的缺陷，可用于局部异常值，而不受插值表面上其他点的内插值影响</li>
</ul>
<ol>
<li><p>整体插值方法：</p>
<ul>
<li>边界内插方法：假设任何重要的变化发生在边界上，边界内的变化是均匀的，同质的，即在各方向都是相同的</li>
<li>趋势面分析：先用已知采样点数据拟合出一个平滑的数学平面方程，再根据该方程计算无测量值的点上的数据</li>
<li>变换函数插值：根据一个或多个空间参量的经验方程进行整体空间插值。</li>
</ul>
</li>
<li><p>局部插值方法：只使用邻近的数据点来估计未知点的值，包括几个步骤</p>
<ul>
<li>定义一个邻域或搜索范围</li>
<li>搜索落在此邻域范围的数据点</li>
<li>选择表达这有限个点的空间变化的数学函数</li>
<li>为落在规则格网单元上的数据点赋值</li>
</ul>
<p>1）<font color="orange">最近邻点法——泰森多边形方法</font></p>
<p>​	采用了一种极端的边界内插方法，<code>只用最近的单个点进行区域插值</code>。泰森多边形按数据点位置将区域分割成子区域，每个子区域包含一个数据点，各子区域到其内数据点的距离小于任何到其他数据点的距离，并用其内数据点进行赋值。连接所有数据点的连线形成 Delaunay 三角形，与不规则三角网 TIN 具有相同的拓扑结构。</p>
<p>2）移动平均插值方法——距离倒数插值</p>
<p>​	假设未知点 x<del>0</del> 处属性值是在局部邻域内中所有数据点的距离加权平均值</p>
<p>3）样条函数插值方法</p>
<p>​	样条函数是数学上与灵活曲线规对等的一个数学等式，是一个分段函数，进行一次拟合只有与少数点拟合，同时保证	曲线段连接处连续。意味着样条函数可以修改少数数据点配准而不必重新计算整条曲线</p>
<p>4）空间自协方差最佳插值方法——克里金插值</p>
<p>​	应用地理统计方法进行空间插值</p>
<ul>
<li>常规克里金插值</li>
<li>块克里金插值</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>空间统计分类分析</p>
<ul>
<li>主成分分析：将众多要素的信息压缩表达为若干具有代表性的合成变量，把数据减少到易于管理的程度。</li>
<li>层次分析：把人的思维过程层次化、数量化，并用数学方法为分析、决策、预报或控制提供定量的依据</li>
<li>系统聚类分析：根据实体间的相似程度，逐步合并若干类别</li>
<li>判别分析：预先根据理论与实践确定等级序列的因子标准，再将待分析的地理实体安排到序列的合理位置上的方法</li>
</ul>
</li>
</ol>
<h2 id="84、-空间分析过程"><a href="#84、-空间分析过程" class="headerlink" title="84、 空间分析过程"></a>84、 空间分析过程</h2><ul>
<li>明确分析的目的和评价准则</li>
<li>准备分析数据</li>
<li>准备空间分析操作</li>
<li>进行结果分析</li>
<li>解释、评价结果</li>
<li>结果输出</li>
</ul>
<h1 id="地理信息系统产品输出及可视化"><a href="#地理信息系统产品输出及可视化" class="headerlink" title="地理信息系统产品输出及可视化"></a>地理信息系统产品输出及可视化</h1><blockquote>
<p>16、地理信息系统产品输出，包括地理信息系统产品的输出系统、地理信息系统产品的类型。</p>
</blockquote>
<p><font color="cornflowerblue">地理信息系统产品的输出系统：</font></p>
<ul>
<li>硬件输出：普通地图、专题地图、影像地图的绘图输出，统计报表、决策方案的打印输出，三维数字模型、三维地图以及三维虚拟现实与仿真模拟演示，以及摄影胶片的硬拷贝</li>
<li>软件系统：产生各类产品的专用软件和设备驱动软件，如三维虚拟现实软件系统、地图制图模块</li>
</ul>
<p><font color="cornflowerblue">地理信息系统产品的类型：</font>普通地图、专题地图、影像地图、统计报表、三维数字模型、三维虚拟地图、决策方案</p>
<blockquote>
<p>17、空间信息可视化技术方法，包括可视化的概念、可视化的技术方法、三维虚拟GIS（VR-GIS）的应用。</p>
</blockquote>
<p><font color="cornflowerblue">可视化：</font>本意即是变成可被视觉所感知。在人脑中形成对某物（人）的图像，是一个心理过程，目的是促使对事物的观察力及建立概念。</p>
<p><font color="orange">科学计算可视化：</font>运用计算机图形学和图像处理技术，将科学计算过程中产生的数据及计算结果转换为图形和图像显示出来，并进行交互处理的理论、方法和技术。它不仅包括科学计算数据的可视化，而且包括工程计算数据的可视化，它的主要功能是从复杂的多维数据中产生图形，也可以分析和理解存入计算机的图形数据。</p>
<p><font color="orange">空间信息可视化：</font>是指运用地图学、计算机图形学和图像处理技术，将地学信息输入、处理、查询、分析以及预测的数据及结果采用图形符号、图形、图像，并结合图表、文字、表格、视频等可视化形式显示并进行交互处理的理论、方法和技术。</p>
<p><font color="orange">可视化的技术方法：</font></p>
<ul>
<li>多媒体技术：包括文字、图像、音频和视频的多种媒体技术集成的技术。</li>
<li>因特网技术：不仅提供了多媒体的集成，而且将多媒体扩大到了分布式计算机系统，为网络 GIS 环境实现可视化提供了基础</li>
<li>虚拟现实技术：提供了地理空间分析的虚拟显示环境，其提供的沉浸感、交互性和实时反应等技术特定，为人们进行综合会商、过程模拟、协同决策等提供了技术基础。</li>
<li>动画技术和 FLASH 技术</li>
</ul>
<p><font color="cornflowerblue">三维虚拟GIS（VR-GIS）的应用：</font></p>
<ul>
<li>三维数字城市</li>
<li>三维虚拟城市</li>
<li>三维库区管理信息系统</li>
</ul>
<h1 id="地理信息系统工程设计与标准化"><a href="#地理信息系统工程设计与标准化" class="headerlink" title="地理信息系统工程设计与标准化"></a>地理信息系统工程设计与标准化</h1><blockquote>
<p>18、地理信息系统工程设计，包括地理信息系统工程的设计模式与程序评价模式、地理信息系统工程设计的内容与过程、地理信息系统工程的系统分析、地理信息工程的系统设计、地理信息系统工程的实施设计、地理信息系统工程的运行维护设计。</p>
</blockquote>
<p><font color="cornflowerblue">地理信息系统工程的设计模式与程序评价模式：</font>基于能处理空间数据的软件系统、数据系统进行设计，强调对已存在的建设成果的利用，强调了对它们的评价的作用，并采用了 GIS 和软件工程的一些设计理论</p>
<p><font color="orange">地理信息系统工程设计的内容与过程：</font></p>
<ol>
<li>系统分析：需求分析和可行性研究，在用户提供的所需的信息、提出所要解决的问题的基础上，调查和收集相关资料，吸取用户需求，分析相关资料和技术。并在对成本、效益、技术等可行性分析评价的基础上，提出最佳解决方案，回答用户问题。</li>
<li>系统设计：<ul>
<li>总体设计：包括系统的目标和任务设计、模块子系统设计、计算机硬件系统设计、软件系统设计，通过总体设计，解决子系统之间联系与集成问题，解决软件、硬件的选型问题等</li>
<li>详细设计：包括数据库设计和系统功能设计，通过详细设计，明确数据采集、处理、存储、管理的具体内容和技术，特别是系统的坐标系统选择、数据的类型和内容等</li>
</ul>
</li>
<li>系统的实施：<ul>
<li>数据库的建库：将编辑好的地理空间数据装入数据库，置于数据库管理系统管理之下的过程</li>
<li>软件编程：是功能模块代码化的的过程</li>
<li>系统的调试：包括软件得到模块调试、子系统调试、系统的总调试等；对给 GIS 专业的用户的进行技术培训</li>
</ul>
</li>
<li>系统的运行维护：将系统交付用户试运行，并对系统进行积极稳妥维护的过程</li>
</ol>
<h2 id="85、需求分析"><a href="#85、需求分析" class="headerlink" title="85、需求分析"></a>85、<font color="orange">需求分析</font></h2><ul>
<li>确定系统的目标和总体功能，是进一步描述系统的第一步。应考虑的分析内容包括输入功能、地理空间数据管理、地理数据查询等</li>
</ul>
<h2 id="86、可行性分析"><a href="#86、可行性分析" class="headerlink" title="86、可行性分析"></a>86、<font color="orange">可行性分析</font></h2><ul>
<li>分析现行 GIS 工具软件系统的特点，所开发系统的使用对象的要求，选择所需要开发的全部模块，并分析已有算法的实用性，选择数据管理的模式，估计开发成本、效益、时间。</li>
</ul>
<h2 id="87、总体设计"><a href="#87、总体设计" class="headerlink" title="87、总体设计"></a>87、<font color="orange">总体设计</font></h2><ul>
<li>在一定的设计原则上，确定工程的总体目标、总体任务、总体构成框架等</li>
</ul>
<h2 id="88、详细设计"><a href="#88、详细设计" class="headerlink" title="88、详细设计"></a>88、<font color="orange">详细设计</font></h2><ul>
<li>是对系统组成、功能、开发技术和方法等的详细描述，在数据库建设方面，主要描述数据结构、数据输入方式方法等；在软件方面，设计软件的功能模块、模块的连接方式或参数等</li>
</ul>
<h2 id="89、实施设计"><a href="#89、实施设计" class="headerlink" title="89、实施设计"></a>89、<font color="orange">实施设计</font></h2><ul>
<li>是对系统实施过程的相关问题的处理方法进行详细说明，包括硬件系统的安装调试、软件系统的安装和集成等</li>
</ul>
<h2 id="90、运行维护设计"><a href="#90、运行维护设计" class="headerlink" title="90、运行维护设计"></a>90、<font color="orange">运行维护设计</font></h2><ul>
<li>对系统的运行管理方式做出规定，对程序运行中发现的问题进行更正，建立修改记录档案和运行日志等</li>
</ul>
<blockquote>
<p>19、地理信息系统的标准化，包括地理信息系统标准化的作用、地理信息系统标准化的内容。</p>
</blockquote>
<p><font color="cornflowerblue">地理信息系统标准化的作用：</font></p>
<ol>
<li>促进空间数据的交换</li>
<li>促进空间数据共享</li>
<li>促进软件产品共享</li>
</ol>
<p><font color="cornflowerblue">地理信息系统标准化的内容：</font></p>
<ol>
<li>标准化的基本内容和层次<ul>
<li>实际应用的标准</li>
<li>法律意义上的标准</li>
</ul>
</li>
<li>ISO&#x2F;TC211 地理信息标准</li>
<li>开放的地理数据互操作规范<ul>
<li>开放的地理空间数据模型</li>
<li>OpenGIS 服务模型</li>
<li>信息团体模型</li>
</ul>
</li>
</ol>
<h1 id="地理信息系统的高级技术"><a href="#地理信息系统的高级技术" class="headerlink" title="地理信息系统的高级技术"></a>地理信息系统的高级技术</h1><blockquote>
<p>20、分布式地理信息系统，包括GIS计算环境发展回顾、分布式地理信息系统的概念、分布式地理信息系统的体系结构、分布式地理信息系统的计算模式、分布式地理信息系统的计算技术</p>
</blockquote>
<p><font color="cornflowerblue">GIS计算环境发展回顾：</font></p>
<ol>
<li>集中式计算机环境或个人计算机环境</li>
<li>高性能工作站和 PC 机</li>
</ol>
<p><font color="cornflowerblue">分布式系统的优势：</font></p>
<ol>
<li>对存储在一个中央服务器上的 GIS 数据可以更有效的管理和访问</li>
<li>比本地计算更快的反应时间</li>
<li>更好的系统安全性</li>
<li>减少了复杂性</li>
<li>比主机系统成本低</li>
</ol>
<h2 id="91、分布式地理信息系统"><a href="#91、分布式地理信息系统" class="headerlink" title="91、分布式地理信息系统"></a>91、<font color="orange">分布式地理信息系统</font></h2><ul>
<li>分布式地理信息：指在互联网上以多种形式分布式发布地理信息</li>
<li>分布式地理信息系统：在计算机网络环境下，以分布式计算的理论技术和计算机网络技术为应用指导，来设计地理信息系统中的时空数据采集、存储、管理、分析、表现等运算的理论计算模型。它是按照系统中的数据分布的特征和针对其中数据处理的计算特征而分类的，是描述系统级各功能模块与数据之间的运算关系的计算模型。</li>
<li>分布式的主要表现<ul>
<li>数据的分布特点：数据以分布式的方式存在于分离的计算机上</li>
<li>应用功能的分布：可以按需选择不同的 GIS 功能服务对数据进行处理</li>
<li>外设的共享：可以实现设备的资源共享</li>
<li>并行计算：可将计算任务分摊到不同的计算机上</li>
</ul>
</li>
<li>分布式系统的优缺点<ul>
<li>优点<ul>
<li>分析和输出的功能可在子系统，提供 GIS 用户之间快速和清楚的通信渠道</li>
<li>公共资源安装在中心系统，便于提供集中维护和提供综合目的处理与分析任务</li>
<li>专业资源安装在子系统，便于对专业资源进行权威维护和提供专业应用处理和分析</li>
<li>管理与维护责任分明</li>
</ul>
</li>
<li>缺点<ul>
<li>需要对用户进行培训</li>
<li>由于数据库的分步性，标准必须统一</li>
<li>硬件设备投资增加</li>
<li>系统结构会随功能部门变换而变化</li>
</ul>
</li>
</ul>
</li>
<li>集中式系统的优缺点<ul>
<li>优点<ul>
<li>数据的所有权和维护责任清楚</li>
<li>数据的坐标系统是确定的</li>
<li>使用难度低</li>
</ul>
</li>
<li>缺点<ul>
<li>分析和输出由远离领域应用部门的中心系统完成</li>
<li>领域部门的分析与数据处理的任务需预先向中心系统预约</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="92、分布式地理信息系统的体系结构"><a href="#92、分布式地理信息系统的体系结构" class="headerlink" title="92、分布式地理信息系统的体系结构"></a>92、分布式地理信息系统的体系结构</h2><ul>
<li>数据服务层</li>
<li>应用接口层</li>
<li>应用层</li>
<li>用户界面层</li>
</ul>
<h2 id="93、分布式地理信息系统的计算模式"><a href="#93、分布式地理信息系统的计算模式" class="headerlink" title="93、分布式地理信息系统的计算模式"></a>93、分布式地理信息系统的计算模式</h2><ul>
<li>C&#x2F;S 模式</li>
<li>B&#x2F;S 模式</li>
<li>混合计算模式</li>
</ul>
<h2 id="94、分布式地理信息系统的计算技术"><a href="#94、分布式地理信息系统的计算技术" class="headerlink" title="94、分布式地理信息系统的计算技术"></a>94、分布式地理信息系统的计算技术</h2><ol>
<li><p>DCOM（分布式组件对象模型）</p>
<p>COM（组件对象模型）：用以使用户将组件连接到运行在同一台计算机或运行在另一台计算机上的服务。</p>
<p>DCOM 是基于 ActiveX 技术的，是对 COM 技术的延续，主要增加了远程调用 COM 部件的功能。DCOM 的特点在于每个程序模块无须存储在各客户端，更无须下载本程序在客户端运行，只要在服务器内存放一份 DCOM 部件，不同地方的用户可通过网络来访问这一部件</p>
</li>
<li><p>CORBA（公共对象代理结构）</p>
<p>是 OMG 提出的对象分布计算规范，规定了对象请求代理机制，已成为事实上的企业分布计算和集成框架开发和应用标准</p>
</li>
<li><p>EJB </p>
<p>是 java 中的商业应用组件技术</p>
</li>
</ol>
<h1 id="空间信息基础设施与数字工程"><a href="#空间信息基础设施与数字工程" class="headerlink" title="空间信息基础设施与数字工程"></a>空间信息基础设施与数字工程</h1><blockquote>
<p>21、空间信息基础设施与数字工程，包括空间数据基础设施、“数字地球”的概念与框架、“数字城市”的概念、框架和建设技术、“数字流域”的概念和框架</p>
</blockquote>
<h2 id="95、空间数据基础设施"><a href="#95、空间数据基础设施" class="headerlink" title="95、空间数据基础设施"></a>95、空间数据基础设施</h2><ul>
<li>指为描述地球上地理要素或现象的分布及其属性的所有地理信息组合，以及对这些地理信息的获取、处理、存储、分发、使用、集成、融合以及互操作等目的，建立一个共享的空间信息框架的建设计划。</li>
</ul>
<h2 id="96、“数字地球”的概念与框架"><a href="#96、“数字地球”的概念与框架" class="headerlink" title="96、“数字地球”的概念与框架"></a>96、“数字地球”的概念与框架</h2><ul>
<li>是一个多分辨率、多空间尺度的、虚拟表达的三维星球；具有海量的地理空间编码数据；可以使用无极放大率进行方法；在空间内的活动是不受限制的，而且在时间空间也是如此。</li>
</ul>
<h2 id="97、框架和建设技术"><a href="#97、框架和建设技术" class="headerlink" title="97、框架和建设技术"></a>97、框架和建设技术</h2><ul>
<li>“数字城市”是通过宽带多媒体信息网络、地理信息系统等基础设施平台，整合城市信息资源，建立电子政务、电子商务、劳动社会保障等信息系统和信息化社区，实现全市国民经济和社会信息化。</li>
</ul>
<h2 id="98、“数字流域”的概念和框架"><a href="#98、“数字流域”的概念和框架" class="headerlink" title="98、“数字流域”的概念和框架"></a>98、“数字流域”的概念和框架</h2><ul>
<li>“数字流域“就是借助全数字摄影测量、遥测、遥感（RS）、地理信息系统（GIS）、全球定位系统（GPS）、计算机网络、现代通信等现代化手段及传统手段采集基础数据、专业专题数据，通过现代互联网技术，对流域及其相关地区的自然、经济、社会等要素构建一体化的数字模型集成平台和虚拟现实环境</li>
</ul>
<h1 id="空间信息网格"><a href="#空间信息网格" class="headerlink" title="空间信息网格"></a>空间信息网格</h1><blockquote>
<p>22、空间信息网格，包括空间信息网格的概念、空间信息网格的计算、空间信息网格技术与GIS、网格GIS的体系结构</p>
</blockquote>
<h2 id="99、空间信息网格的概念"><a href="#99、空间信息网格的概念" class="headerlink" title="99、空间信息网格的概念"></a>99、空间信息网格的概念</h2><ul>
<li>空间数据基础设施提出的交换站点在 SIG 中被看做网络节点，由这些分布在全球各地的各类节点形成的网络称之为网格。它是以空间信息传输、服务和计算为内容的，因此也称为空间信息网格</li>
</ul>
<h2 id="100、空间信息网格的计算"><a href="#100、空间信息网格的计算" class="headerlink" title="100、空间信息网格的计算"></a>100、空间信息网格的计算</h2><p>网格计算的基本功能</p>
<ul>
<li>任务管理</li>
<li>任务调度</li>
<li>资源管理</li>
</ul>
<p>网格计算的形式</p>
<ul>
<li>企业计算</li>
<li>网格计算</li>
<li>对等计算</li>
<li>普及计算</li>
</ul>
<h2 id="101、空间信息网格技术与GIS"><a href="#101、空间信息网格技术与GIS" class="headerlink" title="101、空间信息网格技术与GIS"></a>101、空间信息网格技术与GIS</h2><ol>
<li>空间数据管理概念的不同</li>
<li>异构环境下的互操作能力不同</li>
<li>系统的跨平台性能不同</li>
<li>网络数据的传输能力不同</li>
<li>利用网络资源的能力不同</li>
<li>资源的动态性具有区别</li>
<li>系统的开放性程度区别</li>
</ol>
<h2 id="102、网格GIS的体系结构"><a href="#102、网格GIS的体系结构" class="headerlink" title="102、网格GIS的体系结构"></a>102、网格GIS的体系结构</h2><h1 id="空间数据的互操作"><a href="#空间数据的互操作" class="headerlink" title="空间数据的互操作"></a>空间数据的互操作</h1><blockquote>
<p>23、空间数据的互操作，包括空间数据互操作的概念、互操作的实现技术、练习与思考题。</p>
</blockquote>
<h2 id="103、空间数据互操作的概念"><a href="#103、空间数据互操作的概念" class="headerlink" title="103、空间数据互操作的概念"></a>103、空间数据互操作的概念</h2><ul>
<li>互操作是不同计算机系统、网络、操作系统和应用程序一起工作并共享信息的能力。GIS 互操作中需解决如何互操作异构的空间信息，如何互操作空间信息服务软件</li>
</ul>
<h2 id="104、互操作的实现技术"><a href="#104、互操作的实现技术" class="headerlink" title="104、互操作的实现技术"></a>104、互操作的实现技术</h2><ol>
<li>GML</li>
<li>SVG</li>
<li>WF</li>
</ol>
<h1 id="地理信息系统的集成"><a href="#地理信息系统的集成" class="headerlink" title="地理信息系统的集成"></a>地理信息系统的集成</h1><blockquote>
<p>24、地理信息系统的集成，包括地理信息系统集成的概念、“3S”技术集成、多源数据的集成、GIS与专家系统的集成、GIS与应用分析模型的集成。</p>
</blockquote>
<h2 id="105、地理信息系统集成的概念"><a href="#105、地理信息系统集成的概念" class="headerlink" title="105、地理信息系统集成的概念"></a>105、地理信息系统集成的概念</h2><ul>
<li>GIS 作为地理空间数据存储、管理和分析的工具，不是独立存在的，与遥感技术、全球定位技术、计算机网络技术等的集成，极大的扩展了 GIS 数据采集、数据处理、数据分析、数据显示的能力，拓展了 GIS 的应用范围。</li>
</ul>
<h2 id="106、“3S”技术集成"><a href="#106、“3S”技术集成" class="headerlink" title="106、“3S”技术集成"></a>106、<font color="orange">“3S”技术集成</font></h2><ul>
<li>3S 的结合应用，取长补短，是一个自然的发展趋势，三者之间的相互作用形成了 “<font color="orange">一个大脑，两只眼睛</font>” 的框架，即 RS 和 GPS 向 GIS 提供或更新<code>区域信息</code>以及<code>空间定位</code>，GIS 进行相应的<code>空间分析</code>，从 RS 和 GPS 提供的浩如烟海的数据中提取有用的信息，并进行综合集成，使之成为<code>决策的科学依据</code>。GIS、RS 和 GPS 三种集成利用，构成整体的、实时的和动态的对地观测、分析和应用的运行系统，提高了 GIS 的应用效率。在实际应用中，较为常见的是 3S 两两之间的集成。3S 集成技术的发展提高了人类认识地球的能力，拓展了传统测绘科学的研究领域。</li>
</ul>
<p>关键技术：</p>
<ol>
<li>”3S“集成系统的实时空间定位</li>
<li>”3S“集成系统的一体化数据管理</li>
<li>语义或非语义信息的自动提取理论方法</li>
<li>基于遥感影像的 GIS 数据库的快速更新方法</li>
<li>”3S“集成系统的数据通信与交换</li>
<li>”3S“集成系统的可视化理论与方法</li>
<li>”3S“集成系统的设计方法与 CASE 工具研究</li>
<li>”3S“集成系统中基于 C&#x2F;S 的分布式网络集成环境</li>
</ol>
<h2 id="107、多源数据的集成"><a href="#107、多源数据的集成" class="headerlink" title="107、多源数据的集成"></a>107、多源数据的集成</h2><h2 id="108、GIS与专家系统的集成"><a href="#108、GIS与专家系统的集成" class="headerlink" title="108、GIS与专家系统的集成"></a>108、GIS与专家系统的集成</h2><ul>
<li>是建立智能化空间决策支持系统的重要途径，为决策者提供分析问题、建立模型、模拟决策过程和方案的环境，调用各种信息资源和分析工具，帮助决策者提高决策水平和质量</li>
</ul>
<h2 id="109、GIS与应用分析模型的集成"><a href="#109、GIS与应用分析模型的集成" class="headerlink" title="109、GIS与应用分析模型的集成"></a>109、GIS与应用分析模型的集成</h2><h1 id="地理时空大数据和云计算"><a href="#地理时空大数据和云计算" class="headerlink" title="地理时空大数据和云计算"></a>地理时空大数据和云计算</h1><blockquote>
<p>25、地理时空大数据和云计算</p>
</blockquote>
<h2 id="110、大数据（big-data）"><a href="#110、大数据（big-data）" class="headerlink" title="110、大数据（big data）"></a>110、大数据（big data）</h2><ul>
<li>是指无法在<code>一定时间范围内</code>用<code>常规</code>软件工具进行捕捉、管理和处理的<font color="orange">数据集合</font>，是需要新的处理模式才能具有更强的决策力、洞察发现力和流程优化能力的<code>海量</code>、高增长率和多样化的<font color="orange">信息资产</font>，具有规模大、<code>变化快</code>、<code>类型多</code>和<code>使用价值相对密度低</code>等特点，人们可以从大数据中<code>剖析挖掘</code>有使用价值的<code>信息内容和规律性</code>，进而协助我们在每个制造行业的应用中<code>辅助管理决策</code>，乃至<code>预知</code>。</li>
</ul>
<h2 id="111、时空大数据"><a href="#111、时空大数据" class="headerlink" title="111、时空大数据"></a>111、时空大数据</h2><ul>
<li>时空数据是同时具有<font color="orange">时间和空间维度</font>的数据，现实世界中的数据超过80%与<code>地理位置</code>有关。时空大数据包括<font color="orange">时间、空间、专题属性三维信息</font>，具有多源、海量、更新快速的综合特点。</li>
<li>时空大数据,指基于统一的<code>时空基准</code>(空间参照系统、时间参照系统)，活动(运动变化)于时间和空间中与<code>位置</code>直接(定位)或间接(空间分布)相关联的<code>大数据</code>。</li>
</ul>
<h2 id="112、空间大数据"><a href="#112、空间大数据" class="headerlink" title="112、空间大数据"></a>112、空间大数据</h2><ul>
<li>空间大数据就是<code>大数据</code>中带有（或者隐含）<font color="orange">空间位置</font>的数据。由于获取方式的特殊性，空间大数据与经典的海量空间数据有所差别，空间大数据带有大数据的<code>价值密度低</code>的特征，在大数据技术发展前，使用常规手段无法处理，更无法有效分析和挖掘这些数据的价值。</li>
</ul>
<h2 id="113、大数据GIS"><a href="#113、大数据GIS" class="headerlink" title="113、大数据GIS"></a>113、大数据GIS</h2><ul>
<li>大数据GIS就是把<font color="orange">大数据技术与<code>GIS技术</code>进行深度融合，把<code>GIS</code>的<code>核心能力</code>嵌入到大数据基础框架之内</font>，并打造出完整的<font color="orange">大数据GIS技术体系</font>。随着GIS的发展，其数据呈现出<code>数量大</code>、<code>种类多</code>和<code>结构复杂</code>的特征。</li>
</ul>
<h2 id="114、云计算"><a href="#114、云计算" class="headerlink" title="114、云计算"></a>114、云计算</h2><ul>
<li><font color="orange">云计算（cloud computing）</font>是<code>分布式计算</code>的一种，指的是通过网络“云”将巨大的<code>数据计算处理程序</code><font color="yellow">分解</font>成无数个<code>小程序</code>，然后，通过多个服务器组成的系统进行<code>处理</code>和<code>分析</code>这些小程序得到<code>结果</code>并返回给用户。云计算早期，简单地说，就是简单的分布式计算，<font color="orange">解决任务分发，并进行计算结果的合并</font>。因而，云计算又称为<font color="yellow">网格计算</font>。通过这项技术，可以在<font color="yellow">很短的时间</font>内（几秒钟）完成对数以万计的数据的处理，从而达到强大的网络服务。现阶段所说的云服务已经不单单是一种分布式计算，而是<font color="orange">分布式计算、效用计算、负载均衡、并行计算、网络存储、热备份冗杂和虚拟化</font>等计算机技术混合演进并跃升的结果。具有虚拟化技术、动态可扩展、按需部署等技术。</li>
</ul>
<h2 id="115、云-GIS"><a href="#115、云-GIS" class="headerlink" title="115、云 GIS"></a>115、云 GIS</h2><ul>
<li>将<code>云计算</code>的各种特征用于<font color="orange">支撑地理空间信息的各要素</font>，包括<code>建模</code>、<code>存储</code>、<code>处理</code>等等，从而改变用户传统的GIS应用方法和建设模式，以一种更加友好的方式，<font color="orange">高效率、低成本的使用地理信息资源</font>。</li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="116、数据仓库"><a href="#116、数据仓库" class="headerlink" title="116、数据仓库"></a>116、数据仓库</h2><ul>
<li>指面向主题的、集成的、稳定的、随着时间变化的数据集合，用以支持管理决策。目的是为了处理积累的海量空间数据，抽取有用信息并提供决策支持</li>
</ul>
<h2 id="117、数据挖掘"><a href="#117、数据挖掘" class="headerlink" title="117、数据挖掘"></a>117、数据挖掘</h2><ul>
<li>从数据中提取隐含的、先前不知道的和潜在有用的知识的过程。数据挖掘技术集成了机器学习、数据库系统、数据可视化、统计和信息理论等多领域的最新技术，有着广泛的应用前景</li>
</ul>
<h2 id="118、空间数据挖掘"><a href="#118、空间数据挖掘" class="headerlink" title="118、空间数据挖掘"></a>118、空间数据挖掘</h2><ul>
<li>空间数据库是通过空间数据类型和空间关系存储和管理空间数据。空间数据库的知识发现或空间数据挖掘，可以定义为从空间数据库中提取隐含的知识、和没有直接存储的空间关系、空间模式的过程</li>
</ul>
<h2 id="119、元胞自动机"><a href="#119、元胞自动机" class="headerlink" title="119、元胞自动机"></a>119、元胞自动机</h2><ul>
<li>是定义在一个具有<code>离散、有限状态</code>的元胞组成的元胞空间上的，按照一定的局部规则，在<code>离散的时间维</code>上演化的动力学系统。元胞自动机的基本单元是元胞，每个元胞具有一个状态，这个状态只能取有限状态集中的一个，这些元胞规则的排列在被称为”元胞空间”的空间格网上；它们各自的状态随着时间变化，根据一个局部的规则来进行更新，即一个元胞在某时刻的状态取决于且只取决于该元胞周围邻域元胞的状态；元胞空间内的元胞依照此局部规则进行同步的状态更新，整个元胞空间则表现为在离散的时间维上的变化。</li>
</ul>
<h2 id="120、制图综合"><a href="#120、制图综合" class="headerlink" title="120、制图综合"></a>120、制图综合</h2><ul>
<li>是对制图区域客观事物的取舍和简化，经过概括后的地图可以显示出主要的事物和本质的特征。地图的比例尺、用途和主题，制图区域的地理特征以及符号的图形尺寸是影像地图概括的主要因素，地图概括主要表现在内容的取舍、数量简化、质量化简和形状化简等方面</li>
</ul>
<h2 id="121、虚拟地理环境"><a href="#121、虚拟地理环境" class="headerlink" title="121、虚拟地理环境"></a>121、虚拟地理环境</h2><ul>
<li>是基于地学分析模型、地学工程等的虚拟现实，它是地学工作者根据观测实验、理论假设等建立起来的表达和描述地理系统的空间分布以及过程现象的虚拟信息地理世界，一个关于地理系统的虚拟实验室，它允许地学工作者按照个人的知识、假设和意愿去设计修改地学空间关系模型、地学分析模型、地学工程模型等，并直接观测交换后的结果，通过多次的循环反馈，最后获取地学规律</li>
</ul>
<h2 id="122、图像卷积"><a href="#122、图像卷积" class="headerlink" title="122、图像卷积"></a>122、图像卷积</h2><ul>
<li>数字图像是一个二维的离散信号，对数字图像做卷积操作其实就是利用<code>卷积核</code>（卷积模板）在图像上滑动，将图像点上的<code>像素灰度值</code>与对应的卷积核上的数值<font color="orange">相乘</font>，然后将所有相乘后的值相加作为卷积核中间像素对应的图像上像素的灰度值，并最终滑动完所有图像的过程。</li>
</ul>
<h2 id="123、傅里叶变换"><a href="#123、傅里叶变换" class="headerlink" title="123、傅里叶变换"></a>123、傅里叶变换</h2><ul>
<li>表示能将满足一定条件的某个函数表示成三角函数（正弦&#x2F;或余弦函数）或者它们的积分的线性组合。傅里叶变换是一种分析信号的方法，它可分析信号的成分，也可用这些成分合成信号。<strong>傅里叶变换的实质是将一个信号分离为无穷多正弦&#x2F;复指数信号的加成</strong>，也就是说，把信号变成正弦信号相加的形式。傅里叶变换可以将一个时域信号转换成在不同频率下对应的振幅及相位，其频谱就是时域信号在频域下的表现。</li>
</ul>
<h1 id="GPS"><a href="#GPS" class="headerlink" title="GPS"></a>GPS</h1><p><font color="cornflowerblue">全球卫星导航系统（GNSS）：</font>是泛指所有的卫星导航系统，包括全球的、区域的、和增强的，如美国的 GPS 系统、俄罗斯的 GLONASS 系统、欧洲的伽利略（GALILEO）系统、中国的<font color="orange">北斗（BDS）系统</font>，以及相关的增强系统，如美国的广域增强系统、日本的准天顶卫星系统等。</p>
<p><font color="cornflowerblue">GPS 卫星的核心部件：</font>高精度的时钟、导航电文存储器、双频发射和接收机以及微处理机。</p>
<p><font color="cornflowerblue">天球坐标系：</font>取地球的质心为坐标系的原点，与地球自转无关，便于描述人造地球卫星的位置。</p>
<p><font color="cornflowerblue">地球坐标系：</font>取地球的质心为坐标系的原点，坐标系随同地球自转，可看作固定在地球上的坐标系。便于描述地面点位置。</p>
<p><font color="cornflowerblue">WGS-84 大地坐标系：</font> 原点位于地球质心，对应 WGS-84 椭球</p>
<p><font color="orange">国家大地坐标系：</font></p>
<p><font color="cornflowerblue">54 北京坐标系:</font>采用克拉索夫斯基椭球体，是参心坐标系，大地点高程以 1956 年青岛验潮站求出的黄海平均海水面为基准。</p>
<p><font color="cornflowerblue">80 国家大地坐标系：</font>大地原点在陕西省泾阳县永乐镇，是参心坐标系，椭球体采用 1975 国际大地测量与地球物理联合会推荐椭球，高程系统的基准是 1956 年青岛验潮站求出的黄海平均海水面。</p>
<p><font color="cornflowerblue">2000国家大地坐标系：</font>是三维地心坐标系，采用 2000 参考椭球，国家平面坐标系统采用高斯-克吕格投影的平面坐标系统。</p>
<p><font color="orange">坐标系统之间的转换：</font></p>
<ul>
<li>不同空间直角坐标系统之间的转换</li>
<li>不同大地坐标系的换算</li>
<li>将大地坐标（B，L）转换为高斯平面坐标（x，y）</li>
</ul>
<p><font color="orange">卫星星历：</font>是描述卫星运动轨道的信息，是一组对应某一时刻的轨道参数及其变率，有了卫星星历，就可以计算出任意时刻卫星位置及其速度。</p>
<p><font color="orange">GPS 卫星信号：</font>是 GPS 卫星向广大用户发送的用于导航定位的调制波，包含有载波（L<del>1</del>、L<del>2</del>、L<del>5</del>）、测距码（C&#x2F;A码&#x2F;P码&#x2F;M码）和数据码（卫星轨道位置）。</p>
<p><font color="orange">GPS 卫星的导航电文（卫星电文）：</font>是用户用来定位和导航的数据基础，主要包括卫星星历、时钟改正、电离层时延改正、工作状态信息以及 C&#x2F;A 码转换到捕获 P 码的信息。</p>
<p><font color="orange">BDS 卫星信号：</font>BDS 导航信号占用 3 个频道，采用码分多址的扩频通信体制，在 B1、B2、B3 三个频段上调制了导航信号。</p>
<p><font color="orange">BDS 卫星导航电文：</font>分为 D1 导航电文和 D2 导航电文</p>
<p><font color="orange">GPS 卫星导航定位基本原理：</font>将无线电信号发射台从地面点搬到卫星上，组成一颗卫星导航定位系统，应用无线电测距交会的原理，便可由三个以上地面已知点（控制站）交会出卫星的位置，反之利用三颗以上卫星的已知空间位置又可交会出地面未知点（用户接收机的位置）。</p>
<p><font color="orange">绝对定位：</font>对于固定不动的待定点，将 GPS 接收机安置于其上，观测数分钟乃至更长的时间，以确定该点的三维坐标。</p>
<p><font color="orange">相对定位：</font>以两台 GPS 接收机分别置于两个固定不变的待定点上，则通过一定时间的观测，可以确定两个待定点之间的相对位置。</p>
<p><font color="orange">动态定位：</font>至少有一台接收机处于运动状态，测定的是各观测时刻（观测历元）运动中的接收机的点位（绝对点位或相对点位）</p>
<p><font color="cornflowerblue">伪距法定位：</font>是由 GPS 接收机在某一时刻测出的四颗以上 GPS 卫星的伪距以及已知的卫星位置，采用距离交会的方法求定接收机天线所在点的三维坐标。所测伪距就是由卫星发射的测距码信号到达 GPS 接收机的传播时间乘以光速所得出的量测距离。</p>
<p><font color="cornflowerblue">周跳：</font>如果在跟踪卫星过程中，由于某种原因，如卫星信号被障碍物挡住而暂时中断，或受无线电信号干扰造成失锁，这样，计数器无法连续计数。因此当信号重新被追踪后，整周计数就不正确，但是不到一个整周的相位观测值仍是正确的。</p>
<p>处理方法：</p>
<ul>
<li>屏幕扫码法</li>
<li>用高次差或多项式拟合法</li>
<li>在卫星间求差法</li>
<li>用双频观测值修复周跳</li>
<li>根据平差后的残差发现和修复整周跳变</li>
</ul>
<p><font color="orange">GPS 绝对定位（单点定位）：</font>利用 GPS 卫星和用户接收机之间的距离观测值直接确定用户接收机天线在 WGS-84 坐标系中相对于坐标原点 —— 地球质心的绝对位置。绝对定位又分为静态绝对定位和动态绝对定位。</p>
<p><font color="orange">GPS 相对定位：</font>至少用两台 GPS 接收机，同步观测相同的 GPS 卫星，确定两台接收机天线之间的相对位置（坐标差），是目前 GPS 定位中精度最高的一种定位方法。</p>
<p><font color="cornflowerblue">GPS 测量误差分类及对距离测量的影响：</font></p>
<table>
<thead>
<tr>
<th align="center">误差来源</th>
<th align="left"></th>
<th>对距离测量的影响</th>
</tr>
</thead>
<tbody><tr>
<td align="center">卫星部分</td>
<td align="left">1、星历误差；2、钟误差；3、相对论效应</td>
<td>1.5 ~ 15</td>
</tr>
<tr>
<td align="center">信号传播</td>
<td align="left">1、电离层；2、对流层；3、多路径效应</td>
<td>1.5 ~ 15</td>
</tr>
<tr>
<td align="center">信号接收</td>
<td align="left">1、钟的误差；2、位置误差；3、天线相位中心变化</td>
<td>1.5 ~ 5</td>
</tr>
<tr>
<td align="center">其它影响</td>
<td align="left">1、地球潮汐；2、负荷潮</td>
<td>1.0</td>
</tr>
</tbody></table>
<p><font color="orange">基线向量解算：</font>在卫星定位中,利用载波相位观测值或其差分观测值,求解两个同步观测的测站之间的基线向量坐标差的过程.此前须进行数据预处理,剔除观测值中的粗差,即进行周跳的探测与修复.由于待定测站的近似坐标相对于基站的精度较低而影响卫地距及传播时间的计算,须逐次迭代不断提高测站近似坐标精度,以修正卫星信号发射时刻及相应的星历坐标,使整周待定值趋近于整数以获得良好的基线向量成果.有按单基线解算,和取用一测段内所有非基星相对于基星的双差观测值联合解算全部基线的两种方法。</p>
<p><font color="cornflowerblue">GPS 网的图形设计：</font></p>
<ul>
<li>点连式</li>
<li>边连式</li>
<li>网连式</li>
<li>边点混合连接式</li>
<li>三角锁（或多边形）连接</li>
<li>导线网形连接（环形图）</li>
<li>星形布设</li>
</ul>
<p><font color="cornflowerblue">GPS 数据处理基本流程：</font></p>
<ol>
<li>数据采集</li>
<li>数据传输</li>
<li>预处理</li>
<li>基线解算：确定基线向量的浮点解、确定整周未知数、确定基线向量的固定解</li>
<li>GPS 网平差</li>
</ol>
<h1 id="遥感的数字图像处理"><a href="#遥感的数字图像处理" class="headerlink" title="遥感的数字图像处理"></a>遥感的数字图像处理</h1><h2 id="124、图像纠正"><a href="#124、图像纠正" class="headerlink" title="124、图像纠正"></a>124、图像纠正</h2><ul>
<li>图像纠正是消除图像畸变的过程，包括辐射纠正和几何纠正。辐射畸变通常由于太阳位置，太阳的吸收、散射引起；而几何畸变的原因则包括遥感平台的速度、姿态变化，传感器，地形起伏等。</li>
</ul>
<h2 id="125、增强"><a href="#125、增强" class="headerlink" title="125、增强"></a>125、增强</h2><ul>
<li>增强的目的是为了改善图像的视觉效果，并没有增加信息量，包括亮度、对比度变化以及直方图变换等</li>
</ul>
<h2 id="126、滤波"><a href="#126、滤波" class="headerlink" title="126、滤波"></a>126、滤波</h2><ul>
<li>滤波通常分为低通滤波、高通滤波和带通滤波等<ul>
<li>低通滤波：可以去除图像中的噪声</li>
<li>高通滤波：用于提取一些线性信息</li>
</ul>
</li>
<li>滤波可以在空域上采用滤波模板操作，也可以在频域中进行直接运算</li>
</ul>
<h2 id="127、变换"><a href="#127、变换" class="headerlink" title="127、变换"></a>127、变换</h2><ul>
<li>包括主成分分析、色度变换以及傅里叶变换等， 还包括一些针对遥感影像的特定变换，如缨帽变换</li>
</ul>
<h2 id="128、分类"><a href="#128、分类" class="headerlink" title="128、分类"></a>128、分类</h2><ul>
<li>计算机分类的基本原理是计算图像上每个<font color="orange">像元的灰度特征</font>，根据不同的准则，进行分类。<ul>
<li>监督分类<ul>
<li>需要事先<code>确定各个类别及其训练区</code>，并计算训练区<code>像元灰度统计特征</code>，然后将其他像元归并到不同类<ul>
<li>最小距离法</li>
<li>最大似然法</li>
<li>平行六面体法</li>
</ul>
</li>
</ul>
</li>
<li>非监督分类<ul>
<li>直接根据<code>像元灰度特征</code>之间的<code>相似</code>和<code>相异</code>程度进行<code>合并</code>和<code>区分</code>，形成不同的类别。<ul>
<li>k - 均值聚类</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>gis</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title>基于深度学习的时空间数据融合</title>
    <url>/2022/11/06/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%B6%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88/</url>
    <content><![CDATA[<h1 id="基于深度学习的时空间数据融合"><a href="#基于深度学习的时空间数据融合" class="headerlink" title="基于深度学习的时空间数据融合"></a>基于深度学习的时空间数据融合</h1><p>以 Landsat-Sentinel NDVI 数据为例，测试利用深度学习进行时空间数据融合的可行性</p>
<h2 id="1、待解决的问题"><a href="#1、待解决的问题" class="headerlink" title="1、待解决的问题"></a>1、待解决的问题</h2><ol>
<li><p>融合方法</p>
<p>深度学习 VS 传统方法</p>
<p>哪种方法更好</p>
</li>
<li><p>融合策略</p>
<p>Blending-then-Index（BI） VS   Index-then-Blending（IB）</p>
<p>先融合再计算 NDVI 还是先计算 NDVI 再融合</p>
</li>
<li><p>重要性</p>
<p>融合方法 VS 融合策略</p>
<p>哪种更重要</p>
</li>
</ol>
<span id="more"></span>

<h2 id="2、Pytorch-深度学习环境配置"><a href="#2、Pytorch-深度学习环境配置" class="headerlink" title="2、Pytorch 深度学习环境配置"></a>2、Pytorch 深度学习环境配置</h2><p>CUDA + CUDNN + Anaconda + Pytorch 安装</p>
<p><font color="red">CUDA, CUDNN和pytorch 版本需要一一对应，否则无法运行</font></p>
<p>这里统一选择 10.1 的版本</p>
<h3 id="2-1、CUDA-安装"><a href="#2-1、CUDA-安装" class="headerlink" title="2.1、CUDA 安装"></a>2.1、CUDA 安装</h3><p>CUDA(ComputeUnified Device Architecture)，是显卡厂商NVIDIA推出的运算平台。 CUDA是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。</p>
<ol>
<li><p>下载地址</p>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101140805414.png" alt="CUDA 版本"></p>
</li>
<li><p>我这里选择 CUDA Toolkit 10.1 update2 Archive 版本</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101141001828.png" alt="CUDA 安装选择"></p>
<p> 从官网上下载比较困难，需要挂梯子，最好能找到国内镜像。</p>
</li>
<li><p>安装</p>
<ul>
<li>双击下载好的 <code>cuda_10.1.243_426.00_win10.exe</code> 执行安装程序</li>
<li>选择自定义安装，也可以选精简安装，我是为了能自定义安装路径（记住自定义的路径），我的驱动程序组件的勾选如下：</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101190627025.png" alt="CUDA 自定义安装选项"></p>
<ul>
<li>其它默认</li>
</ul>
</li>
</ol>
<h3 id="2-2、CUDNN-下载"><a href="#2-2、CUDNN-下载" class="headerlink" title="2.2、CUDNN 下载"></a>2.2、CUDNN 下载</h3><ol>
<li><p>下载地址</p>
<p><a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p>
</li>
<li><p>需要注册、登录，我选择了 cuDNN v7.6.5 这版</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101145519182.png" alt="cuDNN 下载"></p>
</li>
<li><p>解压，将其中的 bin、include、lib 文件夹复制到 CUDA 安装目录下，直接复制就可以，不会有覆盖的内容</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101190923877.png" alt="cuDNN 复制到 CUDA"></p>
</li>
</ol>
<h3 id="2-3、安装-Anaconda"><a href="#2-3、安装-Anaconda" class="headerlink" title="2.3、安装 Anaconda"></a>2.3、安装 Anaconda</h3><ol>
<li><p>下载</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive</a></p>
<p>可选择最新的</p>
</li>
<li><p>安装</p>
<p>可 for all user 安装，修改安装路径 无法勾选配置系统环境变量的话，后续可自行配置</p>
</li>
<li><p>验证安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4、配置国内镜像"><a href="#2-4、配置国内镜像" class="headerlink" title="2.4、配置国内镜像"></a>2.4、配置国内镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加清华anaconda镜像，为 http 的方式，https 方式可能会出现验证问题：</span></span><br><span class="line">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Conda 附加库:</span></span><br><span class="line">conda config --add channels http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">conda config --show-sources #查看当前使用源</span><br><span class="line">conda config --remove channels 源名称或链接 #删除指定源</span><br><span class="line">conda config --add channels 源名称或链接 #添加指定源</span><br></pre></td></tr></table></figure>

<h3 id="2-5、构建虚拟环境"><a href="#2-5、构建虚拟环境" class="headerlink" title="2.5、构建虚拟环境"></a>2.5、构建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 Anaconda Prompt 这一步很重要，不要在命令行操作，在命令行操作可以是 conda init cmd.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟环境</span></span><br><span class="line">conda create -n dl python=3.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定创建路径的命令，但是这种方法没有环境名称，只能用路径来代替环境名称</span></span><br><span class="line">conda create -p C:\\Users\\Admin\\Desktop\\deeplearing-work\\dl python=3.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Python环境</span></span><br><span class="line">conda info --env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">activate dl # 或者</span><br><span class="line">activate C:\\Users\\Admin\\Desktop\\deeplearing-work\\dl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行中</span></span><br><span class="line">conda activate dl # 或者</span><br><span class="line">conda activate C:\\Users\\Admin\\Desktop\\deeplearing-work\\dl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出环境</span> </span><br><span class="line">deactivate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除环境</span></span><br><span class="line">conda remove -n python35 --all # 或者</span><br><span class="line">conda remove -p C:\\Users\\Admin\\Desktop\\deeplearing-work\\dl --all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 pytorch CPU 版</span></span><br><span class="line">pip3 install torch torchvision torchaudio</span><br><span class="line">pip install scipy pandas scikit-image scikit-learn termcolor</span><br></pre></td></tr></table></figure>

<h3 id="2-6、安装-GDAL-环境"><a href="#2-6、安装-GDAL-环境" class="headerlink" title="2.6、安装 GDAL 环境"></a>2.6、安装 GDAL 环境</h3><ol>
<li><p>下载安装包</p>
<p>由于老师 ppt 上的 GDAL 安装包下载路径失效，从别的网站上找到了安装包，但是版本略有差异</p>
<p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>我下载的版本为 <code>GDAL-3.4.3-cp38-cp38-win_amd64.whl</code> 最好保存在英文路径下，我存放在 C:\Users\Admin\Desktop\deeplearing-work 路径下</p>
</li>
<li><p>安装 GDAL 软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install C:\\Users\\Admin\\Desktop\\deeplearing-work\\GDAL-3.4.3-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101133456371.png" alt="GDAL 安装成功"></p>
</li>
</ol>
<h3 id="2-7、Pytorch-安装"><a href="#2-7、Pytorch-安装" class="headerlink" title="2.7、Pytorch 安装"></a>2.7、Pytorch 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.1</span><br></pre></td></tr></table></figure>

<h2 id="3、实验内容与步骤"><a href="#3、实验内容与步骤" class="headerlink" title="3、实验内容与步骤"></a>3、实验内容与步骤</h2><h3 id="3-1、实验内容"><a href="#3-1、实验内容" class="headerlink" title="3.1、实验内容"></a>3.1、实验内容</h3><ol>
<li><p>数据准备</p>
<p>选取农田、森林作为典型研究区，各研究区准备三个时相的 Landsat-Sentinel 影像对</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221101203916886.png" alt="Landsat-Sentinel 影像对"></p>
</li>
<li><p>数据预处理</p>
<ul>
<li>部分像元缺失，需要插值</li>
<li>Landsat 与 Sentinel 影像存在较大几何偏差，需要人工几何校正</li>
</ul>
</li>
<li><p>融合流程</p>
<ul>
<li>BI：先融合NIR-RGB数据，再计算NDVI</li>
<li>IB：先计算NDVI，再融合NDVI数据</li>
</ul>
</li>
<li><p>精度验证</p>
<ul>
<li>决定系数：$\large R^2 &#x3D; 1 - \frac{\sum\limits^n_{i&#x3D;1}(y_i - p_i)^2}{\sum\limits^n_{i&#x3D;1}(y_i - \bar{y}_i)^2}$</li>
<li>均方根误差：$\large RMSE &#x3D; \sqrt{\frac{\sum\limits^n_{i&#x3D;1}(y_i - p_i)^2}{n}}$</li>
<li>结构相似性：$\large SSIM &#x3D; \frac{(2\bar{y}*\bar{p}+C_1)(2\sigma_{yp}+C_2)}{(\bar{y}^2+\bar{p}^2+C_1)(\sigma^2_y+\sigma^2_p+C_2)}$</li>
</ul>
</li>
</ol>
<h3 id="3-2、实验步骤"><a href="#3-2、实验步骤" class="headerlink" title="3.2、实验步骤"></a>3.2、实验步骤</h3><blockquote>
<p>数据准备：</p>
</blockquote>
<ul>
<li>分别打开cropland 和forest文件夹，可以看到三个时相的Landsat-Sentinel 影像对，数据已经过异常值去除、配准等预处理。其中，第一、第三时相数据用于深度学习模型训练，第一、第二时相数据用于模型预测。</li>
<li>影像共包含四个波段，分别为B-G-R-NIR, 反射率值范围为0~10000，在ArcGIS或Envi中使用波段计算器生成NDVI数据备用</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102111043610.png" alt="时相数据"></p>
<ol>
<li>原始数据 NDVI 计算</li>
</ol>
<p>计算公式：$\large NDVI &#x3D; \frac{(NIR - R)}{NIR + R}$，NIR 表示近红外波段，R 表示红外波段</p>
<p>ArcGIS 10.8 安装教程：</p>
<p><a href="https://blog.csdn.net/Augenstern_QXL/article/details/123781664">https://blog.csdn.net/Augenstern_QXL/article/details/123781664</a></p>
<p>以 ArcGIS 10.8 计算 LB_144.tif 的 NDVI 为例，<code>不保证操作的正确性，因为我已经忘完了我的专业知识了</code></p>
<ul>
<li><p>加载数据</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102104856507.png" alt="数据加载"></p>
</li>
<li><p>打开影像分析</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102104929109.png" alt="影像分析"></p>
</li>
<li><p>设置影像分析选项</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102111111170.png" alt="NDVI波段设置"></p>
</li>
<li><p>进行 NDVI 计算</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102105248732.png" alt="开始计算"></p>
</li>
<li><p>得到 NDVI 计算的结果</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102112012101.png" alt="NDVI计算结果"></p>
</li>
<li><p>设置已分类显示影像</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102112040868.png" alt="影像分类显示"></p>
</li>
<li><p>最终显示效果</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102112115410.png" alt="NDVI分类显示效果"></p>
<p>也不知道算没算对</p>
</li>
</ul>
<ol start="2">
<li>代码文件</li>
</ol>
<ul>
<li>SRCNN 文件夹中包含三个文件<ul>
<li>utils.py：实现了数据处理所需的函数，包含基于 GDAL 库的 geotiff 的读写、日志的输出、统计各 batch 的loss、模型参数的保存和读取、数据增强（旋转、镜像）、NDVA 计算、读取影像、归一化、预处理等</li>
<li>srcnn.py：是训练的主要代码</li>
<li>assess.py：精度验证的代码</li>
</ul>
</li>
</ul>
<ol start="3">
<li><p>开始训练</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行深度学习代码</span></span><br><span class="line">python srcnn.py --train --test --mode BI --area cropland</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中，mode 参数为融合策略，可选BI和IB，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">area 参数为研究区，可选 cropland 或 forest 相对路径</span></span><br></pre></td></tr></table></figure>

<p>开始训练：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102175515912.png" alt="开始训练"></p>
<p>loss 随着训练时间的增加而迅速减小</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102190621940.png" alt="训练完成"></p>
<p>在漫长的等待中，终于训练完成了顶级的电脑性能，是老师电脑训练时间的十几倍。。。</p>
<p>最终 cropland 在 BI 策略下，训练的精度验证的结果为：R<sup>2</sup>&#x3D;0.833378,RMSE&#x3D;0.08739,SSIM&#x3D;0.813840；比传统的方法是要好很多的。</p>
<p>在目录下生成两个 tif 文件，一个是 refer_cropland.tif（应该是第二时相 NDVI 的计算结果），一个是 SRCNN_cropland_BI.tif（模型预测 NDVI 的结果）</p>
<p>在 ArcMap 中加载如下所示：</p>
<ul>
<li><p>refer_cropland.tif</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102192909704.png" alt="refer_cropland.tif"></p>
</li>
<li><p>SRCNN_cropland_BI.tif</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102192951003.png" alt="SRCNN_cropland_BI.tif"></p>
<p>预测结果和真实结果还是有些差异的</p>
</li>
</ul>
</li>
<li><p>再训练一个 IB 策略的模型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python srcnn.py --train --test --mode IB --area cropland</span><br></pre></td></tr></table></figure>

<p>最终训练的结果如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102202750150.png" alt="IB训练完成"></p>
<p>生成 SRCNN_cropland_IB.tif 影像，加载到 ArcMap 中，显示如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102202917527.png" alt="SRCNN_cropland_IB.tif"></p>
</li>
<li><p>对比 BI 策略预测生成的影像、 IB 策略预测生成的影像、根据波段计算的 NDVI 影像、第二时相的真实影像，看是 BI 策略的影像效果更好还是 IB 策略的影像效果好</p>
<p>我觉得是 BI 的好，我比较眼拙，好难分辨</p>
</li>
<li><p>使用 STARFM 方法，BI 模式</p>
<p>ENVI 5.6 安装：</p>
<p><a href="https://zhuanlan.zhihu.com/p/564116451">https://zhuanlan.zhihu.com/p/564116451</a></p>
<ul>
<li><p>spatiotemporalblending.sav 安装：</p>
<p><a href="http://www.chen-lab.club/?post_type=products&amp;page_id=18952">http://www.chen-lab.club/?post_type=products&amp;page_id=18952</a></p>
</li>
<li><p>打开 ENVI + IDL</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102212704324.png" alt="ENVI+IDL"></p>
</li>
<li><p>BI 模式使用 T1 时刻的 Sentinel-Landsat 影像对，和 T2 时刻的 Landsat 影像进行融合。在 IDL 命令行输入 <code>spatiotemporalblending </code> 打开数据融合工具</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102212824909.png" alt="打开数据融合工具"></p>
</li>
<li><p>然后，点击Import Coarse Images, 选择 T1 和 T2 时刻的 Landsat 影像；然后<strong>选中</strong> T1 时刻的 Landsat 影像，点击 Add Fine Image，选择 T1 时刻的 Sentinel 影像</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102212423792.png" alt="数据融合设置"></p>
</li>
<li><p>几分钟后，生成ENVI格式的影像文件，打开影像观察融合结果，使用栅格计算器计算NDVI</p>
<ul>
<li>将融合的影像加载进 ENVI</li>
</ul>
</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221103092122896.png" alt="加载融合后的图像"></p>
<ul>
<li><p>计算 NDVI</p>
<p>打开 NDVI 计算工具</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102215225169.png" alt="计算NDVI"></p>
<p>输入波段开始计算</p>
</li>
</ul>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221102215149174.png" alt="开始计算"></p>
</li>
</ol>
<p>然后在 ENVI 或者 ArcGIS 中计算 NDVI，融合后的图像貌似波段混乱了，依据 band4 为 NIR band3 为 R 算出来不对劲，然后选了个能算的波段，发现效果挺差的。</p>
<ol start="7">
<li><p>使用 STARFM 方法，IB 模式</p>
<p>IB 模式使用T1时刻的Sentinel-Landsat  NDVI pairs，和T2时刻的Landsat NDVI进行融合。</p>
<ul>
<li><p>首先计算 T1、T2 时刻的 Landsat 图像的 NDVI 和 T1 时刻的 Sentinel 图像的 NDVI</p>
</li>
<li><p>参考步骤 6 对计算出来的 NDVI 图像进行融合，点击Import Coarse Images, 选择T1和T2时刻的Landsat NDVI；然后选中T1时刻的Landsat NDVI ，点击Add Fine Image，选择T1 时刻的Sentinel影像；注意设置合适的Min Value和 Max Value。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221103095717420.png" alt="IB模式融合设置"></p>
</li>
<li><p>融合的图像结果如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221103095849275.png" alt="融合结果"></p>
</li>
<li><p>在 ArcGIS 中显示的效果如下：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221103100035553.png" alt="分类显示"></p>
<p>如果我的实验步骤没有错误的话，我认为在使用 STARFM 方法下，IB 模式的效果要比 BI 模式的效果好很多</p>
</li>
</ul>
</li>
<li><p>剩下的 ESTARFM 方法和 FSDAF 方法应该都差不多，也就不再进行了</p>
</li>
</ol>
<h2 id="4、实验结果与总结"><a href="#4、实验结果与总结" class="headerlink" title="4、实验结果与总结"></a>4、实验结果与总结</h2><h3 id="4-1、问题"><a href="#4-1、问题" class="headerlink" title="4.1、问题"></a>4.1、问题</h3><ol>
<li><p>深度学习 VS 传统方法的优劣？各算法生成的图像有什么特征？主要错误&#x2F;误差发生在哪些区域？可能的原因？</p>
<ul>
<li>总的来说深度学习的方法是要优于传统方法的</li>
<li>传统方法生成的图像圆润一点吧，连续一点，深度学习的话有许多散点的情况</li>
<li>说不上来。。。</li>
</ul>
</li>
<li><p>BI VS IB 哪种策略更适合NDVI融合？</p>
<ul>
<li>深度学习方法中，可能是 BI 策略好</li>
<li>传统方法中，可能是 IB 策略好</li>
</ul>
</li>
<li><p>融合方法 VS 融合策略哪个对融合精度的提升哪个更大？</p>
<p>融合方法吧</p>
</li>
</ol>
<h3 id="4-2、思考"><a href="#4-2、思考" class="headerlink" title="4.2、思考"></a>4.2、思考</h3><ol>
<li>上述结论是否适用于其它传感器&#x2F;其它植被指数的时空间融合？有哪些潜在的应用方向？</li>
<li>尝试调整模型结构、训练参数、优化器、LOSS函数，对比融合精度。</li>
<li>你认为SRCNN方法存在哪些不足？如何改进这些不足？</li>
</ol>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ol>
<li>很久没有用过专业软件了，感觉有个两年多了，这个做到后面都没耐心了，这图都看不懂……退化严重，工作时候也就是用QGIS看看矢量文件，连一下PG库，GIS的专业软件都太重了，电脑不想装，这一次作业可把这三大件都凑齐了，QGIS最新版、ArcGIS 10.8、ENVI 5.6，啧啧啧，还好是研习室的电脑，想开了，然后又补了一个VS 2022，2022版好用很多阿，巨硬进步很大。</li>
<li>第一次跑遥感方面的深度学习代码，代码不能说完全看不懂，略懂，感叹很神奇，一行代码定义的网络和卷积能跑出这样的效果，牛。</li>
<li>这代码训练一次，在老师的电脑两百多秒，研习室电脑是他的接近二十倍，纯性能差距，这就是配的8k的电脑的性能:happy:</li>
<li>总算也是干了点专业稍相关的事情了，几大软件都用上了，轮番上阵，hhh。。。</li>
</ol>
]]></content>
      <categories>
        <category>gis</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>数据融合</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个油猴脚本</title>
    <url>/2022/10/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="我的第一个油猴脚本"><a href="#我的第一个油猴脚本" class="headerlink" title="我的第一个油猴脚本"></a>我的第一个油猴脚本</h1><p>Tampermonkey 中文名俗称油猴，是一款免费的浏览器插件，目前最为流行的用户脚本管理器，用户可以通过油猴添加和使用脚本，而脚本是一种可以修改网页 JavaScript 的程序。通过这些脚本，可以实现视频解析、音乐下载、网盘直连解析、豆瓣资源下载、百度文库增强、屏蔽网站广告等功能。总之，通过油猴，我们可以实现很多想象不到的强大功能，而这些功能的背后就是依托庞大的脚本市场，如 greasyfork：<a href="https://greasyfork.org/zh-CN%EF%BC%8C%E6%88%91%E7%BC%96%E5%86%99%E7%9A%84%E8%84%9A%E6%9C%AC%E4%B9%9F%E6%98%AF%E5%8F%91%E5%B8%83%E5%9C%A8%E8%BF%99%E4%B8%8A%E9%9D%A2%E3%80%82">https://greasyfork.org/zh-CN，我编写的脚本也是发布在这上面。</a></p>
<span id="more"></span>

<h2 id="1、契机"><a href="#1、契机" class="headerlink" title="1、契机"></a>1、契机</h2><p>从我接触到浏览器插件就用上了油猴，也算是打开了新世界的大门一样，接触了各式各样的脚本，比如：网页 vip 视频解析、百度网盘直链下载、百度文库复制、csdn 免登录复制、网页去广告、刷网课脚本等等，给我的上网冲浪生活带来了很多的便利，greasyfork 上的脚本基本上都能满足我的需求，而最近学校开了网课，网课每次看完之后就暂停了，要手动点下一节，这就产生了需求，而恰好 greasyfork 上没有这样的脚本，于是萌生了自己实现这样一个脚本的想法。</p>
<h2 id="2、初步构思"><a href="#2、初步构思" class="headerlink" title="2、初步构思"></a>2、初步构思</h2><ol>
<li>在课程列表界面，自动检测没有完成的课程，点进去观看</li>
<li>课程视频自动播放且静音，开启视频倍速播放</li>
<li>检测视频的完成度，当完成度大于 95 则跳转至下一单元</li>
<li>直到所有课程都观看完毕</li>
</ol>
<h2 id="3、技术"><a href="#3、技术" class="headerlink" title="3、技术"></a>3、技术</h2><p>需求实现实质就是一些逻辑判断，获取到指定的元素的值，然后做 if 判断以及页面跳转</p>
<ol>
<li>原生 js 的 document 对象，获取指定的 dom 元素</li>
<li>jQuery 方便获取 dom 节点</li>
<li>油猴提供的 API，GM_getValue 根据 key 获取 value、GM_setValue 设置 key-value 对、unsafeWindow 是油猴提供的沙盒环境，在 unsafeWindow 环境下，可以使用油猴提供的强大函数</li>
</ol>
<h2 id="4、脚本开发"><a href="#4、脚本开发" class="headerlink" title="4、脚本开发"></a>4、脚本开发</h2><p>在油猴插件的脚本管理界面创建新的脚本即可。我是用在 vscode 中写 js 代码，再复制到油猴中保存，然后在浏览器调试。这样挺不方便的，也没有去研究更高效的办法。</p>
<p>因为我对 js 也只是一知半解，再加上也没有那么多时间去研究，只以实现功能为准，没有去追求代码的优雅。</p>
<p>代码写的比较暴力，用了很多计时器。</p>
<h2 id="5、脚本代码"><a href="#5、脚本代码" class="headerlink" title="5、脚本代码"></a>5、脚本代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         scnu华南师范大学网课脚本</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.2</span></span><br><span class="line"><span class="comment">// @description  scnu 华南师范大学 长江雨课堂 网课自动化脚本</span></span><br><span class="line"><span class="comment">// @author       hqzqaq</span></span><br><span class="line"><span class="comment">// @icon         https://statics.scnu.edu.cn/statics/images/favicon.ico</span></span><br><span class="line"><span class="comment">// @grant        GM_getValue</span></span><br><span class="line"><span class="comment">// @grant        GM_setValue</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// @match        https://scnuyjs.yuketang.cn/pro/*</span></span><br><span class="line"><span class="comment">// @run-at       document-end</span></span><br><span class="line"><span class="comment">// @license      MIT</span></span><br><span class="line"><span class="comment">// @require https://cdn.bootcss.com/jquery/1.10.2/jquery.min.js</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="comment">// 多长时间刷新一下页面，单位 分钟</span></span><br><span class="line">    <span class="keyword">const</span> reloadTime = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 视频播放速率,可选值 [1,1.25,1.5,2],默认为二倍速</span></span><br><span class="line">    <span class="keyword">const</span> rate = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 网课页面跳转</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getElTooltipItemList</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;el-tooltip leaf-detail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getElTooltipList</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;el-tooltip f12 item&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静音</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">claim</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $(</span><br><span class="line">                <span class="string">&quot;#video-box &gt; div &gt; xt-wrap &gt; xt-controls &gt; xt-inner &gt; xt-volumebutton &gt; xt-icon&quot;</span></span><br><span class="line">            ).<span class="title function_">click</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">className, selector</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> mousemove = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;MouseEvent&quot;</span>);</span><br><span class="line">            mousemove.<span class="title function_">initMouseEvent</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>, unsafeWindow, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(className)[<span class="number">0</span>].<span class="title function_">dispatchEvent</span>(mousemove);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector).<span class="title function_">click</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加速</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">speed</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> keyt = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(rate === <span class="number">2</span> || rate === <span class="number">1</span>)&#123;</span><br><span class="line">                keyt = <span class="string">&quot;[keyt=&#x27;&quot;</span> + rate + <span class="string">&quot;.00&#x27;]&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                keyt = <span class="string">&quot;[keyt=&#x27;&quot;</span> + rate + <span class="string">&quot;&#x27;]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">fun</span>(<span class="string">&quot;xt_video_player_speed&quot;</span>, keyt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> getElementInterval = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> elTooltipList = <span class="title function_">getElTooltipList</span>();</span><br><span class="line">            <span class="keyword">const</span> elTooltipItemList = <span class="title function_">getElTooltipItemList</span>();</span><br><span class="line">            <span class="keyword">if</span> (elTooltipList) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; elTooltipList.<span class="property">length</span>; index++) &#123;</span><br><span class="line">                    <span class="keyword">const</span> element = elTooltipList[index];</span><br><span class="line">                    <span class="keyword">const</span> textContent = element.<span class="property">textContent</span>;</span><br><span class="line">                    <span class="comment">//const textContent = &#x27;&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> (textContent === <span class="string">&quot;未开始&quot;</span> || textContent === <span class="string">&quot;未读&quot;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 判断是否是习题</span></span><br><span class="line">                        <span class="keyword">if</span>(elTooltipItemList[index].<span class="property">innerText</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;习题&#x27;</span>)!= -<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 判断是否已过学习时间</span></span><br><span class="line">                        <span class="keyword">if</span> (elTooltipItemList[index].<span class="property">children</span>[<span class="number">1</span>].<span class="property">children</span>[<span class="number">0</span>].<span class="property">innerText</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;已过&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(getElementInterval);</span><br><span class="line">                        <span class="title function_">GM_setValue</span>(<span class="string">&quot;rowUrl&quot;</span>, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">toString</span>());</span><br><span class="line">                        <span class="comment">// 网课页面跳转</span></span><br><span class="line">                        elTooltipItemList[index].<span class="title function_">click</span>();</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="title function_">close</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> video;</span><br><span class="line">        <span class="keyword">const</span> videoPlay = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 获取播放器</span></span><br><span class="line">            video = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;xt_video_player&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!video) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 视频开始5s之后再开启倍速</span></span><br><span class="line">                <span class="title function_">speed</span>()</span><br><span class="line">            &#125;,<span class="number">5000</span>);</span><br><span class="line">            <span class="title function_">claim</span>();</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(videoPlay);</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否播放完成的检测</span></span><br><span class="line">        <span class="keyword">const</span> playTimeOut = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!video) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            video.<span class="title function_">play</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 没有静音</span></span><br><span class="line">            <span class="keyword">if</span> (video.<span class="property">volume</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title function_">claim</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> completeness = $(</span><br><span class="line">                <span class="string">&quot;#app &gt; div.app-wrapper &gt; div.wrap &gt; div.viewContainer.heightAbsolutely &gt; div &gt; div.video-wrap &gt; div &gt; div &gt; section.title &gt; div.title-fr &gt; div &gt; div &gt; span&quot;</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (!completeness) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> completeness[<span class="number">0</span>] == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> videoText = completeness[<span class="number">0</span>].<span class="property">innerHTML</span></span><br><span class="line">            <span class="keyword">if</span> (videoText) &#123;</span><br><span class="line">                <span class="keyword">let</span> str = videoText.<span class="title function_">toString</span>();</span><br><span class="line">                <span class="keyword">const</span> succ = str.<span class="title function_">substring</span>(<span class="number">4</span>, str.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">const</span> succNum = <span class="built_in">parseInt</span>(succ);</span><br><span class="line">                <span class="keyword">if</span> (succ &gt;= <span class="number">95</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> url = <span class="title function_">GM_getValue</span>(<span class="string">&quot;rowUrl&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(url)&#123;</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(playTimeOut);</span><br><span class="line">                        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否为阅读类型</span></span><br><span class="line">        <span class="keyword">const</span> readInterval = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> read = $(</span><br><span class="line">                <span class="string">&quot;#app &gt; div.app-wrapper &gt; div.wrap &gt; div.viewContainer.heightAbsolutely &gt; div &gt; div.graph-wrap &gt; div &gt; div &gt; section.title &gt; div.title-fr &gt; div &gt; div&quot;</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span>(!read)&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> read[<span class="number">0</span>] == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> readText = read[<span class="number">0</span>].<span class="property">innerHTML</span></span><br><span class="line">            <span class="keyword">if</span>(readText)&#123;</span><br><span class="line">                <span class="keyword">if</span>(readText.<span class="title function_">toString</span>() === <span class="string">&#x27;已读&#x27;</span>)&#123;</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(readInterval);</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="title function_">GM_getValue</span>(<span class="string">&quot;rowUrl&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了防止页面假死，定时刷新一下页面</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 如果保存了课程列表路径就回退的课程列表页面</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">GM_getValue</span>(<span class="string">&quot;rowUrl&quot;</span>))&#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="title function_">GM_getValue</span>(<span class="string">&quot;rowUrl&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            location.<span class="title function_">reload</span>()</span><br><span class="line">        &#125;,reloadTime * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>代码比较简单，简单的逻辑判断，最难的一个是视频倍速播放，这个 video 倍速播放是锁住的，调整倍速播放的属性是无效的，我就想直接触发它提供的二倍速也行，没想到这个也很困难，视频倍速播放的按钮，首先需要触发鼠标悬浮才有效，这就无法实现自动化的效果了。因为我对 js 的不熟悉，在网上也没有找到解决办法，尝试了各种办法都没有效果，本来一天就能弄完，为了这一个功能，又搭进去好几天~~~，最后是想到去读 greasfork 上其他人实现这种功能的代码，没想到还真让我找到了，就是下面这一段珍贵的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">className, selector</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> mousemove = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;MouseEvent&quot;</span>);</span><br><span class="line">    mousemove.<span class="title function_">initMouseEvent</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>, unsafeWindow, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(className)[<span class="number">0</span>].<span class="title function_">dispatchEvent</span>(mousemove);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector).<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先触发 dom 元素的 mousemove 事件</p>
<p>之前在网上也有看到过类似的描述，只是我不知道这个 mousemove.initMouseEvent(）怎么传参，再加上控制台报错，我就觉得这种方法不行，没想到也是解决办法是远在天边，近在眼前，不过好歹绕回来了。</p>
<h2 id="6、注解介绍"><a href="#6、注解介绍" class="headerlink" title="6、注解介绍"></a>6、注解介绍</h2><p>代码的前面被 <code>\==UserScript\==</code> 包裹的注释，包含了一些注解，定义了脚本的一些元信息，接下来介绍几个常用的注解，更多的注解信息可以访问官方文档：<a href="https://www.tampermonkey.net/documentation.php%E3%80%82">https://www.tampermonkey.net/documentation.php。</a></p>
<ol>
<li>@name 定义脚本的名字</li>
<li>@version 定义脚本的版本，在有代码更新的时候，需要改变版本的值，这样才能将代码推送给用户</li>
<li>@description 脚本的描述</li>
<li>@author 作者名字</li>
<li>@icon 脚本的图标，可以是 url 地址，也可以是图片的 base64 编码</li>
<li>@grant 获取权限，使用它可以获取油猴提供的 API</li>
<li>@match 脚本生效的网址匹配，只有符合匹配规则的网址，才会执行脚本</li>
<li>@run-at 脚本代码执行的时间，有好几个值，这里我用的是 document-end，即当所有的 dom 元素加载完毕之后再执行代码</li>
<li>@license 开源许可证，这里我用的是 MIT，即所有人都可查看和修改代码</li>
<li>@require 引入外部的 js，这里我引入了 jQuery</li>
</ol>
<h2 id="7、脚本的发布"><a href="#7、脚本的发布" class="headerlink" title="7、脚本的发布"></a>7、脚本的发布</h2><p>前往 <a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a> 网址，登录，点击自己的头像即可发布自己编写的脚本。</p>
<p>填入脚本源码和脚本使用说明即可。</p>
<h2 id="8、脚本使用"><a href="#8、脚本使用" class="headerlink" title="8、脚本使用"></a>8、脚本使用</h2><h3 id="8-1、功能实现"><a href="#8-1、功能实现" class="headerlink" title="8.1、功能实现"></a>8.1、功能实现</h3><p>目前已实现：</p>
<ol>
<li>当进入课程界面，查找未开始和已经有完成度的课程和未读的材料，自动看视频，直到所有视频看完为止</li>
<li>视频界面，自动播放视频、静音、5秒之后默认开启二倍速</li>
</ol>
<p>未实现：</p>
<ol>
<li>答题，所有习题都会跳过，需要手动答题</li>
</ol>
<p>只是做了些自动化的处理，理论上是不会有风险的（当然只是理论上，自行考虑 ^_^）</p>
<h3 id="8-2、使用"><a href="#8-2、使用" class="headerlink" title="8.2、使用"></a>8.2、使用</h3><p>本脚本只适用于华南师范大学长江雨课堂</p>
<h3 id="8-3、安装油猴"><a href="#8-3、安装油猴" class="headerlink" title="8.3、安装油猴"></a>8.3、安装油猴</h3><p>以edge浏览器为例，在扩展商店搜索<code>tampermonkey</code>,安装油猴插件</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221003232246888.png" alt="image-20221003232246888" style="zoom: 67%;">

<h3 id="8-4、安装脚本"><a href="#8-4、安装脚本" class="headerlink" title="8.4、安装脚本"></a>8.4、安装脚本</h3><p>在 greasyfork（<a href="https://greasyfork.org/zh-CN%EF%BC%89">https://greasyfork.org/zh-CN）</a> 网站，搜索<code>scnu华南师范大学网课脚本</code>关键字，安装脚本</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221003234101801.png" alt="image-20221003234101801" style="zoom:67%;">

<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221003234133621.png" alt="image-20221003234133621" style="zoom:67%;">

<h3 id="8-5、脚本运行"><a href="#8-5、脚本运行" class="headerlink" title="8.5、脚本运行"></a>8.5、脚本运行</h3><p>前往 scnu 华南师范大学 长江雨课堂（<a href="https://scnuyjs.yuketang.cn/pro/portal/home/%EF%BC%89%EF%BC%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E8%BF%9B%E5%85%A5%E8%AF%BE%E7%A8%8B%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BC%80%E5%A7%8B%E5%88%B7%E8%AF%BE%E3%80%82">https://scnuyjs.yuketang.cn/pro/portal/home/），登录，进入课程界面，即可开始刷课。</a><br><code>注意：edge 浏览器需要允许网站弹窗(注意地址栏的提示)脚本才能执行跳转</code>，这个很关键，不然脚本无法正常执行。</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221003232615741.png" alt="image-20221003232615741" style="zoom:67%;">

<h3 id="8-6、参数调整"><a href="#8-6、参数调整" class="headerlink" title="8.6、参数调整"></a>8.6、参数调整</h3><p>总共有两个参数可以调整</p>
<ul>
<li>一个是页面刷新的时间，防止网络不好或者其它原因造成页面假死，默认为10分钟。</li>
<li>一个是视频倍速的速率，有四个值，1、1.25、1.5、2；默认为 2</li>
</ul>
<p>可自己在代码编辑进行修改</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20221008084124867.png" alt="image-20221008084124867"></p>
<h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><p>可以解决面临的问题，这就是开发的快乐吧。</p>
<p>借用赛博丁真的一句话：不觉得很酷吗？作为一个理科生，我觉得太酷了（手动狗头）</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>油猴</tag>
        <tag>脚本</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>本地jar包导入maven</title>
    <url>/2022/09/23/%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E5%AF%BC%E5%85%A5maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="1、将本地jar包导入maven仓库"><a href="#1、将本地jar包导入maven仓库" class="headerlink" title="1、将本地jar包导入maven仓库"></a>1、将本地jar包导入maven仓库</h2><blockquote>
<p>执行命令参数</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn install:<span class="built_in">install-file</span> </span><br><span class="line">    <span class="literal">-Dfile</span>=filePath </span><br><span class="line">    <span class="literal">-DgroupId</span>=groupId </span><br><span class="line">    <span class="literal">-DartifactId</span>=artifactId </span><br><span class="line">    <span class="literal">-Dversion</span>=version </span><br><span class="line">    <span class="literal">-Dpackaging</span>=jar</span><br></pre></td></tr></table></figure>

<span id="more"></span>



<blockquote>
<p>示例：ojdbc6.jar导入maven仓库命令，在ojdbc6.jar当前目录下执行cmd命令</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn install:<span class="built_in">install-file</span> <span class="literal">-DgroupId</span>=com.oracle <span class="literal">-DartifactId</span>=ojdbc6 <span class="literal">-Dversion</span>=<span class="number">11.2</span>.<span class="number">0</span> <span class="literal">-Dfile</span>=ojdbc6.jar <span class="literal">-Dpackaging</span>=jar</span><br></pre></td></tr></table></figure>

<ol>
<li>在jar包所在的目录下输入cmd，弹出的cmd窗口的路径即为当前窗口</li>
<li>输入命令后显示如下信息表示成功。</li>
<li>pom文件中jar包爆红的时候，可以去仓库中查看是否存在此jar包，如果存在可执行以上操作，再刷新项目。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>jar包导入</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/09/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="1、普通字符"><a href="#1、普通字符" class="headerlink" title="1、普通字符"></a>1、普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[ABC]</td>
<td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">[^ABC]</td>
<td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/ED971D92-30F4-4768-A2C7-02A84A3A9DEB.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="https://www.runoob.com/wp-content/uploads/2014/03/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">[\s\S]</td>
<td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://www.runoob.com/wp-content/uploads/2014/03/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://www.runoob.com/wp-content/uploads/2014/03/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg" alt="img"></td>
</tr>
</tbody></table>
<hr>
<h2 id="2、非打印字符"><a href="#2、非打印字符" class="headerlink" title="2、非打印字符"></a>2、非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\cx</td>
<td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody></table>
<hr>
<h2 id="3、特殊字符"><a href="#3、特殊字符" class="headerlink" title="3、特殊字符"></a>3、特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td>
</tr>
</tbody></table>
<hr>
<h2 id="4、限定符"><a href="#4、限定符" class="headerlink" title="4、限定符"></a>4、限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<h2 id="5、定位符"><a href="#5、定位符" class="headerlink" title="5、定位符"></a>5、定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非单词边界匹配。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p>
<h2 id="6、选择"><a href="#6、选择" class="headerlink" title="6、选择"></a>6、选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p>
<p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>
<h2 id="7、反向引用"><a href="#7、反向引用" class="headerlink" title="7、反向引用"></a>7、反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <strong>?:<strong>、</strong>?&#x3D;</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p>
<p>单个字符：</p>
<ul>
<li>?：表示前面的字符需要出现0次或者1次。</li>
<li>*：表示前面的字符出现一次或多次。</li>
<li>+：表示前面的字符出现一次以上。</li>
<li>{}：表示字符出现的次数，{2，}两次以上、{2，6}出现2到6次</li>
</ul>
<p>多个字符：</p>
<ul>
<li>将匹配内容用括号括起来：(匹配内容)?</li>
</ul>
<p>或运算符：</p>
<ul>
<li>匹配a cat a dog ：a (cat|dog)</li>
</ul>
<p>字符类：</p>
<ul>
<li>匹配abc：[abc]+ []中指定匹配的内容，+表示出现一次以上</li>
<li>[a-zA-Z0-9]+：大小写字母、数字</li>
<li>[^0-9]+：匹配非数字，包含换行符</li>
</ul>
<p>元字符：</p>
<ul>
<li>\d+：代表数字字符 </li>
<li>\w+：代表单词字符(英文、数字及下划线)</li>
<li>\s：空白符包含tab和换行符 </li>
<li>\D  \W \S意义相反</li>
<li>.：代表任意字符但不包含换行符 .</li>
<li>^：匹配行首</li>
<li>&amp;：匹配行尾</li>
</ul>
<p>贪婪与懒惰匹配：</p>
<ul>
<li>加上?将贪婪匹配切换为懒惰匹配</li>
</ul>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习入门</title>
    <url>/2022/09/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>机器学习是一种功能、方法，或者更具体的说是一种算法，它能够赋予<code>机器进行学习</code>的能力，从而使机器完成一些通过编程无法直接实现的功能。</p>
<p>机器学习是利用大量数据训练出一个<code>最优模型</code>，然后再利用此模型预测出其他数据的一种方法。</p>
<span id="more"></span>

<h2 id="1、人工智能"><a href="#1、人工智能" class="headerlink" title="1、人工智能"></a>1、人工智能</h2><p>人工智能（Artificial Intelligence）是计算机科学技术的一个分支，指的是通过机器和计算机来模拟人类智力活动的过程。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1F11J4C-1.gif" alt="三者关系"></p>
<h2 id="2、学习形式分类"><a href="#2、学习形式分类" class="headerlink" title="2、学习形式分类"></a>2、学习形式分类</h2><h3 id="2-1、有监督学习"><a href="#2-1、有监督学习" class="headerlink" title="2.1、有监督学习"></a>2.1、有监督学习</h3><p>有监督学习（supervised learning），需要事先需要准备好要<code>输入数据（训练样本）</code>与真实的<code>输出结果（参考答案)</code>，然后通过计算机的学习得到一个预测模型，再用已知的模型去预测未知的样本</p>
<h3 id="2-2、无监督学习"><a href="#2-2、无监督学习" class="headerlink" title="2.2、无监督学习"></a>2.2、无监督学习</h3><p>无监督学习（unsupervised learning）就是在没有“参考答案”的前提下，计算机仅根据样本的特征或相关性，就能实现从样本数据中训练出相应的预测模型。</p>
<p>还有半监督学习和强化学习等</p>
<h2 id="3、预测结果分类"><a href="#3、预测结果分类" class="headerlink" title="3、预测结果分类"></a>3、预测结果分类</h2><h3 id="3-1、回归-amp-分类"><a href="#3-1、回归-amp-分类" class="headerlink" title="3.1、回归&amp;分类"></a>3.1、回归&amp;分类</h3><p>连续和离散是统计学中的一种概念，全称为“连续变量”和“离散变量”</p>
<h3 id="3-2、聚类"><a href="#3-2、聚类" class="headerlink" title="3.2、聚类"></a>3.2、聚类</h3><p>用一个成语表述“物以类聚，人以群分”，将相似的样本聚合在一起后，然后进行分析</p>
<h2 id="4、机器学习术语"><a href="#4、机器学习术语" class="headerlink" title="4、机器学习术语"></a>4、机器学习术语</h2><h3 id="4-1、模型"><a href="#4-1、模型" class="headerlink" title="4.1、模型"></a>4.1、模型</h3><p>可以把它看做一个“魔法盒”，你向它许愿（输入数据），它就会帮你实现愿望（输出预测结果）</p>
<h3 id="4-2、数据集"><a href="#4-2、数据集" class="headerlink" title="4.2、数据集"></a>4.2、数据集</h3><p>表示一个承载数据的集合，数据集可划分为“训练集”和“测试集”，它们分别在机器学习的“训练阶段”和“预测输出阶段”起着重要的作用</p>
<h3 id="4-3、样本-amp-特征"><a href="#4-3、样本-amp-特征" class="headerlink" title="4.3、样本&amp;特征"></a>4.3、样本&amp;特征</h3><p>样本指的是数据集中的数据，一条数据被称为“一个样本”，通常情况下，样本会包含多个特征值用来描述数据</p>
<h3 id="4-4、向量"><a href="#4-4、向量" class="headerlink" title="4.4、向量"></a>4.4、向量</h3><p>向量在线性代数中有着严格的定义，指具有大小和方向的量，数据集中的每一个样本都是一条具有向量形式的数据</p>
<h3 id="4-5、矩阵"><a href="#4-5、矩阵" class="headerlink" title="4.5、矩阵"></a>4.5、矩阵</h3><p>可以看成由向量组成的二维数组，数据集就是以二维矩阵的形式存储数据的</p>
<h3 id="4-6、假设函数-amp-损失函数"><a href="#4-6、假设函数-amp-损失函数" class="headerlink" title="4.6、假设函数&amp;损失函数"></a>4.6、假设函数&amp;损失函数</h3><p>假设函数和损失函数是机器学习中的两个概念，它并非某个模块下的函数方法，而是我们根据实际应用场景确定的一种<code>函数形式</code></p>
<h4 id="4-6-1、假设函数"><a href="#4-6-1、假设函数" class="headerlink" title="4.6.1、假设函数"></a>4.6.1、假设函数</h4><p>假设函数（Hypothesis Function）可表述为<code>y=f(x)</code>其中 x 表示输入数据，而 y 表示输出的预测结果，而这个结果需要不断的优化才会达到预期的结果，否则会与实际值偏差较大。</p>
<h4 id="4-6-2、损失函数"><a href="#4-6-2、损失函数" class="headerlink" title="4.6.2、损失函数"></a>4.6.2、损失函数</h4><p>损失函数（Loss Function）又叫目标函数，简写为 L(x)，这里的 x 是假设函数得出的预测结果“y”，如果 L(x) 的返回值越大就表示预测结果与实际偏差越大，越小则证明预测值越来越“逼近”真实值，这才是机器学习最终的目的。因此损失函数就像一个度量尺，能度量“假设函数”预测结果的优劣，从而做出相应的优化策略。</p>
<h4 id="4-6-3、优化方法"><a href="#4-6-3、优化方法" class="headerlink" title="4.6.3、优化方法"></a>4.6.3、优化方法</h4><p>“优化方法”可以理解为假设函数和损失函数之间的沟通桥梁。通过 L(x) 可以得知假设函数输出的预测结果与实际值的偏差值，当该值较大时就需要对其做出相应的调整，这个调整的过程叫做“参数优化”，可以通过<code>梯度下降、牛顿方与拟牛顿法、共轭梯度法</code>进行参数调优</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1F30JR3-3.gif" alt="函数关系"></p>
<h3 id="4-7、拟合-amp-过拟合-amp-欠拟合"><a href="#4-7、拟合-amp-过拟合-amp-欠拟合" class="headerlink" title="4.7、拟合&amp;过拟合&amp;欠拟合"></a>4.7、拟合&amp;过拟合&amp;欠拟合</h3><p>拟合是机器学习中的重要概念，机器学习的研究对象就是让模型能更好的拟合数据</p>
<h4 id="4-7-1、拟合"><a href="#4-7-1、拟合" class="headerlink" title="4.7.1、拟合"></a>4.7.1、拟合</h4><p>“拟合”就是把平面坐标系中一系列散落的点，用一条光滑的曲线连接起来，因此拟合也被称为“曲线拟合”，拟合的曲线一般用函数进行表示，但是由于拟合曲线会存在许多种连接方式，因此就会出现多种拟合函数。通过研究、比较确定一条最佳的“曲线”也是机器学习中一个重要的任务</p>
<h4 id="4-7-2、过拟合"><a href="#4-7-2、过拟合" class="headerlink" title="4.7.2、过拟合"></a>4.7.2、过拟合</h4><p>过拟合（overfitting）与是机器学习模型训练过程中经常遇到的问题，所谓过拟合，通俗来讲就是模型的泛化能力较差，也就是过拟合的模型在训练样本中表现优越，但是在验证数据以及测试数据集中表现不佳</p>
<h4 id="4-7-3、欠拟合"><a href="#4-7-3、欠拟合" class="headerlink" title="4.7.3、欠拟合"></a>4.7.3、欠拟合</h4><p>欠拟合（underfitting）恰好与过拟合相反，它指的是“曲线”不能很好的“拟合”数据。在训练和测试阶段，欠拟合模型表现均较差，无法输出理想的预测结果。造成欠拟合的主要原因是由于没有选择好合适的特征值</p>
<h2 id="5、机器学习环境搭建"><a href="#5、机器学习环境搭建" class="headerlink" title="5、机器学习环境搭建"></a>5、机器学习环境搭建</h2><h3 id="5-1、numpy"><a href="#5-1、numpy" class="headerlink" title="5.1、numpy"></a>5.1、numpy</h3><p>是 Python 科学计算的基础库，提供了多维数组处理、线性代数、傅里叶变换、随机数生成等非常有用的数学工具。</p>
<h3 id="5-2、pandas"><a href="#5-2、pandas" class="headerlink" title="5.2、pandas"></a>5.2、pandas</h3><p>属于 Python 第三方数据处理库，它基于 NumPy 构建而来，主要用于数据的处理与分析。Pandas 提供了一个简单高效的 DataFrame 对象（类似于电子表格），它能够完成数据的清洗、预处理以及数据可视化工作等。除此之外，Pandas 能够非常轻松地实现对任何文件格式的读写操作，比如 CSV 文件、json 文件、excel 文件。</p>
<h3 id="5-3、scikit-learn"><a href="#5-3、scikit-learn" class="headerlink" title="5.3、scikit-learn"></a>5.3、scikit-learn</h3><p>是一个基于 Python 语言的机器学习算法库，建立在 NumPy、Scipy 与 Matplotlib 之上，它提供了大量机器学习算法接口（API）。</p>
<p>Scikit-Learn 的基本功能主要被分为六大部分：分类，回归，聚类，数据降维，模型选择和数据预处理。</p>
<h2 id="6、线性回归算法"><a href="#6、线性回归算法" class="headerlink" title="6、线性回归算法"></a>6、线性回归算法</h2><p>线性回归算法（Linear Regression），“线性”代表线性模型，而“回归”则表示回归问题。线性回归主要用来解决回归问题，也就是预测连续值的问题，是利用线性模型来“预测”真实值的过程，而能满足这样要求的数学模型被称为“回归模型”。最简单的线性回归模型是我们所熟知的一次函数（即 y&#x3D;kx+b）</p>
<blockquote>
<p>还有另外一种回归模型，也就是非线性模型(nonlinear model)，它指因变量与自变量之间的关系不能表示为线性对应关系(即不是一条直线)，比如我们所熟知的对数函数、指数函数、二次函数等。</p>
</blockquote>
<h3 id="6-1、线性回归方程"><a href="#6-1、线性回归方程" class="headerlink" title="6.1、线性回归方程"></a>6.1、线性回归方程</h3><p>$$<br>\large<br>y &#x3D; w_1x + b<br>$$</p>
<p>以上函数可作为线性模型的“假设函数”，其中 x 表示输入的样本数据，y 表示输出的预测结果，而 &#x3D;&#x3D;w<del>1</del>&#x3D;&#x3D; 指的是线性回归模型的权值参数，b 指的是线性回归模型的“偏差值”。</p>
<blockquote>
<p>权值，可理解为个不同“特征”对于预测结果的重要性。权值系数越大，那么这一项属性值对最终结果的影响就越大。</p>
</blockquote>
<h2 id="7、数学解析线性回归"><a href="#7、数学解析线性回归" class="headerlink" title="7、数学解析线性回归"></a>7、数学解析线性回归</h2><h3 id="7-1、假设函数"><a href="#7-1、假设函数" class="headerlink" title="7.1、假设函数"></a>7.1、假设函数</h3><p>$$<br>\large<br>Y_1 &#x3D; w^TX_1 + b \text{ 或 } \<br>f(x) &#x3D; w^TX_1 + b<br>$$</p>
<p><code>f(x) </code>仍然代表预测结果， &#x3D;&#x3D;X<del>1</del>&#x3D;&#x3D; 表示数据样本， <code>b </code> 表示用来调整预测结果的“偏差度量值”，而 &#x3D;&#x3D;w^T^&#x3D;&#x3D; 表示权值系数的转置。矩阵相乘法是一个求两个向量<strong>点积</strong>的过程，也就是按位相乘，然后求和。</p>
<h3 id="7-2、损失函数"><a href="#7-2、损失函数" class="headerlink" title="7.2、损失函数"></a>7.2、损失函数</h3><p>损失函数就像一个衡量尺，这个函数的<code>返回值越大</code>就表示<code>预测结果与真实值偏差越大</code>。可以用预测值 Y<del>1</del> 减去真实值 Y，再用平方消除负数。<br>$$<br>\large<br>loss &#x3D; \frac{\sum(w^TX_1 + b - Y)^2}{n}<br>$$</p>
<h2 id="8、梯度下降求极值"><a href="#8、梯度下降求极值" class="headerlink" title="8、梯度下降求极值"></a>8、梯度下降求极值</h2><p><code>梯度</code>下降是机器学习中常用的一种优化方法，主要用来<font color="orange">解决求极小值的问题</font>，某个函数在某点的<code>梯度</code>指向该函数取得<code>最大值</code>的方向，那么它的<code>反反向</code>自然就是取得<code>最小值</code>的方向。在解决线性回归和 Logistic（逻辑） 回归问题时，梯度下降方法有着广泛的应用。</p>
<p><code>梯度</code>是微积分学的术语，它本质上是一个<code>向量</code>，表示<code>函数在某一点处的方向导数上沿着特定的方向取得最大值</code>，即函数在该点处沿着该方向变化最快，变化率最大。梯度下降法的计算过程就是<code>沿梯度方向</code>求解极小值，当然你也可以沿梯度上升的方向求解极大值。</p>
<p>以线性回归的损失函数为例，梯度下降作为一种优化方法，其目的是要使得损失值最小。因此“梯度下降”就需要控制损失函数中的 <code>w</code> 和 <code>b</code> 参数来找到最小值。比如控制 w 就会得到如下方法：<br>$$<br>\large<br>w_新 &#x3D; w_旧 - 学习率 * 损失值<br>$$</p>
<ul>
<li>通过梯度下降计算极小值时，需要对损失函数的 <code>w</code> 求偏导求得，这个偏导也就是“梯度”，通过损失值来调节 <code>w</code>，不断缩小损失值直到最小</li>
<li>“学习率”是一个由<code>外部输入的参数</code>，被称为<code>“超参数”</code>，可以形象地把它理解为下山时走的<code>“步长”</code>大小，想要 w 多调整一点，就把学习率调高一点。不过学习率也不是越高越好，过高的学习率可能导致调整幅度过大，导致无法求得真正的最小值。当损失函数取得极小值时，此时的参数值被称为<code>“最优参数”</code>。因此，在机器学习中最重要的一点就是寻找“最优参数”</li>
<li>梯度下降还包括：<code>批量梯度下降（BGD）</code>、随机梯度下降（SGD）、小批量梯度下降（MBGD），其中批量梯度下降是最常用的</li>
</ul>
<h2 id="9、sklearn"><a href="#9、sklearn" class="headerlink" title="9、sklearn"></a>9、sklearn</h2><p>Scikit-learn 简称 <strong>sklearn</strong> 是基于 Python 语言实现的机器学习算法库，它包含了常用的机器学习算法，比如回归、分类、聚类、支持向量机、随机森林等等。同时，它使用 NumPy 库进行高效的科学计算，比如线性代数、矩阵等等。</p>
<p>常用算法库：</p>
<ul>
<li>·linear_model：线性模型算法族库，包含了线性回归算法，以及 Logistic 回归算法，它们都是基于线性模型</li>
<li>.naiv_bayes：朴素贝叶斯模型算法库</li>
<li>.tree：决策树模型算法库</li>
<li>.svm：支持向量机模型算法库</li>
<li>.neural_network：神经网络模型算法库</li>
<li>.neightbors：最近邻算法模型库</li>
</ul>
<h3 id="9-1、线性回归算法的简单实现"><a href="#9-1、线性回归算法的简单实现" class="headerlink" title="9.1、线性回归算法的简单实现"></a>9.1、线性回归算法的简单实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="comment"># 使用matplotlib绘制图像</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 使用numpy准备数据集</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">line_model_learn</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 准备自变量x,3到6的区间均分间隔30份数</span></span><br><span class="line">    x = np.linspace(<span class="number">3</span>, <span class="number">6</span>, <span class="number">40</span>)</span><br><span class="line">    <span class="comment"># 准备因变量y，这一个关于x的假设函数</span></span><br><span class="line">    y = <span class="number">3</span> * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加代码，扰乱点的分布</span></span><br><span class="line">    x = x + np.random.rand(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 由于fit 需要传入二维矩阵数据，因此需要处理x，y的数据格式,将每个样本信息单独作为矩阵的一行</span></span><br><span class="line">    x = [[i] <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    y = [[i] <span class="keyword">for</span> i <span class="keyword">in</span> y]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建线性回归模型</span></span><br><span class="line">    model = linear_model.LinearRegression()</span><br><span class="line">    <span class="comment"># 训练模型，&quot;喂入&quot;数据</span></span><br><span class="line">    model.fit(x, y)</span><br><span class="line">    y_ = model.predict(data)</span><br><span class="line">    <span class="built_in">print</span>(y_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看w和b的值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;w值为:&quot;</span>, model.coef_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b截距值为:&quot;</span>, model.intercept_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集绘制,散点图，图像满足函假设函数图像</span></span><br><span class="line">    plt.scatter(x, y)</span><br><span class="line">    <span class="comment"># 绘制最佳拟合直线</span></span><br><span class="line">    plt.plot(data, y_, color=<span class="string">&quot;red&quot;</span>, linewidth=<span class="number">3.0</span>, linestyle=<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    plt.legend([<span class="string">&quot;func&quot;</span>, <span class="string">&quot;Data&quot;</span>], loc=<span class="number">0</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 准备测试数据 x_</span></span><br><span class="line">    x_ = [[<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">6</span>]]</span><br><span class="line">    line_model_learn(x_)</span><br></pre></td></tr></table></figure>

<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20220730160737417.png" alt="拟合直线绘制"></p>
<h3 id="9-2、线性回归总结"><a href="#9-2、线性回归总结" class="headerlink" title="9.2、线性回归总结"></a>9.2、线性回归总结</h3><p>线性回归适用于有<code>监督学习</code>的回归问题，首先在构建线性模型前，需要准备好待输入的数据集，数据集按照需要可划分为<code>训练集</code>和<code>测试集</code>，使用训练集中的向量 X 与向量 Y 进行模型的训练，其中<code>向量 Y 表示对应 X 的结果数值</code>(也就是<code>“参考答案”</code>)；而输出时需要使用测试集，输入测试 X 向量输出预测结果向量 Y。</p>
<p>线性回归主要解决了以下三个问题：</p>
<ul>
<li>第一，为假设函数设定了参数 w，通过假设函数画出线性“拟合”直线。</li>
<li>第二，将预测值带入损失函数，计算出一个损失值。</li>
<li>第三，通过得到的损失值，利用梯度下降等优化方法，不断调整 w 参数，使得损失值取得最小值。我们把这个<code>优化参数值的过程</code>叫做<code>“线性回归”的学习过程</code>。</li>
</ul>
<h2 id="10、Logistic回归算法"><a href="#10、Logistic回归算法" class="headerlink" title="10、Logistic回归算法"></a>10、Logistic回归算法</h2><p>Logistic 回归算法，又叫做逻辑回归算法，或者 LR 算法（Logistic Regression），是针对“分类问题”的算法。分类问题同样也可以基于<code>“线性模型”</code>构建。“线性模型”最大的特点就是“直来直去”不会打弯，而我们知道，分类问题的预测结果是<code>“离散的”</code>，即对输出数据的类别做判断。比如将类别预设条件分为<code>“0”类</code>和<code>“1”类</code>（或者“是”或者“否”）那么图像只会在 “0”和“1”之间上下起伏，如下图所示：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1G313IU-0.gif" alt="离散型数据"></p>
<h3 id="10-1、Logistic-函数"><a href="#10-1、Logistic-函数" class="headerlink" title="10.1、Logistic 函数"></a>10.1、Logistic 函数</h3><blockquote>
<p>在机器学习中，Logistic 函数通常用来解决二元分类问题，也就是涉及两个预设类别的问题，而当类别数量超过两个时就需要使用 Softmax 函数来解决。</p>
</blockquote>
<p>在神经网络算法中被称为 <a href="https://baike.baidu.com/item/Sigmoid%E5%87%BD%E6%95%B0/7981407?fr=aladdin"><strong>Sigmoid 函数</strong></a>，也有人称它为 <strong>Logistic 曲线</strong>。</p>
<p>函数图像如下图所示：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1G3134434-1.gif" alt="Logistic 曲线函数"></p>
<p>数学表达式如下：<br>$$<br>\large<br>Logistic(z)&#x3D;\frac{1}{1 + e^{-z}}<br>$$<br>e 称为自然常数，也就是一个固定值的“常量”，e^-z^ 是以 e 为底、z 为变量的指数函数。</p>
<p><code>Logistic 函数</code>也称为 <code>S 型生长曲线</code>，取值范围为 (0,1)，它可以将一个实数映射到 (0,1) 的区间，非常适合做二元分类。当 z&#x3D;0 时，该函数的取值为 0.5，随着 z 的增大，对应的函数值将逼近于 1；而随着 z 的减小，其函数值将逼近于 0。</p>
<p>对于 Logistic 函数而言，坐标轴 0 是一个有着特殊意义坐标，越靠近 0 和越远离 0 会出现两种截然不同的情况：<code>任何大于 0.5 的数据都会被划分到 “1”类中；而小于 0.5 会被归如到 “0”类</code>。</p>
<p><strong>特别是：</strong></p>
<ol>
<li><p>当 x 轴坐标取值缩小时会出现以下图像：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1G31340K-3.gif" alt="x 取值缩小时 Logistic 函数"></p>
<p>由此可见 Logistic 回归算法属于“线性”模型</p>
</li>
<li><p>当 x 逐渐放大时则会出现以下图像：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1G3136241-4.gif" alt="x 取值放大时 Logistic 函数"></p>
<p>当 x 增大到一定程度时，Logistic 函数图像变成了“台阶”式图像，由此可知，该函数能够很好的“拟合”二分类问题函数图像。在数学像 Logistic 函数这样的函数被称为<code>”阶跃函数“</code></p>
</li>
</ol>
<h3 id="10-2、分类数据表示形式"><a href="#10-2、分类数据表示形式" class="headerlink" title="10.2、分类数据表示形式"></a>10.2、分类数据表示形式</h3><h4 id="10-2-1、向量形式"><a href="#10-2-1、向量形式" class="headerlink" title="10.2.1、向量形式"></a>10.2.1、向量形式</h4><p>向量形式是应用最多的形式，向量中的元素按顺序代表“类别”，例如有以下三个类别，分别是 a&#x2F;b&#x2F;c 三类，此时就可以使用 [1,2,3] 来分别代表上述三类。预测结果为哪一类，向量中的元素就对应哪个元素，比如当预测结果为 c 类的时候，则输出以下数据：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">[0,0,3]</span><br></pre></td></tr></table></figure>

<h4 id="10-2-2、数字形式"><a href="#10-2-2、数字形式" class="headerlink" title="10.2.2、数字形式"></a>10.2.2、数字形式</h4><p>数字形式是一种最简单的分类方式，我们可以用 0 代表“负类”（即 x &lt; 0时的取值），而用“1”代表正类（即 x&gt;0 时的取值），那么当预测结果输出“1”就代表正类，而预测结果输出“0”代表“负类”。按照约定俗成，我们一般采用 “1”代表正类，而 “-1”或者“0”代表“负类”。用代码的表示数字形式的中心思想，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以 0 为节将其分开</span></span><br><span class="line"><span class="keyword">if</span> (logistic函数输出的是连续值&gt;<span class="number">0</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="10-2-3、概率形式"><a href="#10-2-3、概率形式" class="headerlink" title="10.2.3、概率形式"></a>10.2.3、概率形式</h4><p>在有些实际场景中，无法准确的判断某个“样本”属于哪个类别，此时就可以使用“概率”的形式来判断“样本”属于哪个类别的几率大，比如对某个“样本”有如下预测结果：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">[0.8,0.1,0.1]</span><br></pre></td></tr></table></figure>

<p>该样本属于 a 类的概率最大，因此可以认定该样本从属于 a 类。</p>
<h3 id="10-3、Logistic函数数学解析"><a href="#10-3、Logistic函数数学解析" class="headerlink" title="10.3、Logistic函数数学解析"></a>10.3、Logistic函数数学解析</h3><h4 id="10-3-1、假设函数"><a href="#10-3-1、假设函数" class="headerlink" title="10.3.1、假设函数"></a>10.3.1、假设函数</h4><p>$$<br>\large<br>H(x) &#x3D; \frac{1}{1 + e^{-(w^Tx_i + b)}}<br>$$</p>
<p>上述公式和 Logistic 函数基本一致，只不过把它换成了关于 <code>x</code> 的表达式，并将幂指数 <code>x</code> 换成了 “线性函数”表达式。H(x) 的函数图像呈现 S 形分布，从而能够预测出离散的输出结果。</p>
<h4 id="10-3-2、损失函数"><a href="#10-3-2、损失函数" class="headerlink" title="10.3.2、损失函数"></a>10.3.2、损失函数</h4><p>$$<br>\large<br>L(x) &#x3D; -ylogH(x) - (1-y)log(1 - H(x))<br>$$</p>
<p>由以下公式演化而来，解决该公式不能使用梯度下降等优化方法的问题：<br>$$<br>\large<br>L(x) &#x3D; -H(x_i)^{y_i}(1 - H(x_i))^{1-y_i}<br>$$<br>当 y&#x3D;1 时，如果预测正确，预测值则无限接近 1，也即 H(x<sub>i</sub>)<sup>y<sup>i</sup></sup> 的值为 1，损失值则为 -1；如果预测错误，H(x<sub>i</sub>)<sup>y<sub>i</sub></sup> 的值为 0，损失值也为 0。<code>预测错误的损失值确实比预测正确的损失值大（0 &gt; -1）</code>，满足要求。</p>
<h4 id="10-3-3、优化方法"><a href="#10-3-3、优化方法" class="headerlink" title="10.3.3、优化方法"></a>10.3.3、优化方法</h4><p>将 Logistic 函数的输出记作 z 可得如下公式：<br>$$<br>\large<br>z &#x3D; w_0x_0 + w_1x_1 + \cdots + w_nx_n<br>$$<br>采用向量的形式可以写为：<br>$$<br>\large<br>z &#x3D; w^Tx<br>$$<br>表示将这两个数值向量对应元素相乘然后全部加起来即得到 z 值。其中的 x 是分类器的输入数据，向量 w （最佳参数）会使得分类器尽可能的精确。</p>
<h4 id="10-3-4、梯度上升优化方法"><a href="#10-3-4、梯度上升优化方法" class="headerlink" title="10.3.4、梯度上升优化方法"></a>10.3.4、梯度上升优化方法</h4><p>梯度上升基于的思想是：要找到某函数的最大值，最好的方法是沿着该函数的梯度方向寻找，如果把梯度记为 <code>▽</code>，那么关于 f(x,y) 有以下表达式：<br>$$<br>\Large<br>▽f(x,y) &#x3D; \left(<br>\begin{matrix}<br>\frac{\partial f(x,y)}{\partial x} \<br>\<br>\frac{\partial f(x,y)}{\partial y}<br>\end{matrix}<br>\right)<br>$$<br>该函数分别对 x 与 y 求的偏导数，其中关于 x 的偏导数表示沿着 x 的方向移动，而关于 y 的偏导数一个表示沿 y 的方向移。其中，函数f(x,y) 必须要在待计算的点上可导。在梯度上升的过程中，<code>梯度总是指向函数值增长最快的方向</code>，我们可以把每移动一次的“步长”记为 <code>α</code> 。用向量来表示的话，其公式如下：<br>$$<br>\large<br>w_1 &#x3D; w + \partial▽_wf(w)<br>$$<br>在梯度上升的过程中，上述公式将一直被迭代执行，直至达到某个停止条件为止，比如达到某个指定的值或者某个被允许的误差范围之内。</p>
<h3 id="10-4、sklearn应用Logistic回归算法"><a href="#10-4、sklearn应用Logistic回归算法" class="headerlink" title="10.4、sklearn应用Logistic回归算法"></a>10.4、sklearn应用Logistic回归算法</h3><h4 id="10-4-1、范数"><a href="#10-4-1、范数" class="headerlink" title="10.4.1、范数"></a>10.4.1、范数</h4><p>范数又称为“正则项”，它是机器学习中会经常遇到的术语，它表示了一种运算方式，常见的范数主要分为两种：L1 和 L2。</p>
<ol>
<li><p><strong>L1 范数</strong></p>
<p>表示向量中每个元素绝对值的和，根据定义，L1 范数的计算分两步，首先逐个求得元素的绝对值，然后相加求和即可。<br>$$<br>\large<br>||x||<em>1 &#x3D; \sum\limits</em>{i &#x3D; 1}^n|x_i|<br>$$<br>两个绝对值符号表示范数。 </p>
</li>
<li><p><strong>L2 范数</strong></p>
<p>表示向量中每个元素的平方和的平方根，根据定义，L2 范数的计算分三步，首先逐个求得元素的平方，然后相加求和，最后求和的平方根。<br>$$<br>\large<br>||x||<em>2 &#x3D; \sqrt{\sum\limits</em>{i &#x3D; 1}^n{x_i^2}}<br>$$</p>
</li>
</ol>
<h4 id="10-4-2、回归类算法"><a href="#10-4-2、回归类算法" class="headerlink" title="10.4.2、回归类算法"></a>10.4.2、回归类算法</h4><ol>
<li><p>Rodge 类</p>
<p>Ridge 回归算法，又称“岭回归算法”主要用于预测回归问题，是在线性回归的基础上添加了 L2 正则项，使得权重 w 的分布更加均匀，其损失函数如下：<br>$$<br>\large<br>L(x) &#x3D; ||X_w - y||_2^2 + a||w||_2^2<br>$$<br>损失函数的左侧与线性回归算法的损失函数一致。只是在最后添加右侧的 L2 正则项，其中 a 只是一个常数，需要根据经验设置。</p>
<blockquote>
<p>线性回归函数的 1&#x2F;n 在优化过程的运算中不会影响结果，它只是一个常量而已，而常量的导数是 0。</p>
</blockquote>
</li>
<li><p>Lasso 类</p>
<p>Lasso 回归算法，使用 L1 正则项，可以预测回归问题，其损失函数的表达式如下（求最小损失值）：<br>$$<br>\large<br>L(x) &#x3D; \frac{1}{2n}||X_w - y||_2^2 + a||w||_1<br>$$<br>上述表达式的左侧与 Ridge 回归算法的损失函数基本一致，只是将右侧的 L2 范数替换成了 L1 范数，而且左侧式子相比线性回归表达式而言，多了一个 1&#x2F;2n，但实际的优化过程中，它并不会对权重 w 产生影响。</p>
</li>
</ol>
<h4 id="10-4-3、Logistic-回归的实现"><a href="#10-4-3、Logistic-回归的实现" class="headerlink" title="10.4.3、Logistic 回归的实现"></a>10.4.3、Logistic 回归的实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># logistic算法</span></span><br><span class="line"><span class="comment"># 从 scikit-learn库导入线性模型中的logistic回归算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="comment"># 导入sklearn 中的自带数据集 鸢尾花数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="comment"># skleran 提供的分割数据集的方法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 载入鸢尾花数据集</span></span><br><span class="line">    iris_dataset = load_iris()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data 数组的每一行对应一朵花，列代表每朵花的四个测量数据，分别是：花瓣的长度，宽度，花萼的长度、宽度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data数组类型: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(iris_dataset[<span class="string">&#x27;data&#x27;</span>])))</span><br><span class="line">    <span class="comment"># 前五朵花的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;前五朵花数据:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iris_dataset[<span class="string">&#x27;data&#x27;</span>][:<span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割数据集训练集，测试集</span></span><br><span class="line">    <span class="comment"># 打乱数据集，并对其进行拆分。该函数默认将 75% 的行数据及对应标签作为训练集，另外 25% 数据作为测试集。</span></span><br><span class="line">    X_train, X_test, Y_train, Y_test = train_test_split(iris_dataset[<span class="string">&#x27;data&#x27;</span>], iris_dataset[<span class="string">&#x27;target&#x27;</span>], random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    <span class="comment"># 设置最大迭代次数为3000，默认为1000.不更改会出现警告提示</span></span><br><span class="line">    log_reg = LogisticRegression(max_iter=<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给模型喂入数据</span></span><br><span class="line">    clm = log_reg.fit(X_train, Y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用模型对测试集分类预测,并打印分类结果</span></span><br><span class="line">    <span class="built_in">print</span>(clm.predict(X_test))</span><br><span class="line">    <span class="comment"># 最后使用性能评估器，测试模型优良，用测试集对模型进行评分</span></span><br><span class="line">    <span class="built_in">print</span>(clm.score(X_test, Y_test))</span><br></pre></td></tr></table></figure>

<p>Logistic 算法适用于<code>分类问题</code>，该算法在处理二分类问题上表现优越，但在<code>多分类（二个以上）问题上容易出现欠拟合</code>。Logistic 算法除了适用于回归分类问题，还可以作为神经网络算法的<code>激活函数</code>（即 Sigmoid 函数）。</p>
<p>算法只有<strong>合适</strong>与<strong>不合适</strong>，每个算法都有其适用的场景，没有优劣之分。</p>
<h2 id="11、KNN-最邻近分类算法"><a href="#11、KNN-最邻近分类算法" class="headerlink" title="11、KNN 最邻近分类算法"></a>11、KNN 最邻近分类算法</h2><p>K 最近邻分类算法，简称 KNN（K-Nearest-Neighbor），它是有监督学习分类算法的一种。所谓 K 近邻，就是 K 个最近的邻居。比如对一个样本数据进行分类，可以用与它最邻近的 K 个样本来表示它，这与俗语“近朱者赤，近墨者黑”是一个道理。</p>
<p>核心关键词：“<strong>少数服从多数</strong>”、“<strong>距离</strong>”</p>
<h3 id="11-1、KNN-算法原理"><a href="#11-1、KNN-算法原理" class="headerlink" title="11.1、KNN 算法原理"></a>11.1、KNN 算法原理</h3><p>为了判断未知样本的类别，以<code>所有已知类别的样本</code>作为参照来计算<code>未知样本与所有已知样本的距离</code>，然后从中选取与<code>未知样本距离最近的 K 个已知样本</code>，并根据<code>少数服从多数</code>的投票法则（majority-voting），将未知样本与 K 个最邻近样本中<code>所属类别占比较多</code>的归为一类。</p>
<p>如果一个样本在特征空间中存在 K 个与其相邻的的样本，其中某一类别的样本数目较多，则待预测样本就属于这一类，并具有这个类别相关特性。该方法在确定分类决策上只依据<code>最邻近的一个或者几个样本的类别来决定待分样本所属的类别</code>。</p>
<p>KNN 算法简单易于理解，无须估计参数，与训练模型，适合于<code>多分类问题、OCR光学模式识别、文本分类等领域</code>。但它的不足是，当样本不平衡时，如一个类的样本容量很大，而其他类样本容量很小时，有很能导致当输入一个新样本时，该样本的 K 个邻居中大容量类的样本占多数，而此时只依照数量的多少去预测未知样本的类型，就会可能增加预测错误概率。此时，可以采用对样本取<strong>“权值”</strong>的方法来改进。</p>
<h3 id="11-2、KNN-算法流程"><a href="#11-2、KNN-算法流程" class="headerlink" title="11.2、KNN 算法流程"></a>11.2、KNN 算法流程</h3><ul>
<li>准备数据，对数据进行预处理 。</li>
<li>计算测试样本点（也就是待分类点）到其他每个样本点的距离（选定度量距离的方法）。</li>
<li>对每个距离进行排序，然后选择出距离最小的 K 个点。</li>
<li>对 K 个点所属的类别进行比较，按照少数服从多数的原则（多数表决思想），将测试样本点归入到 K 个点中占比最高的一类中。</li>
</ul>
<h3 id="11-3、sklearn-实现-KNN-分类算法"><a href="#11-3、sklearn-实现-KNN-分类算法" class="headerlink" title="11.3、sklearn 实现 KNN 分类算法"></a>11.3、sklearn 实现 KNN 分类算法</h3><p>Pyhthon Sklearn 机器学习库提供了 neighbors 模块，该模块下提供了 KNN 算法的常用方法，如下所示：</p>
<table>
<thead>
<tr>
<th>类方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>KNeighborsClassifier</td>
<td>KNN 算法解决分类问题</td>
</tr>
<tr>
<td>KNeighborsRegressor</td>
<td>KNN 算法解决回归问题</td>
</tr>
<tr>
<td>RadiusNeighborsClassifier</td>
<td>基于半径来查找最近邻的分类算法</td>
</tr>
<tr>
<td>NearestNeighbors</td>
<td>基于无监督学习实现KNN算法</td>
</tr>
<tr>
<td>KDTree</td>
<td>无监督学习下基于 KDTree 来查找最近邻的分类算法</td>
</tr>
<tr>
<td>BallTree</td>
<td>无监督学习下基于 BallTree 来查找最近邻的分类算法</td>
</tr>
</tbody></table>
<p>调用 <code>KNeighborsClassifier</code> 实现 KNN 分类算法。下面对 Sklearn 自带的<strong>“红酒数据集”</strong>进行 KNN 算法分类预测。最终实现向训练好的模型喂入数据，输出相应的红酒类别，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载红酒数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="comment"># KNN分类算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="comment"># 分割训练集与测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 导入numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 加载数据集</span></span><br><span class="line">    wine_dataset = load_wine()</span><br><span class="line">    <span class="comment"># 查看数据集对应的键</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;红酒数据集的键:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(wine_dataset.keys()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据集描述:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(wine_dataset[<span class="string">&#x27;data&#x27;</span>].shape))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data 为数据集数据;target 为样本标签</span></span><br><span class="line">    <span class="comment"># 分割数据集，比例为 训练集：测试集 = 8:2</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(wine_dataset[<span class="string">&#x27;data&#x27;</span>], wine_dataset[<span class="string">&#x27;target&#x27;</span>], </span><br><span class="line">                                                        test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建knn分类模型，并指定 k 值</span></span><br><span class="line">    KNN = KNeighborsClassifier(n_neighbors=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用训练集训练模型</span></span><br><span class="line">    KNN.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估模型的得分</span></span><br><span class="line">    score = KNN.score(X_test, y_test)</span><br><span class="line">    <span class="built_in">print</span>(score)</span><br><span class="line">    <span class="comment"># 给出一组数据对酒进行分类</span></span><br><span class="line">    X_wine_test = np.array([[<span class="number">11.8</span>, <span class="number">4.39</span>, <span class="number">2.39</span>, <span class="number">29</span>, <span class="number">82</span>, <span class="number">2.86</span>, <span class="number">3.53</span>, <span class="number">0.21</span>, <span class="number">2.85</span>, <span class="number">2.8</span>, <span class="number">.75</span>, <span class="number">3.78</span>, <span class="number">490</span>]])</span><br><span class="line">    predict_result = KNN.predict(X_wine_test)</span><br><span class="line">    <span class="built_in">print</span>(predict_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分类结果：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(wine_dataset[<span class="string">&#x27;target_names&#x27;</span>][predict_result]))</span><br></pre></td></tr></table></figure>

<h2 id="12、朴素贝叶斯分类算法"><a href="#12、朴素贝叶斯分类算法" class="headerlink" title="12、朴素贝叶斯分类算法"></a>12、朴素贝叶斯分类算法</h2><p>朴素贝叶斯（Naive Bayesian algorithm）是<code>有监督学习</code>的一种<code>分类算法</code>，它基于“贝叶斯定理”实现，而贝叶斯定理是基于概率论和统计学的相关知识实现的。</p>
<h3 id="12-1、贝叶斯公式"><a href="#12-1、贝叶斯公式" class="headerlink" title="12.1、贝叶斯公式"></a>12.1、贝叶斯公式</h3><p>$$<br>\large<br>P(A|B) &#x3D; \frac{P(B|A)P(A)}{P(B)}<br>$$</p>
<ul>
<li>P(A) 这是概率中最基本的符号，表示 A 出现的概率。比如在投掷骰子时，P(2) 指的是骰子出现数字“2”的概率，这个概率是 六分之一，也称之为<code>“先验概率”</code></li>
<li>P(B|A) 是<strong>条件概率</strong>的符号，表示事件 A 发生的条件下，事件 B 发生的概率，条件概率是“贝叶斯公式”的关键所在，它也被称为<code>“似然度”</code>。</li>
<li>P(A|B) 是<strong>条件概率</strong>的符号，表示事件 B 发生的条件下，事件 A 发生的概率，这个计算结果也被称为<code>“后验概率”</code>。</li>
</ul>
<p>贝叶斯公式可以预测事件发生的概率，两个本来相互独立的事件，发生了某种“相关性”，此时就可以通过“贝叶斯公式”实现预测。</p>
<p>朴素贝叶斯是一种简单的贝叶斯算法，因为贝叶斯定理涉及到了概率学、统计学，其应用相对复杂，因此我们只能以简单的方式使用它，比如<code>天真的认为，所有事物之间的特征都是相互独立的，彼此互不影响</code>。</p>
<h3 id="12-2、算法原理"><a href="#12-2、算法原理" class="headerlink" title="12.2、算法原理"></a>12.2、算法原理</h3><p>贝叶斯公式将多特征分类问题表达出来，如下所示：<br>$$<br>\large<br>P(y|x_1,\cdots,x_n) &#x3D; \frac{P(y)P(x_1,\cdots,x_n|y)}{P(x_1,\cdots,x_n)}<br>$$<br>数据集有时并不是很完全的，总会因为某些原因存在一些缺失和收集不全的现象，所以特征 x 越多这个问题就会越突出，统计这些特征出现的概率就越困难。为了避免这一问题，朴素贝叶斯算法做了一个假设，即<code>特征之间相互独立，互不影响</code>，由此以来，就可以简化为以下式子来求解某个特征的似然度：<br>$$<br>\large<br>P(x_i|y,x_1,\cdots,x_{i-1},x_{i+1},\cdots,x_n) &#x3D; P(x_i|y)<br>$$<br>“朴素贝叶斯算法”利用<strong>后验概率</strong>进行预测，其核心方法是通过<strong>似然度</strong>预测后验概率。在使用朴素贝叶斯算法解决分类问题，其实就是<code>不断提高似然度的过程</code>，可以理解为<code>后验概率正比于似然度</code>，如果提高了似然度，那么也会达到提高后验概率的目的，记做如下式子：<br>$$<br>\large<br>P(y|x_1,\cdots,x_n) \propto P(y)\prod\limits_{i &#x3D; 1}^{n}P(x_i|y)<br>$$<br>上述式子中 <code>∝</code> 表示正比于，而 <code>∏</code> 则是连乘符号（即概率相乘）表示了不同特征同时发生的概率。</p>
<h3 id="12-3、朴素贝叶斯优化方法"><a href="#12-3、朴素贝叶斯优化方法" class="headerlink" title="12.3、朴素贝叶斯优化方法"></a>12.3、朴素贝叶斯优化方法</h3><p>朴素贝叶斯算法更像是一种统计方法，通过比较<code>不同特征与类之间的似然度关系</code>，最后把<strong>似然度最大</strong>的类作为预测结果。</p>
<p>每个类与特征的似然度是不同的，也就是 &#x3D;&#x3D;P(x<sub>i</sub>|y)&#x3D;&#x3D; 不同，因此<code>某一类别中某个特征的概率越大，就更容易对该类别进行分类</code>。根据求解后验概率的公式，可以得出以下优化方法：<br>$$<br>\large<br>y &#x3D; P(y)\prod\limits_{i &#x3D; 1}^nP(x_i|y)<br>$$<br>此时将<strong>后验概率</strong>记做类别 y，P(y) 是一个固定的概率值，因此要想让 y 取得最大值，只能通过 &#x3D;&#x3D;P(x<sub>i</sub>|y)&#x3D;&#x3D; 实现，不妨把被统计的数据看成是一张大表格，<strong>朴素贝叶斯算法</strong>就是从中找到 &#x3D;&#x3D;P(x<sub>i</sub>|y)&#x3D;&#x3D; 值最大的那一项，该项对应的 y 是什么，则最终输出的预测结果就是什么。</p>
<h3 id="12-4、sklearn应用朴素贝叶斯算法"><a href="#12-4、sklearn应用朴素贝叶斯算法" class="headerlink" title="12.4、sklearn应用朴素贝叶斯算法"></a>12.4、sklearn应用朴素贝叶斯算法</h3><p>在 sklearn 库中，基于贝叶斯定理的算法集中在 sklearn.naive_bayes 包中，根据对<strong>“似然度 P(xi|y)”</strong>计算方法的不同，我们将朴素贝叶斯大致分为三种：<code>多项式朴素贝叶斯（MultinomialNB）、伯努利分布朴素贝叶斯（BernoulliNB)、高斯分布朴素贝叶斯（GaussianNB）</code>。另外一点要牢记，朴素贝叶斯算法的实现是基于<strong>假设</strong>而来，在朴素贝叶斯看来，特征之间是相互独立的，互不影响的。</p>
<blockquote>
<p>高斯朴素贝叶斯适用于特征呈正态分布的，多项式贝叶斯适用于特征是多项式分布的，伯努利贝叶斯适用于二项分布。</p>
</blockquote>
<ol>
<li><p>算法使用流程</p>
<ul>
<li><p>统计样本数，即统计先验概率 <code>P(y)</code> 和 似然度 <code>P(x|y)</code>。</p>
</li>
<li><p>根据待测样本所包含的特征，对不同类分别进行<strong>后验概率</strong>计算。</p>
</li>
<li><p>比较 y1，y2，…yn 的后验概率，<code>哪个的概率值最大就将其作为预测输出</code>。</p>
</li>
</ul>
</li>
<li><p>朴素贝叶斯算法的应用</p>
<p>以鸢尾花数据集对朴素贝叶斯分类算法的应用为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鸢尾花数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="comment"># 导入朴素贝叶斯模型，这里选用高斯分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    <span class="comment"># 载入数据集</span></span><br><span class="line">    X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">    bayes_model = GaussianNB()</span><br><span class="line">    <span class="comment"># 训练数据</span></span><br><span class="line">    bayes_model.fit(X, y)</span><br><span class="line">    <span class="comment"># 使用模型进行分类预测</span></span><br><span class="line">    result = bayes_model.predict(X)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 对模型评分</span></span><br><span class="line">    model_score = bayes_model.score(X, y)</span><br><span class="line">    <span class="built_in">print</span>(model_score)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="13、决策树算法"><a href="#13、决策树算法" class="headerlink" title="13、决策树算法"></a>13、决策树算法</h2><p>决策树算法算是一类算法，这类算法逻辑模型以<strong>“树形结构”</strong>呈现。</p>
<h3 id="13-1、if-else-原理"><a href="#13-1、if-else-原理" class="headerlink" title="13.1、if-else 原理"></a>13.1、if-else 原理</h3><p>是<strong>条件判断</strong>的常用语句，可以简单理解为“如果满足条件就….，否则…..”。</p>
<p>if-else 有两个特性：一是能够利用 if-else 进行条件判断，但需要首先给出判断条件；二是能无限嵌套，也就是在一个 if-else 的条件执行体中，能够再嵌套另外一个 if-else，从而实现无限循环嵌套。</p>
<h3 id="13-2、决策树算法关键"><a href="#13-2、决策树算法关键" class="headerlink" title="13.2、决策树算法关键"></a>13.2、决策树算法关键</h3><p>决策树算法涉及了几个重要的知识点：“决策树的分类方法”，“分支节点划分问题”以及“纯度的概念”，还会涉及到“信息熵”、“信息增益”、“基尼指数”的概念。</p>
<blockquote>
<p>特征维度&amp;判别条件</p>
</blockquote>
<p>分类问题的数据集由许多样本构成，而每个样本数据又会有多个<strong>特征维度</strong>，在决策算法中这些特征维度属于一个集合，称为“特征维度集”。数据样本的特征维度与最终样本的分类都可能存在着某种关联，因此决策树的<strong>判别条件</strong>将从特征维度集中产生。</p>
<h3 id="13-3、纯度"><a href="#13-3、纯度" class="headerlink" title="13.3、纯度"></a>13.3、纯度</h3><p>是对单一类样本在子集内所占重的的度量。</p>
<p>在每一次判别结束后，如果集合中归属于<code>同一类别的样本越多</code>，那么就说明这个<code>集合的纯度就越高</code>。比如，二元分类问题的数据集都会被分成两个子集，通过自己的纯度就可以判断分类效果的好与坏，<code>子集的纯度越高，就说明分类效果越好</code>。</p>
<p>决策树算法是一类算法，并非某一种算法，其中最著名的决策树算法有三种，分别是 <code>ID3、C4.5 和 CART</code>。在衡量<strong>“纯度”</strong>的方法上，它们分别采用了<code>信息增益、增益率和基尼指数</code>。</p>
<h4 id="13-3-1、纯度度量规则"><a href="#13-3-1、纯度度量规则" class="headerlink" title="13.3.1、纯度度量规则"></a>13.3.1、纯度度量规则</h4><p>度量“纯度”的规则（将类别分为“正类与负类”）：</p>
<ul>
<li>某个分支节点下所有样本都属于同一个类别，纯度达到最高值。</li>
<li>某个分支节点下样本所属的类别一半是正类一半是负类，此时，纯度取得最低值。</li>
<li>纯度代表一个类在子集中的占比多少，它并不在乎该类究竟是正类还是负类。比如，某个分支下不管是正类占比 60% 还是负类占比 60%，其纯度的度量值都是一样的。</li>
</ul>
<h4 id="13-3-2、纯度度量方法"><a href="#13-3-2、纯度度量方法" class="headerlink" title="13.3.2、纯度度量方法"></a>13.3.2、纯度度量方法</h4><ol>
<li><p>纯度函数</p>
<p>横轴表示某个类的占比，纵轴表示纯度值。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%BA%AF%E5%BA%A6%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.gif" alt="纯度函数图像"></p>
<p>当在 a 点时某一类的占比纯度最小，但是对于二元分类来说，一个类小，另一个类就会高，因此 a 点时的纯度也最高（与 b 恰好相反），当某类的纯度占比在 c 点时，对于二元分类来说，两个类占比相同，此时的纯度值最低，此时通过 c 点无法判断一个子集的所属类别。</p>
</li>
<li><p>纯度度量函数</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%BA%AF%E5%BA%A6%E5%BA%A6%E9%87%8F%E5%87%BD%E6%95%B0.gif" alt="纯度度量函数"></p>
<p>纯度度量函数与纯度函数恰好相反，纯度度量函数图像适应于所有决策树算法，比如 ID3、C4.5、CART 等经典算法。</p>
</li>
</ol>
<h3 id="13-4、信息熵"><a href="#13-4、信息熵" class="headerlink" title="13.4、信息熵"></a>13.4、信息熵</h3><p>信息熵是用来解决对信息的量化问题的</p>
<blockquote>
<p>信息熵是用于衡量不确定性的指标，也就是离散随机事件出现的概率，简单地说“情况越混乱，信息熵就越大，反之则越小”。</p>
</blockquote>
<p>信息熵的计算公式:<br>$$<br>\large<br>H(x) &#x3D; -\sum\limits_{k&#x3D;1}^{N}P_klog_2(P_k)<br>$$<br>其中 p 代表概率的意思，这里 “X” 表示进行信息熵计算的集合。在决策树分类算法中，可以按各个类别的占比（占比越高，该类别纯度越高）来理解，其中 N 表示类别数目，而 Pk 表示类别 K 在子集中的占比。信息熵的计算过程分为三次四则运算，即相乘、求和最后取反。</p>
<h3 id="13-5、信息增益"><a href="#13-5、信息增益" class="headerlink" title="13.5、信息增益"></a>13.5、信息增益</h3><p>决策树算法是以包含所有<strong>类别的集合</strong>为计算对象，并通过条件判别，从中筛选出纯度较高的类别</p>
<p>以 ID3 算法为例，<strong>ID3</strong>（Iterative Dichotomiser 3，迭代二叉树3代）算法是决策树算法的其中一种，它是基于<strong>奥卡姆剃刀原理</strong>实现的，这个原理的核心思想就是“大道至简，用尽量少的东西去做更多的事情”。</p>
<p>ID3 算法的核心思想：越小型的决策树越优于大的决策树，也就是使用尽可能少的判别条件。</p>
<p>ID3 算法选择信息增益最大的特征维度进行 if-else 判别。</p>
<ol>
<li><p>理解信息增益</p>
<p>信息增益是针对一个具体的特征而言的，某个特征的有无对于整个系统、集合的影响程度就可以用“信息增益”来描述。</p>
<p>“纯度”最高的划分条件，也就是要找的<strong>“最合适”</strong>的特征维度判别条件。</p>
</li>
<li><p>信息增益公式</p>
<p>比较划分前后集合的信息熵来判断，也就是做减法，用划分前集合的信息熵减去按特征维度属性划分后的信息熵，就可能够得到信息增益值。公式如下所示：<br>$$<br>G(S,t) &#x3D; H(x) - \sum\limits_{k&#x3D;1}^{K}\frac{|S^k|}{|S|}H(S^k)<br>$$</p>
</li>
</ol>
<p>G(S,t) 表示集合 S 选择特征属性 t 来划分子集时的信息增益。H(x) 表示集合的信息熵。</p>
<p>   减数的含义：</p>
<ul>
<li><p>大写字母 K 表示：按特征维度 t 划分后，产生了几个子集的意思，比如划分后产生了 5 个子集吗，那么 K &#x3D; 5。</p>
</li>
<li><p>小写字母 k 表示：按特征维度 t 划分后，5 个子集中的某一个子集，k &#x3D; 1 指的是从第一个子集开始求和计算。</p>
<ul>
<li>|S| 与 |S<sub>k</sub>| 表示：集合 S 中元素的个数，这里的<code>||</code>并不是绝对值符号，而 |S<sub>k</sub>| 表示划分后，某个集合的元素个数。</li>
<li>|S|&#x2F;|S<sub>k</sub>| 表示：一个子集的元素个数在原集合的总元素个数中的占比，指该子集信息熵所占的权重，占比越大，权重就越高。</li>
</ul>
<p>最后，比较不同特征属性的信息增益，增益值越大，说明子集的纯度越高，分类的效果就越好，我们把效果最好的特征属性选为 if-else 的最佳判别条件。</p>
</li>
</ul>
<h3 id="13-6、决策树算法原理"><a href="#13-6、决策树算法原理" class="headerlink" title="13.6、决策树算法原理"></a>13.6、决策树算法原理</h3><p>决策树算法是一种<code>树形分类结构</code>，要通过这棵树实现样本分类，就要根据 <strong>if-else</strong> 原理设置判别条件。</p>
<p>决策树特征属性是 if-else 判别条件的关键所在，可以把这些特征属性看成一个<strong>集合</strong>，要选择的判别条件都来自于这个集合，通过分析与计算选择与待分类样本最合适的<strong>“判别条件”</strong>。被选择的<strong>“判别条件”</strong>使得样本集合的某个子树节点<strong>“纯度”</strong>最高。</p>
<p>上述过程就好比从众多的样本中提取<strong>“类别纯度”</strong>最高的样本集合，因此可以起一个形象化的名字<strong>“提纯”</strong>，过程示意图如下所示：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/1I6033T7-0.gif" alt="决策树流程图"></p>
<p>决策树算法通过判别条件从根节点开始分裂为子节点，子节点可以继续分裂，每一次分裂都相当于一次对分类结果的<strong>“提纯”</strong>，周而复始，从而达到分类的目的，在这个过程中，节点为“否”的不在分裂，判断为“是”的节点则继续分裂。</p>
<p>决策树停止分类的条件：</p>
<ol>
<li><p>子节点属于同一类别</p>
<p>决策树算法的目的是为了完成有效的样本分类。当某个数据集集合分类完成，也就分类后的子节点集合都属于同一个类别，不可再分，此时代表着分类任务完成，分裂也就会终止。</p>
</li>
<li><p>特征属性用完</p>
<p>决策树依赖<strong>特征属性</strong>作为判别条件，如果特征属性已经全部用上，自然也就无法继续进行节点分裂，此处可能就会出现两种情况：一种是分类任务完成，也就是子节点属于同一类别，还有另外一种情况就是分类还没有完成，比如，在判断为“是”的节点集合中，有 8 个正类 3 个负类，此时我们将采用<strong>占比最大的类</strong>作为当前节点的归属类。</p>
</li>
<li><p>设置停止条件</p>
<p>可以在外部设置一些阈值，把决策树的深度，或者叶子节点的个数当做停止条件。</p>
</li>
</ol>
<h3 id="13-7、决策树剪枝策略"><a href="#13-7、决策树剪枝策略" class="headerlink" title="13.7、决策树剪枝策略"></a>13.7、决策树剪枝策略</h3><p>决策树分类算法最容易出现的问题就是“过拟合”。</p>
<blockquote>
<p>“过拟合”使决策树模型学习到了并不具备普遍意义的分类决策条件，从而导致模型的分类效率、泛化能力降低。</p>
</blockquote>
<p>“剪枝策略”是解决决策树算法过拟合问题的核心方法，也是决策树算法的重要组成部分。据剪枝操作触发时间的不同，可以将它们分成两种，一种称为<strong>预剪枝</strong>，另一种称为<strong>后剪枝</strong>。</p>
<ol>
<li><p>预剪枝</p>
<p>在<code>分支划分之前</code>就进行剪枝判断，如果判断结果是需要剪枝，则不进行该分支划分。</p>
</li>
<li><p>后剪枝</p>
<p>在<code>分支划分之后</code>，通常是决策树的各个判断分支已经形成后，才开始进行剪枝判断。</p>
</li>
</ol>
<p>在实际情况中<strong>后剪枝策略</strong>使用较多。在分支生成后，使用后剪枝策略将冗余的子树及其判别条件直接剪掉，然后使用上个节点中占比最大的类做为最终的分类结果。</p>
<h3 id="13-8、sklearn决策树算法分类"><a href="#13-8、sklearn决策树算法分类" class="headerlink" title="13.8、sklearn决策树算法分类"></a>13.8、sklearn决策树算法分类</h3><ol>
<li><p>.DecisionTreeClassifier()</p>
<p>这是一个经典的决策树分类算法，它提供了许多有用的参数，比如 <code>criterion</code>，该参数有两个参数值，分别是 <code>gini（基尼指数）</code>和 <code>entropy（信息增益）</code>，默认情况下使用<strong>“基尼指数”</strong>，其中<strong>“gini”</strong>用于创建 CART 分类决策树，而<strong>“entropy”</strong>用于创建 ID3 分类决策树。</p>
<blockquote>
<p>注意：在其余三个决策树算法中都可以使用 criterion 参数。</p>
</blockquote>
</li>
<li><p>.DecisionTreeRegressor()</p>
<p>它表示用决策树算法解决回归问题。</p>
</li>
<li><p>.ExtraTreeClassifier()</p>
<p>该算法属于决策树分类算法，但又不同于<code>.DecisionTreeClassifier()</code>算法，因为<code>.ExtraTreeClassifier()</code>选择“特征维度”作为判别条件时具有随机性，它首先从特征集合中随机抽取 n 个特征维度来构建新的集合，然后再从新的集合中选取“判别条件”。</p>
</li>
<li><p>.ExtraTreeRegressor()</p>
<p>该算法同样具有随机性，它与<code>.ExtraTreeClassifier()</code>随机过程类似，它主要解决机器学习中的回归问题。</p>
</li>
</ol>
<h3 id="13-9、决策树实现步骤"><a href="#13-9、决策树实现步骤" class="headerlink" title="13.9、决策树实现步骤"></a>13.9、决策树实现步骤</h3><p>决策树分类算法的关键在于选择合适的<strong>“判别条件”</strong>，该判别条件会使正确的分类的样本<strong>“纯度”</strong>最高。想要选取合适的特征属性就需要使用<strong>“信息熵”</strong>与<strong>“信息增益”</strong>等计算公式。</p>
<ol>
<li><p>确定纯度指标</p>
<p>用来衡量不同<strong>“特征属性”</strong>所得到的纯度，并选取使得纯度取得<strong>最大值</strong>的“<strong>特征属性”</strong>作为<strong>“判别条件”</strong>。</p>
</li>
<li><p>切分数据集</p>
<p>通过特征属性做为<strong>“判别条件”</strong>对数据集集合进行切分。注意，使用过的<strong>“特征属性”</strong>不允许重复使用，该属性会从特征集合中<strong>删除</strong>。</p>
</li>
<li><p>获取正确分类</p>
<p>选择特征集合内的特征属性，直至没有属性可供选择，或者是数据集样本已经完成分类为止。切记要选择<code>占比最大的类别做为分类结果</code>。</p>
</li>
</ol>
<h3 id="13-10、决策树算法的应用"><a href="#13-10、决策树算法的应用" class="headerlink" title="13.10、决策树算法的应用"></a>13.10、决策树算法的应用</h3><p>下面使用决策树算法对 Sklearn 库中的红酒数据进行模型训练，与数据预测，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载红酒数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_wine</span><br><span class="line"><span class="comment"># 导入决策树分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="comment"># 导入分割数据集的方法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 导入科学计算包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 加载红酒数据集</span></span><br><span class="line">    wine_dataset = load_wine()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割训练集与测试集</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(wine_dataset[<span class="string">&#x27;data&#x27;</span>], wine_dataset[<span class="string">&#x27;target&#x27;</span>], test_size=<span class="number">0.2</span>,</span><br><span class="line">                                                        random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建决策时分类器--ID3算法</span></span><br><span class="line">    tree_model = DecisionTreeClassifier(criterion=<span class="string">&quot;entropy&quot;</span>)</span><br><span class="line">    <span class="comment"># 喂入数据</span></span><br><span class="line">    tree_model.fit(X_train, y_train)</span><br><span class="line">    <span class="comment"># 打印模型评分</span></span><br><span class="line">    <span class="built_in">print</span>(tree_model.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给出一组数据预测分类</span></span><br><span class="line">    X_wine_test = np.array([[<span class="number">11.8</span>, <span class="number">4.39</span>, <span class="number">2.39</span>, <span class="number">29</span>, <span class="number">82</span>, <span class="number">2.86</span>, <span class="number">3.53</span>, <span class="number">0.21</span>, <span class="number">2.85</span>, <span class="number">2.8</span>, <span class="number">.75</span>, <span class="number">3.78</span>, <span class="number">490</span>]])</span><br><span class="line">    predict_result = tree_model.predict(X_wine_test)</span><br><span class="line">    <span class="built_in">print</span>(predict_result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;分类结果：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(wine_dataset[<span class="string">&#x27;target_names&#x27;</span>][predict_result]))</span><br></pre></td></tr></table></figure>

<h2 id="14、支持向量机-SVM-分类算法"><a href="#14、支持向量机-SVM-分类算法" class="headerlink" title="14、支持向量机 SVM 分类算法"></a>14、支持向量机 SVM 分类算法</h2><p>支持向量机，英文全称“Support Vector Machines”（简称 SVM），是有监督学习中最有影响力的机器学习算法之一。</p>
<h3 id="14-1、支持向量机组成"><a href="#14-1、支持向量机组成" class="headerlink" title="14.1、支持向量机组成"></a>14.1、支持向量机组成</h3><p>支持向量机是一个分类器算法，主要用于解决二分类的问题，有三个重要构件，分别是：</p>
<ul>
<li>最大间隔</li>
<li>高维映射</li>
<li>核函数</li>
</ul>
<h3 id="14-2、支持向量机本质"><a href="#14-2、支持向量机本质" class="headerlink" title="14.2、支持向量机本质"></a>14.2、支持向量机本质</h3><p>支持向量机本质上是从在<strong>线性分类算法</strong>的基础上发展而来的，就如同 Logistic 逻辑回归算法一样，只需给线性函数“套”上一层 Logistic “马甲”，就可以用线性模型来解决离散数据的分类问题。</p>
<ol>
<li><p>间隔和支持向量</p>
<p>支持向量机中有一个非常重要的概念就是“间隔最大化”，它是衡量 SVM 分类结果是否最优的标准之一。</p>
<p>以“象棋”的例子来理解什么是“间隔”：</p>
<p>中国象棋的棋子分为黑子和红子，并用“楚河汉界”将其分开。如果用一条直线将不同颜色的棋子进行分类，这显然信手拈来，只需要在楚河汉界的空白附带画一条“中轴线”就能以最佳的方式将它们分开，这样就能保证两边距离最近的棋子保有充分的“间隔”。</p>
<p>上述示例中产生的<strong>“间隔”</strong>实际上是依据两侧不同颜色的棋子划分而成的，我们把这些棋子统称为<strong>“样本点”</strong>。虽然这些样本点都参与了分类，但对于分类效果影响最大的是处于间隔<strong>“边缘”</strong>的样本，只要将处于边缘的样本正确分类，那么这两个类别也就分开了，因此我们把处于边缘样本点称为<strong>“支持向量”</strong>。</p>
</li>
<li><p>软件隔和硬间隔</p>
<p>当使用直线分类时会本着尽可能将类别全都区分开来的原则，但总存在一些<code>另类的“样本点”不能被正确的分类</code>，如果允许这样的“样本点存在”，那么画出的间隔就成为<strong>“软间隔”</strong>，反之态度强硬必须要求“你是你，我是我”，这种间隔就被称为<strong>“硬间隔”</strong>，在处理实际业务中，硬间隔只是一种理想状态。</p>
</li>
<li><p>最大间隔</p>
<p>上述所说的保有充分的“间隔”，其实就是<strong>“最大间隔”</strong>，如果将数据样本分割的不留余地，就会对随机扰动的噪点特别敏感，这样就很容易破坏掉之前的分类结果，学术称为<code>“鲁棒性差”</code>，因此我们在分类时要尽可能使<code>正负两类分割距离达到最大间隔</code>。</p>
</li>
</ol>
<h3 id="14-3、SVM-高维映射"><a href="#14-3、SVM-高维映射" class="headerlink" title="14.3、SVM 高维映射"></a>14.3、SVM 高维映射</h3><p>高维映射主要是用来解决“你中我，我中有你”的分类问题的，也就是“线性不可分问题”，所谓高维映射就是<code>站在更高的维度来解决低维度的问题</code>。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/142642C19-0.gif" alt="超平面"></p>
<p>如图所示经过高维映射后，二维分布的样本点就变成了三维分布，而那张恰好分开样本点的面（绿色的平面）， SVM 统称其为<strong>“超平面”</strong>。</p>
<p>通过增加一个维度的方法（给平面增加一个高度，使其变成三维空间），解决“线性不可分的问题”。</p>
<h3 id="14-4、SVM-核函数"><a href="#14-4、SVM-核函数" class="headerlink" title="14.4、SVM 核函数"></a>14.4、SVM 核函数</h3><p>核函数是一类功能性函数，类似于 Logistic 函数。SVM 规定，<code>只要能够完成高维映射功能的数学函数都称为“核函数”</code>，它在支持向量机中承担着两项任务，一是<code>增加空间的维度</code>，二是<code>完成现有数据从原空间到高维空间的映射</code>。</p>
<h3 id="14-5、SVM-算法总结"><a href="#14-5、SVM-算法总结" class="headerlink" title="14.5、SVM 算法总结"></a>14.5、SVM 算法总结</h3><p>SVM 算法是用来解决线性不可分的<strong>“非线性”</strong>问题， 从而突破线性分类的局限性，使得线性分类器依然可以适用于“非线性”问题。在这个过程中起到关键作用的就是<strong>“高维映射”</strong>。而<strong>“间隔最大化”</strong>可以看做支持向量机的<strong>损失函数</strong>，它衡量分类效果是否最佳的“标尺”，让间隔达到最大就是 SVM 追求的至臻境界，要实现这个目标就要不断地训练模型，使模型的泛化能力最佳。</p>
<p>最后对 SVM 算法进行分类的大致过程进行总结，大致分为以下三步：</p>
<ul>
<li>选取一个合适的数学函数作为<strong>核函数</strong>；</li>
<li>使用<code>核函数进行高维映射</code>，解决样本点线性不可分的问题；</li>
<li>最后用<strong>间隔</strong>作为度量分类效果的<strong>损失函数</strong>，找到使间隔最大的<code>超平面</code>，最终完成分类的任务。</li>
</ul>
<h3 id="14-6、SVM-算法应用"><a href="#14-6、SVM-算法应用" class="headerlink" title="14.6、SVM 算法应用"></a>14.6、SVM 算法应用</h3><p>Sklearn 库中的 SVM 算法如下所示：</p>
<table>
<thead>
<tr>
<th>SVM算法类别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>LinearSVC类</td>
<td>基于线性核函数的支持向量机分类算法</td>
</tr>
<tr>
<td>LinearSVR类</td>
<td>基于线性核函数的支持向量机回归算法</td>
</tr>
<tr>
<td>SVC类</td>
<td>可选择多种核函数的支持向量机分类算法，通过“kernel”参数可以传入 <br>linear：选择线性函数；<br>polynomial：选择多项式函数；<br>rbf：选择径向基函数；<br>sigmoid：选择 Logistics 函数作为核函数；<br>precomputed：使用预设核值矩阵；<br>SVC 类默认以径向基函数作为核函数</td>
</tr>
<tr>
<td>SVR类</td>
<td>可选择多种核函数的支持向量机回归算法</td>
</tr>
<tr>
<td>NuSVC类</td>
<td>与 SVC 类非常相似，但可通过参数“nu”设置支持向量的数量</td>
</tr>
<tr>
<td>NuSVR类</td>
<td>与SVR类非常相似，但可通过参数“nu”设置支持向量的数量</td>
</tr>
<tr>
<td>OneClassSVM类</td>
<td>用支持向量机算法解决无监督学习的异常点检测问题</td>
</tr>
</tbody></table>
<p>SVM 主要用于解决二分类的问题，上述表格中最常使用的是 SVC 类。下面对使用该算法的步骤进行总结：</p>
<ul>
<li>读取数据，将原始数据<strong>转化</strong>为 SVM 算法所能识别的数据格式；</li>
<li>将<strong>数据标准化</strong>，防止样本中不同特征数值大小相差较大影响分类器性能；</li>
<li>选择<strong>核函数</strong>，在不清楚何种核函数最佳时，推荐使用“rbf”（径向基核函数）</li>
<li>利用<code>交叉验证网格搜索寻找最优参数</code>；（交叉验证的目的是防止过拟合，利用网格搜索可以在指定的范围内寻找最优参数）</li>
<li>使用最优参数来训练模型；</li>
<li>测试得到的分类模型。</li>
</ul>
<p>使用支持向量机（SVM）算法对鸢尾花数据集进行分类，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris  <span class="comment"># 导入鸢尾花数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC  <span class="comment"># 使用支持向量机算法</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 加载鸢尾花数据集，返回特征值 X 以及标签 y</span></span><br><span class="line">    X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 使用SVM.SVC分类算法搭建预测模型，并以径向基函数做为核函数的实现高维映射</span></span><br><span class="line">    clf = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>)</span><br><span class="line">    <span class="comment"># 训练模型,使用fit喂入数据X,y，即特征值和标签</span></span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    <span class="comment"># 预测分类</span></span><br><span class="line">    result = clf.predict(X)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 对模型进行评分</span></span><br><span class="line">    score = clf.score(X, y)</span><br><span class="line">    <span class="built_in">print</span>(score)</span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="comment"># 分割图1行1列第一个图</span></span><br><span class="line">    plt.subplot(<span class="number">111</span>)</span><br><span class="line">    <span class="comment"># 选择X特征值中的第一列特征值和第三列特征值进行绘图</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">3</span>], c=y.reshape((-<span class="number">1</span>)), edgecolor=<span class="string">&#x27;k&#x27;</span>, s=<span class="number">50</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p>支持向量机算法在<strong>分类问题</strong>中有着非常出色的表现，它的特点是<code>能够解决非线性问题，并且训练模型的时候不必依赖于全部数据，主要使用处于分类边缘的样本点</code>，因此它也<code>适用解决小样本群体的分类问题，并且泛化能力较强</code>。</p>
<p>当然，SVM 也有一些不足之处，比如核函数的寻找难度较大，并且最原始的 SVM 算法只适用于二分类问题。后经过不断的拓展、延伸，<code>目前的 SVM 算法可以解决多分类问题，同时能够解决文本分类问题</code>。</p>
<h2 id="15、K-means-聚类算法"><a href="#15、K-means-聚类算法" class="headerlink" title="15、K-means 聚类算法"></a>15、K-means 聚类算法</h2><p>常见的无监督学习算法，包括 <strong>K-means 聚类算法</strong>、均值漂移聚类算法、主成分分析法（即 PCA 算法）、EM算法（期望最大化算法）等。</p>
<p>无监督学习中最为经典的是 K-means 算法，它是聚类算法簇中的一个，也是最为经典的聚类算法，其原理简单、容易理解，因此得到广泛的应用。</p>
<h3 id="15-1、聚类和分类的区别"><a href="#15-1、聚类和分类的区别" class="headerlink" title="15.1、聚类和分类的区别"></a>15.1、聚类和分类的区别</h3><p>聚类算法与分类算法的最终的目的都是<strong>将数据区分开来</strong>，但是两者的实现过程完全不同。</p>
<p>分类问题：通过对<code>已有标签</code>的数据进行训练来确定最佳预测模型，然后对新样本的所属类别进行预测，在这个过程中算法模型只要尽可能的实现最佳拟合就 OK 了。</p>
<p>聚类问题：对没有任何标签的数据，通过”找相似“来实现分类，既在实现分类时，只能尽可能找相同点，相同点越多，说明他们就属于同一类，而不同点越多，就说明两者不是同一类。</p>
<h3 id="15-2、簇"><a href="#15-2、簇" class="headerlink" title="15.2、簇"></a>15.2、簇</h3><p>在聚类问题中，有一个非常重要的概念<strong>“簇”（Cluster）</strong>，那到底什么是簇呢，样本数据集通过聚类算法最终会聚集成一个个“类”，这些类在机器学习中的术语称为“簇”（<strong>注意，这里的前提是使用“聚类算法”</strong>），因此“簇”是解决聚类问题的表现形式，数据集中的数据样本最终会以“簇”的形式分开。</p>
<p>对于解决一个聚类问题，到底要汇集成多少簇，不同聚类算法采取了不同的思路，主要分为<strong>划分法、层次法、密度法和网格法</strong>，这些方法大致可总结为两类，<code>一类是预先设定有多少个簇，另一类则是在聚类的过程中形成</code>。</p>
<h3 id="15-3、K-means-聚类算法中-K-的含义"><a href="#15-3、K-means-聚类算法中-K-的含义" class="headerlink" title="15.3、K-means 聚类算法中 K 的含义"></a>15.3、K-means 聚类算法中 K 的含义</h3><p>K-means 就是一种采用了划分法的聚类算法，由于该算法是没有参考标准的。如果不加以限定的话，它会形多任意数量的“簇”，这就要求在使用该算法时要预先设定“簇”的数量，就像田忌赛马一样，根据马的自身的特点，将其分为上、中、下三个档次，因此 <code>K-means 中 K 是聚集成几个“簇”，形成几个“类”的意思</code>。</p>
<h3 id="15-4、量化相似"><a href="#15-4、量化相似" class="headerlink" title="15.4、量化相似"></a>15.4、量化相似</h3><blockquote>
<p>注意，这里所说的“相似”有时也称之为“相似度”与之含义相反的是“相异度”，相异度越低，相似度就越高，这些词语主用于是衡量对象之间的相似程度。</p>
</blockquote>
<ol>
<li><p>随机选择质心<br>解决 K-means 聚类问题，需要一个“中心点”，假设聚类问题的样本数据能够找出 K 个中心点，就能<code>以该点为中心，以距离为度量画出范围来，将同一范围内的样本点作为一个簇</code>，从而解决聚类问题，在 K-means 聚类算法中，这样的中心点称为“质心”。</p>
<p>聚类算法是无监督学习，因此数据中的样本点完全不知道自己属于哪一个簇，就更别谈确定“质心”了，为了解决这一问题，K-means 算法通过<strong>随机选择</strong>方式来确定质心，但由于是随机选择，因此无法保证随机选择的 K 个质心就恰好是完成聚类后的 K 个簇的中心点，这时就用到了<strong>“mean”</strong>，它是<strong>“均值”</strong>的意思，通过均值可以不断的调整质心，由此可知<code>质心在 K-means 算法中是不断改变的</code>。</p>
</li>
<li><p>求出新质心点<br>假设现在随机了 K 个质心得到了 K 个簇，K-means 算法选择<strong>求平均</strong>，让这 K 个簇形成新的质心。每个簇都有若干数据点，求出这些数据点的<strong>坐标值均值</strong>，就得到了新质心的坐标点。这其实也是一种变相的多数表决。根据全体拥有表决权的数据点的坐标来共同决定新的质心在哪里，而表决权则由簇决定。<br>在 K-means 聚类的过程中会经历<code>多次质心计算</code>，数据点到底归属于哪个簇可能会频繁变动，比如同一个数据点可能在本轮与一群样本点进行簇 A 的质心计算，而在下一轮就与另一群样本点进行簇 B 的质心计算。</p>
</li>
</ol>
<h3 id="15-5、算法总结"><a href="#15-5、算法总结" class="headerlink" title="15.5、算法总结"></a>15.5、算法总结</h3><p>K-means 聚类算法的聚类过程，可以看成是<code>不断寻找簇的质心的过程，这个过程从随机设定 K 个质心开始，直到找到 K 个真正质心为止</code>。</p>
<p>K-means 聚类算法的大致过程如下所示：</p>
<ul>
<li>第一步，既然现在有了 K 个质心，对于其他数据点来说，根据其<code>距离哪个质心近</code>就归为哪个簇的办法，可以聚成 K 个簇。但请注意，这只是第一步，并不是最后完成聚类的结果；</li>
<li>第二步，对于聚成的 K 个簇，需要<code>重新选取质心</code>。这里运用了<code>多数表决原则</code>，根据一个簇内所有样本点各自的维度值来<strong>求均值</strong>，得到该簇的新的坐标值；</li>
<li>第三步是生成新的质心，其实就是重复上述过程。对于根据均值计算得到的 K 个新质心，重复第一步中离哪个质心近就归为哪个簇的过程，再次将全部样本点聚成 K 个簇，经过不断重复，<code>当质心不再变化后，就完成了聚类</code>。</li>
</ul>
<p>最后总结：K-means 算法首先<code>逐个计算数据集中的点到各自质心的距离</code>，根据距离的远近，将数据样本点分别划归到距离最近的质心，从而形成 K 个类，然后继续选取新的质心，即对聚类内所有数据点求均值。最后重复上述两个过程：生成新质心后重新进行聚类，然后根据聚类结果再次生成新的质心，直至划分的“类”不再变化时结束。</p>
<h3 id="15-6、K-means-聚类算法原理解析"><a href="#15-6、K-means-聚类算法原理解析" class="headerlink" title="15.6、K-means 聚类算法原理解析"></a>15.6、K-means 聚类算法原理解析</h3><h4 id="15-6-1、度量最小距离"><a href="#15-6-1、度量最小距离" class="headerlink" title="15.6.1、度量最小距离"></a>15.6.1、度量最小距离</h4><p>对于 K-means 聚类算法而言，找到质心是一项既核心又重要的任务，找到质心才可以划分出距离质心最近样本点。从数学角度来讲就是<font color="orange">让簇内样本点到达各自质心的距离总和最小</font>。</p>
<p>通过数学定义，将“质心”具象化，既然要使“<strong>距离的总和最小</strong>”，那么第一步就是确定如何度量距离，K-means 算法通过『<strong>欧几里得距离</strong>』来衡量质心与样本点之间的距离。如下所示：<br>$$<br>\large<br>d(x,y) &#x3D; \sqrt{\sum\limits_{i&#x3D;1}^n(x_i - y_i)^2}<br>$$<br>如果第 j 个簇内有若干个数据点（比如 m 个），根据上述欧几里得距离公式就可以计算出簇中各个点到质心<code>z</code>的距离总和，如下所示：<br>$$<br>\large<br>\sum\limits_{i&#x3D;0}^n(||x_i - z_j||^2)<br>$$</p>
<blockquote>
<p>注意，上述公式中的z<sub>j</sub>是簇内所有样本点求均值的结果</p>
</blockquote>
<p>K-measn 算法中会有 K 个簇，因此就要<code>使每个簇内的数据点到质心的距离都可以达到最小，最终使得距离的总和最小</code>。可以这样理解，K 个簇共同组成了一个集合（这里定义为 A 集合），在 A 集合中每个簇的样本点到各自质心的距离都是最小的，因此可得如下表达式：<br>$$<br>\large<br>\sum\limits_{i&#x3D;0}^n\mathop{min}\limits_{z_j \epsilon {A}}(||x_i - z_j||^2)<br>$$</p>
<h4 id="15-6-2、总结"><a href="#15-6-2、总结" class="headerlink" title="15.6.2、总结"></a>15.6.2、总结</h4><p>K-means 算法的流程回顾，可分以下四步：</p>
<ul>
<li>随机选取 K 个对象，并以它们为质心；</li>
<li>计算数据集样本点到质心的距离；</li>
<li>根据样本点距离质心的距离将其分簇（类），距离哪个近，划分到哪个簇（类）；</li>
<li>以簇内所有样本点的均值重新计算质心，，然后重复第二步，直到划分的簇（类）不在变化后停止。<br>K-means 算法是属于无监督学习算法，常用于解决聚类问题，通过给算法模型输入一个包含多种特征信息的样本点，会返回一个相应的类别编号（或称簇别），从而完成样本数据点的类别划分。</li>
</ul>
<p>注意，判定聚类任务完成的终止条件并不是唯一的，常用方法有三个：</p>
<ul>
<li>簇内数据点向质心靠拢、收敛，使得质心点不再发生明显的变化；</li>
<li>使用<a href="http://误差平方和/">误差平方和</a>（即 SSE）来衡量，当误差平和的值越小时，表示数据点越接近于他们的质心，聚类效果越好；</li>
<li>设定指定的定迭代次数，即最多选取几次质心点，不过这种方法，未必能达到最好的分类效果。</li>
</ul>
<h3 id="15-7、Sklearn使用K-means算法"><a href="#15-7、Sklearn使用K-means算法" class="headerlink" title="15.7、Sklearn使用K-means算法"></a>15.7、Sklearn使用K-means算法</h3><p>K-means 算法适合于解决而特征维度为数值型的聚类问题，也适用于文本聚类，比如新闻网站会将相同话题的新闻聚集在一起，并自动生成一个个不同话题的新闻专栏，其实这就是利用聚类算法实现的，但是文本的特征维度并非数值类型，因此需要对其进行数值转化操作，将文本数据转换为数学信息，此时可以使用 TF-IDF 加权技术计算单个词的权值。</p>
<blockquote>
<p>TF-IDF 是一种用于信息检索与数据挖掘的常用加权技术。TF 是词频（Term Frequency），IDF 是逆文本频率指数（Inverse Document Frequency）。</p>
</blockquote>
<p>下表对 K-means 聚类算法的特点做了简单说明：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>优点</td>
<td>原理简单，实现容易，运算效率高。</td>
</tr>
<tr>
<td>不足</td>
<td>需要人为设置簇的个数与随机初始化质心点可能影响聚类的最终效果，同时 K-measn 算法对孤立点（离群点）特别敏感，会对最终的聚类结果产生明显扰动。</td>
</tr>
<tr>
<td>应用领域</td>
<td>适用于特征维度为数据类型的聚类问题，比如体育赛事等，而对特征维度不是数据类型的需要提前进行转换，比如文本分类等。</td>
</tr>
</tbody></table>
<p>在 Sklearn 机器学习库中，与聚类相关的算法模型都在 cluster 模块下，除 k-measn 外，还有十种聚类最近邻算法，下表对最常用的算法做了简单介绍：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>KMeans 类</td>
<td>本节介绍的算法，也是应用最多的聚类算法</td>
</tr>
<tr>
<td>MiniBatchKMeans 类</td>
<td>该算法是 K-measn算法变形算法，使用 mini-batch（一种采样数据的思想） 来减少一次聚类所需的计算时间，mini-batch 也是深度学习常使用的方法。</td>
</tr>
<tr>
<td>DBSCAN 类</td>
<td>DBNSCAN 算法是一种比较有代表性的基于密度的聚类算法，它的主要思想是将聚类的类视为被低密度区域分割的高密度区域。与划分聚类方法不同，它将簇定义为密度相连的点的最大集合，能够把具有足够高密度的区域划分为簇。</td>
</tr>
<tr>
<td>MeanShift 类</td>
<td>MeanShift 算法流程，以任意点作为质心的起点，根据距离均值将质心不断往高密度的地方移动，也即所谓均值漂移，当不满足漂移条件后说明密度已经达到最高，就可以划分成簇。</td>
</tr>
<tr>
<td>AffinityPropagation 类</td>
<td>AffinityPropagation 算法（简称 AP 算法），该算法是层次聚类的典型应用，聚类实现过程是一个“不断合并同类项”的过程，用类似于归纳法思想来完成聚类。</td>
</tr>
<tr>
<td>通过表格不难看出，每一种算法所采用的思想均不相同，但最终都能解决聚类问题，这也是整个聚类算法族的特点之一。</td>
<td></td>
</tr>
</tbody></table>
<p>下面我们对<code>Kmeans.Kmeans()</code>的常用参数做简单介绍：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>algorithm</td>
<td>字符串参数值，有三种选择： 1) “auto” ：默认值，自动根据数据值是否稀疏，来决定使用 “full”还是”elkan”，采用默认值即可； 2) “full”：表示使用传统的 K-measn 算法； 3) “elkan”：表示使用 elkan-Means 算法，该算法可以减少不必要的距离计算，加快计算效率。</td>
</tr>
<tr>
<td>n_cluster</td>
<td>整型参数，表示分类簇的数量，默认值为 8</td>
</tr>
<tr>
<td>max_iter</td>
<td>整型参数，表示最大的迭代次数，默认值为 300</td>
</tr>
<tr>
<td>n_init</td>
<td>整型参数，表示用不同的质心初始化值运行算法的次数，默认值为 10</td>
</tr>
<tr>
<td>init</td>
<td>字符串参数，有三个可选参数： 1)” k-means++” ，默认值，用一种特殊的方法选定初始质心从而能加速迭代过程的收敛，效果最好； 2) “random” 表示从数据中随机选择 K 个样本作为初始质心点； 3) 提供一个 ndarray 数组，形如 (n_cluster,n_features)，以该数组作为初始质心点。</td>
</tr>
<tr>
<td>precompute_distance</td>
<td>有三个可选值，分别是 “auto”, True, False： 1) “auto” ：如果样本数乘以聚类数大于 12 million 的话则不予计算距离； 2) True：总是预先计算距离； 3) False：永远不预先计算距离。</td>
</tr>
<tr>
<td>tol</td>
<td>浮点型参数(float)，表示算法收敛的阈值，默认值为 1e-4</td>
</tr>
<tr>
<td>n_jobs</td>
<td>整型参数，指定计算所用的进程数量， 1) 若值为 -1，则用所有 CPU 进行运算； 2) 若值为 1 ，则不进行并行运算，方便调试； 3) 若值小于 -1，则用到的 CPU 数为(n_cpus+1+n_jobs)，因此若为 -2 ，则用到的 CPU 数为总 CPU 数减去1</td>
</tr>
<tr>
<td>random_state</td>
<td>表示随机数生成器的种子，参数值为整形或 numpy.RandomState 类型</td>
</tr>
<tr>
<td>verbose</td>
<td>整型参数，默认值为 0，表示不输出日志信息；1 表示每隔一段时间打印一次日志信息；如果大于 1时，打印次数变得频繁。</td>
</tr>
</tbody></table>
<p>最后通过鸢尾花数据集对 K-means 算法进行简单的演示，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 设置 matplotlib rc配置文件</span></span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">u&#x27;SimHei&#x27;</span>]  <span class="comment"># 用来设置字体样式以正常显示中文标签</span></span><br><span class="line">    matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 设置为 Fasle 来解决负号的乱码问题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载鸢尾花数据集</span></span><br><span class="line">    <span class="comment"># 数据的特征分别是 sepal length(花萼长度)、sepal width(花萼宽度)、petal length（花瓣长度）、petal width（花瓣宽度）</span></span><br><span class="line">    iris = load_iris()</span><br><span class="line">    X = iris.data[:, :<span class="number">2</span>]  <span class="comment"># 通过花萼的两个特征（长度和宽度）来聚类</span></span><br><span class="line">    k = <span class="number">3</span>  <span class="comment"># 假设聚类为 3 类，默认分为 8 个 簇</span></span><br><span class="line">    <span class="comment"># 构建算法模型</span></span><br><span class="line">    km = KMeans(n_clusters=k)  <span class="comment"># n_clusters参数表示分成几个簇（此处k=3）</span></span><br><span class="line">    km.fit(X)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取聚类后样本所属簇的对应编号（label_pred）</span></span><br><span class="line">    label_pred = km.labels_  <span class="comment"># labels_属性表示每个点的分簇号，会得到一个关于簇编号的数组</span></span><br><span class="line">    centroids = km.cluster_centers_  <span class="comment"># cluster_center 属性用来获取簇的质心点，得到一个关于质心的二维数组，形如[[x1,y1],[x2,y2],[x3,x3]]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 未聚类前的数据分布图</span></span><br><span class="line">    plt.subplot(<span class="number">121</span>)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], s=<span class="number">50</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;花萼长度&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;花萼宽度&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;未聚类之前&quot;</span>)</span><br><span class="line">    <span class="comment"># wspace 两个子图之间保留的空间宽度</span></span><br><span class="line">    plt.subplots_adjust(wspace=<span class="number">0.5</span>)  <span class="comment"># subplots_adjust（）用于调整边距和子图间距</span></span><br><span class="line">    <span class="comment"># 聚类后的分布图</span></span><br><span class="line">    plt.subplot(<span class="number">122</span>)</span><br><span class="line">    <span class="comment"># c：表示颜色和色彩序列，此处与 cmap 颜色映射一起使用（cool是颜色映射值）s表示散点的的大小，marker表示标记样式（散点样式）</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=label_pred, s=<span class="number">50</span>, cmap=<span class="string">&#x27;cool&#x27;</span>)</span><br><span class="line">    <span class="comment"># 绘制质心点</span></span><br><span class="line">    plt.scatter(centroids[:, <span class="number">0</span>], centroids[:, <span class="number">1</span>], c=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">100</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;花萼长度&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;花萼宽度&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;K-Means算法聚类结果&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="16、神经网络分类算法"><a href="#16、神经网络分类算法" class="headerlink" title="16、神经网络分类算法"></a>16、神经网络分类算法</h2><p><strong>深度学习（Deep Learning）</strong>这一概念是由 Geoffrey Hinton（深度学习之父）于 2006 年提出，但它的起源时间要早得多，可追溯至 20 世纪四五十年代，也就是人类刚刚发明出电子计算机时就已经提出来了，但当时并非叫做深度学习，而是人工神经网络（artificial neural network, ANN），简称神经网络（NN），它是一种算法模型，其算法的构思灵感来源于生物神经网络。</p>
<h3 id="16-1、MP神经元模型"><a href="#16-1、MP神经元模型" class="headerlink" title="16.1、MP神经元模型"></a>16.1、MP神经元模型</h3><p>人工神经网络是一种<code>有监督学习算法</code>，它试图通过模拟人脑神经系统对复杂信息的处理机制来构建一种数学模型。我们知道，神经元是构成生物神经系统的基本单元，而人工神经网络也不例外，它也是从<strong>神经元模型</strong>的基础上发展而来的。</p>
<p>1943 年，美国心理学家麦克洛奇（Mcculloch）和数学家皮兹（Pitts）提出了 M-P 神经元模型（取自两个提出者姓名的首字母），这是最早、也是最简单的神经网络算法的模型。</p>
<h4 id="16-1-1、生物神经元"><a href="#16-1-1、生物神经元" class="headerlink" title="16.1.1、生物神经元"></a>16.1.1、生物神经元</h4><p>神经元是大脑神经系统重要组成单位，主要由细胞体、树突、轴突、突触组成。神经元是一种<strong>多输入单输出</strong>的信息处理单元，输入的电信号有两种，分别是兴奋性信号和抑制性信号。</p>
<ul>
<li>树突，可以看作输入端，接受从从其他细胞传递过来的电信号；</li>
<li>轴突可以看作输出端，传递电信号给其他细胞；</li>
<li>突触，则可以看成 I&#x2F;O 接口，用于连接不同神经元，单个神经元可以和上千个神经元进行连接；</li>
</ul>
<p>细胞体内存在膜电位，外界传递过来电流时会使膜电位发生变化，当电位升高到一个阈值时，神经元就会被激活，产生一个脉冲信号，传递到下一个神经元。</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%94%9F%E7%89%A9%E7%A5%9E%E7%BB%8F%E5%85%83%E7%BB%84%E6%88%90.gif" alt="生物神经元组成" style="zoom:120%;">

<h4 id="16-1-2、M-P神经元"><a href="#16-1-2、M-P神经元" class="headerlink" title="16.1.2、M-P神经元"></a>16.1.2、M-P神经元</h4><p>M-P 模型就是基于生物神经构建的一种数学模型，只过不它将生物神经元信息传导过程进行了抽象化，并以网络拓扑相关知识来表示。</p>
<p>M-P 模型是神经网络的基本组成单位，在神经网络中也称为『节点（node）』或者『单元（unit）』。节点从其他节点接受输入，或从外部源接受输入（即 x1、x2、1），每个输入都带有一个权重值（weight，即 w），权重大小取决于输入值的相对重要性。函数 f 位于节点处，它是一个关于 ω、x 的线性函数，记做 f(x,ω) ，输入 b 表示函数的偏置项，最后经过 f(w,x) 的计算得输出 Y。模型如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B%E7%A4%BA%E4%BE%8B%E5%9B%BE.gif" alt="神经元模型示例图" style="zoom:150%;">

<p>上述模型对于神经网络说来说具有重要的意义，它是神经网络研究的开端，所示模型由 3 部分组成，从左往右依次为：神经元的输入、输入信号处理单元，以及神经元的输出。</p>
<p>M-P 模型采用数学模型模拟了生物神经元所包含的细胞体、树突、轴突和突出等生理特征。通过 M-P 模型提出了神经元的形式化数学描述和网络结构方法，从而证明了单个神经元能执行逻辑功能，但由于模型中的权重和偏置是人为设置的，因此该模型<strong>并不具备学习</strong>的能力。</p>
<h4 id="16-1-3、M-P模型解析"><a href="#16-1-3、M-P模型解析" class="headerlink" title="16.1.3、M-P模型解析"></a>16.1.3、M-P模型解析</h4><p>神经元是一种<strong>多端输入单端输出</strong>的信息处理单元，因此 M-P 神经元模型也遵循这个原理。神经元的输入端通常会被给予不同的权重，来权衡不同输入信号的重要程度，如上图所示是一个有 3 个输入，一个输出的神经元模型，该神经元模型接收 3 个输出信号，然后给予输入信号不同的权重，神经元的输入信号经过处理后得到神经元输出。注意，这里所说的信号可以理解为数据集中的数据样本。</p>
<h4 id="16-1-4、信息处理单元"><a href="#16-1-4、信息处理单元" class="headerlink" title="16.1.4、信息处理单元"></a>16.1.4、信息处理单元</h4><p>介于输入和输出之间的圆圈称为输入信息处理单元（即节点），之所以画成圆圈也是一种约定俗成的表示方式，而这个信息处理单元可以看成一个函数，当给这个模型“喂入”一个数据时，就会产生一个对应的输出。早期的 MP 神经元模型可以看成一种线性分类器，通过<strong>检验 f(x,ω) 的正负</strong>来识别两种不同类别的时输入。由此可知，该模型需要<code>正确设置权重参数</code>，才能使模型的输出对应所期望的类别。</p>
<h3 id="16-2、感知器模型"><a href="#16-2、感知器模型" class="headerlink" title="16.2、感知器模型"></a>16.2、感知器模型</h3><p>20 世纪 50年代（1957年），美国学者罗森勃拉特提出了感知器（或称感知机）模型，从某种意义上来说，<code>感知器模型是第一个具有学习能力的神经网络，该模型能根据每个类别的输入样本来学习权重。</code></p>
<p><strong>感知器模型</strong>，也可称为单层感知器，它是最简单的神经网络，它包含输入层和输出层，并且层与层之间直接相连。该模型从神经元模型的基础上发展而来，单层感知器能模拟逻辑与、逻辑或、逻辑非和逻辑与非等操作，单层感知器模型如下：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E6%84%9F%E7%9F%A5%E5%99%A8%E6%A8%A1%E5%9E%8B.gif" alt="感知器模型" style="zoom:120%;">


<p>虽然具备了学习的能力，但该模型只能解决简单的线性分类和线性回归问题，对于线性不可分问题（即异或问题，xor）仍无法解决（1969年，科学家明斯基和佩珀特证明）。如下图所示，无法找到一条直线可以把圆形和菱形分开：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%BA%BF%E6%80%A7%E4%B8%8D%E5%8F%AF%E5%88%86%E9%97%AE%E9%A2%98.gif" alt="线性不可分问题" style="zoom:120%;">

<p>感知器模型算法与神经元模型类似，是一个单层神经元结构，它首先对输入的数据进行<strong>加权求和</strong>，然后将得到的结果与阈值进行比较，假如与所期望的输出有较大误差，就对权值参数进行调整，反复多次，直到误差满足要求时为止。由上图可知单层感知器的输出为：<br>$$<br>\large<br>y(x_1,x_2) &#x3D; f(\omega_1 * x_1 + \omega_2 * x_2 - \theta)<br>$$<br>下面举个简单例子，看看单层感知器如何完成逻辑与运算（即 And，x1 ∧ x2）:</p>
<p>令 w1 &#x3D; w2 &#x3D;1，θ &#x3D; 1.5，则 y &#x3D;f(1<em>x1+1</em>x2-1.5)，显然，当 x1 和 x2 均为 1 时，y 的值为 1；而当 x1 和 x2 中有一个为 0 时，y 的值就为 0（通过 y 值的正负来取值，正值取值 1，负值取值 0，从而实现线性分类），当然逻辑或运算、与逻辑非运算也可通过此方法验证。</p>
<p>异或是一个数学运算符号，使用 ⊕ 来表示，计算机一般用 ^ 来表示。异或也叫半加运算，其运算法则相当于不带进位的二进制加法，用 1 表示真，用 0 表示假，运算法则为“同为 0，异为 1”。：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">0 ⊕ 0=0</span><br><span class="line">1 ⊕ 0=1</span><br><span class="line">0 ⊕ 1=1</span><br><span class="line">1 ⊕ 1=0</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">0 + 0 - θ ＜ 0 --&gt; θ &gt; 0</span><br><span class="line">ω1 + 0 - θ ≥ 0 --&gt; 0 ≥ θ - ω1</span><br><span class="line">0 + ω2 - θ ≥ 0 --&gt; 0 ≥ θ - ω2</span><br><span class="line">ω1 + ω2 - θ ＜ 0 --&gt; θ &gt; ω1 + ω2</span><br></pre></td></tr></table></figure>

<h4 id="16-2-1、激活函数"><a href="#16-2-1、激活函数" class="headerlink" title="16.2.1、激活函数"></a>16.2.1、激活函数</h4><p>上述感知器模型依然模拟了神经元结构，有输入（input）、权重（weight）、前馈运算（feed forward）、激活函数（activation function）、输出（output）等部分组成。注意，这里的前馈运算指的是图感知器模型中的『加权求和』，即在没有使用激活函数时输入值的加权求和结果，有时也记做『logit』。</p>
<p>通过上述模型很容易实现二分类。只需将对加权求和的结果值进行判断即可，比如 x&gt;0 为 1 类，若 x &lt;&#x3D;0 则为 0 类，这样就将输出结果值映射到了不同类别中，从而完成了二分类任务。激活函数公式如下：<br>$$<br>\large<br>f(x) &#x3D;<br>\begin{cases}<br>1,  &amp; \text{x &gt; 0} \<br>0,  &amp; \text{x&lt;&#x3D;0}<br>\end{cases}<br>$$<br>若想采用感知器模型解决线性回归问题就可以使用 sigmoid 函数，激活函数公式如下：<br>$$<br>\large<br>sigmoid(x) &#x3D; \frac{1}{1+e^{-x}}<br>$$</p>
<h4 id="16-2-2、多层感知器模型"><a href="#16-2-2、多层感知器模型" class="headerlink" title="16.2.2、多层感知器模型"></a>16.2.2、多层感知器模型</h4><p>由于单层感知器模型无法解决<strong>非线性可分</strong>问题，即 xor 问题（1969年，马文·明斯基证明得出），这也导致了神经网络热潮的第一次大衰退。直至 20 世纪 80 年代，多层感知器模型（Multi -Layer Perceptrons，缩写为 MLP）的提出（1981年，韦伯斯提出），神经网络算法再次回归大众视野。</p>
<p>与单层感知器模型相比，该模型在输入层与输出层之间增加了<code>隐藏层（Hidden）</code>，同时输出端，由原来一个增至两个以上（至少两个），从而增强了神经网络的表达能力。注意，对于只有一层隐藏层的神经网路，称为单隐层神经网络或者二层感知器，网络拓扑图如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8%E6%A8%A1%E5%9E%8B.gif" alt="多层感知器模型" style="zoom:130%;">

<p><strong>多层感知器模型</strong>是由多个<code>感知器</code>构造而成的，模型中每一个<code>隐藏层节点（或称单元）</code>都可以看做成一个感知器模型，当我们将这些感知器模型组合在一起时就可以得到“多层感知器模型”。输入层、隐藏层与输出层相互连接形成了神经网络，其中<code>隐藏网络层、输出层都是拥有激活函数的功能神经元（或称节点）</code>。</p>
<p>在神经网络中的隐藏层可以有多层，当隐藏层有多层，且形成一定“深度”时，神经网络便称为<strong>深度学习（deep learning）</strong>，这就是“深度学习”名字的由来。因此，深度学习就是<strong>包含了多个隐藏层的多层感知器模型</strong>。如下图所示，是具有两个隐藏层的神经网络：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%B8%A4%E4%B8%AA%E9%9A%90%E8%97%8F%E5%B1%82%EF%BC%89.gif" alt="多层感知器模型（两个隐藏层）" style="zoom:120%;">

<p>但<strong>『深度学习』</strong>这一概念直到 2006 年才被提出，在这之前多层感知器模型被称为“人工神经网络”。从神经元模型到单层感知器模型再到多层感知器模型，这就是人工神经网络的发展过程。在神经网络中每层的节点与下一层节点相互连接，节点之间不存在同层连接，也不存跨层连接，这样的网络结构也被称为“<strong>多层前馈神经网络</strong>”（multi-layer feedforward neural），如果层与层之间的节点全部相互连接，则称为“<strong>全连接神经网络</strong>”，如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.gif" alt="全连接神经网络" style="zoom:120%;">

<p>多层感知器的诞生，解决了单层感知器模型无法解决的异或问题。下面简单分析一下解决过程。如图所示是包含了一个隐藏层的多层感知器模型：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8%E8%A7%A3%E5%86%B3%E5%BC%82%E6%88%96%E9%97%AE%E9%A2%98.gif" alt="多层感知器解决异或问题" style="zoom:150%;">

<p>在多层感知器模型中，隐藏层中的每一个节点都是想当于一个感知器模型。下面将输入值（x1 和 x2）带入隐藏层节点，可得以下函数式（这里的函数指的是激活函数）：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">左隐藏层节点：f1(x1+x2-0.5)</span><br><span class="line">右隐藏层节点：f2(-x1-x2+1.5)</span><br></pre></td></tr></table></figure>

<p>由此可知输出层的函数式如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">f3(f1+f2-1.5)</span><br></pre></td></tr></table></figure>

<p>根据异或法则“同为 0，异为 1”，分别将 (0,1)，(1,0)，(0,0)，(1,1) 带入上述三个函数分别进行计算，可得以下结果（正数为 1，负数为 0）：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">(0,1)：f1(0+1-0.5)=1 f2(0-1+1.5)=1 --&gt; f3(1+1-1.5)=1 </span><br><span class="line">(1,0)：f1(1+0-0.5)=1 f2(-1-0+1.5)=1 --&gt; f3(1+1-1.5)=1 </span><br><span class="line">(0,0)：f1(0+0-0.5)=0 f2(0-0+1.5)=1 --&gt; f3(0+1-1.5)=0</span><br><span class="line">(1,1)：f1(1+1-0.5)=1 f2(-1-1+1.5)=0 --&gt; f3(1+0-1.5)=0</span><br></pre></td></tr></table></figure>

<p>可以看出输出层 f3 函数的结果完全符合异或运算法则，因此多层感知器可以解决“异或问题”。从函数图像上来看，多层感知器使用两条直线解决了线性不可分问题：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%88%86%E7%B1%BB%E5%8C%BA%E5%9F%9F.gif" alt="分类区域" style="zoom:150%;">

<p>上图所示，位于红色直线之间的属于正类，而位于区域之外则属于负类。当然图像中只是包含了四个点而已，若是复杂的数据则可以选择不同的激活函数，比如 sigmoid 函数等。</p>
<h3 id="16-3、神经网络工作流程"><a href="#16-3、神经网络工作流程" class="headerlink" title="16.3、神经网络工作流程"></a>16.3、神经网络工作流程</h3><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.gif" alt="人工神经网络模型" style="zoom:10%;">

<p>神经网络通过赋予输入信息<code>不同的权重值</code>来区别<code>不同信息的重要程度</code>。在模型训练过程中通过<code>调节线性函数的相应权值</code>，<code>增加有价值信息的输入权值</code>，<code>降低其他价值信息较低的输入权值</code>，这是<strong>【调优权值】</strong>的核心思想，通过上述方法能够提高网络模型预测的预测准确率。</p>
<h3 id="16-4、反向传播算法"><a href="#16-4、反向传播算法" class="headerlink" title="16.4、反向传播算法"></a>16.4、反向传播算法</h3><p>多层感知器的虽然解决了线性不可分问题，但随着隐藏层网络的加深，多层网络的训练和参数计算也越来越困难，因此多层感知器也显得“食之无味”。简单来说，就是当时的人们还不知道应该怎么训练多层神经网络，甚至不相信多层神经网络也是同样能被训练的。</p>
<p>直到 1986 年，深度学习教父 Hinton 等人对反向传播算法（Backpropagation algorithm，即误差逆向传播算法，简称 BP算法）进行了重新描述，证明了该算法可以解决网络层数过深导致的参数计算困难和误差传递等问题。</p>
<p>反向传播算法是一种用于训练神经网络的<code>有监督学习算法</code>，<code>基于梯度下降（gradient descent）策略</code>，以目标的<code>负梯度方向</code>对参数进行调整。但受限于当时（20世纪80年代）计算机算力不足等因素的影响，BP 算法只能以简单低效的方式来解决少数层神经网络训练问题，但即使如此，也已经弥足珍贵。</p>
<p>BP 算法的出现再次引发了 AI 研究的热潮，它是一款非常成功的神经网络算法，直到今天，该算法仍在深度学习领域发挥着重要的作用（用于训练多层神经网络）。</p>
<h4 id="16-4-1、正向传播"><a href="#16-4-1、正向传播" class="headerlink" title="16.4.1、正向传播"></a>16.4.1、正向传播</h4><p>人工神经网络是由一个个的神经元节点构成的，这些节点的作用就是负责接受和传导信息，如同大脑神经元一样，接受外接刺激，传递兴奋信号。</p>
<p>在一个人工神经网络模型中，<code>从输入层开始，传递到输出层，最后返回结果</code>，这种信号传播方式被称为“正向传播”（或称前向运算、前向传播）。在神经网络模型中，若输入一层层的传递下去的，直到输出层产生输出，正向传播就结束了。</p>
<p>反向传播的与前向传播类似，但由于传播方向相反，因此被称为反向传播算法（简称 BP 算法），该算法最早出现在 20 世纪 60 年代，但当时并没有引起重视，直到 1986 年经 Hinton 等人进行了重新描述，才再次进入大众的视野。该算法成功解决了少数层神经网络【权值参数】计算的问题。</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E5%89%8D%E5%90%91%E8%BF%90%E7%AE%97%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.gif" alt="前向运算和反向传播示意图" style="zoom:120%;">

<h4 id="16-4-2、反向传播原理"><a href="#16-4-2、反向传播原理" class="headerlink" title="16.4.2、反向传播原理"></a>16.4.2、反向传播原理</h4><p>反向传播算法（BP）是一种<strong>有监督学习</strong>算法，即通过<strong>有标记的训练数据</strong>来学习，它是训练人工神经网络模型的常用方法之一。简单的来说，<code>BP 算法就是从错误中学习，直至将错误程度降到最低时结束，从而提高模型的可靠性</code>。</p>
<p>BP 算法的学习过程由正向传播过程和反向传播过程两部分组成。在正向传播过程中，输入信息通过输入层经隐含层，逐层处理并传向输出层，如果输出值与标记值存在误差，则将误差由输出层经隐藏层向输入层传播（即反向传播），并在这个过程中<code>利用梯度下降算法对神经元的各个权值参数进行调优</code>，当误差达到最小时，网络模型训练结束，也即反向传播结束。流程图如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83.gif" alt="神经网络模型训练" style="zoom:120%;">

<p>对上述过程进行总结：输入层接受一个输入数据 x，同时初始化一个权重参数 ω，通过隐藏层计算之后，由输出层输出结果，前向运算完成。之后，将输出层结果与标记值进行比较，获取偏差值，将此偏差值由输出层向输入层传播（反向传播阶段），这个阶段利用<code>梯度下降算法对权值参数进行反复调优</code>，<code>当偏差值最小时，获得一组最优的权值参数（ω）</code>。</p>
<h4 id="16-4-3、总结："><a href="#16-4-3、总结：" class="headerlink" title="16.4.3、总结："></a>16.4.3、总结：</h4><p>神经网络分类算法是一种有监督学习算法，使用神经网络分类算法，大致需要以下五步：</p>
<ul>
<li>初始化神经网络中所有神经元节点的权值；</li>
<li>输入层接收输入，通过正向传播产生输出；</li>
<li>根据输出的预测值，结合实际值计算偏差；</li>
<li>输出层接收偏差，通过反向传播机制（逆向反推）让所有神经元更新权值；</li>
<li>从第 2 步到第 4 步是一次完整的训练模型的过程，重复该过程，直到偏差值最小。</li>
</ul>
<p>神经网络算法通过反向传播机制让所有神经元实现了权值更新，当我们不断迭代上述训练过程，直到偏差值最小，最终就会得到一个最优的网络模型，实现了对数据的最佳拟合。</p>
<h3 id="16-5、神经网络分类算法的应用及其实现"><a href="#16-5、神经网络分类算法的应用及其实现" class="headerlink" title="16.5、神经网络分类算法的应用及其实现"></a>16.5、神经网络分类算法的应用及其实现</h3><h4 id="16-5-1、神经网络算法的特点"><a href="#16-5-1、神经网络算法的特点" class="headerlink" title="16.5.1、神经网络算法的特点"></a>16.5.1、神经网络算法的特点</h4><p>深度学习的本质就是神经网络算法（深度学习是神经网络算法的一个分支）。理论上来说，<code>在数据量和隐藏层足够多的情况下，神经网络算法能够拟合任何方程（函数）</code>。神经网络算法是一种具有<code>网络结构</code>的算法模型，这决定了它具有非常好的延展性，<code>通过调节神经网络中各个节点的权值参数使得分类效果明显提升</code>。总的来说，神经网络算法具有以下特点：</p>
<ol>
<li><p>黑盒算法</p>
<p>神经网络算法，也被称为“黑盒算法”，这是因为人们无法从外部得知神经网络模型究竟是如何完成训练的，比如使用一个预测准确率为 97% 的猫脸识别模型，有时会将小狗的脸部照片归纳到小猫中，而这种情况是无法解释的，因此神经网络算法又被人们形象地称之为“黑盒算法”。</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E9%BB%91%E7%9B%92%E7%AE%97%E6%B3%95.gif" alt="黑盒算法" style="zoom:150%;">

<p>由于神经网络算法的这一特性，导致一些场景并不适合使用神经网络算法，比如银行不会使用神经网络算法来评判用户的是否具备信用，因为一旦出现预测错误，银行根本无法溯源找到评判错误的原因，也就无法向客户做出合理的解释。</p>
</li>
<li><p>数据量</p>
<p>在互联网并不发达的七八十年代，数据量不足是阻碍神经网络发展的一大因素。与传统的机器学习算法相比，<code>要想训练一个优秀的神经网络模型，往往需要更多的数据（至少需要数千甚至数百万个标记样本）。</code></p>
<p>比如人脸识别，需要各种姿态样式的人脸，发怒的、喜悦的、悲伤的、戴眼镜的、模糊的等等，总之越多越好。海量数据集对于训练一个优秀的神经网络模型非常重要，神经网络获得数据越多，表现能力就越好，这样训练出来的模型才具有更好的泛化能力。</p>
</li>
<li><p>算力和开发成本高</p>
<p>在计算方面，比传统算法下相比，神经网络算法要耗费更多的计算机资源，对于复杂的深度学习模型来说，若想训练出一个优秀的模型，甚至需要几周的时间。但以 20 世纪七八十年代的计算机硬件水平，想要实现如此大规模的计算，几乎是不可能的。因此计算机的硬件性能也是影响神经网络发展的因素之一。</p>
<p>进入 21 世纪以后，计算机的硬件性能获得了飞速发展，这为神经网络的发展创造了有利的外部环境。</p>
<p>同时神经网络模型搭建过程较为复杂，<code>激活函数的选择，权值的调节</code>，都是一个比较费时的过程，因此其开发周期相对较长。总之，<strong>神经网络算法是一种成本较高的算法，这也决定了它能够解决比传统机器学习算法更为复杂的问题</strong>。下表对神经网络的特点做了简单的总结：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>优点</td>
<td><strong>网络结构延展性好，能够拟合复杂的数据分布</strong>，比如非线性函数，通过调节权值参数来获取泛化能力较强的模型。</td>
</tr>
<tr>
<td>缺点</td>
<td>可解释性差，调参依赖于经验，可能会陷入局部最优解，或者梯度消失、梯度爆炸等问题。</td>
</tr>
<tr>
<td>应用领域</td>
<td>神经网络算法拟合能力强，应用领域广，比如文本分类等，而深度学习作为神经网络的分支，也是当前最为热门研究方向，在<strong>图像处理、语言识别和自然语言处理</strong>等多个领域都有着非常突出的表现。</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="16-5-2、神经网络算法应用"><a href="#16-5-2、神经网络算法应用" class="headerlink" title="16.5.2、神经网络算法应用"></a>16.5.2、神经网络算法应用</h4><p>Python 机器学习 Sklearn 库提供了多层感知器算法（Multilayer Perceptron，即 MLP），也就是我们所说的神经网络算法，它被封装在 sklearn.neural_network 包中，该包提供了三个神经网络算法 API，分别是：</p>
<ul>
<li>neural_network.BernoulliRBM，伯努利受限玻尔兹曼机算法，无监督学习算法；</li>
<li>neural_network.MLPClassifier，神经网络分类算法，用于解决分类问题；</li>
<li>neural_network.MLPRgression，神经网络回归算法，用于解决回归问题。</li>
</ul>
<p>下面使用神经网络分类算法解决鸢尾花的分类问题。在这之前有必要先了解 neural_network.MLPClassifier 分类器常用参数，如下所示：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hidden_layer_sizes</td>
<td>元组或列表参数，序列内元素的数量表示有多少个隐藏层，每个元素的数值表示该层有多少个神经元节点，比如(10,10)，表示两个隐藏层，每层10个神经元节点。</td>
</tr>
<tr>
<td>activation</td>
<td>隐藏层激活函数，参数值有 identity、logistic、tanh、relu，默认为 ‘relu’ 即线性整流函数（校正非线性）</td>
</tr>
<tr>
<td>solver</td>
<td>权重优化算法，lbfgs、sgd、adam，其中 lbfg 鲁棒性较好，但在大型模型或者大型数据集上花费的调优时间会较长，adam 大多数效果都不错，但对数据的缩放相当敏感，sgd 则不常用</td>
</tr>
<tr>
<td>alpha</td>
<td>L2 正则项参数，比如 alpha &#x3D; 0.0001（弱正则化）</td>
</tr>
<tr>
<td>learning_rate</td>
<td>学习率，参数值 constant、invscaling、adaptive</td>
</tr>
<tr>
<td>learning_rate_init</td>
<td>初始学习率，只有当 solver 为 sgd 或 adam 时才使用。</td>
</tr>
<tr>
<td>max_iter</td>
<td>最大迭代次数</td>
</tr>
<tr>
<td>shuffle</td>
<td>是否在每次迭代时对样本进行清洗，当 solver 参数值为 sgd 或 adam 时才使用该参数值</td>
</tr>
<tr>
<td>random_state</td>
<td>随机数种子</td>
</tr>
<tr>
<td>tol</td>
<td>优化算法中止的条件，当迭代先后的函数差值小于等于 tol 时就中止</td>
</tr>
</tbody></table>
<p>Iris 鸢尾花数据集内包含 3 个类别，分别是山鸢花（Iris-setosa）、变色鸢尾（Iris-versicolor）和维吉尼亚鸢尾（Iris-virginica）共150 条记录，每一个类别有 50 条数据，每条记录有 4 项特征（单位为厘米）：</p>
<ul>
<li>sepallength：萼片长度</li>
<li>sepalwidth：萼片宽度</li>
<li>petallength：花瓣长度</li>
<li>petalwidth：花瓣宽度</li>
</ul>
<p>选取两个类别（0 和 1，即山鸢尾花和变色鸢尾花）的样本标记值和两个特征属性（’sepal length (cm)’, ‘petal length (cm)’），之后使用神经网络分类算法对数据集中的 0 和 1 两类鸢尾花进行正确分类。代码如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    iris = datasets.load_iris()  <span class="comment"># 加载鸢尾花数据集</span></span><br><span class="line">    <span class="comment"># 用pandas处理数据集</span></span><br><span class="line">    data = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">    <span class="built_in">print</span>(iris.feature_names)</span><br><span class="line">    <span class="comment"># 数据集标记值 iris.target</span></span><br><span class="line">    data[<span class="string">&#x27;class&#x27;</span>] = iris.target</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此处只取两类 0/1 两个类别的鸢尾花，设置类别不等于 2</span></span><br><span class="line">    data = data[data[<span class="string">&#x27;class&#x27;</span>] != <span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 对数据集进行归一化和标准化处理</span></span><br><span class="line">    scaler = StandardScaler()</span><br><span class="line">    <span class="comment"># 选择两个特征值（属性）</span></span><br><span class="line">    X = data[[<span class="string">&#x27;sepal length (cm)&#x27;</span>, <span class="string">&#x27;petal length (cm)&#x27;</span>]]</span><br><span class="line">    <span class="comment"># 计算均值和标准差</span></span><br><span class="line">    scaler.fit(X)</span><br><span class="line">    <span class="comment"># 标准化数据集（数据转化）</span></span><br><span class="line">    X = scaler.transform(X)</span><br><span class="line">    <span class="comment"># &#x27;class&#x27;为列标签，读取100个样本的的列表</span></span><br><span class="line">    Y = data[[<span class="string">&#x27;class&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    X_train, X_test, Y_train, Y_test = train_test_split(X, Y)</span><br><span class="line">    <span class="comment"># 创建神经网络分类器</span></span><br><span class="line">    mpl = MLPClassifier(solver=<span class="string">&#x27;lbfgs&#x27;</span>, activation=<span class="string">&#x27;logistic&#x27;</span>)</span><br><span class="line">    <span class="comment"># 训练神经网络模型</span></span><br><span class="line">    mpl.fit(X_train, Y_train)</span><br><span class="line">    <span class="comment"># 打印模型预测评分</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Score:\n&#x27;</span>, mpl.score(X_test, Y_test))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分网格区域</span></span><br><span class="line">    h = <span class="number">0.02</span></span><br><span class="line">    x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))</span><br><span class="line">    Z = mpl.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    <span class="comment"># 画三维等高线图，并对轮廓线进行填充</span></span><br><span class="line">    plt.contourf(xx, yy, Z, cmap=<span class="string">&#x27;summer&#x27;</span>)</span><br><span class="line">    <span class="comment"># 绘制散点图</span></span><br><span class="line">    class1_x = X[Y[<span class="string">&#x27;class&#x27;</span>] == <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    class1_y = X[Y[<span class="string">&#x27;class&#x27;</span>] == <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    l1 = plt.scatter(class1_x, class1_y, color=<span class="string">&#x27;b&#x27;</span>, label=iris.target_names[<span class="number">0</span>])</span><br><span class="line">    class2_x = X[Y[<span class="string">&#x27;class&#x27;</span>] == <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    class2_y = X[Y[<span class="string">&#x27;class&#x27;</span>] == <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    l2 = plt.scatter(class2_x, class2_y, color=<span class="string">&#x27;r&#x27;</span>, label=iris.target_names[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    plt.legend(handles=[l1, l2], loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>

<h2 id="17、集成学习算法"><a href="#17、集成学习算法" class="headerlink" title="17、集成学习算法"></a>17、集成学习算法</h2><p>集成学习算法并非一种机器学习算法，它更像是一种<code>模型优化</code>方法，是一种<code>能在各种机器学习任务上提高准确率的强有力技术</code>，这种技术的关键体现在“集成”两个字上，所谓集成就是“捏在一起”，因此集成学习算法可以理解成是<code>一套组合了多种机器学习算法模型的框架</code>，它关注的是框架内各个模型之间的组织关系，而非某个模型的具体内部结构。</p>
<p>可以说集成学习算法是“集”百家之长，使预测模型获得较高准确率，当然这也导致了模型的训练过程会稍加复杂，效率降低了一些，但在硬件性能发达的今天，几乎可以忽略不计。</p>
<h3 id="17-1、集成学习发展史"><a href="#17-1、集成学习发展史" class="headerlink" title="17.1、集成学习发展史"></a>17.1、集成学习发展史</h3><p>集成学习算法的理论、应用体系的构建与完善经历一个漫长的过程，下面进行简单地介绍。</p>
<p>集成学习最早出现于 1979 年，Dasarathy 提出了集成系统（Ensemble system） 的思想，他使用线性分类器和最近邻居分类器组成的复合模型进行训练，得到了比单个分类器训练更好的预测效果。</p>
<p>1988 年 Kearns 提出了<strong>“弱学习器”</strong>概念，引发了<strong>“能否用一组弱学习器创造一个强学习器”</strong>的广泛讨论。（学习器，指的是某种机器学习算法模型），注意，所谓<strong>弱学习器</strong>，指的是一个个单独的算法模型，比如 KNN 算法模型、线性回归模型、朴素贝叶斯等，而<strong>强学习器</strong>指的是由多个不同类别的<strong>“弱学习器”</strong>集成的学习器，也称“异质集成”，这类学习器的预测准确率在 90% 以上。除此之外，还有一种<strong>“基学习器”</strong>（也称同质集成），它是由同一款机器学习算法组成的。</p>
<p>1990 年 Schapire 对这问题给出了答案，并且研发了著名的 Boosting 算法，该算法是集成学习常用方法之一；1992 年 Wolpert 首次提出<strong>“堆叠泛化”</strong>这一概念，即<strong>“堆叠”</strong>弱学习器训练的模型比任何单个弱学习器训练的模型具有更好的性能。</p>
<p>1996年，Breiman 开发了另一个集成学习方法 —— Bagging 算法（也称装袋算法），并对其原理和训练过程进行了详细的描述，并明确指出 Bagging 算法能够提高预测的准确性。其后几年，Breiman 在 Bagging 算法的基础上对<strong>“随机决策森林”</strong>进行另外重新描述，提出了集成学习中最广为人知的算法 —— <strong>随机森林算法（RandomForest）</strong>，该算法通过集成学习的思想将多棵<strong>“决策树”</strong>集成为一片<strong>“森林”</strong>，使其兼顾了解决回归问题和分类问题的能力。</p>
<p>截止到目前，已经有越来越多的集成学习算法被提出，比如 2010 年 Kalal 等人提出的 P-N 学习，以及近几年提出的以堆叠方式构建的深度网络结构、XGBoost 等算法，它们都能显著提升模型的预测效果。</p>
<h3 id="17-2、集成学习组成方式"><a href="#17-2、集成学习组成方式" class="headerlink" title="17.2、集成学习组成方式"></a>17.2、集成学习组成方式</h3><p>集成学习不是一种独立的机器学习算法，而是把互相没有关联的机器学习算法“集成”在一起，从而取得更好的效果。每个算法模型都有各自的局限性，集成学习方式的出现正好弥补了这一不足之处。</p>
<p>总的来说，集成学习算法主要使用两种结构来管理模型与模型之间的关系，一种是并联，另一种是串联（这和物理上串联电路、并联电路似乎有些相似之处）。下面对这两种方式进行简单介绍。</p>
<ol>
<li><p>并联组织关系</p>
<p>所谓并联，就是训练过程是并行的，几个学习器<code>相对独立地完成预测工作，彼此互不干扰</code>，当所有模型预测结束后，最终以某种方法<code>把所有预测结果合在一起</code>。并行式集成学习的典型代表是 Bagging 算法。并行结构示意图如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E5%B9%B6%E8%81%94%E7%BB%93%E6%9E%84.gif" alt="集成学习并联结构" style="zoom:120%;">
</li>
<li><p>串联组织关系</p>
<p>串联结构指的是训练过程是串行的，几个学习器<strong>串</strong>在一起，通力合作一起来完成预测任务。第一个学习器拿到数据集完成预测，然后把预测结果以及相关数据传递给第二个学习器，第二个学习器也是在完成预测后把结果和相关数据继续传递下去，直至传递到最后一个学习器。串行式集成学习的典型代表是 Boosting 算法。串行结构示意图如下所示：</p>
<img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E4%B8%B2%E8%81%94%E7%BB%93%E6%9E%84.gif" alt="集成学习串联结构" style="zoom:120%;"></li>
</ol>
<p>如果<code>各个学习器势均力敌，分不出主次优劣，在这种情况下建议选择并联结构</code>；如果学习器已经<code>有了明确的分工，知道谁负责主攻，谁负责辅助，则可以使用串联结构</code>。</p>
<h3 id="17-3、预测结果的方式"><a href="#17-3、预测结果的方式" class="headerlink" title="17.3、预测结果的方式"></a>17.3、预测结果的方式</h3><p>不管是串联结构，亦或是并联结构，最终都要输出一个预测结果，而在一个组织结构会有多个学习器，因此就会产生多个预测结果，那么我们要怎么将这些结果整合成一个结果对外输出呢，也就是使用什么方式来整合每个学习器的输出结果呢。对于集成学习算法来说，把多个结果整合成一个结果的方法主要有两种，分别是平均法和投票法，下面分别对它们进行介绍。</p>
<h4 id="17-3-1、平均法"><a href="#17-3-1、平均法" class="headerlink" title="17.3.1、平均法"></a>17.3.1、平均法</h4><p>平均法，又分为简单平均法和加权平均法，<strong>简单平均法</strong>就是先求和然后再求均值，而<strong>加权平均</strong>则多了一步，即每个学习器通过训练被分别赋予合适的权值，然后求各个预测结果的加权和，最后再求均值。</p>
<h4 id="17-3-2、投票法"><a href="#17-3-2、投票法" class="headerlink" title="17.3.2、投票法"></a>17.3.2、投票法</h4><p>投票法，具体分为三种：简单多数投票法、绝对多数投票法和加权投票法。</p>
<ol>
<li><p>简单多数投票法就是哪个预测结果占大多数，就把这个结果就作为最终的预测结果；</p>
</li>
<li><p>绝对多数投票法就多了一个限制，这个“多数”必须达到半数，比如有共有 6 个学习器，得出同一预测结果的必须达到 3 个及以上，否则就拒绝进行预测。</p>
</li>
<li><p>加权投票法，有点类似加权平均，首先给不同的学习器分配权值，其次是查看哪个结果占大多数，注意，此处有一点儿不同，这里的“大多数”是权值相加后再比较得到的大多数，最后以得票最多的作为预测结果。</p>
<p>关于加权投票法举一个简单的例子，比如预测结果为 A 的有 3 个学习器，权值分别为 0.1、0.2 和 0.3，那么结果 A 的票数就为三者之和，即 0.6，而预测结果为 B 的只有 2 个学习器，但权值分别为 0.4 和 0.5，那么结果 B 的票数就为 0.9，也就是结果 B 的票数高于结果 A，最终预测结果就是结果 B。</p>
</li>
</ol>
<h3 id="17-4、集成学习实现方式"><a href="#17-4、集成学习实现方式" class="headerlink" title="17.4、集成学习实现方式"></a>17.4、集成学习实现方式</h3><p>根据个体学习器生成方式的不同，目前集成学习的实现方式主要分为两种：</p>
<ul>
<li>一种是 Bagging 算法为代表的并行式集成学习方法，其中最典型的应用当数“随机森林算法”；</li>
<li>另一种是以 Boosting 算法为代表的串行式集成学习方法，其中应用频率较高的有两个 AdaBoost 算法和 XGBoost 算法。</li>
<li>除上述两种主要的方法外，还有一种 Stacking 分层模型集成学习算法。</li>
</ul>
<h4 id="17-4-1、Bagging算法"><a href="#17-4-1、Bagging算法" class="headerlink" title="17.4.1、Bagging算法"></a>17.4.1、Bagging算法</h4><p>Bagging 算法又称为“装袋算法”最初由 Leo Breiman 于 1996 年提出，它是并行式学习的典型代表，该算法主要是从数据层面上进行设计。并联结构中的每个学习器所使用的数据集均采用<strong>放回重采样</strong>的方式生成，也就是说，<code>每个学习器生成训练集时，每个数据样本都有相同的被采样概率</code>。训练完成后，Bagging 采用投票的方式进行预测。</p>
<p>通过放回重采样的方式来构建样本量相等、且相互独立的数据集，从而在同一算法中训练出不同的模型。Bagging 算法的集成策略比较简单，对于分类问题，一般通过投票法，以多数模型预测结果为最终结果；而对于回归问题，一般采用算术平均法，对所有模型的预测结果做算术平均得到最终结果。</p>
<h4 id="17-4-2、Boosting算法"><a href="#17-4-2、Boosting算法" class="headerlink" title="17.4.2、Boosting算法"></a>17.4.2、Boosting算法</h4><p>与 Bagging 算法相比，Boosting 是一种串行式集成学习算法，该算法基于<strong>错误</strong>来提升模型的性能，根据前面分类器分类错误的样本，调整训练集中各个样本的权重来重新构建分类器。</p>
<p>Boosting 可以组合多个弱学习器来形成一个强学习器，从而在整体上提高模型预测的准确率。在模型训练过程中，Boosting 算法总是更加关注被错误分类的样本，首先对于第一个弱学习器预测发生错误的数据，在后续训练中提高其权值，而正确预测的数据则降低其权值，然后基于调整权值后的训练集来训练第二个学习器，如此重复进行，直到训练完成所有学习器，最终将所有弱学习器通过集成策略进行整合（比如加权法），生成一个强学习器。</p>
<p>Boosting 算法的训练过程是呈阶梯状的，后一个学习器会在前一个学习器的基础上进行学习，最终以某种方式进行综合，比如加权法，对所有模型的预测结果进行加权来产生最终的结果。</p>
<h3 id="17-5、随机森林算法"><a href="#17-5、随机森林算法" class="headerlink" title="17.5、随机森林算法"></a>17.5、随机森林算法</h3><p>随机森林（Random Forest，简称RF）是通过集成学习的思想将多棵树集成的一种算法，它的基本单位是决策树模型，而它的本质属于机器学习的一大分支——集成学习（Ensemble Learning）方法。集成学习的实现方法主要分为两大类，即 Bagging 和 boosting 算法，随机森林就是通过【Bagging 算法+决策树算法】实现的。</p>
<h4 id="17-5-1、随机森林"><a href="#17-5-1、随机森林" class="headerlink" title="17.5.1、随机森林"></a>17.5.1、随机森林</h4><p>随机森林，顾名思义，即使用<strong>随机</strong>的方式建立一个森林，这个森林由很多的<code>决策树</code>组成，并且每一棵决策树之间是<code>相互独立</code>的。</p>
<p>如果训练集有 M 个样本，对于每棵数而言，以<strong>随机</strong>且有放回的方式从训练集中抽取 N 个训练样本（N&lt;M），作为该棵决策树的训练集。除了采用<code>样本随机</code>之外，随机森林还采用了<code>特征随机</code>。假设每个样本有 K 个特征，从所有特征中随机选取 k 个特征（k&lt;&#x3D;K），选择最佳分割属性作为节点建立 CART 决策树，重复该步骤，建立 m 棵 CART 树，这些树就组成了森林，这也是随机森林名字的由来。随机采样和随机特征选取在一定程度上避免了过拟合现象的发生。</p>
<p>当有一个新的输入样本进入森林时，就让森林中的每一棵决策树分别对其进行判断，看看这个样本应该属于哪一类（对于分类算法而言），然后使用少数服从多数的【投票法】，看看哪一类被选择最多，就预测该样本为哪一类。在这个过程中，森林中每棵数都是独立地对若干个弱分类器的分类结果进行投票选择，从而组成一个强分类器。</p>
<p>随机森林既可以处理属性为离散值的样本（即分类问题），也可以处理属性为连续值的样本（即回归问题），另外随机森林还可以应用于无监督学习的聚类问题，以及异常点检测。</p>
<h4 id="17-5-2、算法应用"><a href="#17-5-2、算法应用" class="headerlink" title="17.5.2、算法应用"></a>17.5.2、算法应用</h4><p>在 Scikit-Learn 机器学习库中提供了 Bagging 和 Boosting 两种集成学习方法，且都在 <strong>ensemble</strong> 类库下，包括随机森林算法。除此之外，该类库下还包含了其他几类算法，较为知名有如下几种：</p>
<table>
<thead>
<tr>
<th></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>RandomForestClassifier类</td>
<td>使用随机森林（Random Forest）算法解决分类问题，随机森林可谓 Bagging 集成学习算法的典型代表，它选择以 CART 决策树算法作为弱学习器，是一种常用的机器学习算法。</td>
</tr>
<tr>
<td>RandomForestRegressor类</td>
<td>使用随机森林算法解决回归问题</td>
</tr>
<tr>
<td>ExtraTreesClassifier类</td>
<td>使用极端随机树（Extra Tree）算法解决分类问题，极端随机树算法可以看作随机森林算法的一种变种，主要原理非常类似，但在决策条件选择时采用了随机选择的策略。</td>
</tr>
<tr>
<td>ExtraTreesRegressor类</td>
<td>使用极端随机树算法解决回归问题。</td>
</tr>
<tr>
<td>AdaBoostRegressor类</td>
<td>使用AdaBoost算法解决分类问题，AdaBoost算法是最知名的Boosting算法之一。</td>
</tr>
<tr>
<td>AdaBoostRegressor类</td>
<td>使用AdaBoost算法解决回归问题。</td>
</tr>
<tr>
<td>GradientBoostingClassifier类</td>
<td>使用Gradient Boosting算法解决分类问题，Gradient Boosting算法常常搭配CART决策树算法使用，这就是有名的梯度提升树（Gradient Boosting Decision Tree,GBDT）算法。</td>
</tr>
<tr>
<td>GradientBoostingRegressor类</td>
<td>使用Gradient Boosting算法解决回归问题。</td>
</tr>
</tbody></table>
<p>Scikit-Learn 对于集成学习方法做了非常良好的封装，可以实现“开箱即用”，下面以随机森林算法为例进行演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="comment"># 从Scikit-Learn库导入集成学习模型的随机森林分类算法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 载入鸢尾花数据集</span></span><br><span class="line">    X, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    <span class="comment"># 随机森林与决策树算法一样，其中有一个名为“criterion”的参数</span></span><br><span class="line">    <span class="comment"># 同样可以传入字符串“gini”或“entropy”，默认使用的是基尼指数</span></span><br><span class="line">    clf = RandomForestClassifier()</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型预测准确率&quot;</span>, clf.score(X, y))</span><br><span class="line">    <span class="comment"># 使用模型进行分类预测</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;预测结果:&quot;</span>, clf.predict(X))</span><br></pre></td></tr></table></figure>

<h4 id="17-5-3、总结"><a href="#17-5-3、总结" class="headerlink" title="17.5.3、总结"></a>17.5.3、总结</h4><p>随机森林算法是集成学习方法的典型代表，该算法具有以下特点：</p>
<ul>
<li>模型准确率高：随机森林既可以处理分类问题，也可以处理回归问题，即使存在部分数据缺失的情况，随机森林也能保持很高的分类精度；</li>
<li>能够处理数量庞大的高维度的特征，且不需要进行降维（因为特征子集是随机选择的）；</li>
<li>能够评估各个特征在分类问题上的重要性：可以生成树状结构，判断各个特征的重要性；</li>
<li>对异常值、缺失值不敏感。</li>
</ul>
<p>当然随机森林算法也存在一些不足，比如：</p>
<ul>
<li>随机森林解决回归问题的效果不如分类问题；</li>
<li>树之间的相关性越大，错误率就越大；</li>
<li>当训练数据噪声较大时，容易产生过拟合现象。</li>
</ul>
]]></content>
      <categories>
        <category>machineLearning</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>禅道部署及使用</title>
    <url>/2023/04/08/%E7%A6%85%E9%81%93%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="禅道部署及使用"><a href="#禅道部署及使用" class="headerlink" title="禅道部署及使用"></a>禅道部署及使用</h1><h2 id="1、禅道"><a href="#1、禅道" class="headerlink" title="1、禅道"></a>1、禅道</h2><p>禅道是一款开源的项目管理软件，可以帮助团队实现敏捷开发和项目管理，具有任务跟踪、BUG管理、文档管理、团队协作等功能。同时禅道还可以通过插件扩展功能，如集成SVN&#x2F;Git、邮件提醒等等。</p>
<ol>
<li><p>对团队而言</p>
<p>通过禅道，可以把所有的工作拆分成任务并在线上分配给开发人员，再结合一些统计报表，管理者对团队执行力可以有一个数据化的感知。可以作为团队是否需要扩张的参考依据。</p>
</li>
<li><p>对个人而言</p>
<p>通过禅道，把工作拆分成一个一个的最细粒度任务，可以详细到小时的单位，并分配给开发人员。任务分配者（比如迭代负责人）注意每个任务难度、复杂度相近。管理者可以通过任务的完成数量，完成时间，对开发者有一个量化的工作量评估。通过所完成任务的bug的率的统计，可以对开发人员的代码质量有一个大概的评估。</p>
</li>
</ol>
<span id="more"></span>

<h3 id="1-1、禅道的优势"><a href="#1-1、禅道的优势" class="headerlink" title="1.1、禅道的优势"></a>1.1、禅道的优势</h3><ol>
<li>管理思想简洁实效，可以帮助企业实现快速敏捷开发。</li>
<li>功能完备，无需再费心整合若干系统在一起使用。</li>
<li>源代码开源开放，有灵活的扩展机制，方便使用并二次开发。</li>
<li>国产软件，本地支持，操作习惯更符合国人。</li>
<li>自主开发的底层框架和前端UI框架，界面美观，交互友好。</li>
<li>完善的社区机制，可以获得及时的技术支持和帮助。</li>
<li>支持多种部署方式，可以私有部署，也可以选择云端服务。</li>
</ol>
<h3 id="1-2、禅道的功能"><a href="#1-2、禅道的功能" class="headerlink" title="1.2、禅道的功能"></a>1.2、禅道的功能</h3><ol>
<li>产品管理：包括产品、需求、计划、发布、路线图等功能。</li>
<li>项目管理：包括项目、任务、团队、版本、燃尽图等功能。</li>
<li>质量管理：包括bug、测试用例、测试任务、测试结果等功能。</li>
<li>文档管理：包括产品文档库、项目文档库、自定义文档库等功能。</li>
<li>事务管理：包括todo管理，我的任务、我的Bug、我的需求、我的项目等个人事务管理功能。</li>
<li>组织管理：包括部门、用户、分组、权限等功能。</li>
<li>统计功能：丰富的统计表。</li>
<li>搜索功能：强大搜索功能，可快速找到相应数据。</li>
<li>扩展机制：可以对任何地方进行扩展。</li>
<li>api机制：所见皆API，方便与其他系统集成。</li>
</ol>
<h2 id="2、部署"><a href="#2、部署" class="headerlink" title="2、部署"></a>2、部署</h2><p>禅道使用docker部署，新建docker-compose.yml文件，在文件中写入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  zentao:</span><br><span class="line">    container_name: zentao</span><br><span class="line">    image: easysoft/zentao:latest</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8010:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./pms:/www/zentaopms</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &quot;root&quot;</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure>

<p>运行命令 <strong>docker-compose up -d</strong> 即可部署成功，然后登录系统（http:&#x2F;&#x2F;[ip]:8010）,进行系统的配置。</p>
<h2 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h2><p>登录系统后，显示如下界面：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230331201206709.png" alt="首页"></p>
<h3 id="3-1、基础流程"><a href="#3-1、基础流程" class="headerlink" title="3.1、基础流程"></a>3.1、基础流程</h3><p>禅道使用的基础流程如下：</p>
<ol>
<li>产品经理创建产品</li>
<li>产品经理创建需求</li>
<li>项目经理创建项目</li>
<li>项目经理确定项目要做的需求</li>
<li>项目经理分解任务，指派到人</li>
<li>开发人员实现需求</li>
<li>测试人员测试，提交bug。</li>
</ol>
<p>我们一般在使用上需要关注的部分：</p>
<ol>
<li>左侧侧边栏，【地盘】、【产品】、【项目】</li>
<li>剩余工作总计，看以看到指定给自己的【任务】、【bug】、【研发需求】</li>
<li>项目统计，总体查看项目的情况</li>
</ol>
<p>新手第一次进入系统可以点击橙色的<strong>新手教程按钮</strong>,帮助你快速了解禅道的使用：</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230331094842386.png" alt="新手教程"></p>
<h3 id="3-2、提交bug"><a href="#3-2、提交bug" class="headerlink" title="3.2、提交bug"></a>3.2、提交bug</h3><p>在系统中，点击左侧侧边栏【项目】，找到项目，再点击顶部栏的【测试】，出现bug列表，可以点击【提bug】按钮来提交系统的bug。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230331201411513.png" alt="bug提交"></p>
<p>需要注意的是在提交bug页面中，需要注重重现步骤的填写，以减少沟通成本。重现步骤中的【步骤】，即测试人员在系统中一步一步的操作，必要时应辅以相应的图片&#x2F;录屏&#x2F;文字说明等；【结果】，即通过通过操作产生的结果（bug）；【期望】，即在系统中的操作得到的不是测试人员想要的结果（bug），则测试人员需要表示自己的操作应该产生什么样的结果。</p>
<p><img src="https://gis-visualization.oss-cn-beijing.aliyuncs.com/typoraImg/image-20230331201453647.png" alt="bug描述"></p>
<p>bug提交可以指派给对应的开发人员解决，双方也可以在禅道上对bug进行沟通、处理。 </p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>项目管理系统</tag>
      </tags>
  </entry>
</search>
